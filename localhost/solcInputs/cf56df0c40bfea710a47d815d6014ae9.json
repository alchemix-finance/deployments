{
  "language": "Solidity",
  "sources": {
    "contracts/adapters/yearn/YearnTokenAdapter.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport {IllegalState} from \"../../base/Errors.sol\";\n\nimport \"../../interfaces/ITokenAdapter.sol\";\nimport \"../../interfaces/external/yearn/IYearnVaultV2.sol\";\n\nimport \"../../libraries/TokenUtils.sol\";\n\n/// @title  YearnTokenAdapter\n/// @author Alchemix Finance\ncontract YearnTokenAdapter is ITokenAdapter {\n    uint256 private constant MAXIMUM_SLIPPAGE = 10000;\n    string public constant override version = \"2.1.0\";\n\n    address public immutable override token;\n    address public immutable override underlyingToken;\n\n    constructor(address _token, address _underlyingToken) {\n        token = _token;\n        underlyingToken = _underlyingToken;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view override returns (uint256) {\n        return IYearnVaultV2(token).pricePerShare();\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        TokenUtils.safeApprove(underlyingToken, token, amount);\n\n        return IYearnVaultV2(token).deposit(amount, recipient);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        uint256 balanceBefore = TokenUtils.safeBalanceOf(token, address(this));\n\n        uint256 amountWithdrawn = IYearnVaultV2(token).withdraw(amount, recipient, MAXIMUM_SLIPPAGE);\n\n        uint256 balanceAfter = TokenUtils.safeBalanceOf(token, address(this));\n\n        // If the Yearn vault did not burn all of the shares then revert. This is critical in mathematical operations\n        // performed by the system because the system always expects that all of the tokens were unwrapped. In Yearn,\n        // this sometimes does not happen in cases where strategies cannot withdraw all of the requested tokens (an\n        // example strategy where this can occur is with Compound and AAVE where funds may not be accessible because\n        // they were lent out).\n        if (balanceBefore - balanceAfter != amount) {\n            revert IllegalState();\n        }\n\n        return amountWithdrawn;\n    }\n}"
    },
    "contracts/base/Errors.sol": {
      "content": "pragma solidity ^0.8.11;\n\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\n///         `msg.origin` is not authorized.\nerror Unauthorized();\n\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\n///         or entered an illegal condition which is not recoverable from.\nerror IllegalState();\n\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\n///         to the function.\nerror IllegalArgument();"
    },
    "contracts/interfaces/ITokenAdapter.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  ITokenAdapter\n/// @author Alchemix Finance\ninterface ITokenAdapter {\n    /// @notice Gets the current version.\n    ///\n    /// @return The version.\n    function version() external view returns (string memory);\n\n    /// @notice Gets the address of the yield token that this adapter supports.\n    ///\n    /// @return The address of the yield token.\n    function token() external view returns (address);\n\n    /// @notice Gets the address of the underlying token that the yield token wraps.\n    ///\n    /// @return The address of the underlying token.\n    function underlyingToken() external view returns (address);\n\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable for.\n    ///\n    /// @return The price.\n    function price() external view returns (uint256);\n\n    /// @notice Wraps `amount` underlying tokens into the yield token.\n    ///\n    /// @param amount           The amount of the underlying token to wrap.\n    /// @param recipient        The address which will receive the yield tokens.\n    ///\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\n    function wrap(uint256 amount, address recipient)\n        external\n        returns (uint256 amountYieldTokens);\n\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\n    ///\n    /// @param amount           The amount of yield-tokens to redeem.\n    /// @param recipient        The recipient of the resulting underlying-tokens.\n    ///\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\n    function unwrap(uint256 amount, address recipient)\n        external\n        returns (uint256 amountUnderlyingTokens);\n}"
    },
    "contracts/interfaces/external/yearn/IYearnVaultV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"../../IERC20Minimal.sol\";\nimport \"../../IERC20Metadata.sol\";\n\n/// @title  IYearnVaultV2\n/// @author Yearn Finance\ninterface IYearnVaultV2 is IERC20Minimal, IERC20Metadata {\n  struct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n    bool enforceChangeLimit;\n    uint256 profitLimitRatio;\n    uint256 lossLimitRatio;\n    address customCheck;\n  }\n\n  function apiVersion() external pure returns (string memory);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata signature\n  ) external returns (bool);\n\n  // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n  function deposit() external returns (uint256);\n\n  function deposit(uint256 amount) external returns (uint256);\n\n  function deposit(uint256 amount, address recipient) external returns (uint256);\n\n  // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n  function withdraw() external returns (uint256);\n\n  function withdraw(uint256 maxShares) external returns (uint256);\n\n  function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n  function withdraw(\n    uint256 maxShares,\n    address recipient,\n    uint256 maxLoss\n  ) external returns (uint256);\n\n  function token() external view returns (address);\n\n  function strategies(address _strategy) external view returns (StrategyParams memory);\n\n  function pricePerShare() external view returns (uint256);\n\n  function totalAssets() external view returns (uint256);\n\n  function depositLimit() external view returns (uint256);\n\n  function maxAvailableShares() external view returns (uint256);\n\n  /// @notice View how much the Vault would increase this Strategy's borrow limit, based on its present performance\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\n  function creditAvailable() external view returns (uint256);\n\n  /// @notice View how much the Vault would like to pull back from the Strategy, based on its present performance\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\n  function debtOutstanding() external view returns (uint256);\n\n  /// @notice View how much the Vault expect this Strategy to return at the current block, based on its present\n  ///         performance (since its last report). Can be used to determine expectedReturn in your Strategy.\n  function expectedReturn() external view returns (uint256);\n\n  /// @notice This is the main contact point where the Strategy interacts with the Vault. It is critical that this call\n  ///         is handled as intended by the Strategy. Therefore, this function will be called by BaseStrategy to make\n  ///         sure the integration is correct.\n  function report(\n    uint256 _gain,\n    uint256 _loss,\n    uint256 _debtPayment\n  ) external returns (uint256);\n\n  /// @notice This function should only be used in the scenario where the Strategy is being retired but no migration of\n  ///         the positions are possible, or in the extreme scenario that the Strategy needs to be put into\n  ///         \"Emergency Exit\" mode in order for it to exit as quickly as possible. The latter scenario could be for any\n  ///         reason that is considered \"critical\" that the Strategy exits its position as fast as possible, such as a\n  ///         sudden change in market conditions leading to losses, or an imminent failure in an external dependency.\n  function revokeStrategy() external;\n\n  /// @notice View the governance address of the Vault to assert privileged functions can only be called by governance.\n  ///         The Strategy serves the Vault, so it is subject to governance defined by the Vault.\n  function governance() external view returns (address);\n\n  /// @notice View the management address of the Vault to assert privileged functions can only be called by management.\n  ///         The Strategy serves the Vault, so it is subject to management defined by the Vault.\n  function management() external view returns (address);\n\n  /// @notice View the guardian address of the Vault to assert privileged functions can only be called by guardian. The\n  ///         Strategy serves the Vault, so it is subject to guardian defined by the Vault.\n  function guardian() external view returns (address);\n}\n"
    },
    "contracts/libraries/TokenUtils.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../interfaces/IERC20Burnable.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../interfaces/IERC20Minimal.sol\";\nimport \"../interfaces/IERC20Mintable.sol\";\n\n/// @title  TokenUtils\n/// @author Alchemix Finance\nlibrary TokenUtils {\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\n    ///\n    /// @param target  The target address.\n    /// @param success If the call to the token was a success.\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\n    ///                this is malformed data when the call was a success.\n    error ERC20CallFailed(address target, bool success, bytes data);\n\n    /// @dev A safe function to get the decimals of an ERC20 token.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\n    ///\n    /// @param token The target token.\n    ///\n    /// @return The amount of decimals of the token.\n    function expectDecimals(address token) internal view returns (uint8) {\n        (bool success, bytes memory data) = token.staticcall(\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\n        );\n\n        if (!success || data.length < 32) {\n            revert ERC20CallFailed(token, success, data);\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Gets the balance of tokens held by an account.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\n    ///\n    /// @param token   The token to check the balance of.\n    /// @param account The address of the token holder.\n    ///\n    /// @return The balance of the tokens held by an account.\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\n        (bool success, bytes memory data) = token.staticcall(\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, account)\n        );\n\n        if (!success || data.length < 32) {\n            revert ERC20CallFailed(token, success, data);\n        }\n\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev Transfers tokens to another address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\n    ///\n    /// @param token     The token to transfer.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to transfer.\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Approves tokens for the smart contract.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\n    ///\n    /// @param token   The token to approve.\n    /// @param spender The contract to spend the tokens.\n    /// @param value   The amount of tokens to approve.\n    function safeApprove(address token, address spender, uint256 value) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Minimal.approve.selector, spender, value)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Transfer tokens from one address to another address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\n    ///\n    /// @param token     The token to transfer.\n    /// @param owner     The address of the owner.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to transfer.\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Minimal.transferFrom.selector, owner, recipient, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Mints tokens to an address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\n    ///\n    /// @param token     The token to mint.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to mint.\n    function safeMint(address token, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Burns tokens.\n    ///\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\n    ///\n    /// @param token  The token to burn.\n    /// @param amount The amount of tokens to burn.\n    function safeBurn(address token, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Burns tokens from its total supply.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\n    ///\n    /// @param token  The token to burn.\n    /// @param owner  The owner of the tokens.\n    /// @param amount The amount of tokens to burn.\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n}"
    },
    "contracts/interfaces/IERC20Minimal.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IERC20Minimal\n/// @author Alchemix Finance\ninterface IERC20Minimal {\n    /// @notice An event which is emitted when tokens are transferred between two parties.\n    ///\n    /// @param owner     The owner of the tokens from which the tokens were transferred.\n    /// @param recipient The recipient of the tokens to which the tokens were transferred.\n    /// @param amount    The amount of tokens which were transferred.\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\n\n    /// @notice An event which is emitted when an approval is made.\n    ///\n    /// @param owner   The address which made the approval.\n    /// @param spender The address which is allowed to transfer tokens on behalf of `owner`.\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @notice Gets the current total supply of tokens.\n    ///\n    /// @return The total supply.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Gets the balance of tokens that an account holds.\n    ///\n    /// @param account The account address.\n    ///\n    /// @return The balance of the account.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Gets the allowance that an owner has allotted for a spender.\n    ///\n    /// @param owner   The owner address.\n    /// @param spender The spender address.\n    ///\n    /// @return The number of tokens that `spender` is allowed to transfer on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\n    ///\n    /// @notice Emits a {Transfer} event.\n    ///\n    /// @param recipient The address which will receive the tokens.\n    /// @param amount    The amount of tokens to transfer.\n    ///\n    /// @return If the transfer was successful.\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Approves `spender` to transfer `amount` tokens on behalf of `msg.sender`.\n    ///\n    /// @notice Emits a {Approval} event.\n    ///\n    /// @param spender The address which is allowed to transfer tokens on behalf of `msg.sender`.\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\n    ///\n    /// @return If the approval was successful.\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `owner` to `recipient` using an approval that `owner` gave to `msg.sender`.\n    ///\n    /// @notice Emits a {Approval} event.\n    /// @notice Emits a {Transfer} event.\n    ///\n    /// @param owner     The address to transfer tokens from.\n    /// @param recipient The address that will receive the tokens.\n    /// @param amount    The amount of tokens to transfer.\n    ///\n    /// @return If the transfer was successful.\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IERC20Metadata\n/// @author Alchemix Finance\ninterface IERC20Metadata {\n    /// @notice Gets the name of the token.\n    ///\n    /// @return The name.\n    function name() external view returns (string memory);\n\n    /// @notice Gets the symbol of the token.\n    ///\n    /// @return The symbol.\n    function symbol() external view returns (string memory);\n\n    /// @notice Gets the number of decimals that the token has.\n    ///\n    /// @return The number of decimals.\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/interfaces/IERC20Burnable.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./IERC20Minimal.sol\";\n\n/// @title  IERC20Burnable\n/// @author Alchemix Finance\ninterface IERC20Burnable is IERC20Minimal {\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\n    ///\n    /// @param amount The amount of tokens to burn.\n    ///\n    /// @return If burning the tokens was successful.\n    function burn(uint256 amount) external returns (bool);\n\n    /// @notice Burns `amount` tokens from `owner`'s balance.\n    ///\n    /// @param owner  The address to burn tokens from.\n    /// @param amount The amount of tokens to burn.\n    ///\n    /// @return If burning the tokens was successful.\n    function burnFrom(address owner, uint256 amount) external returns (bool);\n}"
    },
    "contracts/interfaces/IERC20Mintable.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./IERC20Minimal.sol\";\n\n/// @title  IERC20Mintable\n/// @author Alchemix Finance\ninterface IERC20Mintable is IERC20Minimal {\n    /// @notice Mints `amount` tokens to `recipient`.\n    ///\n    /// @param recipient The address which will receive the minted tokens.\n    /// @param amount    The amount of tokens to mint.\n    ///\n    /// @return If minting the tokens was successful.\n    function mint(address recipient, uint256 amount) external returns (bool);\n}"
    },
    "contracts/TransmuterV2.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"./base/Errors.sol\";\n\nimport \"./interfaces/IWhitelist.sol\";\n\nimport \"./interfaces/transmuter/ITransmuterV2.sol\";\nimport \"./interfaces/transmuter/ITransmuterBuffer.sol\";\n\nimport \"./libraries/FixedPointMath.sol\";\nimport \"./libraries/LiquidityMath.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/Tick.sol\";\nimport \"./libraries/TokenUtils.sol\";\n\n/// @title TransmuterV2\n///\n/// @notice A contract which facilitates the exchange of synthetic assets for their underlying\n//          asset. This contract guarantees that synthetic assets are exchanged exactly 1:1\n//          for the underlying asset.\ncontract TransmuterV2 is ITransmuterV2, Initializable, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\n  using FixedPointMath for FixedPointMath.Number;\n  using Tick for Tick.Cache;\n\n  struct Account {\n    // The total number of unexchanged tokens that an account has deposited into the system\n    uint256 unexchangedBalance;\n    // The total number of exchanged tokens that an account has had credited\n    uint256 exchangedBalance;\n    // The tick that the account has had their deposit associated in\n    uint256 occupiedTick;\n  }\n\n  struct UpdateAccountParams {\n    // The owner address whose account will be modified\n    address owner;\n    // The amount to change the account's unexchanged balance by\n    int256 unexchangedDelta;\n    // The amount to change the account's exchanged balance by\n    int256 exchangedDelta;\n  }\n\n  struct ExchangeCache {\n    // The total number of unexchanged tokens that exist at the start of the exchange call\n    uint256 totalUnexchanged;\n    // The tick which has been satisfied up to at the start of the exchange call\n    uint256 satisfiedTick;\n    // The head of the active ticks queue at the start of the exchange call\n    uint256 ticksHead;\n  }\n\n  struct ExchangeState {\n    // The position in the buffer of current tick which is being examined\n    uint256 examineTick;\n    // The total number of unexchanged tokens that currently exist in the system for the current distribution step\n    uint256 totalUnexchanged;\n    // The tick which has been satisfied up to, inclusive\n    uint256 satisfiedTick;\n    // The amount of tokens to distribute for the current step\n    uint256 distributeAmount;\n    // The accumulated weight to write at the new tick after the exchange is completed\n    FixedPointMath.Number accumulatedWeight;\n    // Reserved for the maximum weight of the current distribution step\n    FixedPointMath.Number maximumWeight;\n    // Reserved for the dusted weight of the current distribution step\n    FixedPointMath.Number dustedWeight;\n  }\n\n  struct UpdateAccountCache {\n    // The total number of unexchanged tokens that the account held at the start of the update call\n    uint256 unexchangedBalance;\n    // The total number of exchanged tokens that the account held at the start of the update call\n    uint256 exchangedBalance;\n    // The tick that the account's deposit occupies at the start of the update call\n    uint256 occupiedTick;\n    // The total number of unexchanged tokens that exist at the start of the update call\n    uint256 totalUnexchanged;\n    // The current tick that is being written to\n    uint256 currentTick;\n  }\n\n  struct UpdateAccountState {\n    // The updated unexchanged balance of the account being updated\n    uint256 unexchangedBalance;\n    // The updated exchanged balance of the account being updated\n    uint256 exchangedBalance;\n    // The updated total unexchanged balance\n    uint256 totalUnexchanged;\n  }\n\n  address public constant ZERO_ADDRESS = address(0);\n\n  /// @dev The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n\n  /// @dev The identitifer of the sentinel role\n  bytes32 public constant SENTINEL = keccak256(\"SENTINEL\");\n\n  /// @inheritdoc ITransmuterV2\n  string public constant override version = \"2.2.0\";\n\n  /// @dev the synthetic token to be transmuted\n  address public syntheticToken;\n\n  /// @dev the underlying token to be received\n  address public override underlyingToken;\n\n  /// @dev The total amount of unexchanged tokens which are held by all accounts.\n  uint256 public totalUnexchanged;\n\n  /// @dev The total amount of tokens which are in the auxiliary buffer.\n  uint256 public totalBuffered;\n\n  /// @dev A mapping specifying all of the accounts.\n  mapping(address => Account) private accounts;\n\n  // @dev The tick buffer which stores all of the tick information along with the tick that is\n  //      currently being written to. The \"current\" tick is the tick at the buffer write position.\n  Tick.Cache private ticks;\n\n  // The tick which has been satisfied up to, inclusive.\n  uint256 private satisfiedTick;\n\n  /// @dev contract pause state\n  bool public isPaused;\n\n  /// @dev the source of the exchanged collateral\n  address public buffer;\n\n  /// @dev The address of the external whitelist contract.\n  address public override whitelist;\n\n  /// @dev The amount of decimal places needed to normalize collateral to debtToken\n  uint256 public override conversionFactor;\n\n  constructor() initializer {}\n\n  function initialize(\n    address _syntheticToken,\n    address _underlyingToken,\n    address _buffer,\n    address _whitelist\n  ) external initializer {\n    _setupRole(ADMIN, msg.sender);\n    _setRoleAdmin(ADMIN, ADMIN);\n    _setRoleAdmin(SENTINEL, ADMIN);\n\n    syntheticToken = _syntheticToken;\n    underlyingToken = _underlyingToken;\n    uint8 debtTokenDecimals = TokenUtils.expectDecimals(syntheticToken);\n    uint8 underlyingTokenDecimals = TokenUtils.expectDecimals(underlyingToken);\n    conversionFactor = 10**(debtTokenDecimals - underlyingTokenDecimals);\n    buffer = _buffer;\n    // Push a blank tick to function as a sentinel value in the active ticks queue.\n    ticks.next();\n\n    isPaused = false;\n    whitelist = _whitelist;\n  }\n\n  /// @dev A modifier which checks if caller is an alchemist.\n  modifier onlyBuffer() {\n    if (msg.sender != buffer) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if caller is a sentinel or admin.\n  modifier onlySentinelOrAdmin() {\n    if (!hasRole(SENTINEL, msg.sender) && !hasRole(ADMIN, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if caller is a sentinel.\n  modifier notPaused() {\n    if (isPaused) {\n      revert IllegalState();\n    }\n    _;\n  }\n\n  function _onlyAdmin() internal view {\n    if (!hasRole(ADMIN, msg.sender)) {\n      revert Unauthorized();\n    }\n  }\n\n  function setCollateralSource(address _newCollateralSource) external {\n    _onlyAdmin();\n    buffer = _newCollateralSource;\n  }\n\n  function setPause(bool pauseState) external onlySentinelOrAdmin {\n    isPaused = pauseState;\n    emit Paused(isPaused);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function deposit(uint256 amount, address owner) external override nonReentrant {\n    _onlyWhitelisted();\n    _updateAccount(\n      UpdateAccountParams({\n        owner: owner,\n        unexchangedDelta: SafeCast.toInt256(amount),\n        exchangedDelta: 0\n      })\n    );\n    TokenUtils.safeTransferFrom(syntheticToken, msg.sender, address(this), amount);\n    emit Deposit(msg.sender, owner, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function withdraw(uint256 amount, address recipient) external override nonReentrant {\n    _onlyWhitelisted();\n    _updateAccount(\n      UpdateAccountParams({ \n        owner: msg.sender,\n        unexchangedDelta: -SafeCast.toInt256(amount),\n        exchangedDelta: 0\n      })\n    );\n    TokenUtils.safeTransfer(syntheticToken, recipient, amount);\n    emit Withdraw(msg.sender, recipient, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function claim(uint256 amount, address recipient) external override nonReentrant {\n    _onlyWhitelisted();\n    _updateAccount(\n      UpdateAccountParams({\n        owner: msg.sender,\n        unexchangedDelta: 0,\n        exchangedDelta: -SafeCast.toInt256(_normalizeUnderlyingTokensToDebt(amount))\n      })\n    );\n    TokenUtils.safeBurn(syntheticToken, _normalizeUnderlyingTokensToDebt(amount));\n    ITransmuterBuffer(buffer).withdraw(underlyingToken, amount, msg.sender);\n    emit Claim(msg.sender, recipient, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function exchange(uint256 amount) external override nonReentrant onlyBuffer notPaused {\n    uint256 normaizedAmount = _normalizeUnderlyingTokensToDebt(amount);\n\n    if (totalUnexchanged == 0) {\n      totalBuffered += normaizedAmount;\n      emit Exchange(msg.sender, amount);\n      return;\n    }\n\n    // Push a storage reference to the current tick.\n    Tick.Info storage current = ticks.current();\n\n    ExchangeCache memory cache = ExchangeCache({\n      totalUnexchanged: totalUnexchanged,\n      satisfiedTick: satisfiedTick,\n      ticksHead: ticks.head\n    });\n\n    ExchangeState memory state = ExchangeState({\n      examineTick: cache.ticksHead,\n      totalUnexchanged: cache.totalUnexchanged,\n      satisfiedTick: cache.satisfiedTick,\n      distributeAmount: normaizedAmount,\n      accumulatedWeight: current.accumulatedWeight,\n      maximumWeight: FixedPointMath.encode(0),\n      dustedWeight: FixedPointMath.encode(0)\n    });\n\n    // Distribute the buffered tokens as part of the exchange.\n    state.distributeAmount += totalBuffered;\n    totalBuffered = 0;\n\n    // Push a storage reference to the next tick to write to.\n    Tick.Info storage next = ticks.next();\n\n    // Only iterate through the active ticks queue when it is not empty.\n    while (state.examineTick != 0) {\n      // Check if there is anything left to distribute.\n      if (state.distributeAmount == 0) {\n        break;\n      }\n\n      Tick.Info storage examineTickData = ticks.get(state.examineTick);\n\n      // Add the weight for the distribution step to the accumulated weight.\n      state.accumulatedWeight = state.accumulatedWeight.add(\n        FixedPointMath.rational(state.distributeAmount, state.totalUnexchanged)\n      );\n\n      // Clear the distribute amount.\n      state.distributeAmount = 0;\n\n      // Calculate the current maximum weight in the system.\n      state.maximumWeight = state.accumulatedWeight.sub(examineTickData.accumulatedWeight);\n\n      // Check if there exists at least one account which is completely satisfied..\n      if (state.maximumWeight.n < FixedPointMath.ONE) {\n        break;\n      }\n\n      // Calculate how much weight of the distributed weight is dust.\n      state.dustedWeight = FixedPointMath.Number(state.maximumWeight.n - FixedPointMath.ONE);\n\n      // Calculate how many tokens to distribute in the next step. These are tokens from any tokens which\n      // were over allocated to accounts occupying the tick with the maximum weight.\n      state.distributeAmount = LiquidityMath.calculateProduct(examineTickData.totalBalance, state.dustedWeight);\n\n      // Remove the tokens which were completely exchanged from the total unexchanged balance.\n      state.totalUnexchanged -= examineTickData.totalBalance;\n\n      // Write that all ticks up to and including the examined tick have been satisfied.\n      state.satisfiedTick = state.examineTick;\n\n      // Visit the next active tick. This is equivalent to popping the head of the active ticks queue.\n      state.examineTick = examineTickData.next;\n    }\n\n    // Write the accumulated weight to the next tick.\n    next.accumulatedWeight = state.accumulatedWeight;\n\n    if (cache.totalUnexchanged != state.totalUnexchanged) {\n      totalUnexchanged = state.totalUnexchanged;\n    }\n\n    if (cache.satisfiedTick != state.satisfiedTick) {\n      satisfiedTick = state.satisfiedTick;\n    }\n\n    if (cache.ticksHead != state.examineTick) {\n      ticks.head = state.examineTick;\n    }\n\n    if (state.distributeAmount > 0) {\n      totalBuffered += state.distributeAmount;\n    }\n\n    emit Exchange(msg.sender, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function getUnexchangedBalance(address owner) external view override returns (uint256 unexchangedBalance) {\n    Account storage account = accounts[owner];\n\n    if (account.occupiedTick <= satisfiedTick) {\n      return 0;\n    }\n\n    unexchangedBalance = account.unexchangedBalance;\n\n    uint256 exchanged = LiquidityMath.calculateProduct(\n      unexchangedBalance,\n      ticks.getWeight(account.occupiedTick, ticks.position)\n    );\n\n    unexchangedBalance -= exchanged;\n\n    return unexchangedBalance;\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function getExchangedBalance(address owner) external view override returns (uint256 exchangedBalance) {\n    return _getExchangedBalance(owner);\n  }\n\n  function getClaimableBalance(address owner) external view override returns (uint256 claimableBalance) {\n    return _normalizeDebtTokensToUnderlying(_getExchangedBalance(owner));\n  }\n\n  /// @dev Updates an account.\n  ///\n  /// @param params The call parameters.\n  function _updateAccount(UpdateAccountParams memory params) internal {\n    Account storage account = accounts[params.owner];\n\n    UpdateAccountCache memory cache = UpdateAccountCache({\n      unexchangedBalance: account.unexchangedBalance,\n      exchangedBalance: account.exchangedBalance,\n      occupiedTick: account.occupiedTick,\n      totalUnexchanged: totalUnexchanged,\n      currentTick: ticks.position\n    });\n\n    UpdateAccountState memory state = UpdateAccountState({\n      unexchangedBalance: cache.unexchangedBalance,\n      exchangedBalance: cache.exchangedBalance,\n      totalUnexchanged: cache.totalUnexchanged\n    });\n\n    // Updating an account is broken down into five steps:\n    // 1). Synchronize the account if it previously occupied a satisfied tick\n    // 2). Update the account balances to account for exchanged tokens, if any\n    // 3). Apply the deltas to the account balances\n    // 4). Update the previously occupied and or current tick's liquidity\n    // 5). Commit changes to the account and global state when needed\n\n    // Step one:\n    // ---------\n    // Check if the tick that the account was occupying previously was satisfied. If it was, we acknowledge\n    // that all of the tokens were exchanged.\n    if (state.unexchangedBalance > 0 && satisfiedTick >= cache.occupiedTick) {\n      state.unexchangedBalance = 0;\n      state.exchangedBalance += cache.unexchangedBalance;\n    }\n\n    // Step Two:\n    // ---------\n    // Calculate how many tokens were exchanged since the last update.\n    if (state.unexchangedBalance > 0) {\n      uint256 exchanged = LiquidityMath.calculateProduct(\n        state.unexchangedBalance,\n        ticks.getWeight(cache.occupiedTick, cache.currentTick)\n      );\n\n      state.totalUnexchanged -= exchanged;\n      state.unexchangedBalance -= exchanged;\n      state.exchangedBalance += exchanged;\n    }\n\n    // Step Three:\n    // -----------\n    // Apply the unexchanged and exchanged deltas to the state.\n    state.totalUnexchanged = LiquidityMath.addDelta(state.totalUnexchanged, params.unexchangedDelta);\n    state.unexchangedBalance = LiquidityMath.addDelta(state.unexchangedBalance, params.unexchangedDelta);\n    state.exchangedBalance = LiquidityMath.addDelta(state.exchangedBalance, params.exchangedDelta);\n\n    // Step Four:\n    // ----------\n    // The following is a truth table relating various values which in combinations specify which logic branches\n    // need to be executed in order to update liquidity in the previously occupied and or current tick.\n    //\n    // Some states are not obtainable and are just discarded by setting all the branches to false.\n    //\n    // | P | C | M | Modify Liquidity | Add Liquidity | Subtract Liquidity |\n    // |---|---|---|------------------|---------------|--------------------|\n    // | F | F | F | F                | F             | F                  |\n    // | F | F | T | F                | F             | F                  |\n    // | F | T | F | F                | T             | F                  |\n    // | F | T | T | F                | T             | F                  |\n    // | T | F | F | F                | F             | T                  |\n    // | T | F | T | F                | F             | T                  |\n    // | T | T | F | T                | F             | F                  |\n    // | T | T | T | F                | T             | T                  |\n    //\n    // | Branch             | Reduction |\n    // |--------------------|-----------|\n    // | Modify Liquidity   | PCM'      |\n    // | Add Liquidity      | P'C + CM  |\n    // | Subtract Liquidity | PC' + PM  |\n\n    bool previouslyActive = cache.unexchangedBalance > 0;\n    bool currentlyActive = state.unexchangedBalance > 0;\n    bool migrate = cache.occupiedTick != cache.currentTick;\n\n    bool modifyLiquidity = previouslyActive && currentlyActive && !migrate;\n\n    if (modifyLiquidity) {\n      Tick.Info storage tick = ticks.get(cache.occupiedTick);\n\n      // Consolidate writes to save gas.\n      uint256 totalBalance = tick.totalBalance;\n      totalBalance -= cache.unexchangedBalance;\n      totalBalance += state.unexchangedBalance;\n      tick.totalBalance = totalBalance;\n    } else {\n      bool addLiquidity = (!previouslyActive && currentlyActive) || (currentlyActive && migrate);\n      bool subLiquidity = (previouslyActive && !currentlyActive) || (previouslyActive && migrate);\n\n      if (addLiquidity) {\n        Tick.Info storage tick = ticks.get(cache.currentTick);\n\n        if (tick.totalBalance == 0) {\n          ticks.addLast(cache.currentTick);\n        }\n\n        tick.totalBalance += state.unexchangedBalance;\n      }\n\n      if (subLiquidity) {\n        Tick.Info storage tick = ticks.get(cache.occupiedTick);\n        tick.totalBalance -= cache.unexchangedBalance;\n\n        if (tick.totalBalance == 0) {\n          ticks.remove(cache.occupiedTick);\n        }\n      }\n    }\n\n    // Step Five:\n    // ----------\n    // Commit the changes to the account.\n    if (cache.unexchangedBalance != state.unexchangedBalance) {\n      account.unexchangedBalance = state.unexchangedBalance;\n    }\n\n    if (cache.exchangedBalance != state.exchangedBalance) {\n      account.exchangedBalance = state.exchangedBalance;\n    }\n\n    if (cache.totalUnexchanged != state.totalUnexchanged) {\n      totalUnexchanged = state.totalUnexchanged;\n    }\n\n    if (cache.occupiedTick != cache.currentTick) {\n      account.occupiedTick = cache.currentTick;\n    }\n  }\n\n  /// @dev Checks the whitelist for msg.sender.\n  ///\n  /// @notice Reverts if msg.sender is not in the whitelist.\n  function _onlyWhitelisted() internal view {\n    // Check if the message sender is an EOA. In the future, this potentially may break. It is important that\n    // functions which rely on the whitelist not be explicitly vulnerable in the situation where this no longer\n    // holds true.\n    if (tx.origin != msg.sender) {\n      // Only check the whitelist for calls from contracts.\n      if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n        revert Unauthorized();\n      }\n    }\n  }\n\n  /// @dev Normalize `amount` of `underlyingToken` to a value which is comparable to units of the debt token.\n  ///\n  /// @param amount          The amount of the debt token.\n  ///\n  /// @return The normalized amount.\n  function _normalizeUnderlyingTokensToDebt(uint256 amount) internal view returns (uint256) {\n    return amount * conversionFactor;\n  }\n\n  /// @dev Normalize `amount` of the debt token to a value which is comparable to units of `underlyingToken`.\n  ///\n  /// @dev This operation will result in truncation of some of the least significant digits of `amount`. This\n  ///      truncation amount will be the least significant N digits where N is the difference in decimals between\n  ///      the debt token and the underlying token.\n  ///\n  /// @param amount          The amount of the debt token.\n  ///\n  /// @return The normalized amount.\n  function _normalizeDebtTokensToUnderlying(uint256 amount) internal view returns (uint256) {\n    return amount / conversionFactor;\n  }\n\n  function _getExchangedBalance(address owner) internal view returns (uint256 exchangedBalance) {\n    Account storage account = accounts[owner];\n\n    if (account.occupiedTick <= satisfiedTick) {\n      exchangedBalance = account.exchangedBalance;\n      exchangedBalance += account.unexchangedBalance;\n      return exchangedBalance;\n    }\n\n    exchangedBalance = account.exchangedBalance;\n\n    uint256 exchanged = LiquidityMath.calculateProduct(\n      account.unexchangedBalance,\n      ticks.getWeight(account.occupiedTick, ticks.position)\n    );\n\n    exchangedBalance += exchanged;\n\n    return exchangedBalance;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IWhitelist.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../base/Errors.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/Sets.sol\";\n\n/// @title  Whitelist\n/// @author Alchemix Finance\ninterface IWhitelist {\n  /// @dev Emitted when a contract is added to the whitelist.\n  ///\n  /// @param account The account that was added to the whitelist.\n  event AccountAdded(address account);\n\n  /// @dev Emitted when a contract is removed from the whitelist.\n  ///\n  /// @param account The account that was removed from the whitelist.\n  event AccountRemoved(address account);\n\n  /// @dev Emitted when the whitelist is deactivated.\n  event WhitelistDisabled();\n\n  /// @dev Returns the list of addresses that are whitelisted for the given contract address.\n  ///\n  /// @return addresses The addresses that are whitelisted to interact with the given contract.\n  function getAddresses() external view returns (address[] memory addresses);\n\n  /// @dev Returns the disabled status of a given whitelist.\n  ///\n  /// @return disabled A flag denoting if the given whitelist is disabled.\n  function disabled() external view returns (bool);\n\n  /// @dev Adds an contract to the whitelist.\n  ///\n  /// @param caller The address to add to the whitelist.\n  function add(address caller) external;\n\n  /// @dev Adds a contract to the whitelist.\n  ///\n  /// @param caller The address to remove from the whitelist.\n  function remove(address caller) external;\n\n  /// @dev Disables the whitelist of the target whitelisted contract.\n  ///\n  /// This can only occur once. Once the whitelist is disabled, then it cannot be reenabled.\n  function disable() external;\n\n  /// @dev Checks that the `msg.sender` is whitelisted when it is not an EOA.\n  ///\n  /// @param account The account to check.\n  ///\n  /// @return whitelisted A flag denoting if the given account is whitelisted.\n  function isWhitelisted(address account) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/transmuter/ITransmuterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\n/// @title ITransmuterV2\n/// @author Alchemix Finance\ninterface ITransmuterV2 {\n  /// @notice Emitted when the admin address is updated.\n  ///\n  /// @param admin The new admin address.\n  event AdminUpdated(address admin);\n\n  /// @notice Emitted when the pending admin address is updated.\n  ///\n  /// @param pendingAdmin The new pending admin address.\n  event PendingAdminUpdated(address pendingAdmin);\n\n  /// @notice Emitted when the system is paused or unpaused.\n  ///\n  /// @param flag `true` if the system has been paused, `false` otherwise.\n  event Paused(bool flag);\n\n  /// @dev Emitted when a deposit is performed.\n  ///\n  /// @param sender The address of the depositor.\n  /// @param owner  The address of the account that received the deposit.\n  /// @param amount The amount of tokens deposited.\n  event Deposit(\n    address indexed sender,\n    address indexed owner,\n    uint256 amount\n  );\n\n  /// @dev Emitted when a withdraw is performed.\n  ///\n  /// @param sender    The address of the `msg.sender` executing the withdraw.\n  /// @param recipient The address of the account that received the withdrawn tokens.\n  /// @param amount    The amount of tokens withdrawn.\n  event Withdraw(\n    address indexed sender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @dev Emitted when a claim is performed.\n  ///\n  /// @param sender    The address of the claimer / account owner.\n  /// @param recipient The address of the account that received the claimed tokens.\n  /// @param amount    The amount of tokens claimed.\n  event Claim(\n    address indexed sender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @dev Emitted when an exchange is performed.\n  ///\n  /// @param sender The address that called `exchange()`.\n  /// @param amount The amount of tokens exchanged.\n  event Exchange(\n    address indexed sender,\n    uint256 amount\n  );\n\n  /// @notice Gets the version.\n  ///\n  /// @return The version.\n  function version() external view returns (string memory);\n\n  /// @dev Gets the supported underlying token.\n  ///\n  /// @return The underlying token.\n  function underlyingToken() external view returns (address);\n\n  /// @notice Gets the address of the whitelist contract.\n  ///\n  /// @return whitelist The address of the whitelist contract.\n  function whitelist() external view returns (address whitelist);\n\n  /// @dev Gets the unexchanged balance of an account.\n  ///\n  /// @param owner The address of the account owner.\n  ///\n  /// @return The unexchanged balance.\n  function getUnexchangedBalance(address owner) external view returns (uint256);\n\n  /// @dev Gets the exchanged balance of an account, in units of `debtToken`.\n  ///\n  /// @param owner The address of the account owner.\n  ///\n  /// @return The exchanged balance.\n  function getExchangedBalance(address owner) external view returns (uint256);\n\n  /// @dev Gets the claimable balance of an account, in units of `underlyingToken`.\n  ///\n  /// @param owner The address of the account owner.\n  ///\n  /// @return The claimable balance.\n  function getClaimableBalance(address owner) external view returns (uint256);\n\n  /// @dev The conversion factor used to convert between underlying token amounts and debt token amounts.\n  ///\n  /// @return The coversion factor.\n  function conversionFactor() external view returns (uint256);\n\n  /// @dev Deposits tokens to be exchanged into an account.\n  ///\n  /// @param amount The amount of tokens to deposit.\n  /// @param owner  The owner of the account to deposit the tokens into.\n  function deposit(uint256 amount, address owner) external;\n\n  /// @dev Withdraws tokens from the caller's account that were previously deposited to be exchanged.\n  ///\n  /// @param amount    The amount of tokens to withdraw.\n  /// @param recipient The address which will receive the withdrawn tokens.\n  function withdraw(uint256 amount, address recipient) external;\n\n  /// @dev Claims exchanged tokens.\n  ///\n  /// @param amount    The amount of tokens to claim.\n  /// @param recipient The address which will receive the claimed tokens.\n  function claim(uint256 amount, address recipient) external;\n\n  /// @dev Exchanges `amount` underlying tokens for `amount` synthetic tokens staked in the system.\n  ///\n  /// @param amount The amount of tokens to exchange.\n  function exchange(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/transmuter/ITransmuterBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\nimport \"./ITransmuterV2.sol\";\nimport \"../IAlchemistV2.sol\";\nimport \"../IERC20TokenReceiver.sol\";\n\n/// @title  ITransmuterBuffer\n/// @author Alchemix Finance\ninterface ITransmuterBuffer is IERC20TokenReceiver {\n  /// @notice Parameters used to define a given weighting schema.\n  ///\n  /// Weighting schemas can be used to generally weight assets in relation to an action or actions that will be taken.\n  /// In the TransmuterBuffer, there are 2 actions that require weighting schemas: `burnCredit` and `depositFunds`.\n  ///\n  /// `burnCredit` uses a weighting schema that determines which yield-tokens are targeted when burning credit from\n  /// the `Account` controlled by the TransmuterBuffer, via the `Alchemist.donate` function.\n  ///\n  /// `depositFunds` uses a weighting schema that determines which yield-tokens are targeted when depositing\n  /// underlying-tokens into the Alchemist.\n  struct Weighting {\n    // The weights of the tokens used by the schema.\n    mapping(address => uint256) weights;\n    // The tokens used by the schema.\n    address[] tokens;\n    // The total weight of the schema (sum of the token weights).\n    uint256 totalWeight;\n  }\n\n  /// @notice Emitted when the alchemist is set.\n  ///\n  /// @param alchemist The address of the alchemist.\n  event SetAlchemist(address alchemist);\n\n  /// @notice Emitted when an underlying token is registered.\n  ///\n  /// @param underlyingToken The address of the underlying token.\n  /// @param transmuter      The address of the transmuter for the underlying token.\n  event RegisterAsset(address underlyingToken, address transmuter);\n\n  /// @notice Emitted when an underlying token's flow rate is updated.\n  ///\n  /// @param underlyingToken The underlying token.\n  /// @param flowRate        The flow rate for the underlying token.\n  event SetFlowRate(address underlyingToken, uint256 flowRate);\n\n  /// @notice Emitted when the strategies are refreshed.\n  event RefreshStrategies();\n\n  /// @notice Emitted when a source is set.\n  event SetSource(address source, bool flag);\n\n  /// @notice Emitted when a transmuter is updated.\n  event SetTransmuter(address underlyingToken, address transmuter);\n\n  /// @notice Gets the current version.\n  ///\n  /// @return The version.\n  function version() external view returns (string memory);\n\n  /// @notice Gets the total credit held by the TransmuterBuffer.\n  ///\n  /// @return The total credit.\n  function getTotalCredit() external view returns (uint256);\n\n  /// @notice Gets the total amount of underlying token that the TransmuterBuffer controls in the Alchemist.\n  ///\n  /// @param underlyingToken The underlying token to query.\n  ///\n  /// @return totalBuffered The total buffered.\n  function getTotalUnderlyingBuffered(address underlyingToken) external view returns (uint256 totalBuffered);\n\n  /// @notice Gets the total available flow for the underlying token\n  ///\n  /// The total available flow will be the lesser of `flowAvailable[token]` and `getTotalUnderlyingBuffered`.\n  ///\n  /// @param underlyingToken The underlying token to query.\n  ///\n  /// @return availableFlow The available flow.\n  function getAvailableFlow(address underlyingToken) external view returns (uint256 availableFlow);\n\n  /// @notice Gets the weight of the given weight type and token\n  ///\n  /// @param weightToken The type of weight to query.\n  /// @param token       The weighted token.\n  ///\n  /// @return weight The weight of the token for the given weight type.\n  function getWeight(address weightToken, address token) external view returns (uint256 weight);\n\n  /// @notice Set a source of funds.\n  ///\n  /// @param source The target source.\n  /// @param flag   The status to set for the target source.\n  function setSource(address source, bool flag) external;\n\n  /// @notice Set transmuter by admin.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param underlyingToken The target underlying token to update.\n  /// @param newTransmuter   The new transmuter for the target `underlyingToken`.\n  function setTransmuter(address underlyingToken, address newTransmuter) external;\n\n  /// @notice Set alchemist by admin.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param alchemist The new alchemist whose funds we are handling.\n  function setAlchemist(address alchemist) external;\n\n  /// @notice Refresh the yield-tokens in the TransmuterBuffer.\n  ///\n  /// This requires a call anytime governance adds a new yield token to the alchemist.\n  function refreshStrategies() external;\n\n  /// @notice Registers an underlying-token.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param underlyingToken The underlying-token being registered.\n  /// @param transmuter      The transmuter for the underlying-token.\n  function registerAsset(address underlyingToken, address transmuter) external;\n\n  /// @notice Set flow rate of an underlying token.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param underlyingToken The underlying-token getting the flow rate set.\n  /// @param flowRate        The new flow rate.\n  function setFlowRate(address underlyingToken, uint256 flowRate) external;\n\n  /// @notice Sets up a weighting schema.\n  ///\n  /// @param weightToken The name of the weighting schema.\n  /// @param tokens      The yield-tokens to weight.\n  /// @param weights     The weights of the yield tokens.\n  function setWeights(address weightToken, address[] memory tokens, uint256[] memory weights) external;\n\n  /// @notice Exchanges any available flow into the Transmuter.\n  ///\n  /// This function is a way for the keeper to force funds to be exchanged into the Transmuter.\n  ///\n  /// This function will revert if called by any account that is not a keeper. If there is not enough local balance of\n  /// `underlyingToken` held by the TransmuterBuffer any additional funds will be withdrawn from the Alchemist by\n  /// unwrapping `yieldToken`.\n  ///\n  /// @param underlyingToken The address of the underlying token to exchange.\n  function exchange(address underlyingToken) external;\n\n  /// @notice Burns available credit in the alchemist.\n  function burnCredit() external;\n\n  /// @notice Deposits local collateral into the alchemist\n  ///\n  /// @param underlyingToken The collateral to deposit.\n  /// @param amount          The amount to deposit.\n  function depositFunds(address underlyingToken, uint256 amount) external;\n\n  /// @notice Withdraws collateral from the alchemist\n  ///\n  /// This function reverts if:\n  /// - The caller is not the transmuter.\n  /// - There is not enough flow available to fulfill the request.\n  /// - There is not enough underlying collateral in the alchemist controlled by the buffer to fulfil the request.\n  ///\n  /// @param underlyingToken The underlying token to withdraw.\n  /// @param amount          The amount to withdraw.\n  /// @param recipient       The account receiving the withdrawn funds.\n  function withdraw(\n    address underlyingToken,\n    uint256 amount,\n    address recipient\n  ) external;\n\n  /// @notice Withdraws collateral from the alchemist\n  ///\n  /// @param yieldToken       The yield token to withdraw.\n  /// @param shares           The amount of Alchemist shares to withdraw.\n  /// @param minimumAmountOut The minimum amount of underlying tokens needed to be recieved as a result of unwrapping the yield tokens.\n  function withdrawFromAlchemist(\n    address yieldToken,\n    uint256 shares,\n    uint256 minimumAmountOut\n  ) external;\n}\n"
    },
    "contracts/libraries/FixedPointMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\n/**\n * @notice A library which implements fixed point decimal math.\n */\nlibrary FixedPointMath {\n  /** @dev This will give approximately 60 bits of precision */\n  uint256 public constant DECIMALS = 18;\n  uint256 public constant ONE = 10**DECIMALS;\n\n  /**\n   * @notice A struct representing a fixed point decimal.\n   */\n  struct Number {\n    uint256 n;\n  }\n\n  /**\n   * @notice Encodes a unsigned 256-bit integer into a fixed point decimal.\n   *\n   * @param value The value to encode.\n   * @return      The fixed point decimal representation.\n   */\n  function encode(uint256 value) internal pure returns (Number memory) {\n    return Number(FixedPointMath.encodeRaw(value));\n  }\n\n  /**\n   * @notice Encodes a unsigned 256-bit integer into a uint256 representation of a\n   *         fixed point decimal.\n   *\n   * @param value The value to encode.\n   * @return      The fixed point decimal representation.\n   */\n  function encodeRaw(uint256 value) internal pure returns (uint256) {\n    return value * ONE;\n  }\n\n  /**\n   * @notice Encodes a uint256 MAX VALUE into a uint256 representation of a\n   *         fixed point decimal.\n   *\n   * @return      The uint256 MAX VALUE fixed point decimal representation.\n   */\n  function max() internal pure returns (Number memory) {\n    return Number(type(uint256).max);\n  }\n\n  /**\n   * @notice Creates a rational fraction as a Number from 2 uint256 values\n   *\n   * @param n The numerator.\n   * @param d The denominator.\n   * @return  The fixed point decimal representation.\n   */\n  function rational(uint256 n, uint256 d) internal pure returns (Number memory) {\n    Number memory numerator = encode(n);\n    return FixedPointMath.div(numerator, d);\n  }\n\n  /**\n   * @notice Adds two fixed point decimal numbers together.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand.\n   * @return      The result.\n   */\n  function add(Number memory self, Number memory value) internal pure returns (Number memory) {\n    return Number(self.n + value.n);\n  }\n\n  /**\n   * @notice Adds a fixed point number to a unsigned 256-bit integer.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand. This will be converted to a fixed point decimal.\n   * @return      The result.\n   */\n  function add(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return add(self, FixedPointMath.encode(value));\n  }\n\n  /**\n   * @notice Subtract a fixed point decimal from another.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand.\n   * @return      The result.\n   */\n  function sub(Number memory self, Number memory value) internal pure returns (Number memory) {\n    return Number(self.n - value.n);\n  }\n\n  /**\n   * @notice Subtract a unsigned 256-bit integer from a fixed point decimal.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand. This will be converted to a fixed point decimal.\n   * @return      The result.\n   */\n  function sub(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return sub(self, FixedPointMath.encode(value));\n  }\n\n  /**\n   * @notice Multiplies a fixed point decimal by another fixed point decimal.\n   *\n   * @param self  The fixed point decimal to multiply.\n   * @param number The fixed point decimal to multiply by.\n   * @return      The result.\n   */\n  function mul(Number memory self, Number memory number) internal pure returns (Number memory) {\n    return Number((self.n * number.n) / ONE);\n  }\n\n  /**\n   * @notice Multiplies a fixed point decimal by an unsigned 256-bit integer.\n   *\n   * @param self  The fixed point decimal to multiply.\n   * @param value The unsigned 256-bit integer to multiply by.\n   * @return      The result.\n   */\n  function mul(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return Number(self.n * value);\n  }\n\n  /**\n   * @notice Divides a fixed point decimal by an unsigned 256-bit integer.\n   *\n   * @param self  The fixed point decimal to multiply by.\n   * @param value The unsigned 256-bit integer to divide by.\n   * @return      The result.\n   */\n  function div(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return Number(self.n / value);\n  }\n\n  /**\n   * @notice Compares two fixed point decimals.\n   *\n   * @param self  The left hand number to compare.\n   * @param value The right hand number to compare.\n   * @return      When the left hand number is less than the right hand number this returns -1,\n   *              when the left hand number is greater than the right hand number this returns 1,\n   *              when they are equal this returns 0.\n   */\n  function cmp(Number memory self, Number memory value) internal pure returns (int256) {\n    if (self.n < value.n) {\n      return -1;\n    }\n\n    if (self.n > value.n) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @notice Gets if two fixed point numbers are equal.\n   *\n   * @param self  the first fixed point number.\n   * @param value the second fixed point number.\n   *\n   * @return if they are equal.\n   */\n  function equals(Number memory self, Number memory value) internal pure returns (bool) {\n    return self.n == value.n;\n  }\n\n  /**\n   * @notice Truncates a fixed point decimal into an unsigned 256-bit integer.\n   *\n   * @return The integer portion of the fixed point decimal.\n   */\n  function truncate(Number memory self) internal pure returns (uint256) {\n    return self.n / ONE;\n  }\n}\n"
    },
    "contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport { IllegalArgument } from \"../base/Errors.sol\";\n\nimport { FixedPointMath } from \"./FixedPointMath.sol\";\n\n/// @title  LiquidityMath\n/// @author Alchemix Finance\nlibrary LiquidityMath {\n  using FixedPointMath for FixedPointMath.Number;\n\n  /// @dev Adds a signed delta to an unsigned integer.\n  ///\n  /// @param  x The unsigned value to add the delta to.\n  /// @param  y The signed delta value to add.\n  /// @return z The result.\n  function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\n    if (y < 0) {\n      if ((z = x - uint256(-y)) >= x) {\n        revert IllegalArgument();\n      }\n    } else {\n      if ((z = x + uint256(y)) < x) {\n        revert IllegalArgument();\n      }\n    }\n  }\n\n  /// @dev Calculate a uint256 representation of x * y using FixedPointMath\n  ///\n  /// @param  x The first factor\n  /// @param  y The second factor (fixed point)\n  /// @return z The resulting product, after truncation\n  function calculateProduct(uint256 x, FixedPointMath.Number memory y) internal pure returns (uint256 z) {\n    z = y.mul(x).truncate();\n  }\n\n  /// @notice normalises non 18 digit token values to 18 digits.\n  function normalizeValue(uint256 input, uint256 decimals) internal pure returns (uint256) {\n    return (input * (10**18)) / (10**decimals);\n  }\n\n  /// @notice denormalizes 18 digits back to a token's digits\n  function deNormalizeValue(uint256 input, uint256 decimals) internal pure returns (uint256) {\n    return (input * (10**decimals)) / (10**18);\n  }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IllegalArgument} from \"../base/Errors.sol\";\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n  /// @notice Cast a uint256 to a int256, revert on overflow\n  /// @param y The uint256 to be casted\n  /// @return z The casted integer, now type int256\n  function toInt256(uint256 y) internal pure returns (int256 z) {\n    if (y >= 2**255) {\n      revert IllegalArgument();\n    }\n    z = int256(y);\n  }\n\n  /// @notice Cast a int256 to a uint256, revert on underflow\n  /// @param y The int256 to be casted\n  /// @return z The casted integer, now type uint256\n  function toUint256(int256 y) internal pure returns (uint256 z) {\n    if (y < 0) {\n      revert IllegalArgument();\n    }\n    z = uint256(y);\n  }\n}\n"
    },
    "contracts/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport {FixedPointMath} from \"./FixedPointMath.sol\";\n\nlibrary Tick {\n  using FixedPointMath for FixedPointMath.Number;\n\n  struct Info {\n    // The total number of unexchanged tokens that have been associated with this tick\n    uint256 totalBalance;\n    // The accumulated weight of the tick which is the sum of the previous ticks accumulated weight plus the weight\n    // that added at the time that this tick was created\n    FixedPointMath.Number accumulatedWeight;\n    // The previous active node. When this value is zero then there is no predecessor\n    uint256 prev;\n    // The next active node. When this value is zero then there is no successor\n    uint256 next;\n  }\n\n  struct Cache {\n    // The mapping which specifies the ticks in the buffer\n    mapping(uint256 => Info) values;\n    // The current tick which is being written to\n    uint256 position;\n    // The first tick which will be examined when iterating through the queue\n    uint256 head;\n    // The last tick which new nodes will be appended after\n    uint256 tail;\n  }\n\n  /// @dev Gets the next tick in the buffer.\n  ///\n  /// This increments the position in the buffer.\n  ///\n  /// @return The next tick.\n  function next(Tick.Cache storage self) internal returns (Tick.Info storage) {\n    self.position++;\n    return self.values[self.position];\n  }\n\n  /// @dev Gets the current tick being written to.\n  ///\n  /// @return The current tick.\n  function current(Tick.Cache storage self) internal view returns (Tick.Info storage) {\n    return self.values[self.position];\n  }\n\n  /// @dev Gets the nth tick in the buffer.\n  ///\n  /// @param self The reference to the buffer.\n  /// @param n    The nth tick to get.\n  function get(Tick.Cache storage self, uint256 n) internal view returns (Tick.Info storage) {\n    return self.values[n];\n  }\n\n  function getWeight(\n    Tick.Cache storage self,\n    uint256 from,\n    uint256 to\n  ) internal view returns (FixedPointMath.Number memory) {\n    Tick.Info storage startingTick = self.values[from];\n    Tick.Info storage endingTick = self.values[to];\n\n    FixedPointMath.Number memory startingAccumulatedWeight = startingTick.accumulatedWeight;\n    FixedPointMath.Number memory endingAccumulatedWeight = endingTick.accumulatedWeight;\n\n    return endingAccumulatedWeight.sub(startingAccumulatedWeight);\n  }\n\n  function addLast(Tick.Cache storage self, uint256 id) internal {\n    if (self.head == 0) {\n      self.head = self.tail = id;\n      return;\n    }\n\n    // Don't add the tick if it is already the tail. This has to occur after the check if the head\n    // is null since the tail may not be updated once the queue is made empty.\n    if (self.tail == id) {\n      return;\n    }\n\n    Tick.Info storage tick = self.values[id];\n    Tick.Info storage tail = self.values[self.tail];\n\n    tick.prev = self.tail;\n    tail.next = id;\n    self.tail = id;\n  }\n\n  function remove(Tick.Cache storage self, uint256 id) internal {\n    Tick.Info storage tick = self.values[id];\n\n    // Update the head if it is the tick we are removing.\n    if (self.head == id) {\n      self.head = tick.next;\n    }\n\n    // Update the tail if it is the tick we are removing.\n    if (self.tail == id) {\n      self.tail = tick.prev;\n    }\n\n    // Unlink the previously occupied tick from the next tick in the list.\n    if (tick.prev != 0) {\n      self.values[tick.prev].next = tick.next;\n    }\n\n    // Unlink the previously occupied tick from the next tick in the list.\n    if (tick.next != 0) {\n      self.values[tick.next].prev = tick.prev;\n    }\n\n    // Zero out the pointers.\n    // NOTE(nomad): This fixes the bug where the current accrued weight would get erased.\n    self.values[id].next = 0;\n    self.values[id].prev = 0;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/libraries/Sets.sol": {
      "content": "pragma solidity ^0.8.11;\n\n/// @title  Sets\n/// @author Alchemix Finance\nlibrary Sets {\n    using Sets for AddressSet;\n\n    /// @notice A data structure holding an array of values with an index mapping for O(1) lookup.\n    struct AddressSet {\n        address[] values;\n        mapping(address => uint256) indexes;\n    }\n\n    /// @dev Add a value to a Set\n    ///\n    /// @param self  The Set.\n    /// @param value The value to add.\n    ///\n    /// @return Whether the operation was successful (unsuccessful if the value is already contained in the Set)\n    function add(AddressSet storage self, address value) internal returns (bool) {\n        if (self.contains(value)) {\n            return false;\n        }\n        self.values.push(value);\n        self.indexes[value] = self.values.length;\n        return true;\n    }\n\n    /// @dev Remove a value from a Set\n    ///\n    /// @param self  The Set.\n    /// @param value The value to remove.\n    ///\n    /// @return Whether the operation was successful (unsuccessful if the value was not contained in the Set)\n    function remove(AddressSet storage self, address value) internal returns (bool) {\n        uint256 index = self.indexes[value];\n        if (index == 0) {\n            return false;\n        }\n\n        // Normalize the index since we know that the element is in the set.\n        index--;\n\n        uint256 lastIndex = self.values.length - 1;\n\n        if (index != lastIndex) {\n            address lastValue = self.values[lastIndex];\n            self.values[index] = lastValue;\n            self.indexes[lastValue] = index + 1;\n        }\n\n        self.values.pop();\n\n        delete self.indexes[value];\n\n        return true;\n    }\n\n    /// @dev Returns true if the value exists in the Set\n    ///\n    /// @param self  The Set.\n    /// @param value The value to check.\n    ///\n    /// @return True if the value is contained in the Set, False if it is not.\n    function contains(AddressSet storage self, address value) internal view returns (bool) {\n        return self.indexes[value] != 0;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IAlchemistV2.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./alchemist/IAlchemistV2Actions.sol\";\nimport \"./alchemist/IAlchemistV2AdminActions.sol\";\nimport \"./alchemist/IAlchemistV2Errors.sol\";\nimport \"./alchemist/IAlchemistV2Immutables.sol\";\nimport \"./alchemist/IAlchemistV2Events.sol\";\nimport \"./alchemist/IAlchemistV2State.sol\";\n\n/// @title  IAlchemistV2\n/// @author Alchemix Finance\ninterface IAlchemistV2 is\n    IAlchemistV2Actions,\n    IAlchemistV2AdminActions,\n    IAlchemistV2Errors,\n    IAlchemistV2Immutables,\n    IAlchemistV2Events,\n    IAlchemistV2State\n{ }\n"
    },
    "contracts/interfaces/IERC20TokenReceiver.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IERC20TokenReceiver\n/// @author Alchemix Finance\ninterface IERC20TokenReceiver {\n    /// @notice Informs implementors of this interface that an ERC20 token has been transferred.\n    ///\n    /// @param token The token that was transferred.\n    /// @param value The amount of the token that was transferred.\n    function onERC20Received(address token, uint256 value) external;\n}"
    },
    "contracts/interfaces/alchemist/IAlchemistV2Actions.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Actions\n/// @author Alchemix Finance\n///\n/// @notice Specifies user actions.\ninterface IAlchemistV2Actions {\n    /// @notice Approve `spender` to mint `amount` debt tokens.\n    ///\n    /// **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @param spender The address that will be approved to mint.\n    /// @param amount  The amount of tokens that `spender` will be allowed to mint.\n    function approveMint(address spender, uint256 amount) external;\n\n    /// @notice Approve `spender` to withdraw `amount` shares of `yieldToken`.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @param spender    The address that will be approved to withdraw.\n    /// @param yieldToken The address of the yield token that `spender` will be allowed to withdraw.\n    /// @param shares     The amount of shares that `spender` will be allowed to withdraw.\n    function approveWithdraw(\n        address spender,\n        address yieldToken,\n        uint256 shares\n    ) external;\n\n    /// @notice Synchronizes the state of the account owned by `owner`.\n    ///\n    /// @param owner The owner of the account to synchronize.\n    function poke(address owner) external;\n\n    /// @notice Deposit a yield token into a user's account.\n    ///\n    /// @notice An approval must be set for `yieldToken` which is greater than `amount`.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `yieldToken` must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `yieldToken` underlying token must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or the call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Deposit} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **_NOTE:_** When depositing, the `AlchemistV2` contract must have **allowance()** to spend funds on behalf of **msg.sender** for at least **amount** of the **yieldToken** being deposited.  This can be done via the standard `ERC20.approve()` method.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amount = 50000;\n    /// @notice IERC20(ydai).approve(alchemistAddress, amount);\n    /// @notice AlchemistV2(alchemistAddress).deposit(ydai, amount, msg.sender);\n    /// @notice ```\n    ///\n    /// @param yieldToken The yield-token to deposit.\n    /// @param amount     The amount of yield tokens to deposit.\n    /// @param recipient  The owner of the account that will receive the resulting shares.\n    ///\n    /// @return sharesIssued The number of shares issued to `recipient`.\n    function deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) external returns (uint256 sharesIssued);\n\n    /// @notice Deposit an underlying token into the account of `recipient` as `yieldToken`.\n    ///\n    /// @notice An approval must be set for the underlying token of `yieldToken` which is greater than `amount`.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or the call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Deposit} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** When depositing, the `AlchemistV2` contract must have **allowance()** to spend funds on behalf of **msg.sender** for at least **amount** of the **underlyingToken** being deposited.  This can be done via the standard `ERC20.approve()` method.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amount = 50000;\n    /// @notice AlchemistV2(alchemistAddress).depositUnderlying(ydai, amount, msg.sender, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken       The address of the yield token to wrap the underlying tokens into.\n    /// @param amount           The amount of the underlying token to deposit.\n    /// @param recipient        The address of the recipient.\n    /// @param minimumAmountOut The minimum amount of yield tokens that are expected to be deposited to `recipient`.\n    ///\n    /// @return sharesIssued The number of shares issued to `recipient`.\n    function depositUnderlying(\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external returns (uint256 sharesIssued);\n\n    /// @notice Withdraw yield tokens to `recipient` by burning `share` shares. The number of yield tokens withdrawn to `recipient` will depend on the value of shares for that yield token at the time of the call.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getYieldTokensPerShare(ydai);\n    /// @notice uint256 amtYieldTokens = 5000;\n    /// @notice AlchemistV2(alchemistAddress).withdraw(ydai, amtYieldTokens / pps, msg.sender);\n    /// @notice ```\n    ///\n    /// @param yieldToken The address of the yield token to withdraw.\n    /// @param shares     The number of shares to burn.\n    /// @param recipient  The address of the recipient.\n    ///\n    /// @return amountWithdrawn The number of yield tokens that were withdrawn to `recipient`.\n    function withdraw(\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Withdraw yield tokens to `recipient` by burning `share` shares from the account of `owner`\n    ///\n    /// @notice `owner` must have an withdrawal allowance which is greater than `amount` for this call to succeed.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getYieldTokensPerShare(ydai);\n    /// @notice uint256 amtYieldTokens = 5000;\n    /// @notice AlchemistV2(alchemistAddress).withdrawFrom(msg.sender, ydai, amtYieldTokens / pps, msg.sender);\n    /// @notice ```\n    ///\n    /// @param owner      The address of the account owner to withdraw from.\n    /// @param yieldToken The address of the yield token to withdraw.\n    /// @param shares     The number of shares to burn.\n    /// @param recipient  The address of the recipient.\n    ///\n    /// @return amountWithdrawn The number of yield tokens that were withdrawn to `recipient`.\n    function withdrawFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Withdraw underlying tokens to `recipient` by burning `share` shares and unwrapping the yield tokens that the shares were redeemed for.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice The loss in expected value of `yieldToken` must be less than the maximum permitted by the system or this call will revert with a {LossExceeded} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** The caller of `withdrawFrom()` must have **withdrawAllowance()** to withdraw funds on behalf of **owner** for at least the amount of `yieldTokens` that **shares** will be converted to.  This can be done via the `approveWithdraw()` or `permitWithdraw()` methods.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getUnderlyingTokensPerShare(ydai);\n    /// @notice uint256 amountUnderlyingTokens = 5000;\n    /// @notice AlchemistV2(alchemistAddress).withdrawUnderlying(ydai, amountUnderlyingTokens / pps, msg.sender, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken       The address of the yield token to withdraw.\n    /// @param shares           The number of shares to burn.\n    /// @param recipient        The address of the recipient.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    ///\n    /// @return amountWithdrawn The number of underlying tokens that were withdrawn to `recipient`.\n    function withdrawUnderlying(\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Withdraw underlying tokens to `recipient` by burning `share` shares from the account of `owner` and unwrapping the yield tokens that the shares were redeemed for.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice The loss in expected value of `yieldToken` must be less than the maximum permitted by the system or this call will revert with a {LossExceeded} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** The caller of `withdrawFrom()` must have **withdrawAllowance()** to withdraw funds on behalf of **owner** for at least the amount of `yieldTokens` that **shares** will be converted to.  This can be done via the `approveWithdraw()` or `permitWithdraw()` methods.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getUnderlyingTokensPerShare(ydai);\n    /// @notice uint256 amtUnderlyingTokens = 5000 * 10**ydai.decimals();\n    /// @notice AlchemistV2(alchemistAddress).withdrawUnderlying(msg.sender, ydai, amtUnderlyingTokens / pps, msg.sender, 1);\n    /// @notice ```\n    ///\n    /// @param owner            The address of the account owner to withdraw from.\n    /// @param yieldToken       The address of the yield token to withdraw.\n    /// @param shares           The number of shares to burn.\n    /// @param recipient        The address of the recipient.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    ///\n    /// @return amountWithdrawn The number of underlying tokens that were withdrawn to `recipient`.\n    function withdrawUnderlyingFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Mint `amount` debt tokens.\n    ///\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Mint} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice uint256 amtDebt = 5000;\n    /// @notice AlchemistV2(alchemistAddress).mint(amtDebt, msg.sender);\n    /// @notice ```\n    ///\n    /// @param amount    The amount of tokens to mint.\n    /// @param recipient The address of the recipient.\n    function mint(uint256 amount, address recipient) external;\n\n    /// @notice Mint `amount` debt tokens from the account owned by `owner` to `recipient`.\n    ///\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Mint} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** The caller of `mintFrom()` must have **mintAllowance()** to mint debt from the `Account` controlled by **owner** for at least the amount of **yieldTokens** that **shares** will be converted to.  This can be done via the `approveMint()` or `permitMint()` methods.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice uint256 amtDebt = 5000;\n    /// @notice AlchemistV2(alchemistAddress).mintFrom(msg.sender, amtDebt, msg.sender);\n    /// @notice ```\n    ///\n    /// @param owner     The address of the owner of the account to mint from.\n    /// @param amount    The amount of tokens to mint.\n    /// @param recipient The address of the recipient.\n    function mintFrom(\n        address owner,\n        uint256 amount,\n        address recipient\n    ) external;\n\n    /// @notice Burn `amount` debt tokens to credit the account owned by `recipient`.\n    ///\n    /// @notice `amount` will be limited up to the amount of debt that `recipient` currently holds.\n    ///\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `recipient` must have non-zero debt or this call will revert with an {IllegalState} error.\n    ///\n    /// @notice Emits a {Burn} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice uint256 amtBurn = 5000;\n    /// @notice AlchemistV2(alchemistAddress).burn(amtBurn, msg.sender);\n    /// @notice ```\n    ///\n    /// @param amount    The amount of tokens to burn.\n    /// @param recipient The address of the recipient.\n    ///\n    /// @return amountBurned The amount of tokens that were burned.\n    function burn(uint256 amount, address recipient) external returns (uint256 amountBurned);\n\n    /// @notice Repay `amount` debt using `underlyingToken` to credit the account owned by `recipient`.\n    ///\n    /// @notice `amount` will be limited up to the amount of debt that `recipient` currently holds.\n    ///\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `underlyingToken` must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `amount` must be less than or equal to the current available repay limit or this call will revert with a {ReplayLimitExceeded} error.\n    ///\n    /// @notice Emits a {Repay} event.\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address dai = 0x6b175474e89094c44da98b954eedeac495271d0f;\n    /// @notice uint256 amtRepay = 5000;\n    /// @notice AlchemistV2(alchemistAddress).repay(dai, amtRepay, msg.sender);\n    /// @notice ```\n    ///\n    /// @param underlyingToken The address of the underlying token to repay.\n    /// @param amount          The amount of the underlying token to repay.\n    /// @param recipient       The address of the recipient which will receive credit.\n    ///\n    /// @return amountRepaid The amount of tokens that were repaid.\n    function repay(\n        address underlyingToken,\n        uint256 amount,\n        address recipient\n    ) external returns (uint256 amountRepaid);\n\n    /// @notice\n    ///\n    /// @notice `shares` will be limited up to an equal amount of debt that `recipient` currently holds.\n    ///\n    /// @notice `shares` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `yieldToken` must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `yieldToken` underlying token must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice The loss in expected value of `yieldToken` must be less than the maximum permitted by the system or this call will revert with a {LossExceeded} error.\n    /// @notice `amount` must be less than or equal to the current available liquidation limit or this call will revert with a {LiquidationLimitExceeded} error.\n    ///\n    /// @notice Emits a {Liquidate} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amtSharesLiquidate = 5000 * 10**ydai.decimals();\n    /// @notice AlchemistV2(alchemistAddress).liquidate(ydai, amtSharesLiquidate, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken       The address of the yield token to liquidate.\n    /// @param shares           The number of shares to burn for credit.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be liquidated.\n    ///\n    /// @return sharesLiquidated The amount of shares that were liquidated.\n    function liquidate(\n        address yieldToken,\n        uint256 shares,\n        uint256 minimumAmountOut\n    ) external returns (uint256 sharesLiquidated);\n\n    /// @notice Burns `amount` debt tokens to credit accounts which have deposited `yieldToken`.\n    ///\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {Donate} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amtSharesLiquidate = 5000;\n    /// @notice AlchemistV2(alchemistAddress).liquidate(dai, amtSharesLiquidate, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken The address of the yield token to credit accounts for.\n    /// @param amount     The amount of debt tokens to burn.\n    function donate(address yieldToken, uint256 amount) external;\n\n    /// @notice Harvests outstanding yield that a yield token has accumulated and distributes it as credit to holders.\n    ///\n    /// @notice `msg.sender` must be a keeper or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice The amount being harvested must be greater than zero or else this call will revert with an {IllegalState} error.\n    ///\n    /// @notice Emits a {Harvest} event.\n    ///\n    /// @param yieldToken       The address of the yield token to harvest.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    function harvest(address yieldToken, uint256 minimumAmountOut) external;\n}\n"
    },
    "contracts/interfaces/alchemist/IAlchemistV2AdminActions.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2AdminActions\n/// @author Alchemix Finance\n///\n/// @notice Specifies admin and or sentinel actions.\ninterface IAlchemistV2AdminActions {\n    /// @notice Contract initialization parameters.\n    struct InitializationParams {\n        // The initial admin account.\n        address admin;\n        // The ERC20 token used to represent debt.\n        address debtToken;\n        // The initial transmuter or transmuter buffer.\n        address transmuter;\n        // The minimum collateralization ratio that an account must maintain.\n        uint256 minimumCollateralization;\n        // The percentage fee taken from each harvest measured in units of basis points.\n        uint256 protocolFee;\n        // The address that receives protocol fees.\n        address protocolFeeReceiver;\n        // A limit used to prevent administrators from making minting functionality inoperable.\n        uint256 mintingLimitMinimum;\n        // The maximum number of tokens that can be minted per period of time.\n        uint256 mintingLimitMaximum;\n        // The number of blocks that it takes for the minting limit to be refreshed.\n        uint256 mintingLimitBlocks;\n        // The address of the whitelist.\n        address whitelist;\n    }\n\n    /// @notice Configuration parameters for an underlying token.\n    struct UnderlyingTokenConfig {\n        // A limit used to prevent administrators from making repayment functionality inoperable.\n        uint256 repayLimitMinimum;\n        // The maximum number of underlying tokens that can be repaid per period of time.\n        uint256 repayLimitMaximum;\n        // The number of blocks that it takes for the repayment limit to be refreshed.\n        uint256 repayLimitBlocks;\n        // A limit used to prevent administrators from making liquidation functionality inoperable.\n        uint256 liquidationLimitMinimum;\n        // The maximum number of underlying tokens that can be liquidated per period of time.\n        uint256 liquidationLimitMaximum;\n        // The number of blocks that it takes for the liquidation limit to be refreshed.\n        uint256 liquidationLimitBlocks;\n    }\n\n    /// @notice Configuration parameters of a yield token.\n    struct YieldTokenConfig {\n        // The adapter used by the system to interop with the token.\n        address adapter;\n        // The maximum percent loss in expected value that can occur before certain actions are disabled measured in\n        // units of basis points.\n        uint256 maximumLoss;\n        // The maximum value that can be held by the system before certain actions are disabled measured in the\n        // underlying token.\n        uint256 maximumExpectedValue;\n        // The number of blocks that credit will be distributed over to depositors.\n        uint256 creditUnlockBlocks;\n    }\n\n    /// @notice Initialize the contract.\n    ///\n    /// @notice `params.protocolFee` must be in range or this call will with an {IllegalArgument} error.\n    /// @notice The minting growth limiter parameters must be valid or this will revert with an {IllegalArgument} error. For more information, see the {Limiters} library.\n    ///\n    /// @notice Emits an {AdminUpdated} event.\n    /// @notice Emits a {TransmuterUpdated} event.\n    /// @notice Emits a {MinimumCollateralizationUpdated} event.\n    /// @notice Emits a {ProtocolFeeUpdated} event.\n    /// @notice Emits a {ProtocolFeeReceiverUpdated} event.\n    /// @notice Emits a {MintingLimitUpdated} event.\n    ///\n    /// @param params The contract initialization parameters.\n    function initialize(InitializationParams memory params) external;\n\n    /// @notice Sets the pending administrator.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {PendingAdminUpdated} event.\n    ///\n    /// @dev This is the first step in the two-step process of setting a new administrator. After this function is called, the pending administrator will then need to call {acceptAdmin} to complete the process.\n    ///\n    /// @param value the address to set the pending admin to.\n    function setPendingAdmin(address value) external;\n\n    /// @notice Allows for `msg.sender` to accepts the role of administrator.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice The current pending administrator must be non-zero or this call will revert with an {IllegalState} error.\n    ///\n    /// @dev This is the second step in the two-step process of setting a new administrator. After this function is successfully called, this pending administrator will be reset and the new administrator will be set.\n    ///\n    /// @notice Emits a {AdminUpdated} event.\n    /// @notice Emits a {PendingAdminUpdated} event.\n    function acceptAdmin() external;\n\n    /// @notice Sets an address as a sentinel.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param sentinel The address to set or unset as a sentinel.\n    /// @param flag     A flag indicating of the address should be set or unset as a sentinel.\n    function setSentinel(address sentinel, bool flag) external;\n\n    /// @notice Sets an address as a keeper.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param keeper The address to set or unset as a keeper.\n    /// @param flag   A flag indicating of the address should be set or unset as a keeper.\n    function setKeeper(address keeper, bool flag) external;\n\n    /// @notice Adds an underlying token to the system.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param underlyingToken The address of the underlying token to add.\n    /// @param config          The initial underlying token configuration.\n    function addUnderlyingToken(\n        address underlyingToken,\n        UnderlyingTokenConfig calldata config\n    ) external;\n\n    /// @notice Adds a yield token to the system.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {AddYieldToken} event.\n    /// @notice Emits a {TokenAdapterUpdated} event.\n    /// @notice Emits a {MaximumLossUpdated} event.\n    ///\n    /// @param yieldToken The address of the yield token to add.\n    /// @param config     The initial yield token configuration.\n    function addYieldToken(address yieldToken, YieldTokenConfig calldata config)\n        external;\n\n    /// @notice Sets an underlying token as either enabled or disabled.\n    ///\n    /// @notice `msg.sender` must be either the admin or a sentinel or this call will revert with an {Unauthorized} error.\n    /// @notice `underlyingToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits an {UnderlyingTokenEnabled} event.\n    ///\n    /// @param underlyingToken The address of the underlying token to enable or disable.\n    /// @param enabled         If the underlying token should be enabled or disabled.\n    function setUnderlyingTokenEnabled(address underlyingToken, bool enabled)\n        external;\n\n    /// @notice Sets a yield token as either enabled or disabled.\n    ///\n    /// @notice `msg.sender` must be either the admin or a sentinel or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {YieldTokenEnabled} event.\n    ///\n    /// @param yieldToken The address of the yield token to enable or disable.\n    /// @param enabled    If the underlying token should be enabled or disabled.\n    function setYieldTokenEnabled(address yieldToken, bool enabled) external;\n\n    /// @notice Configures the the repay limit of `underlyingToken`.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `underlyingToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {ReplayLimitUpdated} event.\n    ///\n    /// @param underlyingToken The address of the underlying token to configure the repay limit of.\n    /// @param maximum         The maximum repay limit.\n    /// @param blocks          The number of blocks it will take for the maximum repayment limit to be replenished when it is completely exhausted.\n    function configureRepayLimit(\n        address underlyingToken,\n        uint256 maximum,\n        uint256 blocks\n    ) external;\n\n    /// @notice Configure the liquidation limiter of `underlyingToken`.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `underlyingToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {LiquidationLimitUpdated} event.\n    ///\n    /// @param underlyingToken The address of the underlying token to configure the liquidation limit of.\n    /// @param maximum         The maximum liquidation limit.\n    /// @param blocks          The number of blocks it will take for the maximum liquidation limit to be replenished when it is completely exhausted.\n    function configureLiquidationLimit(\n        address underlyingToken,\n        uint256 maximum,\n        uint256 blocks\n    ) external;\n\n    /// @notice Set the address of the transmuter.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `value` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {TransmuterUpdated} event.\n    ///\n    /// @param value The address of the transmuter.\n    function setTransmuter(address value) external;\n\n    /// @notice Set the minimum collateralization ratio.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {MinimumCollateralizationUpdated} event.\n    ///\n    /// @param value The new minimum collateralization ratio.\n    function setMinimumCollateralization(uint256 value) external;\n\n    /// @notice Sets the fee that the protocol will take from harvests.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `value` must be in range or this call will with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {ProtocolFeeUpdated} event.\n    ///\n    /// @param value The value to set the protocol fee to measured in basis points.\n    function setProtocolFee(uint256 value) external;\n\n    /// @notice Sets the address which will receive protocol fees.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `value` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {ProtocolFeeReceiverUpdated} event.\n    ///\n    /// @param value The address to set the protocol fee receiver to.\n    function setProtocolFeeReceiver(address value) external;\n\n    /// @notice Configures the minting limiter.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {MintingLimitUpdated} event.\n    ///\n    /// @param maximum The maximum minting limit.\n    /// @param blocks  The number of blocks it will take for the maximum minting limit to be replenished when it is completely exhausted.\n    function configureMintingLimit(uint256 maximum, uint256 blocks) external;\n\n    /// @notice Sets the rate at which credit will be completely available to depositors after it is harvested.\n    ///\n    /// @notice Emits a {CreditUnlockRateUpdated} event.\n    ///\n    /// @param yieldToken The address of the yield token to set the credit unlock rate for.\n    /// @param blocks     The number of blocks that it will take before the credit will be unlocked.\n    function configureCreditUnlockRate(address yieldToken, uint256 blocks) external;\n\n    /// @notice Sets the token adapter of a yield token.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice The token that `adapter` supports must be `yieldToken` or this call will revert with a {IllegalState} error.\n    ///\n    /// @notice Emits a {TokenAdapterUpdated} event.\n    ///\n    /// @param yieldToken The address of the yield token to set the adapter for.\n    /// @param adapter    The address to set the token adapter to.\n    function setTokenAdapter(address yieldToken, address adapter) external;\n\n    /// @notice Sets the maximum expected value of a yield token that the system can hold.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @param yieldToken The address of the yield token to set the maximum expected value for.\n    /// @param value      The maximum expected value of the yield token denoted measured in its underlying token.\n    function setMaximumExpectedValue(address yieldToken, uint256 value)\n        external;\n\n    /// @notice Sets the maximum loss that a yield bearing token will permit before restricting certain actions.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @dev There are two types of loss of value for yield bearing assets: temporary or permanent. The system will automatically restrict actions which are sensitive to both forms of loss when detected. For example, deposits must be restricted when an excessive loss is encountered to prevent users from having their collateral harvested from them. While the user would receive credit, which then could be exchanged for value equal to the collateral that was harvested from them, it is seen as a negative user experience because the value of their collateral should have been higher than what was originally recorded when they made their deposit.\n    ///\n    /// @param yieldToken The address of the yield bearing token to set the maximum loss for.\n    /// @param value      The value to set the maximum loss to. This is in units of basis points.\n    function setMaximumLoss(address yieldToken, uint256 value) external;\n\n    /// @notice Snap the expected value `yieldToken` to the current value.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @dev This function should only be used in the event of a loss in the target yield-token. For example, say a third-party protocol experiences a fifty percent loss. The expected value (amount of underlying tokens) of the yield tokens being held by the system would be two times the real value that those yield tokens could be redeemed for. This function gives governance a way to realize those losses so that users can continue using the token as normal.\n    ///\n    /// @param yieldToken The address of the yield token to snap.\n    function snap(address yieldToken) external;\n}\n"
    },
    "contracts/interfaces/alchemist/IAlchemistV2Errors.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Errors\n/// @author Alchemix Finance\n///\n/// @notice Specifies errors.\ninterface IAlchemistV2Errors {\n    /// @notice An error which is used to indicate that an operation failed because it tried to operate on a token that the system did not recognize.\n    ///\n    /// @param token The address of the token.\n    error UnsupportedToken(address token);\n\n    /// @notice An error which is used to indicate that an operation failed because it tried to operate on a token that has been disabled.\n    ///\n    /// @param token The address of the token.\n    error TokenDisabled(address token);\n\n    /// @notice An error which is used to indicate that an operation failed because an account became undercollateralized.\n    error Undercollateralized();\n\n    /// @notice An error which is used to indicate that an operation failed because the expected value of a yield token in the system exceeds the maximum value permitted.\n    ///\n    /// @param yieldToken           The address of the yield token.\n    /// @param expectedValue        The expected value measured in units of the underlying token.\n    /// @param maximumExpectedValue The maximum expected value permitted measured in units of the underlying token.\n    error ExpectedValueExceeded(address yieldToken, uint256 expectedValue, uint256 maximumExpectedValue);\n\n    /// @notice An error which is used to indicate that an operation failed because the loss that a yield token in the system exceeds the maximum value permitted.\n    ///\n    /// @param yieldToken  The address of the yield token.\n    /// @param loss        The amount of loss measured in basis points.\n    /// @param maximumLoss The maximum amount of loss permitted measured in basis points.\n    error LossExceeded(address yieldToken, uint256 loss, uint256 maximumLoss);\n\n    /// @notice An error which is used to indicate that a minting operation failed because the minting limit has been exceeded.\n    ///\n    /// @param amount    The amount of debt tokens that were requested to be minted.\n    /// @param available The amount of debt tokens which are available to mint.\n    error MintingLimitExceeded(uint256 amount, uint256 available);\n\n    /// @notice An error which is used to indicate that an repay operation failed because the repay limit for an underlying token has been exceeded.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of underlying tokens that were requested to be repaid.\n    /// @param available       The amount of underlying tokens that are available to be repaid.\n    error RepayLimitExceeded(address underlyingToken, uint256 amount, uint256 available);\n\n    /// @notice An error which is used to indicate that an repay operation failed because the liquidation limit for an underlying token has been exceeded.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of underlying tokens that were requested to be liquidated.\n    /// @param available       The amount of underlying tokens that are available to be liquidated.\n    error LiquidationLimitExceeded(address underlyingToken, uint256 amount, uint256 available);\n\n    /// @notice An error which is used to indicate that the slippage of a wrap or unwrap operation was exceeded.\n    ///\n    /// @param amount           The amount of underlying or yield tokens returned by the operation.\n    /// @param minimumAmountOut The minimum amount of the underlying or yield token that was expected when performing\n    ///                         the operation.\n    error SlippageExceeded(uint256 amount, uint256 minimumAmountOut);\n}"
    },
    "contracts/interfaces/alchemist/IAlchemistV2Immutables.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Immutables\n/// @author Alchemix Finance\ninterface IAlchemistV2Immutables {\n    /// @notice Returns the version of the alchemist.\n    ///\n    /// @return The version.\n    function version() external view returns (string memory);\n\n    /// @notice Returns the address of the debt token used by the system.\n    ///\n    /// @return The address of the debt token.\n    function debtToken() external view returns (address);\n}"
    },
    "contracts/interfaces/alchemist/IAlchemistV2Events.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Events\n/// @author Alchemix Finance\ninterface IAlchemistV2Events {\n    /// @notice Emitted when the pending admin is updated.\n    ///\n    /// @param pendingAdmin The address of the pending admin.\n    event PendingAdminUpdated(address pendingAdmin);\n\n    /// @notice Emitted when the administrator is updated.\n    ///\n    /// @param admin The address of the administrator.\n    event AdminUpdated(address admin);\n\n    /// @notice Emitted when an address is set or unset as a sentinel.\n    ///\n    /// @param sentinel The address of the sentinel.\n    /// @param flag     A flag indicating if `sentinel` was set or unset as a sentinel.\n    event SentinelSet(address sentinel, bool flag);\n\n    /// @notice Emitted when an address is set or unset as a keeper.\n    ///\n    /// @param sentinel The address of the keeper.\n    /// @param flag     A flag indicating if `keeper` was set or unset as a sentinel.\n    event KeeperSet(address sentinel, bool flag);\n\n    /// @notice Emitted when an underlying token is added.\n    ///\n    /// @param underlyingToken The address of the underlying token that was added.\n    event AddUnderlyingToken(address indexed underlyingToken);\n\n    /// @notice Emitted when a yield token is added.\n    ///\n    /// @param yieldToken The address of the yield token that was added.\n    event AddYieldToken(address indexed yieldToken);\n\n    /// @notice Emitted when an underlying token is enabled or disabled.\n    ///\n    /// @param underlyingToken The address of the underlying token that was enabled or disabled.\n    /// @param enabled         A flag indicating if the underlying token was enabled or disabled.\n    event UnderlyingTokenEnabled(address indexed underlyingToken, bool enabled);\n\n    /// @notice Emitted when an yield token is enabled or disabled.\n    ///\n    /// @param yieldToken The address of the yield token that was enabled or disabled.\n    /// @param enabled    A flag indicating if the yield token was enabled or disabled.\n    event YieldTokenEnabled(address indexed yieldToken, bool enabled);\n\n    /// @notice Emitted when the repay limit of an underlying token is updated.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param maximum         The updated maximum repay limit.\n    /// @param blocks          The updated number of blocks it will take for the maximum repayment limit to be replenished when it is completely exhausted.\n    event RepayLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\n\n    /// @notice Emitted when the liquidation limit of an underlying token is updated.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param maximum         The updated maximum liquidation limit.\n    /// @param blocks          The updated number of blocks it will take for the maximum liquidation limit to be replenished when it is completely exhausted.\n    event LiquidationLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\n\n    /// @notice Emitted when the transmuter is updated.\n    ///\n    /// @param transmuter The updated address of the transmuter.\n    event TransmuterUpdated(address transmuter);\n\n    /// @notice Emitted when the minimum collateralization is updated.\n    ///\n    /// @param minimumCollateralization The updated minimum collateralization.\n    event MinimumCollateralizationUpdated(uint256 minimumCollateralization);\n\n    /// @notice Emitted when the protocol fee is updated.\n    ///\n    /// @param protocolFee The updated protocol fee.\n    event ProtocolFeeUpdated(uint256 protocolFee);\n    \n    /// @notice Emitted when the protocol fee receiver is updated.\n    ///\n    /// @param protocolFeeReceiver The updated address of the protocol fee receiver.\n    event ProtocolFeeReceiverUpdated(address protocolFeeReceiver);\n\n    /// @notice Emitted when the minting limit is updated.\n    ///\n    /// @param maximum The updated maximum minting limit.\n    /// @param blocks  The updated number of blocks it will take for the maximum minting limit to be replenished when it is completely exhausted.\n    event MintingLimitUpdated(uint256 maximum, uint256 blocks);\n\n    /// @notice Emitted when the credit unlock rate is updated.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param blocks     The number of blocks that distributed credit will unlock over.\n    event CreditUnlockRateUpdated(address yieldToken, uint256 blocks);\n\n    /// @notice Emitted when the adapter of a yield token is updated.\n    ///\n    /// @param yieldToken   The address of the yield token.\n    /// @param tokenAdapter The updated address of the token adapter.\n    event TokenAdapterUpdated(address yieldToken, address tokenAdapter);\n\n    /// @notice Emitted when the maximum expected value of a yield token is updated.\n    ///\n    /// @param yieldToken           The address of the yield token.\n    /// @param maximumExpectedValue The updated maximum expected value.\n    event MaximumExpectedValueUpdated(address indexed yieldToken, uint256 maximumExpectedValue);\n\n    /// @notice Emitted when the maximum loss of a yield token is updated.\n    ///\n    /// @param yieldToken  The address of the yield token.\n    /// @param maximumLoss The updated maximum loss.\n    event MaximumLossUpdated(address indexed yieldToken, uint256 maximumLoss);\n\n    /// @notice Emitted when the expected value of a yield token is snapped to its current value.\n    ///\n    /// @param yieldToken    The address of the yield token.\n    /// @param expectedValue The updated expected value measured in the yield token's underlying token.\n    event Snap(address indexed yieldToken, uint256 expectedValue);\n\n    /// @notice Emitted when `owner` grants `spender` the ability to mint debt tokens on its behalf.\n    ///\n    /// @param owner   The address of the account owner.\n    /// @param spender The address which is being permitted to mint tokens on the behalf of `owner`.\n    /// @param amount  The amount of debt tokens that `spender` is allowed to mint.\n    event ApproveMint(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @notice Emitted when `owner` grants `spender` the ability to withdraw `yieldToken` from its account.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param spender    The address which is being permitted to mint tokens on the behalf of `owner`.\n    /// @param yieldToken The address of the yield token that `spender` is allowed to withdraw.\n    /// @param amount     The amount of shares of `yieldToken` that `spender` is allowed to withdraw.\n    event ApproveWithdraw(address indexed owner, address indexed spender, address indexed yieldToken, uint256 amount);\n\n    /// @notice Emitted when a user deposits `amount of `yieldToken` to `recipient`.\n    ///\n    /// @notice This event does not imply that `sender` directly deposited yield tokens. It is possible that the\n    ///         underlying tokens were wrapped.\n    ///\n    /// @param sender       The address of the user which deposited funds.\n    /// @param yieldToken   The address of the yield token that was deposited.\n    /// @param amount       The amount of yield tokens that were deposited.\n    /// @param recipient    The address that received the deposited funds.\n    event Deposit(address indexed sender, address indexed yieldToken, uint256 amount, address recipient);\n\n    /// @notice Emitted when `shares` shares of `yieldToken` are burned to withdraw `yieldToken` from the account owned\n    ///         by `owner` to `recipient`.\n    ///\n    /// @notice This event does not imply that `recipient` received yield tokens. It is possible that the yield tokens\n    ///         were unwrapped.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param yieldToken The address of the yield token that was withdrawn.\n    /// @param shares     The amount of shares that were burned.\n    /// @param recipient  The address that received the withdrawn funds.\n    event Withdraw(address indexed owner, address indexed yieldToken, uint256 shares, address recipient);\n\n    /// @notice Emitted when `amount` debt tokens are minted to `recipient` using the account owned by `owner`.\n    ///\n    /// @param owner     The address of the account owner.\n    /// @param amount    The amount of tokens that were minted.\n    /// @param recipient The recipient of the minted tokens.\n    event Mint(address indexed owner, uint256 amount, address recipient);\n\n    /// @notice Emitted when `sender` burns `amount` debt tokens to grant credit to `recipient`.\n    ///\n    /// @param sender    The address which is burning tokens.\n    /// @param amount    The amount of tokens that were burned.\n    /// @param recipient The address that received credit for the burned tokens.\n    event Burn(address indexed sender, uint256 amount, address recipient);\n\n    /// @notice Emitted when `amount` of `underlyingToken` are repaid to grant credit to `recipient`.\n    ///\n    /// @param sender          The address which is repaying tokens.\n    /// @param underlyingToken The address of the underlying token that was used to repay debt.\n    /// @param amount          The amount of the underlying token that was used to repay debt.\n    /// @param recipient       The address that received credit for the repaid tokens.\n    event Repay(address indexed sender, address indexed underlyingToken, uint256 amount, address recipient);\n\n    /// @notice Emitted when `sender` liquidates `share` shares of `yieldToken`.\n    ///\n    /// @param owner           The address of the account owner liquidating shares.\n    /// @param yieldToken      The address of the yield token.\n    /// @param underlyingToken The address of the underlying token.\n    /// @param shares          The amount of the shares of `yieldToken` that were liquidated.\n    event Liquidate(address indexed owner, address indexed yieldToken, address indexed underlyingToken, uint256 shares);\n\n    /// @notice Emitted when `sender` burns `amount` debt tokens to grant credit to users who have deposited `yieldToken`.\n    ///\n    /// @param sender     The address which burned debt tokens.\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of debt tokens which were burned.\n    event Donate(address indexed sender, address indexed yieldToken, uint256 amount);\n\n    /// @notice Emitted when `yieldToken` is harvested.\n    ///\n    /// @param yieldToken     The address of the yield token that was harvested.\n    /// @param minimumAmountOut    The maximum amount of loss that is acceptable when unwrapping the underlying tokens into yield tokens, measured in basis points.\n    /// @param totalHarvested The total amount of underlying tokens harvested.\n    event Harvest(address indexed yieldToken, uint256 minimumAmountOut, uint256 totalHarvested);\n}"
    },
    "contracts/interfaces/alchemist/IAlchemistV2State.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2State\n/// @author Alchemix Finance\ninterface IAlchemistV2State {\n    /// @notice Defines underlying token parameters.\n    struct UnderlyingTokenParams {\n        // The number of decimals the token has. This value is cached once upon registering the token so it is important\n        // that the decimals of the token are immutable or the system will begin to have computation errors.\n        uint8 decimals;\n        // A coefficient used to normalize the token to a value comparable to the debt token. For example, if the\n        // underlying token is 8 decimals and the debt token is 18 decimals then the conversion factor will be\n        // 10^10. One unit of the underlying token will be comparably equal to one unit of the debt token.\n        uint256 conversionFactor;\n        // A flag to indicate if the token is enabled.\n        bool enabled;\n    }\n\n    /// @notice Defines yield token parameters.\n    struct YieldTokenParams {\n        // The number of decimals the token has. This value is cached once upon registering the token so it is important\n        // that the decimals of the token are immutable or the system will begin to have computation errors.\n        uint8 decimals;\n        // The associated underlying token that can be redeemed for the yield-token.\n        address underlyingToken;\n        // The adapter used by the system to wrap, unwrap, and lookup the conversion rate of this token into its\n        // underlying token.\n        address adapter;\n        // The maximum percentage loss that is acceptable before disabling certain actions.\n        uint256 maximumLoss;\n        // The maximum value of yield tokens that the system can hold, measured in units of the underlying token.\n        uint256 maximumExpectedValue;\n        // The percent of credit that will be unlocked per block. The representation of this value is a 18  decimal\n        // fixed point integer.\n        uint256 creditUnlockRate;\n        // The current balance of yield tokens which are held by users.\n        uint256 activeBalance;\n        // The current balance of yield tokens which are earmarked to be harvested by the system at a later time.\n        uint256 harvestableBalance;\n        // The total number of shares that have been minted for this token.\n        uint256 totalShares;\n        // The expected value of the tokens measured in underlying tokens. This value controls how much of the token\n        // can be harvested. When users deposit yield tokens, it increases the expected value by how much the tokens\n        // are exchangeable for in the underlying token. When users withdraw yield tokens, it decreases the expected\n        // value by how much the tokens are exchangeable for in the underlying token.\n        uint256 expectedValue;\n        // The current amount of credit which is will be distributed over time to depositors.\n        uint256 pendingCredit;\n        // The amount of the pending credit that has been distributed.\n        uint256 distributedCredit;\n        // The block number which the last credit distribution occurred.\n        uint256 lastDistributionBlock;\n        // The total accrued weight. This is used to calculate how much credit a user has been granted over time. The\n        // representation of this value is a 18 decimal fixed point integer.\n        uint256 accruedWeight;\n        // A flag to indicate if the token is enabled.\n        bool enabled;\n    }\n\n    /// @notice Gets the address of the admin.\n    ///\n    /// @return admin The admin address.\n    function admin() external view returns (address admin);\n\n    /// @notice Gets the address of the pending administrator.\n    ///\n    /// @return pendingAdmin The pending administrator address.\n    function pendingAdmin() external view returns (address pendingAdmin);\n\n    /// @notice Gets if an address is a sentinel.\n    ///\n    /// @param sentinel The address to check.\n    ///\n    /// @return isSentinel If the address is a sentinel.\n    function sentinels(address sentinel) external view returns (bool isSentinel);\n\n    /// @notice Gets if an address is a keeper.\n    ///\n    /// @param keeper The address to check.\n    ///\n    /// @return isKeeper If the address is a keeper\n    function keepers(address keeper) external view returns (bool isKeeper);\n\n    /// @notice Gets the address of the transmuter.\n    ///\n    /// @return transmuter The transmuter address.\n    function transmuter() external view returns (address transmuter);\n\n    /// @notice Gets the minimum collateralization.\n    ///\n    /// @notice Collateralization is determined by taking the total value of collateral that a user has deposited into their account and dividing it their debt.\n    ///\n    /// @dev The value returned is a 18 decimal fixed point integer.\n    ///\n    /// @return minimumCollateralization The minimum collateralization.\n    function minimumCollateralization() external view returns (uint256 minimumCollateralization);\n\n    /// @notice Gets the protocol fee.\n    ///\n    /// @return protocolFee The protocol fee.\n    function protocolFee() external view returns (uint256 protocolFee);\n\n    /// @notice Gets the protocol fee receiver.\n    ///\n    /// @return protocolFeeReceiver The protocol fee receiver.\n    function protocolFeeReceiver() external view returns (address protocolFeeReceiver);\n\n    /// @notice Gets the address of the whitelist contract.\n    ///\n    /// @return whitelist The address of the whitelist contract.\n    function whitelist() external view returns (address whitelist);\n    \n    /// @notice Gets the conversion rate of underlying tokens per share.\n    ///\n    /// @param yieldToken The address of the yield token to get the conversion rate for.\n    ///\n    /// @return rate The rate of underlying tokens per share.\n    function getUnderlyingTokensPerShare(address yieldToken) external view returns (uint256 rate);\n\n    /// @notice Gets the conversion rate of yield tokens per share.\n    ///\n    /// @param yieldToken The address of the yield token to get the conversion rate for.\n    ///\n    /// @return rate The rate of yield tokens per share.\n    function getYieldTokensPerShare(address yieldToken) external view returns (uint256 rate);\n\n    /// @notice Gets the supported underlying tokens.\n    ///\n    /// @dev The order of the entries returned by this function is not guaranteed to be consistent between calls.\n    ///\n    /// @return tokens The supported underlying tokens.\n    function getSupportedUnderlyingTokens() external view returns (address[] memory tokens);\n\n    /// @notice Gets the supported yield tokens.\n    ///\n    /// @dev The order of the entries returned by this function is not guaranteed to be consistent between calls.\n    ///\n    /// @return tokens The supported yield tokens.\n    function getSupportedYieldTokens() external view returns (address[] memory tokens);\n\n    /// @notice Gets if an underlying token is supported.\n    ///\n    /// @param underlyingToken The address of the underlying token to check.\n    ///\n    /// @return isSupported If the underlying token is supported.\n    function isSupportedUnderlyingToken(address underlyingToken) external view returns (bool isSupported);\n\n    /// @notice Gets if a yield token is supported.\n    ///\n    /// @param yieldToken The address of the yield token to check.\n    ///\n    /// @return isSupported If the yield token is supported.\n    function isSupportedYieldToken(address yieldToken) external view returns (bool isSupported);\n\n    /// @notice Gets information about the account owned by `owner`.\n    ///\n    /// @param owner The address that owns the account.\n    ///\n    /// @return debt            The unrealized amount of debt that the account had incurred.\n    /// @return depositedTokens The yield tokens that the owner has deposited.\n    function accounts(address owner) external view returns (int256 debt, address[] memory depositedTokens);\n\n    /// @notice Gets information about a yield token position for the account owned by `owner`.\n    ///\n    /// @param owner      The address that owns the account.\n    /// @param yieldToken The address of the yield token to get the position of.\n    ///\n    /// @return shares            The amount of shares of that `owner` owns of the yield token.\n    /// @return lastAccruedWeight The last recorded accrued weight of the yield token.\n    function positions(address owner, address yieldToken)\n        external view\n        returns (\n            uint256 shares,\n            uint256 lastAccruedWeight\n        );\n\n    /// @notice Gets the amount of debt tokens `spender` is allowed to mint on behalf of `owner`.\n    ///\n    /// @param owner   The owner of the account.\n    /// @param spender The address which is allowed to mint on behalf of `owner`.\n    ///\n    /// @return allowance The amount of debt tokens that `spender` can mint on behalf of `owner`.\n    function mintAllowance(address owner, address spender) external view returns (uint256 allowance);\n\n    /// @notice Gets the amount of shares of `yieldToken` that `spender` is allowed to withdraw on behalf of `owner`.\n    ///\n    /// @param owner      The owner of the account.\n    /// @param spender    The address which is allowed to withdraw on behalf of `owner`.\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return allowance The amount of shares that `spender` can withdraw on behalf of `owner`.\n    function withdrawAllowance(address owner, address spender, address yieldToken) external view returns (uint256 allowance);\n\n    /// @notice Gets the parameters of an underlying token.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    ///\n    /// @return params The underlying token parameters.\n    function getUnderlyingTokenParameters(address underlyingToken)\n        external view\n        returns (UnderlyingTokenParams memory params);\n\n    /// @notice Get the parameters and state of a yield-token.\n    ///\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return params The yield token parameters.\n    function getYieldTokenParameters(address yieldToken)\n        external view\n        returns (YieldTokenParams memory params);\n\n    /// @notice Gets current limit, maximum, and rate of the minting limiter.\n    ///\n    /// @return currentLimit The current amount of debt tokens that can be minted.\n    /// @return rate         The maximum possible amount of tokens that can be liquidated at a time.\n    /// @return maximum      The highest possible maximum amount of debt tokens that can be minted at a time.\n    function getMintLimitInfo()\n        external view\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        );\n\n    /// @notice Gets current limit, maximum, and rate of a repay limiter for `underlyingToken`.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    ///\n    /// @return currentLimit The current amount of underlying tokens that can be repaid.\n    /// @return rate         The rate at which the the current limit increases back to its maximum in tokens per block.\n    /// @return maximum      The maximum possible amount of tokens that can be repaid at a time.\n    function getRepayLimitInfo(address underlyingToken)\n        external view\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        );\n\n    /// @notice Gets current limit, maximum, and rate of the liquidation limiter for `underlyingToken`.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    ///\n    /// @return currentLimit The current amount of underlying tokens that can be liquidated.\n    /// @return rate         The rate at which the function increases back to its maximum limit (tokens / block).\n    /// @return maximum      The highest possible maximum amount of debt tokens that can be liquidated at a time.\n    function getLiquidationLimitInfo(address underlyingToken)\n        external view\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        );\n}"
    },
    "contracts/TransmuterBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./base/Errors.sol\";\n\nimport \"./interfaces/IAlchemistV2.sol\";\nimport \"./interfaces/ITokenAdapter.sol\";\nimport \"./interfaces/transmuter/ITransmuterBuffer.sol\";\nimport \"./interfaces/transmuter/ITransmuterV2.sol\";\n\nimport \"./libraries/FixedPointMath.sol\";\nimport \"./libraries/LiquidityMath.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/TokenUtils.sol\";\n\n/// @title  ITransmuterBuffer\n/// @author Alchemix Finance\n///\n/// @notice An interface contract to buffer funds between the Alchemist and the Transmuter\ncontract TransmuterBuffer is ITransmuterBuffer, AccessControl, Initializable {\n    using SafeMath for uint256;\n    using FixedPointMath for FixedPointMath.Number;\n\n    /// @notice The identifier of the role which maintains other roles.\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n\n    /// @notice The identifier of the keeper role.\n    bytes32 public constant KEEPER = keccak256(\"KEEPER\");\n\n    /// @inheritdoc ITransmuterBuffer\n    string public constant override version = \"2.1.0\";\n\n    /// @notice The alchemist address.\n    address public alchemist;\n\n    /// @notice The public transmuter address for each address.\n    mapping(address => address) public transmuter;\n\n    /// @notice The flowRate for each address.\n    mapping(address => uint256) public flowRate;\n\n    /// @notice The last update timestamp gor the flowRate for each address.\n    mapping(address => uint256) public lastFlowrateUpdate;\n\n    /// @notice The amount of flow available per ERC20.\n    mapping(address => uint256) public flowAvailable;\n\n    /// @notice The yieldTokens of each underlying supported by the Alchemist.\n    mapping(address => address[]) public _yieldTokens;\n\n    /// @notice The total amount of an underlying token that has been exchanged into the transmuter, and has not been claimed.\n    mapping(address => uint256) public currentExchanged;\n\n    /// @notice The underlying-tokens registered in the TransmuterBuffer.\n    address[] public registeredUnderlyings;\n\n    /// @notice The debt-token used by the TransmuterBuffer.\n    address public debtToken;\n\n    /// @notice A mapping of weighting schemas to be used in actions taken on the Alchemist (burn, deposit).\n    mapping(address => Weighting) public weightings;\n\n    /// @dev A mapping of addresses to denote permissioned sources of funds\n    mapping(address => bool) public sources;\n\n    constructor() initializer {}\n\n    /// @dev Initialize the contract\n    ///\n    /// @param _admin     The governing address of the buffer.\n    /// @param _debtToken The debt token minted by the Alchemist and accepted by the Transmuter.\n    function initialize(address _admin, address _debtToken) external initializer {\n        _setupRole(ADMIN, _admin);\n        _setRoleAdmin(ADMIN, ADMIN);\n        _setRoleAdmin(KEEPER, ADMIN);\n        debtToken = _debtToken;\n    }\n\n    /// @dev Only allows the transmuter to call the modified function\n    ///\n    /// Reverts if the caller is not a correct transmuter.\n    ///\n    /// @param underlyingToken the underlying token associated with the transmuter.\n    modifier onlyTransmuter(address underlyingToken) {\n        if (msg.sender != transmuter[underlyingToken]) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @dev Only allows a governance-permissioned source to call the modified function\n    ///\n    /// Reverts if the caller is not a permissioned source.\n    modifier onlySource() {\n        if (!sources[msg.sender]) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @dev Only calls from the admin address are authorized to pass.\n    modifier onlyAdmin() {\n        if (!hasRole(ADMIN, msg.sender)) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @dev Only calls from a keeper address are authorized to pass.\n    modifier onlyKeeper() {\n        if (!hasRole(KEEPER, msg.sender)) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getWeight(address weightToken, address token)\n        external\n        view\n        override\n        returns (uint256 weight)\n    {\n        return weightings[weightToken].weights[token];\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getAvailableFlow(address underlyingToken)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        // total amount of collateral that the buffer controls in the alchemist\n        uint256 totalUnderlyingBuffered = getTotalUnderlyingBuffered(\n            underlyingToken\n        );\n\n        if (totalUnderlyingBuffered < flowAvailable[underlyingToken]) {\n            return totalUnderlyingBuffered;\n        } else {\n            return flowAvailable[underlyingToken];\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getTotalCredit() public view override returns (uint256 credit) {\n        (int256 debt, ) = IAlchemistV2(alchemist).accounts(address(this));\n        credit = debt >= 0 ? 0 : SafeCast.toUint256(-debt);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getTotalUnderlyingBuffered(address underlyingToken)\n        public\n        view\n        override\n        returns (uint256 totalBuffered)\n    {\n        totalBuffered = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        for (uint256 i = 0; i < _yieldTokens[underlyingToken].length; i++) {\n            totalBuffered += _getTotalBuffered(_yieldTokens[underlyingToken][i]);\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setWeights(\n        address weightToken,\n        address[] memory tokens,\n        uint256[] memory weights\n    ) external override onlyAdmin {\n        Weighting storage weighting = weightings[weightToken];\n        delete weighting.tokens;\n        weighting.totalWeight = 0;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address yieldToken = tokens[i];\n\n            // For any weightToken that is not the debtToken, we want to verify that the yield-tokens being\n            // set for the weight schema accept said weightToken as collateral.\n            //\n            // We don't want to do this check on the debtToken because it is only used in the burnCredit() function\n            // and we want to be able to burn credit to any yield-token in the Alchemist.\n            if (weightToken != debtToken) {\n                IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist)\n                    .getYieldTokenParameters(yieldToken);\n                address underlyingToken = ITokenAdapter(params.adapter)\n                    .underlyingToken();\n\n                if (weightToken != underlyingToken) {\n                    revert IllegalState();\n                }\n            }\n\n            weighting.tokens.push(yieldToken);\n            weighting.weights[yieldToken] = weights[i];\n            weighting.totalWeight += weights[i];\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setSource(address source, bool flag) external override onlyAdmin {\n        if (sources[source] == flag) {\n            revert IllegalArgument();\n        }\n        sources[source] = flag;\n        emit SetSource(source, flag);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setTransmuter(address underlyingToken, address newTransmuter) external override onlyAdmin {\n        if (ITransmuterV2(newTransmuter).underlyingToken() != underlyingToken) {\n            revert IllegalArgument();\n        }\n        transmuter[underlyingToken] = newTransmuter;\n        emit SetTransmuter(underlyingToken, newTransmuter);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setAlchemist(address _alchemist) external override onlyAdmin {\n        sources[alchemist] = false;\n        sources[_alchemist] = true;\n\n        if (alchemist != address(0)) {\n            for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\n                TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, 0);\n            }\n            TokenUtils.safeApprove(debtToken, alchemist, 0);\n        }\n\n        alchemist = _alchemist;\n        for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\n            TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, type(uint256).max);\n        }\n        TokenUtils.safeApprove(debtToken, alchemist, type(uint256).max);\n\n        emit SetAlchemist(alchemist);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function registerAsset(\n        address underlyingToken,\n        address _transmuter\n    ) external override onlyAdmin {\n        if (!IAlchemistV2(alchemist).isSupportedUnderlyingToken(underlyingToken)) {\n            revert IllegalState();\n        }\n\n        // only add to the array if not already contained in it\n        for (uint256 i = 0; i < registeredUnderlyings.length; i++) {\n            if (registeredUnderlyings[i] == underlyingToken) {\n                revert IllegalState();\n            }\n        }\n\n        if (ITransmuterV2(_transmuter).underlyingToken() != underlyingToken) {\n            revert IllegalArgument();\n        }\n\n        transmuter[underlyingToken] = _transmuter;\n        registeredUnderlyings.push(underlyingToken);\n        TokenUtils.safeApprove(underlyingToken, alchemist, type(uint256).max);\n        emit RegisterAsset(underlyingToken, _transmuter);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setFlowRate(address underlyingToken, uint256 _flowRate)\n        external\n        override\n        onlyAdmin\n    {\n        _exchange(underlyingToken);\n\n        flowRate[underlyingToken] = _flowRate;\n        emit SetFlowRate(underlyingToken, _flowRate);\n    }\n\n    /// @inheritdoc IERC20TokenReceiver\n    function onERC20Received(address underlyingToken, uint256 amount)\n        external\n        override\n        onlySource\n    {\n        _updateFlow(underlyingToken);\n\n        // total amount of collateral that the buffer controls in the alchemist\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n\n        // if there is not enough locally buffered collateral to meet the flow rate, exchange only the exchanged amount\n        if (localBalance < flowAvailable[underlyingToken]) {\n            currentExchanged[underlyingToken] += amount;\n            ITransmuterV2(transmuter[underlyingToken]).exchange(amount);\n        } else {\n            uint256 exchangeable = flowAvailable[underlyingToken] - currentExchanged[underlyingToken];\n            currentExchanged[underlyingToken] += exchangeable;\n            ITransmuterV2(transmuter[underlyingToken]).exchange(exchangeable);\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function exchange(address underlyingToken) external override onlyKeeper {\n        _exchange(underlyingToken);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function withdraw(\n        address underlyingToken,\n        uint256 amount,\n        address recipient\n    ) external override onlyTransmuter(underlyingToken) {\n        if (amount > flowAvailable[underlyingToken]) {\n            revert IllegalArgument();\n        }\n\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        if (amount > localBalance) {\n            revert IllegalArgument();\n        }\n\n        flowAvailable[underlyingToken] -= amount;\n        currentExchanged[underlyingToken] -= amount;\n\n        TokenUtils.safeTransfer(underlyingToken, recipient, amount);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function withdrawFromAlchemist(\n        address yieldToken,\n        uint256 shares,\n        uint256 minimumAmountOut\n    ) external override onlyKeeper {\n        IAlchemistV2(alchemist).withdrawUnderlying(yieldToken, shares, address(this), minimumAmountOut);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function refreshStrategies() public override {\n        address[] memory supportedYieldTokens = IAlchemistV2(alchemist)\n            .getSupportedYieldTokens();\n        address[] memory supportedUnderlyingTokens = IAlchemistV2(alchemist)\n            .getSupportedUnderlyingTokens();\n\n        if (registeredUnderlyings.length != supportedUnderlyingTokens.length) {\n            revert IllegalState();\n        }\n\n        // clear current strats\n        for (uint256 j = 0; j < registeredUnderlyings.length; j++) {\n            delete _yieldTokens[registeredUnderlyings[j]];\n        }\n\n        uint256 numYTokens = supportedYieldTokens.length;\n        for (uint256 i = 0; i < numYTokens; i++) {\n            address yieldToken = supportedYieldTokens[i];\n\n            IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist)\n                .getYieldTokenParameters(yieldToken);\n            if (params.enabled) {\n                _yieldTokens[params.underlyingToken].push(yieldToken);\n            }\n        }\n        emit RefreshStrategies();\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function burnCredit() external override onlyKeeper {\n        IAlchemistV2(alchemist).poke(address(this));\n        uint256 credit = getTotalCredit();\n        if (credit == 0) {\n            revert IllegalState();\n        }\n        IAlchemistV2(alchemist).mint(credit, address(this));\n\n        _alchemistAction(credit, debtToken, _alchemistDonate);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function depositFunds(address underlyingToken, uint256 amount)\n        external\n        override\n        onlyKeeper\n    {\n        if (amount == 0) {\n            revert IllegalArgument();\n        }\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        if (localBalance < amount) {\n            revert IllegalArgument();\n        }\n        _updateFlow(underlyingToken);\n        \n        // Don't deposit exchanged funds into the Alchemist.\n        // Doing so puts those funds at risk, and could lead to users being unable to claim\n        // their transmuted funds in the event of a vault loss.\n        if (localBalance - amount < currentExchanged[underlyingToken]) {\n            revert IllegalState();\n        }\n        _alchemistAction(amount, underlyingToken, _alchemistDeposit);\n    }\n\n    /// @dev Gets the total value of the yield tokens in units of underlying tokens that this contract holds.\n    ///\n    /// @param yieldToken The address of the target yield token.\n    function _getTotalBuffered(address yieldToken)\n        internal\n        view\n        returns (uint256)\n    {\n        (uint256 balance, ) = IAlchemistV2(alchemist).positions(address(this), yieldToken);\n        IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist)\n            .getYieldTokenParameters(yieldToken);\n        uint256 tokensPerShare = IAlchemistV2(alchemist)\n            .getUnderlyingTokensPerShare(yieldToken);\n        return (balance * tokensPerShare) / 10**params.decimals;\n    }\n\n    /// @dev Updates the available flow for a give underlying token\n    ///\n    /// @param underlyingToken the underlying token whos flow is being updated\n    function _updateFlow(address underlyingToken) internal returns (uint256) {\n        // additional flow to be allocated based on flow rate\n        uint256 marginalFlow = (block.timestamp -\n            lastFlowrateUpdate[underlyingToken]) * flowRate[underlyingToken];\n        flowAvailable[underlyingToken] += marginalFlow;\n        lastFlowrateUpdate[underlyingToken] = block.timestamp;\n        return marginalFlow;\n    }\n\n    /// @notice Runs an action on the Alchemist according to a given weighting schema.\n    ///\n    /// This function gets a weighting schema defined under the `weightToken` key, and calls the target action\n    /// with a weighted value of `amount` and the associated token.\n    ///\n    /// @param amount       The amount of funds to use in the action.\n    /// @param weightToken  The key of the weighting schema to be used for the action.\n    /// @param action       The action to be taken.\n    function _alchemistAction(\n        uint256 amount,\n        address weightToken,\n        function(address, uint256) action\n    ) internal {\n        IAlchemistV2(alchemist).poke(address(this));\n\n        Weighting storage weighting = weightings[weightToken];\n        for (uint256 j = 0; j < weighting.tokens.length; j++) {\n            address token = weighting.tokens[j];\n            uint256 actionAmt = (amount * weighting.weights[token]) / weighting.totalWeight;\n            action(token, actionAmt);\n        }\n    }\n\n    /// @notice Donate credit weight to a target yield-token by burning debt-tokens.\n    ///\n    /// @param token    The target yield-token.\n    /// @param amount      The amount of debt-tokens to burn.\n    function _alchemistDonate(address token, uint256 amount) internal {\n        IAlchemistV2(alchemist).donate(token, amount);\n    }\n\n    /// @notice Deposits funds into the Alchemist.\n    ///\n    /// @param token  The yield-token to deposit.\n    /// @param amount The amount to deposit.\n    function _alchemistDeposit(address token, uint256 amount) internal {\n        IAlchemistV2(alchemist).depositUnderlying(\n            token,\n            amount,\n            address(this),\n            0\n        );\n    }\n\n    /// @notice Withdraws funds from the Alchemist.\n    ///\n    /// @param token            The yield-token to withdraw.\n    /// @param amountUnderlying The amount of underlying to withdraw.\n    function _alchemistWithdraw(address token, uint256 amountUnderlying) internal {\n        uint8 decimals = TokenUtils.expectDecimals(token);\n        uint256 pricePerShare = IAlchemistV2(alchemist).getUnderlyingTokensPerShare(token);\n        uint256 wantShares = amountUnderlying * 10**decimals / pricePerShare;\n        (uint256 availableShares, uint256 lastAccruedWeight) = IAlchemistV2(alchemist).positions(address(this), token);\n        if (wantShares > availableShares) {\n            wantShares = availableShares;\n        }\n        // Allow 1% slippage\n        uint256 minimumAmountOut = amountUnderlying - amountUnderlying * 100 / 10000;\n        if (wantShares > 0) {\n            IAlchemistV2(alchemist).withdrawUnderlying(token, wantShares, address(this), minimumAmountOut);\n        }\n    }\n\n    /// @notice Pull necessary funds from the Alchemist and exchange them.\n    ///\n    /// @param underlyingToken The underlying-token to exchange.\n    function _exchange(address underlyingToken) internal {\n        _updateFlow(underlyingToken);\n\n        uint256 totalUnderlyingBuffered = getTotalUnderlyingBuffered(underlyingToken);\n        uint256 initialLocalBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        uint256 want = 0;\n        // Here we assume the invariant underlyingToken.balanceOf(address(this)) >= currentExchanged[underlyingToken].\n        if (totalUnderlyingBuffered < flowAvailable[underlyingToken]) {\n            // Pull the rest of the funds from the Alchemist.\n            want = totalUnderlyingBuffered - initialLocalBalance;\n        } else if (initialLocalBalance < flowAvailable[underlyingToken]) {\n            // totalUnderlyingBuffered > flowAvailable so we have funds available to pull.\n            want = flowAvailable[underlyingToken] - initialLocalBalance;\n        }\n\n        if (want > 0) {\n            _alchemistAction(want, underlyingToken, _alchemistWithdraw);\n        }\n\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        uint256 exchangeDelta = 0;\n        if (localBalance > flowAvailable[underlyingToken]) {\n            exchangeDelta = flowAvailable[underlyingToken] - currentExchanged[underlyingToken];\n        } else {\n            exchangeDelta = localBalance - currentExchanged[underlyingToken];\n        }\n\n        if (exchangeDelta > 0) {\n            currentExchanged[underlyingToken] += exchangeDelta;\n            ITransmuterV2(transmuter[underlyingToken]).exchange(exchangeDelta);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/WETHGateway.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./base/Errors.sol\";\nimport \"./interfaces/IAlchemistV2.sol\";\nimport \"./interfaces/external/IWETH9.sol\";\nimport \"./interfaces/IWETHGateway.sol\";\nimport \"./interfaces/IWhitelist.sol\";\n\n/// @title  WETHGateway\n/// @author Alchemix Finance\ncontract WETHGateway is IWETHGateway, Ownable {\n    /// @notice The version.\n    string public constant version = \"2.1.0\";\n\n    /// @notice The wrapped ethereum contract.\n    IWETH9 public immutable WETH;\n\n    /// @notice The address of the whitelist contract.\n    address public whitelist;\n\n    constructor(address weth, address _whitelist) {\n        WETH = IWETH9(weth);\n        whitelist = _whitelist;\n    }\n\n    /// @dev Allows for payments from the WETH contract.\n    receive() external payable {\n        if (IWETH9(msg.sender) != WETH) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @inheritdoc IWETHGateway\n    function refreshAllowance(address alchemist) external onlyOwner {\n        WETH.approve(alchemist, type(uint256).max);\n    }\n\n    /// @inheritdoc IWETHGateway\n    function depositUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external payable {\n        _onlyWhitelisted();\n        if (amount != msg.value) {\n            revert IllegalArgument();\n        }\n        WETH.deposit{value: msg.value}();\n        IAlchemistV2(alchemist).depositUnderlying(yieldToken, amount, recipient, minimumAmountOut);\n    }\n\n    /// @inheritdoc IWETHGateway\n    function withdrawUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external {\n        _onlyWhitelisted();\n        // Ensure that the underlying of the target yield token is in fact WETH\n        IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        if (params.underlyingToken != address(WETH)) {\n            revert IllegalArgument();\n        }\n\n        IAlchemistV2(alchemist).withdrawUnderlyingFrom(msg.sender, yieldToken, shares, address(this), minimumAmountOut);\n\n        uint256 amount = WETH.balanceOf(address(this));\n        WETH.withdraw(amount);\n\n        (bool success, ) = recipient.call{value: amount}(new bytes(0));\n        if (!success) {\n            revert IllegalState();\n        }\n    }\n\n    /// @dev Checks the whitelist for msg.sender.\n    ///\n    /// Reverts if msg.sender is not in the whitelist.\n    function _onlyWhitelisted() internal view {\n        // Check if the message sender is an EOA. In the future, this potentially may break. It is important that functions\n        // which rely on the whitelist not be explicitly vulnerable in the situation where this no longer holds true.\n        if (tx.origin == msg.sender) {\n            return;\n        }\n\n        // Only check the whitelist for calls from contracts.\n        if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n            revert Unauthorized();\n        }\n    }\n}"
    },
    "contracts/interfaces/external/IWETH9.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../IERC20Minimal.sol\";\nimport \"../IERC20Metadata.sol\";\n\n/// @title IWETH9\ninterface IWETH9 is IERC20Minimal, IERC20Metadata {\n  /// @notice Deposits `msg.value` ethereum into the contract and mints `msg.value` tokens.\n  function deposit() external payable;\n\n  /// @notice Burns `amount` tokens to retrieve `amount` ethereum from the contract.\n  ///\n  /// @dev This version of WETH utilizes the `transfer` function which hard codes the amount of gas that is allowed\n  ///      to be utilized to be exactly 2300 when receiving ethereum.\n  ///\n  /// @param amount The amount of tokens to burn.\n  function withdraw(uint256 amount) external;\n}"
    },
    "contracts/interfaces/IWETHGateway.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IWETHGateway\n/// @author Alchemix Finance\ninterface IWETHGateway {\n    /// @notice Refreshes the wrapped ethereum ERC20 approval for an alchemist contract.\n    ///\n    /// @param alchemist The address of the alchemist to refresh the allowance for.\n    function refreshAllowance(address alchemist) external;\n\n    /// @notice Takes ethereum, converts it to wrapped ethereum, and then deposits it into an alchemist.\n    ///\n    /// See [IAlchemistV2Actions.depositUnderlying](./alchemist/IAlchemistV2Actions.md#depositunderlying) for more details.\n    ///\n    /// @param alchemist        The address of the alchemist to deposit wrapped ethereum into.\n    /// @param yieldToken       The yield token to deposit the wrapped ethereum as.\n    /// @param amount           The amount of ethereum to deposit.\n    /// @param recipient        The address which will receive the deposited yield tokens.\n    /// @param minimumAmountOut The minimum amount of yield tokens that are expected to be deposited to `recipient`.\n    function depositUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external payable;\n\n    /// @notice Withdraws a wrapped ethereum based yield token from an alchemist, converts it to ethereum, and then\n    ///         transfers it to the recipient.\n    ///\n    /// A withdraw approval on the alchemist is required for this call to succeed.\n    ///\n    /// See [IAlchemistV2Actions.withdrawUnderlying](./alchemist/IAlchemistV2Actions.md#withdrawunderlying) for more details.\n    ///\n    /// @param alchemist        The address of the alchemist to withdraw wrapped ethereum from.\n    /// @param yieldToken       The address of the yield token to withdraw.\n    /// @param shares           The amount of shares to withdraw.\n    /// @param recipient        The address which will receive the ethereum.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    function withdrawUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external;\n}"
    },
    "contracts/utils/Whitelist.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../base/Errors.sol\";\nimport \"../interfaces/IWhitelist.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libraries/Sets.sol\";\n\n/// @title  Whitelist\n/// @author Alchemix Finance\ncontract Whitelist is IWhitelist, Ownable {\n  using Sets for Sets.AddressSet;\n  Sets.AddressSet addresses;\n\n  /// @inheritdoc IWhitelist\n  bool public override disabled;\n\n  constructor() Ownable() {}\n\n  /// @inheritdoc IWhitelist\n  function getAddresses() external view returns (address[] memory) {\n    return addresses.values;\n  }\n\n  /// @inheritdoc IWhitelist\n  function add(address caller) external override {\n    _onlyAdmin();\n    if (disabled) {\n      revert IllegalState();\n    }\n    addresses.add(caller);\n    emit AccountAdded(caller);\n  }\n\n  /// @inheritdoc IWhitelist\n  function remove(address caller) external override {\n    _onlyAdmin();\n    if (disabled) {\n      revert IllegalState();\n    }\n    addresses.remove(caller);\n    emit AccountRemoved(caller);\n  }\n\n  /// @inheritdoc IWhitelist\n  function disable() external override {\n    _onlyAdmin();\n    disabled = true;\n    emit WhitelistDisabled();\n  }\n\n  /// @inheritdoc IWhitelist\n  function isWhitelisted(address account) external view override returns (bool) {\n    return disabled || addresses.contains(account);\n  }\n\n  /// @dev Reverts if the caller is not the contract owner.\n  function _onlyAdmin() internal view {\n    if (msg.sender != owner()) {\n      revert Unauthorized();\n    }\n  }\n}\n"
    },
    "contracts/test/TestSets.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../libraries/Sets.sol\";\n\ncontract TestSets {\n    using Sets for Sets.AddressSet;\n\n    Sets.AddressSet private testAddys;\n\n    constructor() {\n\n    }\n\n    function add(address val) external {\n        require(testAddys.add(val), \"failed to add\");\n    }\n\n    function remove(address val) external {\n        require(testAddys.remove(val), \"failed to remove\");\n    }\n\n    function contains(address val) external view returns (bool) {\n        return testAddys.contains(val);\n    }\n}"
    },
    "contracts/AlchemistV2.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {Unauthorized, IllegalState, IllegalArgument} from \"./base/Errors.sol\";\n\nimport \"./base/Multicall.sol\";\nimport \"./base/Mutex.sol\";\n\nimport \"./interfaces/IAlchemistV2.sol\";\nimport \"./interfaces/IERC20Minimal.sol\";\nimport \"./interfaces/IERC20TokenReceiver.sol\";\nimport \"./interfaces/ITokenAdapter.sol\";\nimport \"./interfaces/IAlchemicToken.sol\";\nimport \"./interfaces/IWhitelist.sol\";\n\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/Sets.sol\";\nimport \"./libraries/TokenUtils.sol\";\nimport \"./libraries/Limiters.sol\";\n\n/// @title  AlchemistV2\n/// @author Alchemix Finance\ncontract AlchemistV2 is IAlchemistV2, Initializable, Multicall, Mutex {\n    using Limiters for Limiters.LinearGrowthLimiter;\n    using Sets for Sets.AddressSet;\n\n    /// @notice A user account.\n    struct Account {\n        // A signed value which represents the current amount of debt or credit that the account has accrued.\n        // Positive values indicate debt, negative values indicate credit.\n        int256 debt;\n        // The share balances for each yield token.\n        mapping(address => uint256) balances;\n        // The last values recorded for accrued weights for each yield token.\n        mapping(address => uint256) lastAccruedWeights;\n        // The set of yield tokens that the account has deposited into the system.\n        Sets.AddressSet depositedTokens;\n        // The allowances for mints.\n        mapping(address => uint256) mintAllowances;\n        // The allowances for withdrawals.\n        mapping(address => mapping(address => uint256)) withdrawAllowances;\n    }\n\n    /// @notice The number of basis points there are to represent exactly 100%.\n    uint256 public constant BPS = 10000;\n\n    /// @notice The scalar used for conversion of integral numbers to fixed point numbers. Fixed point numbers in this\n    ///         implementation have 18 decimals of resolution, meaning that 1 is represented as 1e18, 0.5 is\n    ///         represented as 5e17, and 2 is represented as 2e18.\n    uint256 public constant FIXED_POINT_SCALAR = 1e18;\n\n    /// @inheritdoc IAlchemistV2Immutables\n    string public constant override version = \"2.2.5\";\n\n    /// @inheritdoc IAlchemistV2Immutables\n    address public override debtToken;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override admin;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override pendingAdmin;\n\n    /// @inheritdoc IAlchemistV2State\n    mapping(address => bool) public override sentinels;\n\n    /// @inheritdoc IAlchemistV2State\n    mapping(address => bool) public override keepers;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override transmuter;\n\n    /// @inheritdoc IAlchemistV2State\n    uint256 public override minimumCollateralization;\n\n    /// @inheritdoc IAlchemistV2State\n    uint256 public override protocolFee;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override protocolFeeReceiver;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override whitelist;\n\n    /// @dev A linear growth function that limits the amount of debt-token minted.\n    Limiters.LinearGrowthLimiter private _mintingLimiter;\n\n    // @dev The repay limiters for each underlying token.\n    mapping(address => Limiters.LinearGrowthLimiter) private _repayLimiters;\n\n    // @dev The liquidation limiters for each underlying token.\n    mapping(address => Limiters.LinearGrowthLimiter) private _liquidationLimiters;\n\n    /// @dev Accounts mapped by the address that owns them.\n    mapping(address => Account) private _accounts;\n\n    /// @dev Underlying token parameters mapped by token address.\n    mapping(address => UnderlyingTokenParams) private _underlyingTokens;\n\n    /// @dev Yield token parameters mapped by token address.\n    mapping(address => YieldTokenParams) private _yieldTokens;\n\n    /// @dev An iterable set of the underlying tokens that are supported by the system.\n    Sets.AddressSet private _supportedUnderlyingTokens;\n\n    /// @dev An iterable set of the yield tokens that are supported by the system.\n    Sets.AddressSet private _supportedYieldTokens;\n\n    constructor() initializer {}\n\n    /// @inheritdoc IAlchemistV2State\n    function getYieldTokensPerShare(address yieldToken) external view override returns (uint256) {\n        return _convertSharesToYieldTokens(yieldToken, 10**_yieldTokens[yieldToken].decimals);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getUnderlyingTokensPerShare(address yieldToken) external view override returns (uint256) {\n        return _convertSharesToUnderlyingTokens(yieldToken, 10**_yieldTokens[yieldToken].decimals);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getSupportedUnderlyingTokens() external view override returns (address[] memory) {\n        return _supportedUnderlyingTokens.values;\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getSupportedYieldTokens() external view override returns (address[] memory) {\n        return _supportedYieldTokens.values;\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function isSupportedUnderlyingToken(address underlyingToken) external view override returns (bool) {\n        return _supportedUnderlyingTokens.contains(underlyingToken);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function isSupportedYieldToken(address yieldToken) external view override returns (bool) {\n        return _supportedYieldTokens.contains(yieldToken);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function accounts(address owner)\n        external view override\n        returns (\n            int256 debt,\n            address[] memory depositedTokens\n        )\n    {\n        Account storage account = _accounts[owner];\n\n        return (\n            _calculateUnrealizedDebt(owner),\n            account.depositedTokens.values\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function positions(address owner, address yieldToken)\n        external view override\n        returns (\n            uint256 shares,\n            uint256 lastAccruedWeight\n        )\n    {\n        Account storage account = _accounts[owner];\n        return (account.balances[yieldToken], account.lastAccruedWeights[yieldToken]);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function mintAllowance(address owner, address spender)\n        external view override\n        returns (uint256)\n    {\n        Account storage account = _accounts[owner];\n        return account.mintAllowances[spender];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function withdrawAllowance(address owner, address spender, address yieldToken)\n        external view override\n        returns (uint256)\n    {\n        Account storage account = _accounts[owner];\n        return account.withdrawAllowances[spender][yieldToken];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getUnderlyingTokenParameters(address underlyingToken)\n        external view override\n        returns (UnderlyingTokenParams memory)\n    {\n        return _underlyingTokens[underlyingToken];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getYieldTokenParameters(address yieldToken)\n        external view override\n        returns (YieldTokenParams memory)\n    {\n        return _yieldTokens[yieldToken];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getMintLimitInfo()\n        external view override\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        )\n    {\n        return (\n            _mintingLimiter.get(),\n            _mintingLimiter.rate,\n            _mintingLimiter.maximum\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getRepayLimitInfo(address underlyingToken)\n        external view override\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        )\n    {\n        Limiters.LinearGrowthLimiter storage limiter = _repayLimiters[underlyingToken];\n        return (\n            limiter.get(),\n            limiter.rate,\n            limiter.maximum\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getLiquidationLimitInfo(address underlyingToken)\n        external view override\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        )\n    {\n        Limiters.LinearGrowthLimiter storage limiter = _liquidationLimiters[underlyingToken];\n        return (\n            limiter.get(),\n            limiter.rate,\n            limiter.maximum\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function initialize(InitializationParams memory params) external initializer {\n        _checkArgument(params.protocolFee <= BPS);\n\n        debtToken                = params.debtToken;\n        admin                    = params.admin;\n        transmuter               = params.transmuter;\n        minimumCollateralization = params.minimumCollateralization;\n        protocolFee              = params.protocolFee;\n        protocolFeeReceiver      = params.protocolFeeReceiver;\n        whitelist                = params.whitelist;\n\n        _mintingLimiter = Limiters.createLinearGrowthLimiter(\n            params.mintingLimitMaximum,\n            params.mintingLimitBlocks,\n            params.mintingLimitMinimum\n        );\n\n        emit AdminUpdated(admin);\n        emit TransmuterUpdated(transmuter);\n        emit MinimumCollateralizationUpdated(minimumCollateralization);\n        emit ProtocolFeeUpdated(protocolFee);\n        emit ProtocolFeeReceiverUpdated(protocolFeeReceiver);\n        emit MintingLimitUpdated(params.mintingLimitMaximum, params.mintingLimitBlocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setPendingAdmin(address value) external override {\n        _onlyAdmin();\n        pendingAdmin = value;\n        emit PendingAdminUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function acceptAdmin() external override {\n        _checkState(pendingAdmin != address(0));\n\n        if (msg.sender != pendingAdmin) {\n            revert Unauthorized();\n        }\n\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n\n        emit AdminUpdated(admin);\n        emit PendingAdminUpdated(address(0));\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setSentinel(address sentinel, bool flag) external override {\n        _onlyAdmin();\n        sentinels[sentinel] = flag;\n        emit SentinelSet(sentinel, flag);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setKeeper(address keeper, bool flag) external override {\n        _onlyAdmin();\n        keepers[keeper] = flag;\n        emit KeeperSet(keeper, flag);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function addUnderlyingToken(address underlyingToken, UnderlyingTokenConfig calldata config) external override lock {\n        _onlyAdmin();\n        _checkState(!_supportedUnderlyingTokens.contains(underlyingToken));\n\n        uint8 tokenDecimals = TokenUtils.expectDecimals(underlyingToken);\n        uint8 debtTokenDecimals = TokenUtils.expectDecimals(debtToken);\n\n        _checkArgument(tokenDecimals <= debtTokenDecimals);\n\n        _underlyingTokens[underlyingToken] = UnderlyingTokenParams({\n            decimals:         tokenDecimals,\n            conversionFactor: 10**(debtTokenDecimals - tokenDecimals),\n            enabled:          false\n        });\n\n        _repayLimiters[underlyingToken] = Limiters.createLinearGrowthLimiter(\n            config.repayLimitMaximum,\n            config.repayLimitBlocks,\n            config.repayLimitMinimum\n        );\n\n        _liquidationLimiters[underlyingToken] = Limiters.createLinearGrowthLimiter(\n            config.liquidationLimitMaximum,\n            config.liquidationLimitBlocks,\n            config.liquidationLimitMinimum\n        );\n\n        _supportedUnderlyingTokens.add(underlyingToken);\n\n        emit AddUnderlyingToken(underlyingToken);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function addYieldToken(address yieldToken, YieldTokenConfig calldata config) external override lock {\n        _onlyAdmin();\n        _checkArgument(config.maximumLoss <= BPS);\n        _checkArgument(config.creditUnlockBlocks > 0);\n\n        _checkState(!_supportedYieldTokens.contains(yieldToken));\n\n        ITokenAdapter adapter = ITokenAdapter(config.adapter);\n\n        _checkState(yieldToken == adapter.token());\n        _checkSupportedUnderlyingToken(adapter.underlyingToken());\n\n        _yieldTokens[yieldToken] = YieldTokenParams({\n            decimals:              TokenUtils.expectDecimals(yieldToken),\n            underlyingToken:       adapter.underlyingToken(),\n            adapter:               config.adapter,\n            maximumLoss:           config.maximumLoss,\n            maximumExpectedValue:  config.maximumExpectedValue,\n            creditUnlockRate:      FIXED_POINT_SCALAR / config.creditUnlockBlocks,\n            activeBalance:         0,\n            harvestableBalance:    0,\n            totalShares:           0,\n            expectedValue:         0,\n            accruedWeight:         0,\n            pendingCredit:         0,\n            distributedCredit:     0,\n            lastDistributionBlock: 0,\n            enabled:               false\n        });\n\n        _supportedYieldTokens.add(yieldToken);\n\n        TokenUtils.safeApprove(yieldToken, config.adapter, type(uint256).max);\n        TokenUtils.safeApprove(adapter.underlyingToken(), config.adapter, type(uint256).max);\n\n        emit AddYieldToken(yieldToken);\n        emit TokenAdapterUpdated(yieldToken, config.adapter);\n        emit MaximumLossUpdated(yieldToken, config.maximumLoss);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setUnderlyingTokenEnabled(address underlyingToken, bool enabled) external override {\n        _onlySentinelOrAdmin();\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _underlyingTokens[underlyingToken].enabled = enabled;\n        emit UnderlyingTokenEnabled(underlyingToken, enabled);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setYieldTokenEnabled(address yieldToken, bool enabled) external override {\n        _onlySentinelOrAdmin();\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].enabled = enabled;\n        emit YieldTokenEnabled(yieldToken, enabled);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureRepayLimit(address underlyingToken, uint256 maximum, uint256 blocks) external override {\n        _onlyAdmin();\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _repayLimiters[underlyingToken].update();\n        _repayLimiters[underlyingToken].configure(maximum, blocks);\n        emit RepayLimitUpdated(underlyingToken, maximum, blocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureLiquidationLimit(address underlyingToken, uint256 maximum, uint256 blocks) external override {\n        _onlyAdmin();\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _liquidationLimiters[underlyingToken].update();\n        _liquidationLimiters[underlyingToken].configure(maximum, blocks);\n        emit LiquidationLimitUpdated(underlyingToken, maximum, blocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setTransmuter(address value) external override {\n        _onlyAdmin();\n        _checkArgument(value != address(0));\n        transmuter = value;\n        emit TransmuterUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setMinimumCollateralization(uint256 value) external override {\n        _onlyAdmin();\n        minimumCollateralization = value;\n        emit MinimumCollateralizationUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setProtocolFee(uint256 value) external override {\n        _onlyAdmin();\n        _checkArgument(value <= BPS);\n        protocolFee = value;\n        emit ProtocolFeeUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setProtocolFeeReceiver(address value) external override {\n        _onlyAdmin();\n        _checkArgument(value != address(0));\n        protocolFeeReceiver = value;\n        emit ProtocolFeeReceiverUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureMintingLimit(uint256 maximum, uint256 rate) external override {\n        _onlyAdmin();\n        _mintingLimiter.update();\n        _mintingLimiter.configure(maximum, rate);\n        emit MintingLimitUpdated(maximum, rate);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureCreditUnlockRate(address yieldToken, uint256 blocks) external override {\n        _onlyAdmin();\n        _checkArgument(blocks > 0);\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].creditUnlockRate = FIXED_POINT_SCALAR / blocks;\n        emit CreditUnlockRateUpdated(yieldToken, blocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setTokenAdapter(address yieldToken, address adapter) external override {\n        _onlyAdmin();\n        _checkState(yieldToken == ITokenAdapter(adapter).token());\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].adapter = adapter;\n        TokenUtils.safeApprove(yieldToken, adapter, type(uint256).max);\n        TokenUtils.safeApprove(ITokenAdapter(adapter).underlyingToken(), adapter, type(uint256).max);\n        emit TokenAdapterUpdated(yieldToken, adapter);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setMaximumExpectedValue(address yieldToken, uint256 value) external override {\n        _onlyAdmin();\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].maximumExpectedValue = value;\n        emit MaximumExpectedValueUpdated(yieldToken, value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setMaximumLoss(address yieldToken, uint256 value) external override {\n        _onlyAdmin();\n        _checkArgument(value <= BPS);\n        _checkSupportedYieldToken(yieldToken);\n\n        _yieldTokens[yieldToken].maximumLoss = value;\n\n        emit MaximumLossUpdated(yieldToken, value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function snap(address yieldToken) external override lock {\n        _onlyAdmin();\n        _checkSupportedYieldToken(yieldToken);\n\n        uint256 expectedValue = _convertYieldTokensToUnderlying(yieldToken, _yieldTokens[yieldToken].activeBalance);\n\n        _yieldTokens[yieldToken].expectedValue = expectedValue;\n\n        emit Snap(yieldToken, expectedValue);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function approveMint(address spender, uint256 amount) external override {\n        _onlyWhitelisted();\n        _approveMint(msg.sender, spender, amount);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function approveWithdraw(address spender, address yieldToken, uint256 shares) external override {\n        _onlyWhitelisted();\n        _checkSupportedYieldToken(yieldToken);\n        _approveWithdraw(msg.sender, spender, yieldToken, shares);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function poke(address owner) external override lock {\n        _onlyWhitelisted();\n        _preemptivelyHarvestDeposited(owner);\n        _distributeUnlockedCreditDeposited(owner);\n        _poke(owner);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Deposit the yield tokens to the recipient.\n        uint256 shares = _deposit(yieldToken, amount, recipient);\n\n        // Transfer tokens from the message sender now that the internal storage updates have been committed.\n        TokenUtils.safeTransferFrom(yieldToken, msg.sender, address(this), amount);\n\n        return shares;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function depositUnderlying(\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Before depositing, the underlying tokens must be wrapped into yield tokens.\n        uint256 amountYieldTokens = _wrap(yieldToken, amount, minimumAmountOut);\n\n        // Deposit the yield-tokens to the recipient.\n        return _deposit(yieldToken, amountYieldTokens, recipient);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdraw(\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Withdraw the shares from the system.\n        uint256 amountYieldTokens = _withdraw(yieldToken, msg.sender, shares, recipient);\n\n        // Transfer the yield tokens to the recipient.\n        TokenUtils.safeTransfer(yieldToken, recipient, amountYieldTokens);\n\n        return amountYieldTokens;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdrawFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Preemptively try and decrease the withdrawal allowance. This will save gas when the allowance is not\n        // sufficient for the withdrawal.\n        _decreaseWithdrawAllowance(owner, msg.sender, yieldToken, shares);\n\n        // Withdraw the shares from the system.\n        uint256 amountYieldTokens = _withdraw(yieldToken, owner, shares, recipient);\n\n        // Transfer the yield tokens to the recipient.\n        TokenUtils.safeTransfer(yieldToken, recipient, amountYieldTokens);\n\n        return amountYieldTokens;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdrawUnderlying(\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(recipient != address(0));\n\n        _checkSupportedYieldToken(yieldToken);\n\n        _checkLoss(yieldToken);\n\n        uint256 amountYieldTokens = _withdraw(yieldToken, msg.sender, shares, recipient);\n\n        return _unwrap(yieldToken, amountYieldTokens, recipient, minimumAmountOut);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdrawUnderlyingFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(recipient != address(0));\n\n        _checkSupportedYieldToken(yieldToken);\n\n        _checkLoss(yieldToken);\n\n        _decreaseWithdrawAllowance(owner, msg.sender, yieldToken, shares);\n\n        uint256 amountYieldTokens = _withdraw(yieldToken, owner, shares, recipient);\n\n        return _unwrap(yieldToken, amountYieldTokens, recipient, minimumAmountOut);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function mint(uint256 amount, address recipient) external override lock {\n        _onlyWhitelisted();\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        // Mint tokens from the message sender's account to the recipient.\n        _mint(msg.sender, amount, recipient);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function mintFrom(\n        address owner,\n        uint256 amount,\n        address recipient\n    ) external override lock {\n        _onlyWhitelisted();\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        // Preemptively try and decrease the minting allowance. This will save gas when the allowance is not sufficient\n        // for the mint.\n        _decreaseMintAllowance(owner, msg.sender, amount);\n\n        // Mint tokens from the owner's account to the recipient.\n        _mint(owner, amount, recipient);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function burn(uint256 amount, address recipient) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(recipient);\n\n        // Update the recipient's account, decrease the debt of the recipient by the number of tokens burned.\n        _poke(recipient);\n\n        // Check that the debt is greater than zero.\n        //\n        // It is possible that the number of debt which is repayable is equal to or less than zero after realizing the\n        // credit that was earned since the last update. We do not want to perform a noop so we need to check that the\n        // amount of debt to repay is greater than zero.\n        int256 debt;\n        _checkState((debt = _accounts[recipient].debt) > 0);\n\n        // Limit how much debt can be repaid up to the current amount of debt that the account has. This prevents\n        // situations where the user may be trying to repay their entire debt, but it decreases since they send the\n        // transaction and causes a revert because burning can never decrease the debt below zero.\n        //\n        // Casts here are safe because it is asserted that debt is greater than zero.\n        uint256 credit = amount > uint256(debt) ? uint256(debt) : amount;\n\n        // Update the recipient's debt.\n        _updateDebt(recipient, -SafeCast.toInt256(credit));\n\n        // Burn the tokens from the message sender.\n        TokenUtils.safeBurnFrom(debtToken, msg.sender, credit);\n\n        emit Burn(msg.sender, credit, recipient);\n\n        return credit;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function repay(address underlyingToken, uint256 amount, address recipient) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _checkUnderlyingTokenEnabled(underlyingToken);\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(recipient);\n\n        // Update the recipient's account and decrease the amount of debt incurred.\n        _poke(recipient);\n\n        // Check that the debt is greater than zero.\n        //\n        // It is possible that the amount of debt which is repayable is equal to or less than zero after realizing the\n        // credit that was earned since the last update. We do not want to perform a noop so we need to check that the\n        // amount of debt to repay is greater than zero.\n        int256 debt;\n        _checkState((debt = _accounts[recipient].debt) > 0);\n\n        // Determine the maximum amount of underlying tokens that can be repaid.\n        //\n        // It is implied that this value is greater than zero because `debt` is greater than zero so a noop is not possible\n        // beyond this point. Casting the debt to an unsigned integer is also safe because `debt` is greater than zero.\n        uint256 maximumAmount = _normalizeDebtTokensToUnderlying(underlyingToken, uint256(debt));\n\n        // Limit the number of underlying tokens to repay up to the maximum allowed.\n        uint256 actualAmount = amount > maximumAmount ? maximumAmount : amount;\n\n        Limiters.LinearGrowthLimiter storage limiter = _repayLimiters[underlyingToken];\n\n        // Check to make sure that the underlying token repay limit has not been breached.\n        uint256 currentRepayLimit = limiter.get();\n        if (actualAmount > currentRepayLimit) {\n          revert RepayLimitExceeded(underlyingToken, actualAmount, currentRepayLimit);\n        }\n\n        uint256 credit = _normalizeUnderlyingTokensToDebt(underlyingToken, actualAmount);\n\n        // Update the recipient's debt.\n        _updateDebt(recipient, -SafeCast.toInt256(credit));\n\n        // Decrease the amount of the underlying token which is globally available to be repaid.\n        limiter.decrease(actualAmount);\n\n        // Transfer the repaid tokens to the transmuter.\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, transmuter, actualAmount);\n\n        // Inform the transmuter that it has received tokens.\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, actualAmount);\n\n        emit Repay(msg.sender, underlyingToken, actualAmount, recipient);\n\n        return actualAmount;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function liquidate(\n        address yieldToken,\n        uint256 shares,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(shares > 0);\n\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        address underlyingToken = yieldTokenParams.underlyingToken;\n\n        _checkSupportedYieldToken(yieldToken);\n        _checkYieldTokenEnabled(yieldToken);\n        _checkUnderlyingTokenEnabled(underlyingToken);\n        _checkLoss(yieldToken);\n\n        // Calculate the unrealized debt.\n        //\n        // It is possible that the number of debt which is repayable is equal to or less than zero after realizing the\n        // credit that was earned since the last update. We do not want to perform a noop so we need to check that the\n        // amount of debt to repay is greater than zero.\n        int256 unrealizedDebt;\n        _checkState((unrealizedDebt = _calculateUnrealizedDebt(msg.sender)) > 0);\n\n        // Determine the maximum amount of shares that can be liquidated from the unrealized debt.\n        //\n        // It is implied that this value is greater than zero because `debt` is greater than zero. Casting the debt to an\n        // unsigned integer is also safe for this reason.\n        uint256 maximumShares = _convertUnderlyingTokensToShares(\n          yieldToken,\n          _normalizeDebtTokensToUnderlying(underlyingToken, uint256(unrealizedDebt))\n        );\n\n        // Limit the number of shares to liquidate up to the maximum allowed.\n        uint256 actualShares = shares > maximumShares ? maximumShares : shares;\n\n        // Unwrap the yield tokens that the shares are worth.\n        uint256 amountYieldTokens      = _convertSharesToUnderlyingTokens(yieldToken, actualShares);\n        uint256 amountUnderlyingTokens = _unwrap(yieldToken, amountYieldTokens, address(this), minimumAmountOut);\n\n        // Again, perform another noop check. It is possible that the amount of underlying tokens that were received by\n        // unwrapping the yield tokens was zero because the amount of yield tokens to unwrap was too small.\n        _checkState(amountUnderlyingTokens > 0);\n\n        Limiters.LinearGrowthLimiter storage limiter = _liquidationLimiters[underlyingToken];\n\n        // Check to make sure that the underlying token liquidation limit has not been breached.\n        uint256 liquidationLimit = limiter.get();\n        if (amountUnderlyingTokens > liquidationLimit) {\n          revert LiquidationLimitExceeded(underlyingToken, amountUnderlyingTokens, liquidationLimit);\n        }\n\n        // Buffers any harvestable yield tokens. This will properly synchronize the balance which is held by users\n        // and the balance which is held by the system. This is required for `_sync` to function correctly.\n        _preemptivelyHarvest(yieldToken);\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(msg.sender);\n\n        uint256 credit = _normalizeUnderlyingTokensToDebt(underlyingToken, amountUnderlyingTokens);\n\n        // Update the message sender's account, proactively burn shares, decrease the amount of debt incurred, and then\n        // decrease the value of the token that the system is expected to hold.\n        _poke(msg.sender, yieldToken);\n        _burnShares(msg.sender, yieldToken, actualShares);\n        _updateDebt(msg.sender, -SafeCast.toInt256(credit));\n        _sync(yieldToken, amountYieldTokens, _usub);\n\n        // Decrease the amount of the underlying token which is globally available to be liquidated.\n        limiter.decrease(amountUnderlyingTokens);\n\n        // Transfer the liquidated tokens to the transmuter.\n        TokenUtils.safeTransfer(underlyingToken, transmuter, amountUnderlyingTokens);\n\n        // Inform the transmuter that it has received tokens.\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, amountUnderlyingTokens);\n\n        emit Liquidate(msg.sender, yieldToken, underlyingToken, actualShares);\n\n        return actualShares;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function donate(address yieldToken, uint256 amount) external override lock {\n        _onlyWhitelisted();\n        _checkArgument(amount != 0);\n\n        // Distribute any unlocked credit so that the accrued weight is up to date.\n        _distributeUnlockedCredit(yieldToken);\n\n        // Update the message sender's account. This will assure that any credit that was earned is not overridden.\n        _poke(msg.sender);\n\n        uint256 shares = _yieldTokens[yieldToken].totalShares - _accounts[msg.sender].balances[yieldToken];\n\n        _yieldTokens[yieldToken].accruedWeight += amount * FIXED_POINT_SCALAR / shares;\n        _accounts[msg.sender].lastAccruedWeights[yieldToken] = _yieldTokens[yieldToken].accruedWeight;\n\n        TokenUtils.safeBurnFrom(debtToken, msg.sender, amount);\n\n        emit Donate(msg.sender, yieldToken, amount);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function harvest(address yieldToken, uint256 minimumAmountOut) external override lock {\n        _onlyKeeper();\n        _checkSupportedYieldToken(yieldToken);\n\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        // Buffer any harvestable yield tokens. This will properly synchronize the balance which is held by users\n        // and the balance which is held by the system to be harvested during this call.\n        _preemptivelyHarvest(yieldToken);\n\n        // Load and proactively clear the amount of harvestable tokens so that future calls do not rely on stale data.\n        // Because we cannot call an external unwrap until the amount of harvestable tokens has been calculated,\n        // clearing this data immediately prevents any potential reentrancy attacks which would use stale harvest\n        // buffer values.\n        uint256 harvestableAmount = yieldTokenParams.harvestableBalance;\n        yieldTokenParams.harvestableBalance = 0;\n\n        // Check that the harvest will not be a no-op.\n        _checkState(harvestableAmount != 0);\n\n        address underlyingToken = yieldTokenParams.underlyingToken;\n        uint256 amountUnderlyingTokens = _unwrap(yieldToken, harvestableAmount, address(this), minimumAmountOut);\n\n        // Calculate how much of the unwrapped underlying tokens will be allocated for fees and distributed to users.\n        uint256 feeAmount = amountUnderlyingTokens * protocolFee / BPS;\n        uint256 distributeAmount = amountUnderlyingTokens - feeAmount;\n\n        uint256 credit = _normalizeUnderlyingTokensToDebt(underlyingToken, distributeAmount);\n\n        // Distribute credit to all of the users who hold shares of the yield token.\n        _distributeCredit(yieldToken, credit);\n\n        // Transfer the tokens to the fee receiver and transmuter.\n        TokenUtils.safeTransfer(underlyingToken, protocolFeeReceiver, feeAmount);\n        TokenUtils.safeTransfer(underlyingToken, transmuter, distributeAmount);\n\n        // Inform the transmuter that it has received tokens.\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, distributeAmount);\n\n        emit Harvest(yieldToken, minimumAmountOut, amountUnderlyingTokens);\n    }\n\n    /// @dev Checks that the `msg.sender` is the administrator.\n    ///\n    /// @dev `msg.sender` must be the administrator or this call will revert with an {Unauthorized} error.\n    function _onlyAdmin() internal view {\n        if (msg.sender != admin) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks that the `msg.sender` is the administrator or a sentinel.\n    ///\n    /// @dev `msg.sender` must be either the administrator or a sentinel or this call will revert with an\n    ///      {Unauthorized} error.\n    function _onlySentinelOrAdmin() internal view {\n        // Check if the message sender is the administrator.\n        if (msg.sender == admin) {\n            return;\n        }\n\n        // Check if the message sender is a sentinel. After this check we can revert since we know that it is neither\n        // the administrator or a sentinel.\n        if (!sentinels[msg.sender]) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks that the `msg.sender` is a keeper.\n    ///\n    /// @dev `msg.sender` must be a keeper or this call will revert with an {Unauthorized} error.\n    function _onlyKeeper() internal view {\n        if (!keepers[msg.sender]) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Preemptively harvests all of the yield tokens that have been deposited into an account.\n    ///\n    /// @param owner The address which owns the account.\n    function _preemptivelyHarvestDeposited(address owner) internal {\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n            _preemptivelyHarvest(depositedTokens.values[i]);\n        }\n    }\n\n    /// @dev Preemptively harvests `yieldToken`.\n    ///\n    /// @dev This will earmark yield tokens to be harvested at a future time when the current value of the token is\n    ///      greater than the expected value. The purpose of this function is to synchronize the balance of the yield\n    ///      token which is held by users versus tokens which will be seized by the protocol.\n    ///\n    /// @param yieldToken The address of the yield token to preemptively harvest.\n    function _preemptivelyHarvest(address yieldToken) internal {\n        uint256 activeBalance = _yieldTokens[yieldToken].activeBalance;\n        if (activeBalance == 0) {\n            return;\n        }\n\n        uint256 currentValue = _convertYieldTokensToUnderlying(yieldToken, activeBalance);\n        uint256 expectedValue = _yieldTokens[yieldToken].expectedValue;\n        if (currentValue <= expectedValue) {\n            return;\n        }\n\n        uint256 harvestable = _convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue);\n        if (harvestable == 0) {\n            return;\n        }\n        _yieldTokens[yieldToken].activeBalance -= harvestable;\n        _yieldTokens[yieldToken].harvestableBalance += harvestable;\n    }\n\n    /// @dev Checks if a yield token is enabled.\n    ///\n    /// @param yieldToken The address of the yield token.\n    function _checkYieldTokenEnabled(address yieldToken) internal view {\n        if (!_yieldTokens[yieldToken].enabled) {\n          revert TokenDisabled(yieldToken);\n        }\n    }\n\n    /// @dev Checks if an underlying token is enabled.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    function _checkUnderlyingTokenEnabled(address underlyingToken) internal view {\n        if (!_underlyingTokens[underlyingToken].enabled) {\n          revert TokenDisabled(underlyingToken);\n        }\n    }\n\n    /// @dev Checks if an address is a supported yield token.\n    ///\n    /// If the address is not a supported yield token, this function will revert using a {UnsupportedToken} error.\n    ///\n    /// @param yieldToken The address to check.\n    function _checkSupportedYieldToken(address yieldToken) internal view {\n        if (!_supportedYieldTokens.contains(yieldToken)) {\n            revert UnsupportedToken(yieldToken);\n        }\n    }\n\n    /// @dev Checks if an address is a supported underlying token.\n    ///\n    /// If the address is not a supported yield token, this function will revert using a {UnsupportedToken} error.\n    ///\n    /// @param underlyingToken The address to check.\n    function _checkSupportedUnderlyingToken(address underlyingToken) internal view {\n        if (!_supportedUnderlyingTokens.contains(underlyingToken)) {\n            revert UnsupportedToken(underlyingToken);\n        }\n    }\n\n    /// @dev Checks if `amount` of debt tokens can be minted.\n    ///\n    /// @dev `amount` must be less than the current minting limit or this call will revert with a\n    ///      {MintingLimitExceeded} error.\n    ///\n    /// @param amount The amount to check.\n    function _checkMintingLimit(uint256 amount) internal view {\n        uint256 limit = _mintingLimiter.get();\n        if (amount > limit) {\n            revert MintingLimitExceeded(amount, limit);\n        }\n    }\n\n    /// @dev Checks if the current loss of `yieldToken` has exceeded its maximum acceptable loss.\n    ///\n    /// @dev The loss that `yieldToken` has incurred must be less than its maximum accepted value or this call will\n    ///      revert with a {LossExceeded} error.\n    ///\n    /// @param yieldToken The address of the yield token.\n    function _checkLoss(address yieldToken) internal view {\n        uint256 loss = _loss(yieldToken);\n        uint256 maximumLoss = _yieldTokens[yieldToken].maximumLoss;\n        if (loss > maximumLoss) {\n            revert LossExceeded(yieldToken, loss, maximumLoss);\n        }\n    }\n\n    /// @dev Deposits `amount` yield tokens into the account of `recipient`.\n    ///\n    /// @dev Emits a {Deposit} event.\n    ///\n    /// @param yieldToken The address of the yield token to deposit.\n    /// @param amount     The amount of yield tokens to deposit.\n    /// @param recipient  The recipient of the yield tokens.\n    ///\n    /// @return The number of shares minted to `recipient`.\n    function _deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) internal returns (uint256) {\n        _checkArgument(amount > 0);\n\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        address underlyingToken = yieldTokenParams.underlyingToken;\n\n        // Check that the yield token and it's underlying token are enabled. Disabling the yield token and or the\n        // underlying token prevents the system from holding more of the disabled yield token or underlying token.\n        _checkYieldTokenEnabled(yieldToken);\n        _checkUnderlyingTokenEnabled(underlyingToken);\n\n        // Check to assure that the token has not experienced a sudden unexpected loss. This prevents users from being\n        // able to deposit funds and then have them siphoned if the price recovers.\n        _checkLoss(yieldToken);\n\n        // Buffers any harvestable yield tokens. This will properly synchronize the balance which is held by users\n        // and the balance which is held by the system to eventually be harvested.\n        _preemptivelyHarvest(yieldToken);\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(recipient);\n\n        // Update the recipient's account, proactively issue shares for the deposited tokens to the recipient, and then\n        // increase the value of the token that the system is expected to hold.\n        _poke(recipient, yieldToken);\n        uint256 shares = _issueSharesForAmount(recipient, yieldToken, amount);\n        _sync(yieldToken, amount, _uadd);\n\n        // Check that the maximum expected value has not been breached.\n        uint256 maximumExpectedValue = yieldTokenParams.maximumExpectedValue;\n        if (yieldTokenParams.expectedValue > maximumExpectedValue) {\n          revert ExpectedValueExceeded(yieldToken, amount, maximumExpectedValue);\n        }\n\n        emit Deposit(msg.sender, yieldToken, amount, recipient);\n\n        return shares;\n    }\n\n    /// @dev Withdraw `yieldToken` from the account owned by `owner` by burning shares and receiving yield tokens of\n    ///      equivalent value.\n    ///\n    /// @dev Emits a {Withdraw} event.\n    ///\n    /// @param yieldToken The address of the yield token to withdraw.\n    /// @param owner      The address of the account owner to withdraw from.\n    /// @param shares     The number of shares to burn.\n    /// @param recipient  The recipient of the withdrawn shares. This parameter is only used for logging.\n    ///\n    /// @return The amount of yield tokens that the burned shares were exchanged for.\n    function _withdraw(\n        address yieldToken,\n        address owner,\n        uint256 shares,\n        address recipient\n    ) internal returns (uint256) {\n        // Buffers any harvestable yield tokens that the owner of the account has deposited. This will properly\n        // synchronize the balance of all the tokens held by the owner so that the validation check properly\n        // computes the total value of the tokens held by the owner.\n        _preemptivelyHarvestDeposited(owner);\n\n        // Distribute unlocked credit for all of the tokens that the user has deposited into the system. This updates\n        // the accrued weights so that the debt is properly calculated before the account is validated.\n        _distributeUnlockedCreditDeposited(owner);\n\n        uint256 amountYieldTokens = _convertSharesToYieldTokens(yieldToken, shares);\n\n        // Update the owner's account, burn shares from the owner's account, and then decrease the value of the token\n        // that the system is expected to hold.\n        _poke(owner);\n        _burnShares(owner, yieldToken, shares);\n        _sync(yieldToken, amountYieldTokens, _usub);\n\n        // Valid the owner's account to assure that the collateralization invariant is still held.\n        _validate(owner);\n\n        emit Withdraw(owner, yieldToken, shares, recipient);\n\n        return amountYieldTokens;\n    }\n\n    /// @dev Mints debt tokens to `recipient` using the account owned by `owner`.\n    ///\n    /// @dev Emits a {Mint} event.\n    ///\n    /// @param owner     The owner of the account to mint from.\n    /// @param amount    The amount to mint.\n    /// @param recipient The recipient of the minted debt tokens.\n    function _mint(address owner, uint256 amount, address recipient) internal {\n        // Check that the system will allow for the specified amount to be minted.\n        _checkMintingLimit(amount);\n\n        // Preemptively harvest all tokens that the user has deposited into the system. This allows the debt to be\n        // properly calculated before the account is validated.\n        _preemptivelyHarvestDeposited(owner);\n\n        // Distribute unlocked credit for all of the tokens that the user has deposited into the system. This updates\n        // the accrued weights so that the debt is properly calculated before the account is validated.\n        _distributeUnlockedCreditDeposited(owner);\n\n        // Update the owner's account, increase their debt by the amount of tokens to mint, and then finally validate\n        // their account to assure that the collateralization invariant is still held.\n        _poke(owner);\n        _updateDebt(owner, SafeCast.toInt256(amount));\n        _validate(owner);\n\n        // Decrease the global amount of mintable debt tokens.\n        _mintingLimiter.decrease(amount);\n\n        // Mint the debt tokens to the recipient.\n        TokenUtils.safeMint(debtToken, recipient, amount);\n\n        emit Mint(owner, amount, recipient);\n    }\n\n    /// @dev Synchronizes the active balance and expected value of `yieldToken`.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount to add or subtract from the debt.\n    /// @param operation  The mathematical operation to perform for the update. Either one of {_uadd} or {_usub}.\n    function _sync(\n        address yieldToken,\n        uint256 amount,\n        function(uint256, uint256) internal pure returns (uint256) operation\n    ) internal {\n        YieldTokenParams memory yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 amountUnderlyingTokens = _convertYieldTokensToUnderlying(yieldToken, amount);\n        uint256 updatedActiveBalance   = operation(yieldTokenParams.activeBalance, amount);\n        uint256 updatedExpectedValue   = operation(yieldTokenParams.expectedValue, amountUnderlyingTokens);\n\n        _yieldTokens[yieldToken].activeBalance = updatedActiveBalance;\n        _yieldTokens[yieldToken].expectedValue = updatedExpectedValue;\n    }\n\n    /// @dev Gets the amount of loss that `yieldToken` has incurred measured in basis points. When the expected\n    ///      underlying value is less than the actual value, this will return zero.\n    ///\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return The loss in basis points.\n    function _loss(address yieldToken) internal view returns (uint256) {\n        YieldTokenParams memory yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 amountUnderlyingTokens = _convertYieldTokensToUnderlying(yieldToken, yieldTokenParams.activeBalance);\n        uint256 expectedUnderlyingValue = yieldTokenParams.expectedValue;\n\n        return expectedUnderlyingValue > amountUnderlyingTokens\n            ? ((expectedUnderlyingValue - amountUnderlyingTokens) * BPS) / expectedUnderlyingValue\n            : 0;\n    }\n\n    /// @dev Distributes `amount` credit to all depositors of `yieldToken`.\n    ///\n    /// @param yieldToken The address of the yield token to distribute credit for.\n    /// @param amount     The amount of credit to distribute in debt tokens.\n    function _distributeCredit(address yieldToken, uint256 amount) internal {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 pendingCredit     = yieldTokenParams.pendingCredit;\n        uint256 distributedCredit = yieldTokenParams.distributedCredit;\n        uint256 unlockedCredit    = _calculateUnlockedCredit(yieldToken);\n        uint256 lockedCredit      = pendingCredit - (distributedCredit + unlockedCredit);\n\n        // Distribute any unlocked credit before overriding it.\n        if (unlockedCredit > 0) {\n            yieldTokenParams.accruedWeight += unlockedCredit * FIXED_POINT_SCALAR / yieldTokenParams.totalShares;\n        }\n\n        yieldTokenParams.pendingCredit         = amount + lockedCredit;\n        yieldTokenParams.distributedCredit     = 0;\n        yieldTokenParams.lastDistributionBlock = block.number;\n    }\n\n    /// @dev Distributes unlocked credit for all of the yield tokens that have been deposited into the account owned\n    ///      by `owner`.\n    ///\n    /// @param owner The address of the account owner.\n    function _distributeUnlockedCreditDeposited(address owner) internal {\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n            _distributeUnlockedCredit(depositedTokens.values[i]);\n        }\n    }\n\n    /// @dev Distributes unlocked credit of `yieldToken` to all depositors.\n    ///\n    /// @param yieldToken The address of the yield token to distribute unlocked credit for.\n    function _distributeUnlockedCredit(address yieldToken) internal {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 unlockedCredit = _calculateUnlockedCredit(yieldToken);\n        if (unlockedCredit == 0) {\n            return;\n        }\n\n        yieldTokenParams.accruedWeight     += unlockedCredit * FIXED_POINT_SCALAR / yieldTokenParams.totalShares;\n        yieldTokenParams.distributedCredit += unlockedCredit;\n    }\n\n    /// @dev Wraps `amount` of an underlying token into its `yieldToken`.\n    ///\n    /// @param yieldToken       The address of the yield token to wrap the underlying tokens into.\n    /// @param amount           The amount of the underlying token to wrap.\n    /// @param minimumAmountOut The minimum amount of yield tokens that are expected to be received from the operation.\n    ///\n    /// @return The amount of yield tokens that resulted from the operation.\n    function _wrap(\n        address yieldToken,\n        uint256 amount,\n        uint256 minimumAmountOut\n    ) internal returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        ITokenAdapter adapter = ITokenAdapter(yieldTokenParams.adapter);\n        address underlyingToken = yieldTokenParams.underlyingToken;\n\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        uint256 wrappedShares = adapter.wrap(amount, address(this));\n        if (wrappedShares < minimumAmountOut) {\n            revert SlippageExceeded(wrappedShares, minimumAmountOut);\n        }\n\n        return wrappedShares;\n    }\n\n    /// @dev Unwraps `amount` of `yieldToken` into its underlying token.\n    ///\n    /// @param yieldToken       The address of the yield token to unwrap.\n    /// @param amount           The amount of the underlying token to wrap.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be received from the\n    ///                         operation.\n    ///\n    /// @return The amount of underlying tokens that resulted from the operation.\n    function _unwrap(\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) internal returns (uint256) {\n        ITokenAdapter adapter = ITokenAdapter(_yieldTokens[yieldToken].adapter);\n        uint256 amountUnwrapped = adapter.unwrap(amount, recipient);\n        if (amountUnwrapped < minimumAmountOut) {\n            revert SlippageExceeded(amountUnwrapped, minimumAmountOut);\n        }\n        return amountUnwrapped;\n    }\n\n    /// @dev Synchronizes the state for all of the tokens deposited in the account owned by `owner`.\n    ///\n    /// @param owner The address of the account owner.\n    function _poke(address owner) internal {\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n            _poke(owner, depositedTokens.values[i]);\n        }\n    }\n\n    /// @dev Synchronizes the state of `yieldToken` for the account owned by `owner`.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param yieldToken The address of the yield token to synchronize the state for.\n    function _poke(address owner, address yieldToken) internal {\n        Account storage account = _accounts[owner];\n\n        uint256 currentAccruedWeight = _yieldTokens[yieldToken].accruedWeight;\n        uint256 lastAccruedWeight    = account.lastAccruedWeights[yieldToken];\n\n        if (currentAccruedWeight == lastAccruedWeight) {\n            return;\n        }\n\n        uint256 balance          = account.balances[yieldToken];\n        uint256 unrealizedCredit = (currentAccruedWeight - lastAccruedWeight) * balance / FIXED_POINT_SCALAR;\n\n        account.debt                           -= SafeCast.toInt256(unrealizedCredit);\n        account.lastAccruedWeights[yieldToken]  = currentAccruedWeight;\n    }\n\n    /// @dev Increases the debt by `amount` for the account owned by `owner`.\n    ///\n    /// @param owner     The address of the account owner.\n    /// @param amount    The amount to increase the debt by.\n    function _updateDebt(address owner, int256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.debt += amount;\n    }\n\n    /// @dev Set the mint allowance for `spender` to `amount` for the account owned by `owner`.\n    ///\n    /// @param owner   The address of the account owner.\n    /// @param spender The address of the spender.\n    /// @param amount  The amount of debt tokens to set the mint allowance to.\n    function _approveMint(address owner, address spender, uint256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.mintAllowances[spender] = amount;\n        emit ApproveMint(owner, spender, amount);\n    }\n\n    /// @dev Decrease the mint allowance for `spender` by `amount` for the account owned by `owner`.\n    ///\n    /// @param owner   The address of the account owner.\n    /// @param spender The address of the spender.\n    /// @param amount  The amount of debt tokens to decrease the mint allowance by.\n    function _decreaseMintAllowance(address owner, address spender, uint256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.mintAllowances[spender] -= amount;\n    }\n\n    /// @dev Set the withdraw allowance of `yieldToken` for `spender` to `shares` for the account owned by `owner`.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param spender    The address of the spender.\n    /// @param yieldToken The address of the yield token to set the withdraw allowance for.\n    /// @param shares     The amount of shares to set the withdraw allowance to.\n    function _approveWithdraw(address owner, address spender, address yieldToken, uint256 shares) internal {\n        Account storage account = _accounts[owner];\n        account.withdrawAllowances[spender][yieldToken] = shares;\n        emit ApproveWithdraw(owner, spender, yieldToken, shares);\n    }\n\n    /// @dev Decrease the withdraw allowance of `yieldToken` for `spender` by `amount` for the account owned by `owner`.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param spender    The address of the spender.\n    /// @param yieldToken The address of the yield token to decrease the withdraw allowance for.\n    /// @param amount     The amount of shares to decrease the withdraw allowance by.\n    function _decreaseWithdrawAllowance(address owner, address spender, address yieldToken, uint256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.withdrawAllowances[spender][yieldToken] -= amount;\n    }\n\n    /// @dev Checks that the account owned by `owner` is properly collateralized.\n    ///\n    /// @dev If the account is undercollateralized then this will revert with an {Undercollateralized} error.\n    ///\n    /// @param owner The address of the account owner.\n    function _validate(address owner) internal view {\n        int256 debt = _accounts[owner].debt;\n        if (debt <= 0) {\n            return;\n        }\n\n        uint256 collateralization = _totalValue(owner) * FIXED_POINT_SCALAR / uint256(debt);\n\n        if (collateralization < minimumCollateralization) {\n            revert Undercollateralized();\n        }\n    }\n\n    /// @dev Gets the total value of the deposit collateral measured in debt tokens of the account owned by `owner`.\n    ///\n    /// @param owner The address of the account owner.\n    ///\n    /// @return The total value.\n    function _totalValue(address owner) internal view returns (uint256) {\n        uint256 totalValue = 0;\n\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n            address yieldToken             = depositedTokens.values[i];\n            address underlyingToken        = _yieldTokens[yieldToken].underlyingToken;\n            uint256 shares                 = _accounts[owner].balances[yieldToken];\n            uint256 amountUnderlyingTokens = _convertSharesToUnderlyingTokens(yieldToken, shares);\n\n            totalValue += _normalizeUnderlyingTokensToDebt(underlyingToken, amountUnderlyingTokens);\n        }\n\n        return totalValue;\n    }\n\n    /// @dev Issues shares of `yieldToken` for `amount` of its underlying token to `recipient`.\n    ///\n    /// IMPORTANT: `amount` must never be 0.\n    ///\n    /// @param recipient  The address of the recipient.\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of the underlying token.\n    ///\n    /// @return The amount of shares issued to `recipient`.\n    function _issueSharesForAmount(\n        address recipient,\n        address yieldToken,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 shares = _convertYieldTokensToShares(yieldToken, amount);\n\n        if (_accounts[recipient].balances[yieldToken] == 0) {\n          _accounts[recipient].depositedTokens.add(yieldToken);\n        }\n\n        _accounts[recipient].balances[yieldToken] += shares;\n        _yieldTokens[yieldToken].totalShares += shares;\n\n        return shares;\n    }\n\n    /// @dev Burns `share` shares of `yieldToken` from the account owned by `owner`.\n    ///\n    /// @param owner      The address of the owner.\n    /// @param yieldToken The address of the yield token.\n    /// @param shares     The amount of shares to burn.\n    function _burnShares(address owner, address yieldToken, uint256 shares) internal {\n        Account storage account = _accounts[owner];\n\n        account.balances[yieldToken] -= shares;\n        _yieldTokens[yieldToken].totalShares -= shares;\n\n        if (account.balances[yieldToken] == 0) {\n            account.depositedTokens.remove(yieldToken);\n        }\n    }\n\n    /// @dev Gets the amount of debt that the account owned by `owner` will have after an update occurs.\n    ///\n    /// @param owner The address of the account owner.\n    ///\n    /// @return The amount of debt that the account owned by `owner` will have after an update.\n    function _calculateUnrealizedDebt(address owner) internal view returns (int256) {\n        int256 debt = _accounts[owner].debt;\n\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; i++) {\n            address yieldToken = depositedTokens.values[i];\n\n            uint256 currentAccruedWeight = _yieldTokens[yieldToken].accruedWeight;\n            uint256 lastAccruedWeight    = _accounts[owner].lastAccruedWeights[yieldToken];\n            uint256 unlockedCredit       = _calculateUnlockedCredit(yieldToken);\n\n            currentAccruedWeight += unlockedCredit > 0\n                ? unlockedCredit * FIXED_POINT_SCALAR / _yieldTokens[yieldToken].totalShares\n                : 0;\n\n            if (currentAccruedWeight == lastAccruedWeight) {\n                continue;\n            }\n\n            uint256 balance = _accounts[owner].balances[yieldToken];\n            uint256 unrealizedCredit = ((currentAccruedWeight - lastAccruedWeight) * balance) / FIXED_POINT_SCALAR;\n\n            debt -= SafeCast.toInt256(unrealizedCredit);\n        }\n\n        return debt;\n    }\n\n    /// @dev Gets the virtual active balance of `yieldToken`.\n    ///\n    /// @dev The virtual active balance is the active balance minus any harvestable tokens which have yet to be realized.\n    ///\n    /// @param yieldToken The address of the yield token to get the virtual active balance of.\n    ///\n    /// @return The virtual active balance.\n    function _calculateUnrealizedActiveBalance(address yieldToken) internal view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 activeBalance = yieldTokenParams.activeBalance;\n        if (activeBalance == 0) {\n          return activeBalance;\n        }\n\n        uint256 currentValue = _convertYieldTokensToUnderlying(yieldToken, activeBalance);\n        uint256 expectedValue = yieldTokenParams.expectedValue;\n        if (currentValue <= expectedValue) {\n          return activeBalance;\n        }\n\n        uint256 harvestable = _convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue);\n        if (harvestable == 0) {\n          return activeBalance;\n        }\n\n        return activeBalance - harvestable;\n    }\n\n    /// @dev Calculates the amount of unlocked credit for `yieldToken` that is available for distribution.\n    ///\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return The amount of unlocked credit available.\n    function _calculateUnlockedCredit(address yieldToken) internal view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 pendingCredit = yieldTokenParams.pendingCredit;\n        if (pendingCredit == 0) {\n            return 0;\n        }\n\n        uint256 creditUnlockRate      = yieldTokenParams.creditUnlockRate;\n        uint256 distributedCredit     = yieldTokenParams.distributedCredit;\n        uint256 lastDistributionBlock = yieldTokenParams.lastDistributionBlock;\n\n        uint256 percentUnlocked = (block.number - lastDistributionBlock) * creditUnlockRate;\n\n        return percentUnlocked < FIXED_POINT_SCALAR\n            ? (pendingCredit * percentUnlocked / FIXED_POINT_SCALAR) - distributedCredit\n            : pendingCredit - distributedCredit;\n    }\n\n    /// @dev Gets the amount of shares that `amount` of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of yield tokens.\n    ///\n    /// @return The number of shares.\n    function _convertYieldTokensToShares(address yieldToken, uint256 amount) internal view returns (uint256) {\n        if (_yieldTokens[yieldToken].totalShares == 0) {\n            return amount;\n        }\n        return amount * _yieldTokens[yieldToken].totalShares / _calculateUnrealizedActiveBalance(yieldToken);\n    }\n\n    /// @dev Gets the amount of yield tokens that `shares` shares of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param shares     The amount of shares.\n    ///\n    /// @return The amount of yield tokens.\n    function _convertSharesToYieldTokens(address yieldToken, uint256 shares) internal view returns (uint256) {\n        uint256 totalShares = _yieldTokens[yieldToken].totalShares;\n        if (totalShares == 0) {\n          return shares;\n        }\n        return (shares * _calculateUnrealizedActiveBalance(yieldToken)) / totalShares;\n    }\n\n    /// @dev Gets the amount of underlying tokens that `shares` shares of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param shares     The amount of shares.\n    ///\n    /// @return The amount of underlying tokens.\n    function _convertSharesToUnderlyingTokens(address yieldToken, uint256 shares) internal view returns (uint256) {\n        uint256 amountYieldTokens = _convertSharesToYieldTokens(yieldToken, shares);\n        return _convertYieldTokensToUnderlying(yieldToken, amountYieldTokens);\n    }\n\n    /// @dev Gets the amount of an underlying token that `amount` of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of yield tokens.\n    ///\n    /// @return The amount of underlying tokens.\n    function _convertYieldTokensToUnderlying(address yieldToken, uint256 amount) internal view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        ITokenAdapter adapter = ITokenAdapter(yieldTokenParams.adapter);\n        return amount * adapter.price() / 10**yieldTokenParams.decimals;\n    }\n\n    /// @dev Gets the amount of `yieldToken` that `amount` of its underlying token is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of underlying tokens.\n    ///\n    /// @return The amount of yield tokens.\n    function _convertUnderlyingTokensToYield(address yieldToken, uint256 amount) internal view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        ITokenAdapter adapter = ITokenAdapter(yieldTokenParams.adapter);\n        return amount * 10**yieldTokenParams.decimals / adapter.price();\n    }\n\n    /// @dev Gets the amount of shares of `yieldToken` that `amount` of its underlying token is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of underlying tokens.\n    ///\n    /// @return The amount of shares.\n    function _convertUnderlyingTokensToShares(address yieldToken, uint256 amount) internal view returns (uint256) {\n        uint256 amountYieldTokens = _convertUnderlyingTokensToYield(yieldToken, amount);\n        return _convertYieldTokensToShares(yieldToken, amountYieldTokens);\n    }\n\n    /// @dev Normalize `amount` of `underlyingToken` to a value which is comparable to units of the debt token.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of the debt token.\n    ///\n    /// @return The normalized amount.\n    function _normalizeUnderlyingTokensToDebt(address underlyingToken, uint256 amount) internal view returns (uint256) {\n        return amount * _underlyingTokens[underlyingToken].conversionFactor;\n    }\n\n    /// @dev Normalize `amount` of the debt token to a value which is comparable to units of `underlyingToken`.\n    ///\n    /// @dev This operation will result in truncation of some of the least significant digits of `amount`. This\n    ///      truncation amount will be the least significant N digits where N is the difference in decimals between\n    ///      the debt token and the underlying token.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of the debt token.\n    ///\n    /// @return The normalized amount.\n    function _normalizeDebtTokensToUnderlying(address underlyingToken, uint256 amount) internal view returns (uint256) {\n        return amount / _underlyingTokens[underlyingToken].conversionFactor;\n    }\n\n    /// @dev Checks the whitelist for msg.sender.\n    ///\n    /// Reverts if msg.sender is not in the whitelist.\n    function _onlyWhitelisted() internal view {\n        // Check if the message sender is an EOA. In the future, this potentially may break. It is important that functions\n        // which rely on the whitelist not be explicitly vulnerable in the situation where this no longer holds true.\n        if (tx.origin == msg.sender) {\n          return;\n        }\n\n        // Only check the whitelist for calls from contracts.\n        if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n          revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks an expression and reverts with an {IllegalArgument} error if the expression is {false}.\n    ///\n    /// @param expression The expression to check.\n    function _checkArgument(bool expression) internal pure {\n        if (!expression) {\n            revert IllegalArgument();\n        }\n    }\n\n    /// @dev Checks an expression and reverts with an {IllegalState} error if the expression is {false}.\n    ///\n    /// @param expression The expression to check.\n    function _checkState(bool expression) internal pure {\n        if (!expression) {\n            revert IllegalState();\n        }\n    }\n\n    /// @dev Adds two unsigned 256 bit integers together and returns the result.\n    ///\n    /// @dev This operation is checked and will fail if the result overflows.\n    ///\n    /// @param x The first operand.\n    /// @param y The second operand.\n    ///\n    /// @return z The result.\n    function _uadd(uint256 x, uint256 y) internal pure returns (uint256 z) { z = x + y; }\n\n    /// @dev Subtracts two unsigned 256 bit integers together and returns the result.\n    ///\n    /// @dev This operation is checked and will fail if the result overflows.\n    ///\n    /// @param x The first operand.\n    /// @param y The second operand.\n    ///\n    /// @return z the result.\n    function _usub(uint256 x, uint256 y) internal pure returns (uint256 z) { z = x - y; }\n}\n"
    },
    "contracts/base/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.11;\n\nimport \"../interfaces/IMulticall.sol\";\n\n/// @title  Multicall\n/// @author Uniswap Labs\n///\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                revert MulticallFailed(data[i], result);\n            }\n\n            results[i] = result;\n        }\n    }\n}"
    },
    "contracts/base/Mutex.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.11;\n\n/// @title  Mutex\n/// @author Alchemix Finance\n///\n/// @notice Provides a mutual exclusion lock for implementing contracts.\nabstract contract Mutex {\n    /// @notice An error which is thrown when a lock is attempted to be claimed before it has been freed.\n    error LockAlreadyClaimed();\n\n    /// @notice The lock state. Non-zero values indicate the lock has been claimed.\n    uint256 private _lockState;\n\n    /// @dev A modifier which acquires the mutex.\n    modifier lock() {\n        _claimLock();\n\n        _;\n\n        _freeLock();\n    }\n\n    /// @dev Gets if the mutex is locked.\n    ///\n    /// @return if the mutex is locked.\n    function _isLocked() internal returns (bool) {\n        return _lockState == 1;\n    }\n\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\n    function _claimLock() internal {\n        // Check that the lock has not been claimed yet.\n        if (_lockState != 0) {\n            revert LockAlreadyClaimed();\n        }\n\n        // Claim the lock.\n        _lockState = 1;\n    }\n\n    /// @dev Frees the lock.\n    function _freeLock() internal {\n        _lockState = 0;\n    }\n}"
    },
    "contracts/interfaces/IAlchemicToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./IERC20Burnable.sol\";\nimport \"./IERC20Minimal.sol\";\nimport \"./IERC20Mintable.sol\";\n\n/// @title  IAlchemicToken\n/// @author Alchemix Finance\ninterface IAlchemicToken is IERC20Minimal, IERC20Burnable, IERC20Mintable {\n  /// @notice Gets the total amount of minted tokens for an account.\n  ///\n  /// @param account The address of the account.\n  ///\n  /// @return The total minted.\n  function hasMinted(address account) external view returns (uint256);\n\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\n  ///\n  /// This reverts if the `msg.sender` is not whitelisted.\n  ///\n  /// @param amount The amount to lower the minted amount by.\n  function lowerHasMinted(uint256 amount) external;\n}"
    },
    "contracts/libraries/Limiters.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport {IllegalArgument} from \"../base/Errors.sol\";\n\n/// @title  Functions\n/// @author Alchemix Finance\nlibrary Limiters {\n    using Limiters for LinearGrowthLimiter;\n\n    /// @dev A maximum cooldown to avoid malicious governance bricking the contract.\n    /// @dev 1 day @ 12 sec / block\n    uint256 constant public MAX_COOLDOWN_BLOCKS = 7200;\n\n    /// @dev The scalar used to convert integral types to fixed point numbers.\n    uint256 constant public FIXED_POINT_SCALAR = 1e18;\n\n    /// @dev The configuration and state of a linear growth function (LGF).\n    struct LinearGrowthLimiter {\n        uint256 maximum;        /// The maximum limit of the function.\n        uint256 rate;           /// The rate at which the function increases back to its maximum.\n        uint256 lastValue;      /// The most recently saved value of the function.\n        uint256 lastBlock;      /// The block that `lastValue` was recorded.\n        uint256 minLimit;       /// A minimum limit to avoid malicious governance bricking the contract\n    }\n\n    /// @dev Instantiates a new linear growth function.\n    ///\n    /// @param maximum The maximum value for the LGF.\n    /// @param blocks  The number of blocks that determins the rate of the LGF.\n    ///\n    /// @return The LGF struct.\n    function createLinearGrowthLimiter(uint256 maximum, uint256 blocks, uint256 _minLimit) internal view returns (LinearGrowthLimiter memory) {\n        if (blocks > MAX_COOLDOWN_BLOCKS) {\n            revert IllegalArgument();\n        }\n\n        if (maximum < _minLimit) {\n            revert IllegalArgument();\n        }\n\n        return LinearGrowthLimiter({\n            maximum: maximum,\n            rate: maximum * FIXED_POINT_SCALAR / blocks,\n            lastValue: maximum,\n            lastBlock: block.number,\n            minLimit: _minLimit\n        });\n    }\n\n    /// @dev Configure an LGF.\n    ///\n    /// @param self    The LGF to configure.\n    /// @param maximum The maximum value of the LFG.\n    /// @param blocks  The number of recovery blocks of the LGF.\n    function configure(LinearGrowthLimiter storage self, uint256 maximum, uint256 blocks) internal {\n        if (blocks > MAX_COOLDOWN_BLOCKS) {\n            revert IllegalArgument();\n        }\n\n        if (maximum < self.minLimit) {\n            revert IllegalArgument();\n        }\n\n        if (self.lastValue > maximum) {\n            self.lastValue = maximum;\n        }\n\n        self.maximum = maximum;\n        self.rate = maximum * FIXED_POINT_SCALAR / blocks;\n    }\n\n    /// @dev Updates the state of an LGF by updating `lastValue` and `lastBlock`.\n    ///\n    /// @param self the LGF to update.\n    function update(LinearGrowthLimiter storage self) internal {\n        self.lastValue = self.get();\n        self.lastBlock = block.number;\n    }\n\n    /// @dev Decrease the value of the linear growth limiter.\n    ///\n    /// @param self   The linear growth limiter.\n    /// @param amount The amount to decrease `lastValue`.\n    function decrease(LinearGrowthLimiter storage self, uint256 amount) internal {\n        uint256 value = self.get();\n        self.lastValue = value - amount;\n        self.lastBlock = block.number;\n    }\n\n    /// @dev Get the current value of the linear growth limiter.\n    ///\n    /// @return The current value.\n    function get(LinearGrowthLimiter storage self) internal view returns (uint256) {\n        uint256 elapsed = block.number - self.lastBlock;\n        if (elapsed == 0) {\n            return self.lastValue;\n        }\n        uint256 delta = elapsed * self.rate / FIXED_POINT_SCALAR;\n        uint256 value = self.lastValue + delta;\n        return value > self.maximum ? self.maximum : value;\n    }\n}"
    },
    "contracts/interfaces/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title  Multicall interface\n/// @author Uniswap Labs\n///\n/// @notice Enables calling multiple methods in a single call to the contract.\n/// @dev    The use of `msg.value` should be heavily scrutinized for implementors of this interfaces.\ninterface IMulticall {\n    /// @notice An error used to indicate that an individual call in a multicall failed.\n    ///\n    /// @param data   The call data.\n    /// @param result The result of the call.\n    error MulticallFailed(bytes data, bytes result);\n\n    /// @notice Call multiple functions in the implementing contract.\n    ///\n    /// @param data The encoded function data for each of the calls to make to this contract.\n    ///\n    /// @return results The results from each of the calls passed in via data.\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.11;\n\nimport \"../interfaces/IERC20Burnable.sol\";\nimport '../interfaces/IERC20Minimal.sol';\nimport \"../interfaces/IERC20Mintable.sol\";\n\ncontract TestERC20 is IERC20Minimal, IERC20Mintable, IERC20Burnable {\n    uint256 public override totalSupply;\n    uint8 public decimals;\n    mapping(address => uint256) public override balanceOf;\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    constructor(uint256 amountToMint, uint8 _decimals) {\n        decimals = _decimals;\n        mint(msg.sender, amountToMint);\n    }\n\n    function mint(address to, uint256 amount) public override returns (bool) {\n        uint256 balanceNext = balanceOf[to] + amount;\n        require(balanceNext >= amount, 'overflow balance');\n        balanceOf[to] = balanceNext;\n        totalSupply += amount;\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        uint256 balanceBefore = balanceOf[msg.sender];\n        require(balanceBefore >= amount, 'insufficient balance');\n        balanceOf[msg.sender] = balanceBefore - amount;\n\n        uint256 balanceRecipient = balanceOf[recipient];\n        require(balanceRecipient + amount >= balanceRecipient, 'recipient balance overflow');\n        balanceOf[recipient] = balanceRecipient + amount;\n\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        uint256 allowanceBefore = allowance[sender][msg.sender];\n        require(allowanceBefore >= amount, 'allowance insufficient');\n\n        allowance[sender][msg.sender] = allowanceBefore - amount;\n\n        uint256 balanceRecipient = balanceOf[recipient];\n\n        require(balanceRecipient + amount >= balanceRecipient, 'overflow balance recipient');\n        balanceOf[recipient] = balanceRecipient + amount;\n        uint256 balanceSender = balanceOf[sender];\n\n        require(balanceSender >= amount, 'underflow balance sender');\n        balanceOf[sender] = balanceSender - amount;\n\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function burnFrom(\n        address owner,\n        uint256 amount\n    ) public override returns (bool) {\n        uint256 allowanceBefore = allowance[owner][msg.sender];\n        require(allowanceBefore >= amount, 'allowance insufficient');\n\n        allowance[owner][msg.sender] = allowanceBefore - amount;\n\n        uint256 balanceOwner = balanceOf[owner];\n        require(balanceOwner >= amount, 'overflow balance recipient');\n        balanceOf[owner] = balanceOwner - amount;\n        totalSupply -= amount;\n\n        emit Transfer(msg.sender, address(0), amount);\n        return true;\n    }\n\n    function burn(uint256 amount) public override returns (bool) {\n        uint256 balanceOwner = balanceOf[msg.sender];\n        require(balanceOwner >= amount, 'overflow balance recipient');\n        balanceOf[msg.sender] = balanceOwner - amount;\n        totalSupply -= amount;\n\n        emit Transfer(msg.sender, address(0), amount);\n        return true;\n    }\n}"
    },
    "contracts/test/TestYieldToken.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../libraries/TokenUtils.sol\";\nimport \"../interfaces/test/ITestYieldToken.sol\";\nimport \"./TestERC20.sol\";\n\n/// @title  TestYieldToken\n/// @author Alchemix Finance\ncontract TestYieldToken is ITestYieldToken, ERC20 {\n  address private constant BLACKHOLE = address(0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB);\n  uint256 private constant BPS = 10000;\n\n  address public override underlyingToken;\n  uint8 private _decimals;\n  uint256 public slippage;\n\n  constructor(address _underlyingToken) ERC20(\"Yield Token\", \"Yield Token\") {\n    underlyingToken = _underlyingToken;\n    _decimals = TokenUtils.expectDecimals(_underlyingToken);\n    slippage = 0;\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n\n  function price() external view override returns (uint256) {\n    return _shareValue(10**_decimals);\n  }\n\n  function setSlippage(uint256 _slippage) external {\n    slippage = _slippage;\n  }\n\n  function mint(uint256 amount, address recipient) external override returns (uint256) {\n    assert(amount > 0);\n\n    uint256 shares = _issueSharesForAmount(recipient, amount);\n\n    TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n\n    return shares;\n  }\n\n  function redeem(uint256 shares, address recipient) external override returns (uint256) {\n    assert(shares > 0);\n\n    uint256 value = _shareValue(shares);\n    value = (value * (BPS - slippage)) / BPS;\n    _burn(msg.sender, shares);\n    TokenUtils.safeTransfer(underlyingToken, recipient, value);\n\n    return value;\n  }\n\n  function slurp(uint256 amount) external override {\n    TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n  }\n\n  function siphon(uint256 amount) external override {\n    TokenUtils.safeTransfer(underlyingToken, BLACKHOLE, amount);\n  }\n\n  function _issueSharesForAmount(address to, uint256 amount) internal returns (uint256) {\n    uint256 shares = 0;\n    if (totalSupply() > 0) {\n      shares = (amount * totalSupply()) / TokenUtils.safeBalanceOf(underlyingToken, address(this));\n    } else {\n      shares = amount;\n    }\n    shares = (shares * (BPS - slippage)) / BPS;\n    _mint(to, shares);\n    return shares;\n  }\n\n  function _shareValue(uint256 shares) internal view returns (uint256) {\n    if (totalSupply() == 0) {\n      return shares;\n    }\n    return (shares * TokenUtils.safeBalanceOf(underlyingToken, address(this))) / totalSupply();\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/test/ITestYieldToken.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title  ITestYieldToken\n/// @author Alchemix Finance\ninterface ITestYieldToken is IERC20 {\n    /// @notice Gets the address of underlying token that the yield token wraps.\n    ///\n    /// @return The underlying token address.\n    function underlyingToken() external view returns (address);\n\n    /// @notice Gets the conversion rate of one whole unit of this token for the underlying token.\n    ///\n    /// @return The price.\n    function price() external view returns (uint256);\n\n    /// @notice Mints an amount of yield tokens from `amount` underlying tokens and transfers them to `recipient`.\n    ///\n    /// @param amount    The amount of underlying tokens.\n    /// @param recipient The address which will receive the minted yield tokens.\n    ///\n    /// @return The amount of minted yield tokens.\n    function mint(uint256 amount, address recipient) external returns (uint256);\n\n    /// @notice Redeems yield tokens for underlying tokens.\n    ///\n    /// @param amount    The amount of yield tokens to redeem.\n    /// @param recipient The address which will receive the redeemed underlying tokens.\n    ///\n    /// @return The amount of underlying tokens that the yield tokens were redeemed for.\n    function redeem(uint256 amount, address recipient) external returns (uint256);\n\n    /// @notice Simulates an atomic harvest of `amount` underlying tokens.\n    ///\n    /// @param amount The amount of the underlying token.\n    function slurp(uint256 amount) external;\n\n    /// @notice Simulates an atomic loss of `amount` underlying tokens.\n    ///\n    /// @param amount The amount of the underlying token.\n    function siphon(uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/TestYieldTokenAdapter.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../interfaces/ITokenAdapter.sol\";\nimport \"../interfaces/test/ITestYieldToken.sol\";\n\nimport \"../libraries/TokenUtils.sol\";\n\n/// @title  TestYieldTokenAdapter\n/// @author Alchemix Finance\ncontract TestYieldTokenAdapter is ITokenAdapter {\n    string public constant override version = \"2.0.0\";\n    \n    /// @inheritdoc ITokenAdapter\n    address public immutable override token;\n\n    /// @inheritdoc ITokenAdapter\n    address public immutable override underlyingToken;\n\n    constructor(address _token) {\n        token = _token;\n        underlyingToken = ITestYieldToken(_token).underlyingToken();\n        IERC20Minimal(ITestYieldToken(_token).underlyingToken()).approve(_token, type(uint256).max);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view override returns (uint256) {\n        return ITestYieldToken(token).price();\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        return ITestYieldToken(token).mint(amount, recipient);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\n        return ITestYieldToken(token).redeem(amount, recipient);\n    }\n}"
    },
    "contracts/test/TransmuterBufferMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ITransmuterV2 } from \"../interfaces/transmuter/ITransmuterV2.sol\";\n\ncontract TransmuterBufferMock {\n  using SafeERC20 for IERC20;\n\n  mapping(address => address) public transmuters;\n\n  constructor() {}\n\n  function initialize(address[] calldata _underlyingTokens, address[] calldata _transmuters) external {\n    for (uint256 i = 0; i < _underlyingTokens.length; i++) {\n      transmuters[_underlyingTokens[i]] = _transmuters[i];\n    }\n  }\n\n  function exchange(address underlyingToken, uint256 amount) external {\n    IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\n    ITransmuterV2(transmuters[underlyingToken]).exchange(amount);\n  }\n\n  function withdraw(\n    address underlyingToken,\n    uint256 amount,\n    address recipient\n  ) external {\n    IERC20(underlyingToken).safeTransfer(recipient, amount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/TransmuterMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {ITransmuterBuffer} from \"../interfaces/transmuter/ITransmuterBuffer.sol\";\n\ncontract TransmuterMock is Context, ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20Upgradeable;\n\n  address public constant ZERO_ADDRESS = address(0);\n  uint256 public TRANSMUTATION_PERIOD;\n\n  address public alToken;\n  address public underlyingToken;\n\n  uint256 public totalExchanged;\n\n  address public collateralSource;\n\n  /// @dev alchemist addresses whitelisted\n  mapping(address => bool) public whiteList;\n\n  /// @dev The address of the account which currently has administrative capabilities over this contract.\n  address public governance;\n\n  event Distribution(address origin, address underlying, uint256 amount);\n\n  event WhitelistSet(address whitelisted, bool state);\n\n  constructor(\n    address _alToken,\n    address _underlyingToken,\n    address _collateralSource\n  ) {\n    governance = msg.sender;\n    alToken = _alToken;\n    underlyingToken = _underlyingToken;\n    collateralSource = _collateralSource;\n    TRANSMUTATION_PERIOD = 50;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    require(whiteList[msg.sender], \"Transmuter: !whitelisted\");\n    _;\n  }\n\n  /// @dev Checks that the current message sender or caller is the governance address.\n  ///\n  ///\n  modifier onlyGov() {\n    require(msg.sender == governance, \"Transmuter: !governance\");\n    _;\n  }\n\n  /// @dev Sets the whitelist\n  ///\n  /// This function reverts if the caller is not governance\n  ///\n  /// @param _toWhitelist the account to mint underlyingTokens to.\n  /// @param _state the whitelist state.\n  function setWhitelist(address _toWhitelist, bool _state) external onlyGov {\n    whiteList[_toWhitelist] = _state;\n    emit WhitelistSet(_toWhitelist, _state);\n  }\n\n  function exchange(uint256 amount) external {\n    totalExchanged += amount;\n  }\n\n  function claim(\n    uint256 amount,\n    address recipient\n  ) external {\n    ITransmuterBuffer(collateralSource).withdraw(underlyingToken, amount, recipient);\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/AlchemicTokenV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/Errors.sol\";\n\nimport {IERC3156FlashBorrower} from \"./interfaces/IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"./interfaces/IERC3156FlashLender.sol\";\n\n/// @title  AlchemicTokenV2\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for version two alchemic tokens.\ncontract AlchemicTokenV2 is AccessControl, ReentrancyGuard, ERC20, IERC3156FlashLender {\n\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\n  /// @notice The expected return value from a flash mint receiver\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n  /// @notice The maximum number of basis points needed to represent 100%.\n  uint256 public constant BPS = 10000;\n\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping(address => bool) public whitelisted;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping(address => bool) public paused;\n\n  /// @notice Fee for flash minting\n  uint256 public flashMintFee;\n\n  /// @notice Max flash mint amount\n  uint256 public maxFlashLoanAmount;\n\n  /// @notice An event which is emitted when a minter is paused from minting.\n  ///\n  /// @param minter The address of the minter which was paused.\n  /// @param state  A flag indicating if the alchemist is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice An event which is emitted when the flash mint fee is updated.\n  ///\n  /// @param fee The new flash mint fee.\n  event SetFlashMintFee(uint256 fee);\n\n  constructor(string memory _name, string memory _symbol, uint256 _flashFee) ERC20(_name, _symbol) {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    flashMintFee = _flashFee;\n  }\n\n  /// @dev A modifier which checks that the caller has the admin role.\n  modifier onlyAdmin() {\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks that the caller has the sentinel role.\n  modifier onlySentinel() {\n    if(!hasRole(SENTINEL_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    if(!whitelisted[msg.sender]) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @notice Sets the flash minting fee.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param newFee The new flash mint fee.\n  function setFlashFee(uint256 newFee) external onlyAdmin {\n    flashMintFee = newFee;\n    emit SetFlashMintFee(flashMintFee);\n  }\n\n  /// @notice Mints tokens to `a recipient.`\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  /// @notice This function reverts if `msg.sender` has exceeded their mintable ceiling.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    if (paused[msg.sender]) {\n      revert IllegalState();\n    }\n\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whitelisted[minter] = state;\n  }\n\n  /// @notice Sets `sentinel` as a sentinel.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param sentinel The address to set as a sentinel.\n  function setSentinel(address sentinel) external onlyAdmin {\n    _setupRole(SENTINEL_ROLE, sentinel);\n  }\n\n  /// @notice Pauses `minter` from minting tokens.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to set as paused or unpaused.\n  /// @param state  A flag indicating if the minter should be paused or unpaused.\n  function pauseMinter(address minter, bool state) external onlySentinel {\n    paused[minter] = state;\n    emit Paused(minter, state);\n  }\n\n  /// @notice Burns `amount` tokens from `msg.sender`.\n  ///\n  /// @param amount The amount of tokens to be burned.\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n\n  /// @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n  ///\n  /// @param account The address the burn tokens from.\n  /// @param amount  The amount of tokens to burn.\n  function burnFrom(address account, uint256 amount) external {\n    uint256 newAllowance = allowance(account, msg.sender) - amount;\n\n    _approve(account, msg.sender, newAllowance);\n    _burn(account, amount);\n  }\n\n  /// @notice Adjusts the maximum flashloan amount.\n  ///\n  /// @param _maxFlashLoanAmount The maximum flashloan amount.\n  function setMaxFlashLoan(uint _maxFlashLoanAmount) external onlyAdmin {\n    maxFlashLoanAmount = _maxFlashLoanAmount;\n  }\n\n  /// @notice Gets the maximum amount to be flash loaned of a token.\n  ///\n  /// @param token The address of the token.\n  ///\n  /// @return The maximum amount of `token` that can be flashed loaned.\n  function maxFlashLoan(address token) public view override returns (uint256) {\n    if (token != address(this)) {\n      return 0;\n    }\n    return maxFlashLoanAmount;\n  }\n\n  /// @notice Gets the flash loan fee of `amount` of `token`.\n  ///\n  /// @param token  The address of the token.`\n  /// @param amount The amount of `token` to flash mint.\n  ///\n  /// @return The flash loan fee.\n  function flashFee(address token, uint256 amount) public view override returns (uint256) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n    return amount * flashMintFee / BPS;\n  }\n\n  /// @notice Performs a flash mint (called flash loan to confirm with ERC3156 standard).\n  ///\n  /// @param receiver The address which will receive the flash minted tokens.\n  /// @param token    The address of the token to flash mint.\n  /// @param amount   How much to flash mint.\n  /// @param data     ABI encoded data to pass to the receiver.\n  ///\n  /// @return If the flash loan was successful.\n  function flashLoan(\n    IERC3156FlashBorrower receiver,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external override nonReentrant returns (bool) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n\n    if (amount > maxFlashLoan(token)) {\n      revert IllegalArgument();\n    }\n\n    uint256 fee = flashFee(token, amount);\n\n    _mint(address(receiver), amount);\n\n    if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != CALLBACK_SUCCESS) {\n      revert IllegalState();\n    }\n\n    _burn(address(receiver), amount + fee); // Will throw error if not enough to burn\n\n    return true;\n  }\n}\n"
    },
    "contracts/interfaces/IERC3156FlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\n/// @title IERC3156FlashBorrower\n///\n/// @dev Interface of the ERC3156 FlashBorrower, as defined by [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156).\ninterface IERC3156FlashBorrower {\n  /// @notice Receive a flash loan.\n  ///\n  /// @param initiator The initiator of the loan.\n  /// @param token     The loan currency.\n  /// @param amount    The amount of tokens lent.\n  /// @param fee       The additional amount of tokens to repay.\n  /// @param data      Arbitrary data structure, intended to contain user-defined parameters.\n  ///\n  /// @return magic The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n  function onFlashLoan(\n    address initiator,\n    address token,\n    uint256 amount,\n    uint256 fee,\n    bytes calldata data\n  ) external returns (bytes32 magic);\n}"
    },
    "contracts/interfaces/IERC3156FlashLender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./IERC3156FlashBorrower.sol\";\n\n/// @title IERC3156FlashLender\n///\n/// @dev Interface of the ERC3156 FlashLender, as defined by [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156).\ninterface IERC3156FlashLender {\n  /// @notice The amount of currency available to be lent out.\n  ///\n  /// @param token The loan currency.\n  ///\n  /// @return amount The amount of `token` that can be borrowed.\n  function maxFlashLoan(address token) external view returns (uint256 amount);\n\n  /// @notice The fee to be charged for a given loan.\n  ///\n  /// @param token The loan currency.\n  /// @param amount The amount of tokens lent.\n  ///\n  /// @return fee The amount of token to be charged for the loan, on top of the returned principal.\n  function flashFee(address token, uint256 amount) external view returns (uint256 fee);\n\n  /// @notice Initiate a flash loan.\n  ///\n  /// @param receiver The receiver of the tokens in the loan and the receiver of the callback.\n  /// @param token    The loan currency.\n  /// @param amount   The amount of tokens lent.\n  /// @param data     Arbitrary data structure, intended to contain user-defined parameters.\n  ///\n  /// @return success If the flash loan was successful.\n  function flashLoan(\n    IERC3156FlashBorrower receiver,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool success);\n}"
    },
    "contracts/test/TestFlashBorrower.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../interfaces/IERC3156FlashLender.sol\";\nimport \"../interfaces/IERC3156FlashBorrower.sol\";\nimport \"../interfaces/IERC20Minimal.sol\";\n\ncontract TestFlashBorrower {\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n  constructor() {}\n\n  function takeLoan(\n    address flashLender,\n    address token,\n    uint256 amount\n  ) external {\n    uint256 fee = IERC3156FlashLender(flashLender).flashFee(flashLender, amount);\n    IERC20Minimal(token).approve(flashLender, amount + fee);\n    IERC3156FlashLender(flashLender).flashLoan(IERC3156FlashBorrower(address(this)), token, amount, bytes(\"\"));\n  }\n\n  function onFlashLoan(\n    address from,\n    address token,\n    uint256 amount,\n    uint256 fee,\n    bytes calldata data\n  ) external returns (bytes32) {\n    return CALLBACK_SUCCESS;\n  }\n}\n"
    },
    "contracts/interfaces/external/tether/ITetherToken.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../../IERC20Minimal.sol\";\nimport \"../../IERC20Metadata.sol\";\n\n/// @title ITetherToken\ninterface ITetherToken is IERC20Minimal, IERC20Metadata {\n  // @notice Deprecate current contract in favour of a new one.\n  function deprecate(address _upgradedAddress) external;\n\n  /// @notice Issue a new amount of tokens.\n  ///\n  /// These tokens are deposited into the owner address.\n  ///\n  /// @param amount Number of tokens to be issued.\n  function issue(uint256 amount) external;\n\n  /// @notice Redeem tokens.\n  ///\n  /// These tokens are withdrawn from the owner address if the balance must be enough to cover the redeem or the call\n  /// will fail.\n  ///\n  /// @param amount Number of tokens to be issued.\n  function redeem(uint256 amount) external;\n\n  function setParams(uint256 newBasisPoints, uint256 newMaxFee) external;\n\n  // @notice Emitted when new token are issued.\n  event Issue(uint256 amount);\n\n  // @notice Emitted when tokens are redeemed.\n  event Redeem(uint256 amount);\n\n  // @notice Emitted when contract is deprecated.\n  event Deprecate(address newAddress);\n\n  // @notice Emitted if contract ever adds fees.\n  event Params(uint256 feeBasisPoints, uint256 maxFee);\n}\n"
    },
    "contracts/interfaces/external/aave/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport {IERC20Minimal} from \"../../IERC20Minimal.sol\";\nimport {IScaledBalanceToken} from \"./IScaledBalanceToken.sol\";\n\ninterface IAToken is IERC20Minimal, IScaledBalanceToken {\n  /// @dev Emitted after the mint action.\n  ///\n  /// @param from  The address performing the mint.\n  /// @param value The amount being.\n  /// @param index The new liquidity index of the reserve.\n  event Mint(address indexed from, uint256 value, uint256 index);\n\n  /// @dev Emitted after aTokens are burned.\n  ///\n  /// @param from   The owner of the aTokens, getting them burned.\n  /// @param target The address that will receive the underlying.\n  /// @param value  The amount being burned.\n  /// @param index  The new liquidity index of the reserve.\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n\n  /// @dev Emitted during the transfer action.\n  ///\n  /// @param from  The user whose tokens are being transferred.\n  /// @param to    The recipient.\n  /// @param value The amount being transferred.\n  /// @param index The new liquidity index of the reserve.\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n  /// @dev Mints `amount` aTokens to `user`.\n  ///\n  /// @param user   The address receiving the minted tokens.\n  /// @param amount The amount of tokens getting minted.\n  /// @param index  The new liquidity index of the reserve.\n  ///\n  /// @return success `true` if the the previous balance of the user was 0\n  function mint(\n    address user,\n    uint256 amount,\n    uint256 index\n  ) external returns (bool success);\n\n  /// @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`.\n  ///\n  /// @param user                 The owner of the aTokens, getting them burned.\n  /// @param receiverOfUnderlying The address that will receive the underlying.\n  /// @param amount               The amount being burned.\n  /// @param index                The new liquidity index of the reserve.\n  function burn(\n    address user,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external;\n\n  /// @dev Mints aTokens to the reserve treasury.\n  ///\n  /// @param amount The amount of tokens getting minted.\n  /// @param index  The new liquidity index of the reserve.\n  function mintToTreasury(uint256 amount, uint256 index) external;\n\n  /// @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken.\n  ///\n  /// @param from  The address getting liquidated, current owner of the aTokens.\n  /// @param to    The recipient.\n  /// @param value The amount of tokens getting transferred\n  function transferOnLiquidation(\n    address from,\n    address to,\n    uint256 value\n  ) external;\n\n  /// @dev Transfers the underlying asset to `target`.\n  ///\n  /// Used by the LendingPool to transfer assets in `borrow`, `withdraw`, and `flashLoan`.\n  ///\n  /// @param user   The recipient of the aTokens.\n  /// @param amount The amount getting transferred.\n  ///\n  /// @return transferredAmount The amount transferred.\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256 transferredAmount);\n}\n"
    },
    "contracts/interfaces/external/aave/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\ninterface IScaledBalanceToken {\n  /// @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated stored balance\n  ///      divided by the reserve's liquidity index at the moment of the update.\n  ///\n  /// @param user The user whose balance is calculated.\n  ///\n  /// @return The scaled balance of the user.\n  function scaledBalanceOf(address user) external view returns (uint256);\n\n  /// @dev Returns the scaled balance of the user and the scaled total supply.\n  ///\n  /// @param user The address of the user.\n  ///\n  /// @return scaledBalance     The scaled balance of the user.\n  /// @return scaledTotalSupply The scaled balance and the scaled total supply.\n  function getScaledUserBalanceAndSupply(address user)\n    external view\n    returns (\n      uint256 scaledBalance,\n      uint256 scaledTotalSupply\n    );\n\n  /// @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index).\n  ///\n  /// @return The scaled total supply.\n  function scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/external/aave/IStaticAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IAToken} from \"./IAToken.sol\";\nimport {ILendingPool} from \"./ILendingPool.sol\";\n\n/// @title  IStaticAToken\n/// @author Aave\n///\n/// @dev Wrapper token that allows to deposit tokens on the Aave protocol and receive token which balance doesn't\n///      increase automatically, but uses an ever-increasing exchange rate. Only supporting deposits and withdrawals.\ninterface IStaticAToken is IERC20 {\n  struct SignatureParams {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  function LENDING_POOL() external returns (ILendingPool);\n  function ATOKEN() external returns (IERC20);\n  function ASSET() external returns (IERC20);\n\n  function _nonces(address owner) external returns (uint256);\n\n  function deposit(\n    address recipient,\n    uint256 amount,\n    uint16 referralCode,\n    bool fromUnderlying\n  ) external returns (uint256);\n\n  function withdraw(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256);\n\n  function withdrawDynamicAmount(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s,\n    uint256 chainId\n  ) external;\n\n  function metaDeposit(\n    address depositor,\n    address recipient,\n    uint256 value,\n    uint16 referralCode,\n    bool fromUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256);\n\n  function metaWithdraw(\n    address owner,\n    address recipient,\n    uint256 staticAmount,\n    uint256 dynamicAmount,\n    bool toUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256, uint256);\n\n  function dynamicBalanceOf(address account) external view returns (uint256);\n\n  /// @dev Converts a static amount (scaled balance on aToken) to the aToken/underlying value, using the current\n  ///      liquidity index on Aave.\n  ///\n  /// @param amount The amount to convert from.\n  ///\n  /// @return dynamicAmount The dynamic amount.\n  function staticToDynamicAmount(uint256 amount) external view returns (uint256 dynamicAmount);\n\n  /// @dev Converts an aToken or underlying amount to the what it is denominated on the aToken as scaled balance,\n  ///      function of the principal and the liquidity index.\n  ///\n  /// @param amount The amount to convert from.\n  ///\n  /// @return staticAmount The static (scaled) amount.\n  function dynamicToStaticAmount(uint256 amount) external view returns (uint256 staticAmount);\n\n  /// @dev Returns the Aave liquidity index of the underlying aToken, denominated rate here as it can be considered as\n  ///      an ever-increasing exchange rate.\n  ///\n  /// @return The rate.\n  function rate() external view returns (uint256);\n\n  /// @dev Function to return a dynamic domain separator, in order to be compatible with forks changing chainId.\n  ///\n  /// @param chainId The chain id.\n  ///\n  /// @return The domain separator.\n  function getDomainSeparator(uint256 chainId) external returns (bytes32);\n}"
    },
    "contracts/interfaces/external/aave/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport * as DataTypes from \"./DataTypes.sol\";\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\n\ninterface ILendingPool {\n  /// @dev Emitted on `deposit`.\n  ///\n  /// @param reserve    The address of the underlying asset of the reserve.\n  /// @param user       The address initiating the deposit.\n  /// @param onBehalfOf The beneficiary of the deposit, receiving the aTokens.\n  /// @param amount     The amount deposited.\n  /// @param referral   The referral code used.\n  event Deposit(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referral\n  );\n\n  /// @dev Emitted on `withdraw`.\n  ///\n  /// @param reserve The address of the underlying asset being withdrawn.\n  /// @param user    The address initiating the withdrawal, owner of aTokens.\n  /// @param to      Address that will receive the underlying.\n  /// @param amount  The amount to be withdrawn.\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n  \n  /// @dev Emitted on `borrow` and `flashLoan` when debt needs to be opened.\n  ///\n  /// @param reserve        The address of the underlying asset being borrowed.\n  /// @param user           The address of the user initiating the `borrow`, receiving the funds on `borrow` or just\n  ///                       initiator of the transaction on `flashLoan`.\n  /// @param onBehalfOf     The address that will be getting the debt.\n  /// @param amount         The amount borrowed out.\n  /// @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable.\n  /// @param borrowRate     The numeric rate at which the user has borrowed.\n  /// @param referral       The referral code used.\n  event Borrow(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint256 borrowRateMode,\n    uint256 borrowRate,\n    uint16 indexed referral\n  );\n\n  /// @dev Emitted on `repay`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve.\n  /// @param user    The beneficiary of the repayment, getting his debt reduced.\n  /// @param repayer The address of the user initiating the `repay`, providing the funds.\n  /// @param amount  The amount repaid.\n  event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n  \n  /// @dev Emitted on `swapBorrowRateMode`.\n  ///\n  /// @param reserve  The address of the underlying asset of the reserve\n  /// @param user     The address of the user swapping his rate mode\n  /// @param rateMode The rate mode that the user wants to swap to\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n  \n  /// @dev Emitted on `setUserUseReserveAsCollateral`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve\n  /// @param user    The address of the user enabling the usage as collateral\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n  /// @dev Emitted on `setUserUseReserveAsCollateral`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve\n  /// @param user    The address of the user enabling the usage as collateral\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n  \n  /// @dev Emitted on `rebalanceStableBorrowRate`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve\n  /// @param user    The address of the user for which the rebalance has been executed\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n  /// @dev Emitted on `flashLoan`.\n  ///\n  /// @param target       The address of the flash loan receiver contract.\n  /// @param initiator    The address initiating the flash loan.\n  /// @param asset        The address of the asset being flash borrowed.\n  /// @param amount       The amount flash borrowed.\n  /// @param premium      The fee flash borrowed.\n  /// @param referralCode The referral code used.\n  event FlashLoan(\n    address indexed target,\n    address indexed initiator,\n    address indexed asset,\n    uint256 amount,\n    uint256 premium,\n    uint16 referralCode\n  );\n\n  /// @dev Emitted when the pause is triggered.\n  event Paused();\n\n  /// @dev Emitted when the pause is lifted.\n  event Unpaused();\n\n  /// @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via LendingPoolCollateral\n  ///      manager using a DELEGATECALL.\n  ///\n  /// This allows to have the events in the generated ABI for LendingPool.\n  ///\n  /// @param collateralAsset            The address of the underlying asset used as collateral, to receive as result of\n  ///                                   the liquidation.\n  /// @param debtAsset                  The address of the underlying borrowed asset to be repaid with the liquidation.\n  /// @param user                       The address of the borrower getting liquidated.\n  /// @param debtToCover                The debt amount of borrowed `asset` the liquidator wants to cover.\n  /// @param liquidatedCollateralAmount The amount of collateral received by the liquidator.\n  /// @param liquidator                 The address of the liquidator\n  /// @param receiveAToken              `true` if the liquidators wants to receive the collateral aTokens, `false` if\n  ///                                   he wants to receive the underlying collateral asset directly.\n  event LiquidationCall(\n    address indexed collateralAsset,\n    address indexed debtAsset,\n    address indexed user,\n    uint256 debtToCover,\n    uint256 liquidatedCollateralAmount,\n    address liquidator,\n    bool receiveAToken\n  );\n\n  /// @dev Emitted when the state of a reserve is updated.\n  ///\n  /// NOTE: This event is actually declared in the ReserveLogic library and emitted in the `updateInterestRates`\n  /// function. Since the function is internal, the event will actually be fired by the LendingPool contract. The event\n  /// is therefore replicated here so it gets added to the LendingPool ABI.\n  ///\n  /// @param reserve             The address of the underlying asset of the reserve.\n  /// @param liquidityRate       The new liquidity rate.\n  /// @param stableBorrowRate    The new stable borrow rate.\n  /// @param variableBorrowRate  The new variable borrow rate.\n  /// @param liquidityIndex      The new liquidity index\n  /// @param variableBorrowIndex The new variable borrow index\n  event ReserveDataUpdated(\n    address indexed reserve,\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex\n  );\n\n  /// @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n  ///\n  /// - E.g. User deposits 100 USDC and gets in return 100 aUSDC.\n  ///\n  /// @param asset        The address of the underlying asset to deposit.\n  /// @param amount       The amount to be deposited.\n  /// @param onBehalfOf   The address that will receive the aTokens, same as msg.sender if the user wants to receive\n  ///                     them on his own wallet, or a different address if the beneficiary of aTokens is a different\n  ///                     wallet.\n  /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.0 if the\n  ///                     action is executed directly by the user, without any middle-man\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /// @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned.\n  ///\n  /// E.g. User has 100 aUSDC, calls `withdraw` and receives 100 USDC, burning the 100 aUSDC.\n  ///\n  /// @param asset  The address of the underlying asset to withdraw\n  /// @param amount The underlying amount to be withdrawn.\n  /// @param to     Address that will receive the underlying, same as msg.sender if the user wants to receive it on his\n  ///               own wallet, or a different address if the beneficiary is a different wallet.\n  ///\n  /// @return amountWithdrawn The final amount withdrawn\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256 amountWithdrawn);\n\n  /// @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n  ///     already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n  ///     corresponding debt token (StableDebtToken or VariableDebtToken).\n  ///\n  /// - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet and\n  ///   100 stable/variable debt tokens, depending on the `interestRateMode`.\n  ///\n  /// @param asset            The address of the underlying asset to borrow.\n  /// @param amount           The amount to be borrowed.\n  /// @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n  /// @param referralCode     Code used to register the integrator originating the operation, for potential rewards.\n  ///                         0 if the action is executed directly by the user, without any middle-man\n  /// @param onBehalfOf       Address of the user who will receive the debt. Should be the address of the borrower\n  ///                         itself calling the function if he wants to borrow against his own collateral, or the\n  ///                         address of the credit delegator if he has been given credit delegation allowance\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /// @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned.\n  ///\n  /// - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address.\n  ///\n  /// @param asset      The address of the borrowed underlying asset previously borrowed.\n  /// @param amount     The amount to repay.\n  /// @param rateMode   The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n  /// @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the user\n  ///                   calling the function if he wants to reduce/remove his own debt, or the address of any other\n  ///                   other borrower whose debt should be removed.\n  ///\n  /// @return amountRepaid The final amount repaid.\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external returns (uint256 amountRepaid);\n\n  /// @dev Allows a borrower to swap his debt between stable and variable mode, or vice versa.\n  ///\n  /// @param asset    The address of the underlying asset borrowed.\n  /// @param rateMode The rate mode that the user wants to swap to.\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n  /// @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n  ///\n  /// - Users can be rebalanced if the following conditions are satisfied:\n  ///   1. Usage ratio is above 95%\n  ///   2. the current deposit APY is below REBALANCE_UP_THRESHOLD  maxVariableBorrowRate, which means that too much\n  ///      has been borrowed at a stable rate and depositors are not earning enough.\n  ///\n  /// @param asset The address of the underlying asset borrowed.\n  /// @param user The address of the user to be rebalanced.\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /// @dev Allows depositors to enable/disable a specific deposited asset as collateral.\n  ///\n  /// @param asset            The address of the underlying asset deposited.\n  /// @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise.\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n  \n  /// @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1.\n  ///\n  /// - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives a\n  ///   proportionally amount of the `collateralAsset` plus a bonus to cover market risk.\n  ///\n  /// @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the\n  ///                        liquidation.\n  /// @param debtAsset       The address of the underlying borrowed asset to be repaid with the liquidation.\n  /// @param user            The address of the borrower getting liquidated.\n  /// @param debtToCover     The debt amount of borrowed `asset` the liquidator wants to cover.\n  /// @param receiveAToken   `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to\n  ///                        receive the underlying collateral asset directly\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  /// @dev Allows smart contracts to access the liquidity of the pool within one transaction, as long as the amount\n  ///      taken plus a fee is returned.\n  ///\n  /// IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be kept into\n  /// consideration.\n  ///\n  /// For further details please visit https://developers.aave.com.\n  ///\n  /// @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver\n  ///                        interface.\n  /// @param assets          The addresses of the assets being flash-borrowed.\n  /// @param amounts         The amounts amounts being flash-borrowed.\n  /// @param modes           Types of the debt to open if the flash loan is not returned.\n  /// @param onBehalfOf      The address  that will receive the debt in the case of using on `modes` 1 or 2.\n  /// @param params          Variadic packed params to pass to the receiver as extra information.\n  /// @param referralCode    Code used to register the integrator originating the operation, for potential rewards. 0\n  ///                        if the action is executed directly by the user, without any middle-man\n  function flashLoan(\n    address receiverAddress,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata modes,\n    address onBehalfOf,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /// @dev Returns the user account data across all the reserves.\n  ///\n  /// @param user The address of the user.\n  ///\n  /// @return totalCollateralETH          The total collateral in ETH of the user.\n  /// @return totalDebtETH                The total debt in ETH of the user.\n  /// @return availableBorrowsETH         The borrowing power left of the user.\n  /// @return currentLiquidationThreshold The liquidation threshold of the user.\n  /// @return ltv                         The loan to value of the user.\n  /// @return healthFactor                The current health factor of the user.\n  function getUserAccountData(address user)\n    external\n    view\n    returns (\n      uint256 totalCollateralETH,\n      uint256 totalDebtETH,\n      uint256 availableBorrowsETH,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    );\n\n  function initReserve(\n    address reserve,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n  function setConfiguration(address reserve, uint256 configuration) external;\n\n  /// @dev Returns the configuration of the reserve.\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The configuration of the reserve.\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n  /// @dev Returns the configuration of the user across all the reserves.\n  ///\n  /// @param user The user address.\n  ///\n  /// @return The configuration of the user.\n  function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n  \n  /// @dev Returns the normalized income normalized income of the reserve.\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The reserve's normalized income.\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /// @dev Returns the normalized variable debt per unit of asset.`\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The reserve normalized variable debt.\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n  /// @dev Returns the state and configuration of the reserve.\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The state of the reserve.\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromAfter,\n    uint256 balanceToBefore\n  ) external;\n\n  function getReservesList() external view returns (address[] memory);\n\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n  function setPause(bool val) external;\n\n  function paused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/external/aave/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\n// @dev Refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\nstruct ReserveData {\n  // Stores the reserve configuration.\n  ReserveConfigurationMap configuration;\n  // The liquidity index. Expressed in ray.\n  uint128 liquidityIndex;\n  // Variable borrow index. Expressed in ray.\n  uint128 variableBorrowIndex;\n  // The current supply rate. Expressed in ray.\n  uint128 currentLiquidityRate;\n  // The current variable borrow rate. Expressed in ray.\n  uint128 currentVariableBorrowRate;\n  // The current stable borrow rate. Expressed in ray.\n  uint128 currentStableBorrowRate;\n  uint40 lastUpdateTimestamp;\n  // Tokens addresses.\n  address aTokenAddress;\n  address stableDebtTokenAddress;\n  address variableDebtTokenAddress;\n  // Address of the interest rate strategy.\n  address interestRateStrategyAddress;\n  // The id of the reserve. Represents the position in the list of the active reserves.\n  uint8 id;\n}\n\nstruct ReserveConfigurationMap {\n  //bit 0-15: LTV\n  //bit 16-31: Liq. threshold\n  //bit 32-47: Liq. bonus\n  //bit 48-55: Decimals\n  //bit 56: Reserve is active\n  //bit 57: reserve is frozen\n  //bit 58: borrowing is enabled\n  //bit 59: stable rate borrowing enabled\n  //bit 60-63: reserved\n  //bit 64-79: reserve factor\n  uint256 data;\n}\n\nstruct UserConfigurationMap {\n  uint256 data;\n}\n\nenum InterestRateMode {\n  NONE,\n  STABLE,\n  VARIABLE\n}"
    },
    "contracts/interfaces/external/aave/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\n/// @title  ILendingPoolAddressesProvider\n/// @author Aave\n///\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles.\n///\n/// - Acting also as factory of proxies and admin of those, so with right to change its implementations.\n/// - Owned by the Aave Governance.\ninterface ILendingPoolAddressesProvider {\n  event MarketIdSet(string newMarketId);\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function getMarketId() external view returns (string memory);\n\n  function setMarketId(string calldata marketId) external;\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address impl) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "contracts/AlchemicTokenV2Base.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport {AccessControlUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/Errors.sol\";\n\nimport {IERC3156FlashBorrower} from \"./interfaces/IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"./interfaces/IERC3156FlashLender.sol\";\n\n/// @title  AlchemicTokenV2\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for version two alchemic tokens.\n/// @notice Initially, the contract deployer is given both the admin and minter role. This allows them to pre-mine\n///         tokens, transfer admin to a timelock contract, and lastly, grant the staking pools the minter role. After\n///         this is done, the deployer must revoke their admin role and minter role.\ncontract AlchemicTokenV2Base is ERC20Upgradeable, AccessControlUpgradeable, IERC3156FlashLender, ReentrancyGuardUpgradeable {\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\n  /// @notice The expected return value from a flash mint receiver\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n  /// @notice The maximum number of basis points needed to represent 100%.\n  uint256 public constant BPS = 10000;\n\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping(address => bool) public whitelisted;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping(address => bool) public paused;\n\n  /// @notice The amount that each address is permitted to mint.\n  mapping(address => uint256) public mintCeiling;\n\n  /// @notice The amount of tokens that each address has already minted.\n  mapping(address => uint256) public totalMinted;\n\n  /// @notice Fee for flash minting\n  uint256 public flashMintFee;\n\n  /// @notice Max flash mint amount\n  uint256 public maxFlashLoanAmount;\n\n  /// @notice An event which is emitted when a minter is paused from minting.\n  ///\n  /// @param minter The address of the minter which was paused.\n  /// @param state  A flag indicating if the alchemist is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice An event which is emitted when the flash mint fee is updated.\n  ///\n  /// @param fee The new flash mint fee.\n  event SetFlashMintFee(uint256 fee);\n\n  function __AlchemicTokenV2Base_init() internal {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n  }\n\n  /// @dev A modifier which checks that the caller has the admin role.\n  modifier onlyAdmin() {\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks that the caller has the sentinel role.\n  modifier onlySentinel() {\n    if(!hasRole(SENTINEL_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    if(!whitelisted[msg.sender]) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @notice Sets the flash minting fee.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param newFee The new flash mint fee.\n  function setFlashFee(uint256 newFee) external onlyAdmin {\n    flashMintFee = newFee;\n    emit SetFlashMintFee(flashMintFee);\n  }\n\n  /// @notice Mints tokens to `a recipient.`\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  /// @notice This function reverts if `msg.sender` has exceeded their mintable ceiling.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    if (paused[msg.sender]) {\n      revert IllegalState();\n    }\n\n    uint256 total = amount + totalMinted[msg.sender];\n    if (total > mintCeiling[msg.sender]) {\n      revert IllegalState();\n    }\n\n    totalMinted[msg.sender] = total;\n\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whitelisted[minter] = state;\n  }\n\n  /// @notice Sets `sentinel` as a sentinel.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param sentinel The address to set as a sentinel.\n  function setSentinel(address sentinel) external onlyAdmin {\n    _setupRole(SENTINEL_ROLE, sentinel);\n  }\n\n  /// @notice Sets the maximum amount of tokens that `minter` is allowed to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter  The address of the minter.\n  /// @param maximum The maximum amount of tokens that the minter is allowed to mint.\n  function setCeiling(address minter, uint256 maximum) external onlyAdmin {\n    mintCeiling[minter] = maximum;\n  }\n\n  /// @notice Pauses `minter` from minting tokens.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to set as paused or unpaused.\n  /// @param state  A flag indicating if the minter should be paused or unpaused.\n  function pauseMinter(address minter, bool state) external onlySentinel {\n    paused[minter] = state;\n    emit Paused(minter, state);\n  }\n\n  /// @notice Burns `amount` tokens from `msg.sender`.\n  ///\n  /// @param amount The amount of tokens to be burned.\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n\n  /// @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n  ///\n  /// @param account The address the burn tokens from.\n  /// @param amount  The amount of tokens to burn.\n  function burnFrom(address account, uint256 amount) external {\n    uint256 newAllowance = allowance(account, msg.sender) - amount;\n\n    _approve(account, msg.sender, newAllowance);\n    _burn(account, amount);\n  }\n\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\n  ///\n  /// @notice This reverts if the `msg.sender` is not whitelisted.\n  ///\n  /// @param amount The amount to lower the minted amount by.\n  function lowerHasMinted(uint256 amount) external onlyWhitelisted {\n    totalMinted[msg.sender] = totalMinted[msg.sender] - amount;\n  }\n\n  /// @notice Adjusts the maximum flashloan amount.\n  ///\n  /// @param _maxFlashLoanAmount The maximum flashloan amount.\n  function setMaxFlashLoan(uint _maxFlashLoanAmount) external onlyAdmin {\n    maxFlashLoanAmount = _maxFlashLoanAmount;\n  }\n\n  /// @notice Gets the maximum amount to be flash loaned of a token.\n  ///\n  /// @param token The address of the token.\n  ///\n  /// @return The maximum amount of `token` that can be flashed loaned.\n  function maxFlashLoan(address token) public view override returns (uint256) {\n    if (token != address(this)) {\n      return 0;\n    }\n    return maxFlashLoanAmount;\n  }\n\n  /// @notice Gets the flash loan fee of `amount` of `token`.\n  ///\n  /// @param token  The address of the token.`\n  /// @param amount The amount of `token` to flash mint.\n  ///\n  /// @return The flash loan fee.\n  function flashFee(address token, uint256 amount) public view override returns (uint256) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n    return amount * flashMintFee / BPS;\n  }\n\n  /// @notice Performs a flash mint (called flash loan to confirm with ERC3156 standard).\n  ///\n  /// @param receiver The address which will receive the flash minted tokens.\n  /// @param token    The address of the token to flash mint.\n  /// @param amount   How much to flash mint.\n  /// @param data     ABI encoded data to pass to the receiver.\n  ///\n  /// @return If the flash loan was successful.\n  function flashLoan(\n    IERC3156FlashBorrower receiver,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external override nonReentrant returns (bool) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n\n    if (amount > maxFlashLoan(token)) {\n      revert IllegalArgument();\n    }\n\n    uint256 fee = flashFee(token, amount);\n\n    _mint(address(receiver), amount);\n\n    if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != CALLBACK_SUCCESS) {\n      revert IllegalState();\n    }\n\n    _burn(address(receiver), amount + fee); // Will throw error if not enough to burn\n\n    return true;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/CrossChainCanonicalAlchemicTokenV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport {CrossChainCanonicalBase} from \"./CrossChainCanonicalBase.sol\";\nimport {AlchemicTokenV2Base} from \"./AlchemicTokenV2Base.sol\";\n\ncontract CrossChainCanonicalAlchemicTokenV2 is CrossChainCanonicalBase, AlchemicTokenV2Base {\n  function initialize(\n      string memory name, \n      string memory symbol, \n      address[] memory _bridgeTokens\n  ) public initializer {\n    __CrossChainCanonicalBase_init(\n      name,\n      symbol,\n      msg.sender,\n      _bridgeTokens\n    );\n    __AlchemicTokenV2Base_init();\n  }\n}\n"
    },
    "contracts/CrossChainCanonicalBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport {ERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IllegalArgument, IllegalState} from \"./base/Errors.sol\";\n\nimport {TokenUtils} from \"./libraries/TokenUtils.sol\";\n\ncontract CrossChainCanonicalBase is ERC20PermitUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\n\n    // Constants for various precisions\n    uint256 private constant FEE_PRECISION = 1e6; // Okay to use constant declarations since compiler does not reserve a storage slot\n\n    /* ========== STATE VARIABLES ========== */\n\n    // Swap fee numerators, denominator of FEE_PRECISION\n    mapping(address => uint256[2]) public swapFees;\n    mapping(address => bool) public feeExempt;\n\n    // Acceptable old tokens\n    address[] public bridgeTokensArray; // Used for external UIs\n    mapping(address => bool) public bridgeTokens; // Used for the logic checks\n\n    // Administrative booleans\n    bool public exchangesPaused; // Pause old token exchanges in case of an emergency\n    mapping(address => bool) public bridgeTokenEnabled;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier validBridgeToken(address tokenAddress) {\n        if (!bridgeTokenEnabled[tokenAddress]) {\n            revert IllegalState();\n        }\n        _;\n    }\n\n    /* ========== INITIALIZER ========== */\n\n    function __CrossChainCanonicalBase_init(\n        string memory _name,\n        string memory _symbol,\n        address _creatorAddress,\n        address[] memory _bridgeTokens\n    ) internal {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __EIP712_init_unchained(_name, \"1\");\n        __ERC20_init_unchained(_name, _symbol);\n        __ERC20Permit_init_unchained(_name);\n        __ReentrancyGuard_init_unchained(); // Note: this is called here but not in AlchemicTokenV2Base. Careful if inheriting that without this\n        _transferOwnership(_creatorAddress);\n\n        // Initialize the starting old tokens\n        for (uint256 i = 0; i < _bridgeTokens.length; i++){ \n            // Mark as accepted\n            bridgeTokens[_bridgeTokens[i]] = true;\n\n            // Add to the array\n            bridgeTokensArray.push(_bridgeTokens[i]);\n\n            // Set a small swap fee initially of 0.04%\n            swapFees[_bridgeTokens[i]] = [400, 400];\n\n            // Make sure swapping is on\n            bridgeTokenEnabled[_bridgeTokens[i]] = true;\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    // Helpful for UIs\n    function allBridgeTokens() external view returns (address[] memory) {\n        return bridgeTokensArray;\n    }\n\n    function _isFeeExempt(address targetAddress) internal view returns (bool) {\n        return feeExempt[targetAddress];\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Exchange old tokens for these canonical tokens\n    function exchangeOldForCanonical(address bridgeTokenAddress, uint256 tokenAmount) external nonReentrant validBridgeToken(bridgeTokenAddress) returns (uint256 canonicalTokensOut) {\n        if (exchangesPaused) {\n            revert IllegalState();\n        }\n\n        if (!bridgeTokenEnabled[bridgeTokenAddress]) {\n            revert IllegalState();\n        }\n\n        // Pull in the old tokens\n        TokenUtils.safeTransferFrom(bridgeTokenAddress, msg.sender, address(this), tokenAmount);\n\n        // Handle the fee, if applicable\n        canonicalTokensOut = tokenAmount;\n        if (!_isFeeExempt(msg.sender)) {\n            canonicalTokensOut -= ((canonicalTokensOut * swapFees[bridgeTokenAddress][0]) / FEE_PRECISION);\n        }\n\n        // Mint canonical tokens and give it to the sender\n        super._mint(msg.sender, canonicalTokensOut);\n    }\n\n    // Exchange canonical tokens for old tokens\n    function exchangeCanonicalForOld(address bridgeTokenAddress, uint256 tokenAmount) external nonReentrant validBridgeToken(bridgeTokenAddress) returns (uint256 bridgeTokensOut) {\n        if (exchangesPaused) {\n            revert IllegalState();\n        }\n\n        if (!bridgeTokenEnabled[bridgeTokenAddress]) {\n            revert IllegalState();\n        }\n\n        // Burn the canonical tokens\n        super._burn(msg.sender, tokenAmount);\n\n        // Handle the fee, if applicable\n        bridgeTokensOut = tokenAmount;\n        if (!_isFeeExempt(msg.sender)) {\n            bridgeTokensOut -= ((bridgeTokensOut * swapFees[bridgeTokenAddress][1]) / FEE_PRECISION);\n        }\n\n        // Give old tokens to the sender\n        TokenUtils.safeTransfer(bridgeTokenAddress, msg.sender, bridgeTokensOut);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS, BUT CUSTODIAN CAN CALL TOO ========== */\n\n    function toggleExchanges() external onlyOwner {\n        exchangesPaused = !exchangesPaused;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function addBridgeToken(address bridgeTokenAddress) external onlyOwner {\n        // Make sure the token is not already present\n        for (uint i = 0; i < bridgeTokensArray.length; i++){ \n            if (bridgeTokensArray[i] == bridgeTokenAddress) {\n                revert IllegalState();\n            }\n        }\n\n        // Add the old token\n        bridgeTokensArray.push(bridgeTokenAddress);\n\n        // Turn swapping on\n        bridgeTokenEnabled[bridgeTokenAddress] = true;\n\n        emit BridgeTokenAdded(bridgeTokenAddress);\n    }\n\n    function toggleBridgeToken(address bridgeTokenAddress, bool enabled) external onlyOwner {\n        // Toggle swapping\n        bridgeTokenEnabled[bridgeTokenAddress] = enabled;\n\n        emit BridgeTokenToggled(bridgeTokenAddress, enabled);\n    }\n\n    function setSwapFees(address bridgeTokenAddress, uint256 _bridgeToCanonical, uint256 _canonicalToOld) external onlyOwner {\n        swapFees[bridgeTokenAddress] = [_bridgeToCanonical, _canonicalToOld];\n\n        emit SwapFeeSet(bridgeTokenAddress, _bridgeToCanonical, _canonicalToOld);\n    }\n\n    function toggleFeesForAddress(address targetAddress) external onlyOwner {\n        feeExempt[targetAddress] = !feeExempt[targetAddress];\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        if (tokenAddress == address(this)) {\n            revert IllegalArgument();\n        }\n\n        if (bridgeTokenEnabled[tokenAddress]) {\n            revert IllegalState();\n        }\n\n        TokenUtils.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event BridgeTokenAdded(address indexed bridgeTokenAddress);\n    event BridgeTokenToggled(address indexed bridgeTokenAddress, bool state);\n    event SwapFeeSet(address indexed bridgeTokenAddress, uint bridgeToCanonical, uint canonicalToOld);\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal onlyInitializing {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/test/yearn/YearnVaultMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {TokenUtils, IERC20Minimal} from \"../../libraries/TokenUtils.sol\";\n\ncontract YearnVaultMock is ERC20 {\n  uint256 public constant PERCENT_RESOLUTION = 10000;\n  uint256 public min = 9500;\n  uint256 public constant max = 10000;\n\n  address public token;\n\n  uint256 public depositLimit;\n\n  // this is for testing purposes only. not an actual part of a yearn vault\n  uint256 public forcedSlippage = 0;\n\n  constructor(address _token) ERC20(\"Yearn Mock\", \"yMOCK\") {\n    token = _token;\n    depositLimit = type(uint256).max;\n  }\n\n  function vdecimals() external view returns (uint8) {\n    return decimals();\n  }\n\n  function balance() public view returns (uint256) {\n    return IERC20Minimal(token).balanceOf(address(this));\n  }\n\n  function available() public view returns (uint256) {\n    return (IERC20Minimal(token).balanceOf(address(this)) * min) / max;\n  }\n\n  function deposit() external returns (uint256) {\n    return deposit(type(uint256).max);\n  }\n\n  function deposit(uint256 _amount) public returns (uint256) {\n    uint256 _pool = balance();\n    uint256 _before = IERC20Minimal(token).balanceOf(address(this));\n    // If _amount not specified, transfer the full token balance,\n    // up to deposit limit\n    if (_amount == type(uint256).max) {\n      _amount = Math.min(depositLimit - balance(), IERC20Minimal(token).balanceOf(msg.sender));\n    } else {\n      require(balance() + _amount <= depositLimit, \"deposit limit breached\");\n    }\n\n    require(_amount > 0, \"must deposit something\");\n\n    TokenUtils.safeTransferFrom(token, msg.sender, address(this), _amount);\n    uint256 _after = IERC20Minimal(token).balanceOf(address(this));\n    _amount = _after - _before; // Additional check for deflationary tokens\n    uint256 _shares = 0;\n    if (totalSupply() == 0) {\n      _shares = _amount;\n    } else {\n      _shares = (_amount * totalSupply()) / _pool;\n    }\n    _mint(msg.sender, _shares);\n    return _amount;\n  }\n\n  function withdraw() external returns (uint256) {\n    return withdraw(balanceOf(msg.sender), msg.sender, 0);\n  }\n\n  function withdraw(uint256 _shares) external returns (uint256) {\n    return withdraw(_shares, msg.sender, 0);\n  }\n\n  function withdraw(uint256 _shares, address _recipient) public returns (uint256) {\n    return withdraw(_shares, _recipient, 0);\n  }\n\n  function withdraw(\n    uint256 _shares,\n    address _recipient,\n    uint256 maxSlippage\n  ) public returns (uint256) {\n    // mirror real vault behavior\n    if (_shares == type(uint256).max) {\n      _shares = balanceOf(msg.sender);\n    }\n    uint256 _r = (balance() * _shares) / totalSupply();\n    _burn(msg.sender, _shares);\n\n    // apply mock slippage\n    uint256 withdrawnAmt = _r - (_r * forcedSlippage) / PERCENT_RESOLUTION;\n    require(withdrawnAmt >= _r - (_r * maxSlippage) / PERCENT_RESOLUTION, \"too much slippage\");\n\n\n    TokenUtils.safeTransfer(token, _recipient, _r);\n    return _r;\n  }\n\n  function pricePerShare() external view returns (uint256) {\n    uint256 _totalSupply = totalSupply();\n    if (_totalSupply == 0) {\n      return 0;\n    } else {\n      return (balance() * 1e18) / totalSupply();\n    }\n  }\n\n  function maxAvailableShares() external view returns (uint256) {\n    return totalSupply();\n  }\n\n  function setDepositLimit(uint256 _depositLimit) external {\n    depositLimit = _depositLimit;\n  }\n\n  function totalAssets() external view returns (uint256) {\n    return balance();\n  }\n\n  function setForcedSlippage(uint256 _forcedSlippage) external {\n    forcedSlippage = _forcedSlippage;\n  }\n}\n"
    },
    "contracts/test/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @title ERC20Mock\n///\n/// @dev A mock of an ERC20 token which lets anyone burn and mint tokens.\ncontract ERC20Mock is ERC20 {\n  uint8 public dec;\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint8 mockDecimals\n  ) ERC20(_name, _symbol) {\n    dec = mockDecimals;\n  }\n\n  function decimals() public view override returns (uint8) {\n    return dec;\n  }\n\n  function mint(address _recipient, uint256 _amount) external {\n    _mint(_recipient, _amount);\n  }\n\n  function burn(uint256 _amount) external {\n    _burn(msg.sender, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) external {\n    _burn(_account, _amount);\n  }\n}\n"
    },
    "contracts/AlchemicTokenV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title  AlchemicTokenV1\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for version one alchemic tokens.\ncontract AlchemicTokenV1 is AccessControl, ERC20(\"Alchemix USD\", \"alUSD\") {\n  using SafeERC20 for ERC20;\n\n  /// @notice An event which is emitted when a minter is paused or unpaused.\n  ///\n  /// @param minter The address of the minter.\n  /// @param state  A flag indicating if the minter is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n  \n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping (address => bool) public whiteList;\n  \n  /// @notice A set of addresses which are blacklisted from minting new tokens.\n  mapping (address => bool) public blacklist;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping (address => bool) public paused;\n\n  /// @notice The amount that each address is permitted to mint.\n  mapping (address => uint256) public ceiling;\n\n  /// @notice The amount of tokens that each address has already minted.\n  mapping (address => uint256) public hasMinted;\n  \n  constructor() {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    require(whiteList[msg.sender], \"AlTokenV1: Alchemist is not whitelisted\");\n    _;\n  }\n\n  /// @dev A modifier which checks that `msg.sender` is an admin.\n  modifier onlyAdmin() {\n    require(hasRole(ADMIN_ROLE, msg.sender), \"AlTokenV1: Only admin\");\n    _;\n  }\n\n  /// @dev A modifier which checks that `msg.sender` is a sentinel.\n  modifier onlySentinel() {\n    require(hasRole(SENTINEL_ROLE, msg.sender), \"AlTokenV1: Only sentinel\");\n    _;\n  }\n\n  /// @notice Mints tokens to `recipient`.\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is blacklisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  /// @notice This function reverts if `msg.sender` has exceeded their mintable ceiling.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    require(!blacklist[msg.sender], \"AlUSD: Alchemist is blacklisted.\");\n    require(!paused[msg.sender], \"AlUSD: Currently paused.\");\n\n    uint256 total = amount + hasMinted[msg.sender];\n    require(total <= ceiling[msg.sender], \"AlUSD: Alchemist's ceiling was breached.\");\n    hasMinted[msg.sender] = hasMinted[msg.sender] + amount;\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whiteList[minter] = state;\n  }\n\n  /// @notice Sets `sentinel` as a sentinel.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param sentinel The address to set as a sentinel.\n  function setSentinel(address sentinel) external onlyAdmin {\n    _setupRole(SENTINEL_ROLE, sentinel);\n  }\n\n  /// @notice Sets `minter` as blacklisted from minting.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to blacklist.\n  function setBlacklist(address minter) external onlySentinel {\n    blacklist[minter] = true;\n  }\n\n  /// @notice Pauses an alchemist from minting.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param alchemist The address of the alchemist to set as paused or unpaused.\n  /// @param state     A flag indicating if the alchemist should be paused or unpaused.\n  function pauseAlchemist(address alchemist, bool state) external onlySentinel {\n    paused[alchemist] = state;\n    emit Paused(alchemist, state);\n  }\n\n  /// @notice Sets the maximum amount of tokens that `minter` is allowed to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter  The address of the minter.\n  /// @param maximum The maximum amount of tokens that the minter is allowed to mint.\n  function setCeiling(address minter, uint256 maximum) external onlyAdmin {\n    ceiling[minter] = maximum;\n  }\n\n  /// @notice Burns `amount` tokens from `msg.sender`\n  ///\n  /// @param amount The amount of tokens to burn.\n  function burn(uint256 amount) public {\n      _burn(msg.sender, amount);\n  }\n\n  /// @notice Burns `amount` tokens from `owner`.\n  ///\n  /// @notice Reverts if the allowance of `msg.sender` is less than `amount`.\n  ///\n  /// @param owner  The address which owns the tokens to burn.\n  /// @param amount The amount of tokens to burn.\n  function burnFrom(address owner, uint256 amount) public {\n      uint256 decreasedAllowance = allowance(owner, msg.sender) - amount;\n      _approve(owner, msg.sender, decreasedAllowance);\n      _burn(owner, amount);\n  }\n\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\n  ///\n  /// @notice This reverts if the `msg.sender` is not whitelisted.\n  ///\n  /// @param amount The amount to lower the minted amount by.\n  function lowerHasMinted(uint256 amount) public onlyWhitelisted {\n      hasMinted[msg.sender] = hasMinted[msg.sender] - amount;\n  }\n}"
    },
    "contracts/test/TestWhitelisted.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport { Unauthorized } from \"../base/Errors.sol\";\n\nimport \"../utils/Whitelist.sol\";\nimport \"../interfaces/IWhitelist.sol\";\n\ncontract TestWhitelisted is AccessControl {\n  event Success();\n\n  bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n  address public whitelist;\n\n  constructor(address _whitelist) {\n    _setupRole(ADMIN, msg.sender);\n    _setRoleAdmin(ADMIN, ADMIN);\n    whitelist = _whitelist;\n  }\n\n  function test() external {\n    // Check if the message sender is an EOA. In the future, this potentially may break. It is important that\n    // functions which rely on the whitelist not be explicitly vulnerable in the situation where this no longer\n    // holds true.\n    if (tx.origin != msg.sender) {\n      // Only check the whitelist for calls from contracts.\n      if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n        revert Unauthorized();\n      }\n    }\n    emit Success();\n  }\n}\n"
    },
    "contracts/test/TestWhitelistedCaller.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./TestWhitelisted.sol\";\n\ncontract TestWhitelistedCaller {\n    constructor() {\n\n    }\n\n    function test(address target) external {\n        TestWhitelisted(target).test();\n    }\n}"
    },
    "contracts/gALCX.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\n\nimport {IALCXSource} from \"./interfaces/IALCXSource.sol\";\n\n/// @title A wrapper for single-sided ALCX staking\ncontract gALCX is ERC20 {\n\n    IERC20 public alcx = IERC20(0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF);\n    IALCXSource public pools = IALCXSource(0xAB8e74017a8Cc7c15FFcCd726603790d26d7DeCa);\n    uint public poolId = 1;\n    uint public constant exchangeRatePrecision = 1e18;\n    uint public exchangeRate = exchangeRatePrecision;\n    address public owner;\n\n    event ExchangeRateChange(uint _exchangeRate);\n    event Stake(address _from, uint _gAmount, uint _amount);\n    event Unstake(address _from, uint _gAmount, uint _amount);\n\n    /// @param _name The token name\n    /// @param _symbol The token symbol\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol, 18) {\n        owner = msg.sender;\n        reApprove();\n    }\n\n    // OWNERSHIP\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    /// @notice Transfer contract ownership\n    /// @param _owner The new owner address\n    function transferOwnership(address _owner) external onlyOwner {\n        owner = _owner;\n    }\n\n    /// @notice Set a new staking pool address and migrate funds there\n    /// @param _pools The new pool address\n    /// @param _poolId The new pool id\n    function migrateSource(address _pools, uint _poolId) external onlyOwner {\n        // Withdraw ALCX\n        bumpExchangeRate();\n\n        uint poolBalance = pools.getStakeTotalDeposited(address(this), poolId);\n        pools.withdraw(poolId, poolBalance);\n        // Update staking pool address and id\n        pools = IALCXSource(_pools);\n        poolId = _poolId;\n        // Deposit ALCX\n        uint balance = alcx.balanceOf(address(this));\n        reApprove();\n        pools.deposit(poolId, balance);\n    }\n\n    /// @notice Approve the staking pool to move funds in this address, can be called by anyone\n    function reApprove() public {\n        bool success = alcx.approve(address(pools), type(uint).max);\n    }\n\n    // PUBLIC FUNCTIONS\n\n    /// @notice Claim and autocompound rewards\n    function bumpExchangeRate() public {\n        // Claim from pool\n        pools.claim(poolId);\n        // Bump exchange rate\n        uint balance = alcx.balanceOf(address(this));\n\n        if (balance > 0) {\n            exchangeRate += (balance * exchangeRatePrecision) / totalSupply;\n            emit ExchangeRateChange(exchangeRate);\n            // Restake\n            pools.deposit(poolId, balance);\n        }\n    }\n\n    /// @notice Deposit new funds into the staking pool\n    /// @param amount The amount of ALCX to deposit\n    function stake(uint amount) external {\n        // Get current exchange rate between ALCX and gALCX\n        bumpExchangeRate();\n        // Then receive new deposits\n        bool success = alcx.transferFrom(msg.sender, address(this), amount);\n        require(success, \"Transfer failed\");\n        pools.deposit(poolId, amount);\n        // gAmount always <= amount\n        uint gAmount = amount * exchangeRatePrecision / exchangeRate;\n        _mint(msg.sender, gAmount);\n        emit Stake(msg.sender, gAmount, amount);\n    }\n\n    /// @notice Withdraw funds from the staking pool\n    /// @param gAmount the amount of gALCX to withdraw\n    function unstake(uint gAmount) external {\n        bumpExchangeRate();\n        uint amount = gAmount * exchangeRate / exchangeRatePrecision;\n        _burn(msg.sender, gAmount);\n        // Withdraw ALCX and send to user\n        pools.withdraw(poolId, amount);\n        bool success = alcx.transfer(msg.sender, amount); // Should return true or revert, but doesn't hurt\n        require(success, \"Transfer failed\"); \n        emit Unstake(msg.sender, gAmount, amount);\n    }\n}"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/interfaces/IALCXSource.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\ninterface IALCXSource {\n    function getStakeTotalDeposited(address _user, uint256 _poolId) external view returns (uint256);\n    function claim(uint256 _poolId) external;\n    function deposit(uint256 _poolId, uint256 _depositAmount) external;\n    function withdraw(uint256 _poolId, uint256 _withdrawAmount) external;\n}"
    },
    "contracts/base/SelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\nimport \"../interfaces/ISelfPermit.sol\";\nimport \"../interfaces/IERC20PermitAllowed.sol\";\n\n/// @title  Self Permit\n/// @author Uniswap Labs\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n///\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n    /// @inheritdoc ISelfPermit\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\n        selfPermitAllowed(token, nonce, expiry, v, r, s);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ISelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title  Self Permit\n/// @author Uniswap Labs\n///\n/// @notice Functionality to call permit on any EIP-2612-compliant token.\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    ///\n    /// @dev The `owner` is always msg.sender and the `spender` is always `address(this)`.\n    ///\n    /// @param token    The address of the token spent.\n    /// @param value    The amount that can be spent of token.\n    /// @param deadline A timestamp, the current block timestamp must be less than or equal to this timestamp.\n    /// @param v        Must produce valid secp256k1 signature from the holder along with `r` and `s`.\n    /// @param r        Must produce valid secp256k1 signature from the holder along with `v` and `s`.\n    /// @param s        Must produce valid secp256k1 signature from the holder along with `r` and `v`.\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`.\n    ///\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    ///\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to\n    /// [selfPermit](#selfpermit).\n    ///\n    /// @param token    The address of the token spent.\n    /// @param value    The amount that can be spent of token.\n    /// @param deadline A timestamp, the current block timestamp must be less than or equal to this timestamp.\n    /// @param v        Must produce valid secp256k1 signature from the holder along with `r` and `s`.\n    /// @param r        Must produce valid secp256k1 signature from the holder along with `v` and `s`.\n    /// @param s        Must produce valid secp256k1 signature from the holder along with `r` and `v`.\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed`\n    ///         parameter.\n    ///\n    /// @dev The `owner` is always msg.sender and the `spender` is always `address(this)`.\n    ///\n    /// @param token  The address of the token spent.\n    /// @param nonce  The current nonce of the owner.\n    /// @param expiry The timestamp at which the permit is no longer valid.\n    /// @param v      Must produce valid secp256k1 signature from the holder along with `r` and `s`.\n    /// @param r      Must produce valid secp256k1 signature from the holder along with `v` and `s`.\n    /// @param s      Must produce valid secp256k1 signature from the holder along with `r` and `v`.\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed`\n    ///         parameter.\n    ///\n    /// @dev The `owner` is always msg.sender and the `spender` is always `address(this)`.\n    ///\n    /// Can be used instead of [selfPermitAllowed](#selfpermitallowed) to prevent calls from failing due to a frontrun\n    /// of a call to [selfPermitAllowed](#selfpermitallowed).\n    ///\n    /// @param token  The address of the token spent.\n    /// @param nonce  The current nonce of the owner.\n    /// @param expiry The timestamp at which the permit is no longer valid.\n    /// @param v      Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r      Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s      Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}"
    },
    "contracts/interfaces/IERC20PermitAllowed.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title  IERC20PermitAllowed\n/// @author Uniswap Labs\n///\n/// @notice Interface used by DAI/CHAI for permit.\ninterface IERC20PermitAllowed {\n    /// @notice Approve the spender to spend some tokens via the holder signature.\n    ///\n    /// @dev This is the permit interface used by DAI and CHAI.\n    ///\n    /// @param holder  The address of the token holder, the token owner.\n    /// @param spender The address of the token spender.\n    /// @param nonce   The holder's nonce, increases at each call to permit.\n    /// @param expiry  The timestamp at which the permit is no longer valid.\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\n    /// @param v       Must produce valid secp256k1 signature from the holder along with `r` and `s`.\n    /// @param r       Must produce valid secp256k1 signature from the holder along with `v` and `s`.\n    /// @param s       Must produce valid secp256k1 signature from the holder along with `r` and `v`.\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}"
    },
    "contracts/test/TestAlchemicToken.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./TestERC20.sol\";\n\ncontract TestAlchemicToken is TestERC20 {\n    constructor(uint256 amountToMint, uint8 _decimals) TestERC20(amountToMint, _decimals) {\n    }\n\n    function hasMinted(address account) external view returns (uint256) {\n        return 0;\n    }\n\n    function lowerHasMinted(uint256 amount) external {\n        require(true);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}