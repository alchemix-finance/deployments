{
  "address": "0x0B20F9FCaF67b2A90Bc881a68562569d8638a1C5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_idleCDO",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "idleCDO",
      "outputs": [
        {
          "internalType": "contract IIdleCDO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAATranche",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xee660785f4cd971f21e8ba534801d491b8b6d0242a8d0a4213885697180af610",
  "receipt": {
    "to": null,
    "from": "0x7a6468F8161ef39d7639c67DfA5637BA1b7ba74B",
    "contractAddress": "0x0B20F9FCaF67b2A90Bc881a68562569d8638a1C5",
    "transactionIndex": 0,
    "gasUsed": "713951",
    "logsBloom": "0x
    "blockHash": "0xb29ef29566dec9f0f736b47288da4b47cfb0c9b6af5241b327834e1d5cf56739",
    "transactionHash": "0xee660785f4cd971f21e8ba534801d491b8b6d0242a8d0a4213885697180af610",
    "logs": [],
    "blockNumber": 16525550,
    "cumulativeGasUsed": "713951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6629baA8C7c6a84290Bf9a885825E3540875219D",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0x46c1f702A6aAD1Fd810216A5fF15aaB1C62ca826"
  ],
  "solcInputHash": "ef22e1b890fa13488c0a317619487e8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idleCDO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"idleCDO\",\"outputs\":[{\"internalType\":\"contract IIdleCDO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAATranche\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Idle Finance\",\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"title\":\"Idle PYT Adapter\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/idle/IdleTrancheAdapter.sol\":\"IdleTrancheAdapter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735313532363530373833\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/idle/IdleTrancheAdapter.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../../interfaces/external/idle/IIdleCDO.sol\\\";\\n\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\n\\n/// @title  Idle PYT Adapter\\n/// @author Idle Finance\\ncontract IdleTrancheAdapter is ITokenAdapter {\\n    string public constant override version = \\\"1.0.0\\\";\\n\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n    IIdleCDO public immutable idleCDO;\\n    bool public immutable isAATranche;\\n\\n    constructor(address _token, address _underlyingToken, address _idleCDO) {\\n        token = _token;\\n        underlyingToken = _underlyingToken;\\n        idleCDO = IIdleCDO(_idleCDO);\\n        isAATranche = _token == IIdleCDO(_idleCDO).AATranche();\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return idleCDO.virtualPrice(token);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(underlyingToken, address(idleCDO), 0);\\n        TokenUtils.safeApprove(underlyingToken, address(idleCDO), amount);\\n\\n        uint256 mintedTranche = isAATranche ? idleCDO.depositAA(amount) : idleCDO.depositBB(amount);\\n\\n        TokenUtils.safeTransfer(token, recipient, mintedTranche);\\n        return mintedTranche;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        uint256 balanceBefore = TokenUtils.safeBalanceOf(underlyingToken, address(this));\\n        isAATranche ? idleCDO.withdrawAA(amount) : idleCDO.withdrawBB(amount);\\n        uint256 amountWithdrawn = TokenUtils.safeBalanceOf(underlyingToken, address(this)) - balanceBefore;\\n\\n        TokenUtils.safeTransfer(underlyingToken, recipient, amountWithdrawn);\\n        return amountWithdrawn;\\n    }\\n}\\n\",\"keccak256\":\"0x1705a8fc9080bf2dd8802f01274799031e1b1a093c445491a2d6384b9c42076f\"},\"submodules/v2-foundry/src/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20 {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1ef68b8211ae0387d53a98d9ed818fed3991c029f58a4730467baa1cf6b22e58\"},\"submodules/v2-foundry/src/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20 {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    function mint(address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0x072e557e7eff54ba828d410d96e7782931a634813bccc817dc8988979a435aeb\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/idle/IIdleCDO.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\n// import \\\"../../IERC20Minimal.sol\\\";\\n// import \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title  IIdleCDO\\n/// @author Idle Finance\\ninterface IIdleCDO {\\n    function AATranche() external view returns (address);\\n    function BBTranche() external view returns (address);\\n\\n    function strategy() external view returns (address);\\n    function strategyToken() external view returns (address);\\n    function token() external view returns (address);\\n\\n    /// @notice Flag for allowing AA withdraws\\n    function allowAAWithdraw() external view returns (bool);\\n\\n    /// @notice Flag for allowing BB withdraws\\n    function allowBBWithdraw() external view returns (bool);\\n\\n    /// @param _tranche tranche address\\n    /// @return tranche price\\n    function tranchePrice(address _tranche) external view returns (uint256);\\n\\n    /// @notice calculates the current tranches price considering the interest that is yet to be splitted\\n    /// ie the interest generated since the last update of priceAA and priceBB (done on depositXX/withdrawXX/harvest)\\n    /// useful for showing updated gains on frontends\\n    /// @dev this should always be >= of _tranchePrice(_tranche)\\n    /// @param _tranche address of the requested tranche\\n    /// @return _virtualPrice tranche price considering all interest\\n    function virtualPrice(address _tranche) external view returns (uint256);\\n\\n    /// @notice pausable\\n    /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\\n    /// @param _amount amount of `token` to deposit\\n    /// @return AA tranche tokens minted\\n    function depositAA(uint256 _amount) external returns (uint256);\\n\\n    /// @notice pausable\\n    /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\\n    /// @param _amount amount of `token` to deposit\\n    /// @return BB tranche tokens minted\\n    function depositBB(uint256 _amount) external returns (uint256);\\n\\n    /// @notice pausable\\n    /// @param _amount amount of AA tranche tokens to burn\\n    /// @return underlying tokens redeemed\\n    function withdrawAA(uint256 _amount) external returns (uint256);\\n\\n    /// @notice pausable\\n    /// @param _amount amount of BB tranche tokens to burn\\n    /// @return underlying tokens redeemed\\n    function withdrawBB(uint256 _amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c373025f53fb22ac95205a61fa5a862bc599f753aa062d9e6793d6242257fa1\",\"license\":\"Apache-2.0\"},\"submodules/v2-foundry/src/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, account)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5baa0feb362479be13700eafb1bc8eee1ab10cac51bc9b317b721b5d2dd228c\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610db2380380610db2833981016040819052610030916100e2565b6001600160a01b0380841660805282811660a052811660c081905260408051630224b35d60e51b815290516344966ba0916004808201926020929091908290030181865afa158015610086573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100aa9190610125565b6001600160a01b0393841693169290921460e052506101479050565b80516001600160a01b03811681146100dd57600080fd5b919050565b6000806000606084860312156100f757600080fd5b610100846100c6565b925061010e602085016100c6565b915061011c604085016100c6565b90509250925092565b60006020828403121561013757600080fd5b610140826100c6565b9392505050565b60805160a05160c05160e051610bb56101fd6000396000818161016a0152818161028c015261045c0152600081816101430152818161021701528181610263015281816102c5015281816103550152818161049501528181610525015261064901526000818160b8015281816101ca015281816101f60152818161024201528181610433015281816105a301526105d90152600081816101a1015281816103d101528181610405015261061e0152610bb56000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a035b1fe1161005b578063a035b1fe14610136578063d4090fb81461013e578063fb1d436014610165578063fc0c546a1461019c57600080fd5b806313bac8201461008d5780632495a599146100b357806354fd4d50146100f25780637647691d14610123575b600080fd5b6100a061009b366004610a2c565b6101c3565b6040519081526020015b60405180910390f35b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100aa565b610116604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516100aa9190610ac4565b6100a0610131366004610a2c565b6103fe565b6100a0610607565b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b61018c7f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020016100aa565b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b60006101f17f00000000000000000000000000000000000000000000000000000000000000003330866106bb565b61023d7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060006107d9565b6102887f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000856107d9565b60007f000000000000000000000000000000000000000000000000000000000000000061033f5760405163e70875ad60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e70875ad906024016020604051808303816000875af1158015610316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033a9190610ad7565b6103ca565b604051635a286fe760e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b450dfce906024016020604051808303816000875af11580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190610ad7565b90506103f77f000000000000000000000000000000000000000000000000000000000000000084836108f6565b9392505050565b600061042c7f00000000000000000000000000000000000000000000000000000000000000003330866106bb565b60006104587f000000000000000000000000000000000000000000000000000000000000000030610929565b90507f000000000000000000000000000000000000000000000000000000000000000061050f576040516313357cbd60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906399abe5e8906024016020604051808303816000875af11580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190610ad7565b61059a565b6040516326bd921560e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639af64854906024016020604051808303816000875af1158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190610ad7565b506000816105c87f000000000000000000000000000000000000000000000000000000000000000030610929565b6105d29190610af0565b90506105ff7f000000000000000000000000000000000000000000000000000000000000000085836108f6565b949350505050565b604051639290d42760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639290d42790602401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190610ad7565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161071f9190610b15565b6000604051808303816000865af19150503d806000811461075c576040519150601f19603f3d011682016040523d82523d6000602084013e610761565b606091505b5091509150856001600160a01b03163b6000148061077d575081155b806107a457508051158015906107a45750808060200190518101906107a29190610b31565b155b156107d15785828260405163e7e40b5b60e01b81526004016107c893929190610b53565b60405180910390fd5b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516108469190610b15565b6000604051808303816000865af19150503d8060008114610883576040519150601f19603f3d011682016040523d82523d6000602084013e610888565b606091505b5091509150846001600160a01b03163b600014806108a4575081155b806108cb57508051158015906108cb5750808060200190518101906108c99190610b31565b155b156108ef5784828260405163e7e40b5b60e01b81526004016107c893929190610b53565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610808565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916109839190610b15565b600060405180830381855afa9150503d80600081146109be576040519150601f19603f3d011682016040523d82523d6000602084013e6109c3565b606091505b5091509150846001600160a01b03163b600014806109df575081155b806109eb575060208151105b15610a0f5784828260405163e7e40b5b60e01b81526004016107c893929190610b53565b80806020019051810190610a239190610ad7565b95945050505050565b60008060408385031215610a3f57600080fd5b8235915060208301356001600160a01b0381168114610a5d57600080fd5b809150509250929050565b60005b83811015610a83578181015183820152602001610a6b565b83811115610a92576000848401525b50505050565b60008151808452610ab0816020860160208601610a68565b601f01601f19169290920160200192915050565b6020815260006103f76020830184610a98565b600060208284031215610ae957600080fd5b5051919050565b600082821015610b1057634e487b7160e01b600052601160045260246000fd5b500390565b60008251610b27818460208701610a68565b9190910192915050565b600060208284031215610b4357600080fd5b815180151581146103f757600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610a2390830184610a9856fea2646970667358221220acf7cc81d877903e3beb8ce2c663ade194b7420b9254a9fb59f6912edc8affa964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a035b1fe1161005b578063a035b1fe14610136578063d4090fb81461013e578063fb1d436014610165578063fc0c546a1461019c57600080fd5b806313bac8201461008d5780632495a599146100b357806354fd4d50146100f25780637647691d14610123575b600080fd5b6100a061009b366004610a2c565b6101c3565b6040519081526020015b60405180910390f35b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100aa565b610116604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516100aa9190610ac4565b6100a0610131366004610a2c565b6103fe565b6100a0610607565b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b61018c7f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020016100aa565b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b60006101f17f00000000000000000000000000000000000000000000000000000000000000003330866106bb565b61023d7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060006107d9565b6102887f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000856107d9565b60007f000000000000000000000000000000000000000000000000000000000000000061033f5760405163e70875ad60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e70875ad906024016020604051808303816000875af1158015610316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033a9190610ad7565b6103ca565b604051635a286fe760e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b450dfce906024016020604051808303816000875af11580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190610ad7565b90506103f77f000000000000000000000000000000000000000000000000000000000000000084836108f6565b9392505050565b600061042c7f00000000000000000000000000000000000000000000000000000000000000003330866106bb565b60006104587f000000000000000000000000000000000000000000000000000000000000000030610929565b90507f000000000000000000000000000000000000000000000000000000000000000061050f576040516313357cbd60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906399abe5e8906024016020604051808303816000875af11580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190610ad7565b61059a565b6040516326bd921560e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639af64854906024016020604051808303816000875af1158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190610ad7565b506000816105c87f000000000000000000000000000000000000000000000000000000000000000030610929565b6105d29190610af0565b90506105ff7f000000000000000000000000000000000000000000000000000000000000000085836108f6565b949350505050565b604051639290d42760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690639290d42790602401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190610ad7565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161071f9190610b15565b6000604051808303816000865af19150503d806000811461075c576040519150601f19603f3d011682016040523d82523d6000602084013e610761565b606091505b5091509150856001600160a01b03163b6000148061077d575081155b806107a457508051158015906107a45750808060200190518101906107a29190610b31565b155b156107d15785828260405163e7e40b5b60e01b81526004016107c893929190610b53565b60405180910390fd5b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516108469190610b15565b6000604051808303816000865af19150503d8060008114610883576040519150601f19603f3d011682016040523d82523d6000602084013e610888565b606091505b5091509150846001600160a01b03163b600014806108a4575081155b806108cb57508051158015906108cb5750808060200190518101906108c99190610b31565b155b156108ef5784828260405163e7e40b5b60e01b81526004016107c893929190610b53565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610808565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916109839190610b15565b600060405180830381855afa9150503d80600081146109be576040519150601f19603f3d011682016040523d82523d6000602084013e6109c3565b606091505b5091509150846001600160a01b03163b600014806109df575081155b806109eb575060208151105b15610a0f5784828260405163e7e40b5b60e01b81526004016107c893929190610b53565b80806020019051810190610a239190610ad7565b95945050505050565b60008060408385031215610a3f57600080fd5b8235915060208301356001600160a01b0381168114610a5d57600080fd5b809150509250929050565b60005b83811015610a83578181015183820152602001610a6b565b83811115610a92576000848401525b50505050565b60008151808452610ab0816020860160208601610a68565b601f01601f19169290920160200192915050565b6020815260006103f76020830184610a98565b600060208284031215610ae957600080fd5b5051919050565b600082821015610b1057634e487b7160e01b600052601160045260246000fd5b500390565b60008251610b27818460208701610a68565b9190910192915050565b600060208284031215610b4357600080fd5b815180151581146103f757600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610a2390830184610a9856fea2646970667358221220acf7cc81d877903e3beb8ce2c663ade194b7420b9254a9fb59f6912edc8affa964736f6c634300080d0033",
  "devdoc": {
    "author": "Idle Finance",
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "title": "Idle PYT Adapter",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}