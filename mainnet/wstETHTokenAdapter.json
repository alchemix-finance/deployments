{
  "address": "0xAE7E9e8a7986C0be2562141791Bb776dAc241f7f",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "alchemist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "parentToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "curvePool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleStethEth",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ethPoolIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stEthPoolIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referral",
              "type": "address"
            }
          ],
          "internalType": "struct InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalArgument",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alchemist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPoolIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleStethEth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stEthPoolIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9ef67848ad902e24ee4336647073fb4ca40b6ff56d723f7bede753f9d6dc378f",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0xAE7E9e8a7986C0be2562141791Bb776dAc241f7f",
    "transactionIndex": 120,
    "gasUsed": "1359784",
    "logsBloom": "0x
    "blockHash": "0xa074ad92b43e2b97ccb5e733c8684bd49780b030a413bc9c0b9b66df6754c8d8",
    "transactionHash": "0x9ef67848ad902e24ee4336647073fb4ca40b6ff56d723f7bede753f9d6dc378f",
    "logs": [],
    "blockNumber": 18579675,
    "cumulativeGasUsed": "28317545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "alchemist": "0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c",
      "token": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
      "parentToken": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
      "underlyingToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "curvePool": "0xDC24316b9AE028F1497c275EB9192a3Ea0f67022",
      "oracleStethEth": "0x86392dC19c0b719886221c78AB11eb8Cf5c52812",
      "ethPoolIndex": 0,
      "stEthPoolIndex": 1,
      "referral": "0x0000000000000000000000000000000000000000"
    }
  ],
  "solcInputHash": "8e5bd00fbbc20ad8e22bdc7e02c35762",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleStethEth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethPoolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthPoolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"internalType\":\"struct InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalArgument\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPoolIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleStethEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stEthPoolIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"IllegalArgument(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"IllegalState(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"Unauthorized(string)\":[{\"params\":{\"message\":\"The error message.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalArgument(string)\":[{\"notice\":\"An error used to indicate that an argument passed to a function is illegal or         inappropriate.\"}],\"IllegalState(string)\":[{\"notice\":\"An error used to indicate that a function has encountered an unrecoverable state.\"}],\"Unauthorized(string)\":[{\"notice\":\"An error used to indicate that a message sender tried to execute a privileged function.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/lido/WstETHAdapter.sol\":\"WstETHAdapter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030303830313132303636\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/lido/WstETHAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalArgument, IllegalState, Unauthorized} from \\\"../../base/ErrorMessages.sol\\\";\\nimport {MutexLock} from \\\"../../base/MutexLock.sol\\\";\\n\\nimport {SafeERC20} from \\\"../../libraries/SafeERC20.sol\\\";\\n\\nimport {IChainlinkOracle} from \\\"../../interfaces/external/chainlink/IChainlinkOracle.sol\\\";\\nimport {ITokenAdapter} from \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport {IWETH9} from \\\"../../interfaces/external/IWETH9.sol\\\";\\nimport {IStableSwap2Pool} from \\\"../../interfaces/external/curve/IStableSwap2Pool.sol\\\";\\nimport {IStETH} from \\\"../../interfaces/external/lido/IStETH.sol\\\";\\nimport {IWstETH} from \\\"../../interfaces/external/lido/IWstETH.sol\\\";\\n\\nstruct InitializationParams {\\n    address alchemist;\\n    address token;\\n    address parentToken;\\n    address underlyingToken;\\n    address curvePool;\\n    address oracleStethEth;\\n    uint256 ethPoolIndex;\\n    uint256 stEthPoolIndex;\\n    address referral;\\n}\\n\\ncontract WstETHAdapter is ITokenAdapter, MutexLock {\\n    string public override version = \\\"1.1.0\\\";\\n\\n    address public immutable alchemist;\\n    address public immutable override token;\\n    address public immutable parentToken;\\n    address public immutable override underlyingToken;\\n    address public immutable curvePool;\\n    address public immutable oracleStethEth;\\n    uint256 public immutable ethPoolIndex;\\n    uint256 public immutable stEthPoolIndex;\\n    address public immutable referral;\\n\\n    constructor(InitializationParams memory params) {\\n        alchemist       = params.alchemist;\\n        token           = params.token;\\n        parentToken     = params.parentToken;\\n        underlyingToken = params.underlyingToken;\\n        curvePool       = params.curvePool;\\n        oracleStethEth  = params.oracleStethEth;\\n        ethPoolIndex    = params.ethPoolIndex;\\n        stEthPoolIndex  = params.stEthPoolIndex;\\n        referral        = params.referral;\\n\\n        // Verify and make sure that the provided ETH matches the curve pool ETH.\\n        if (\\n            IStableSwap2Pool(params.curvePool).coins(params.ethPoolIndex) !=\\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n        ) {\\n            revert IllegalArgument(\\\"Curve pool ETH token mismatch\\\");\\n        }\\n\\n        // Verify and make sure that the provided stETH matches the curve pool stETH.\\n        if (\\n            IStableSwap2Pool(params.curvePool).coins(params.stEthPoolIndex) !=\\n            params.parentToken\\n        ) {\\n            revert IllegalArgument(\\\"Curve pool stETH token mismatch\\\");\\n        }\\n    }\\n\\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\\n    modifier onlyAlchemist() {\\n        if (msg.sender != alchemist) {\\n            revert Unauthorized(\\\"Not alchemist\\\");\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != underlyingToken && msg.sender != curvePool) {\\n            revert Unauthorized(\\\"Payments only permitted from WETH or curve pool\\\");\\n        }\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view returns (uint256) {\\n        // Ensure that round is complete, otherwise price is stale.\\n        (\\n            uint80 roundID,\\n            int256 stethToEth,\\n            ,\\n            uint256 updateTime,\\n            uint80 answeredInRound\\n        ) = IChainlinkOracle(oracleStethEth).latestRoundData();\\n        \\n        require(\\n            stethToEth > 0, \\n            \\\"Chainlink Malfunction\\\"\\n        );\\n\\n        if( updateTime < block.timestamp - 86400 seconds ) {\\n            revert(\\\"Chainlink Malfunction\\\");\\n        }\\n\\n        // Note that an oracle attack could push the price of stETH over 1 ETH, which could lead to alETH minted at a LTV ratio > 50%. \\n        // Additionally, if stETH price is pushed > 2 ETH, then unbacked alETH could be minted. \\n        // We cap the steth oracel price at 1 for this reason.\\n        if (stethToEth > 1e18) stethToEth = 1e18;\\n\\n        return IWstETH(token).getStETHByWstETH(10**SafeERC20.expectDecimals(token)) * uint256(stethToEth) / 1e18;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the tokens from the message sender.\\n        SafeERC20.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n\\n        // Unwrap the WETH into ETH.\\n        IWETH9(underlyingToken).withdraw(amount);\\n\\n        // Wrap the ETH into stETH.\\n        uint256 startingStEthBalance = IERC20(parentToken).balanceOf(address(this));\\n\\n        IStETH(parentToken).submit{value: amount}(referral);\\n\\n        uint256 mintedStEth = IERC20(parentToken).balanceOf(address(this)) - startingStEthBalance;\\n\\n        // Wrap the stETH into wstETH.\\n        SafeERC20.safeApprove(parentToken, address(token), mintedStEth);\\n        uint256 mintedWstEth = IWstETH(token).wrap(mintedStEth);\\n\\n        // Transfer the minted wstETH to the recipient.\\n        SafeERC20.safeTransfer(token, recipient, mintedWstEth);\\n\\n        return mintedWstEth;\\n    }\\n\\n    // @inheritdoc ITokenAdapter\\n    function unwrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the tokens from the message sender.\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        // Unwrap the wstETH into stETH.\\n        uint256 startingStEthBalance = IStETH(parentToken).balanceOf(address(this));\\n        IWstETH(token).unwrap(amount);\\n        uint256 endingStEthBalance = IStETH(parentToken).balanceOf(address(this));\\n\\n        // Approve the curve pool to transfer the tokens.\\n        uint256 unwrappedStEth = endingStEthBalance - startingStEthBalance;\\n        SafeERC20.safeApprove(parentToken, curvePool, unwrappedStEth);\\n\\n        // Exchange the stETH for ETH. We do not check the curve pool because it is an immutable\\n        // contract and we expect that its output is reliable.\\n        uint256 received = IStableSwap2Pool(curvePool).exchange(\\n            int128(uint128(stEthPoolIndex)), // Why are we here, just to suffer?\\n            int128(uint128(ethPoolIndex)),   //                       (\\u2565\\ufe4f\\u2565)\\n            unwrappedStEth,\\n            0                                // <- Slippage is handled upstream\\n        );\\n\\n        // Wrap the ETH that we received from the exchange.\\n        IWETH9(underlyingToken).deposit{value: received}();\\n\\n        // Transfer the tokens to the recipient.\\n        SafeERC20.safeTransfer(underlyingToken, recipient, received);\\n\\n        return received;\\n    }\\n}\",\"keccak256\":\"0xd3d0fb5b3d9f764f5d2330e9d4fdd52adda0b7fc939c46157e56d5c0923265b6\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/base/ErrorMessages.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\n/// @notice An error used to indicate that an argument passed to a function is illegal or\\n///         inappropriate.\\n///\\n/// @param message The error message.\\nerror IllegalArgument(string message);\\n\\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\\n///\\n/// @param message The error message.\\nerror IllegalState(string message);\\n\\n/// @notice An error used to indicate that an operation is unsupported.\\n///\\n/// @param message The error message.\\nerror UnsupportedOperation(string message);\\n\\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\\n///\\n/// @param message The error message.\\nerror Unauthorized(string message);\",\"keccak256\":\"0x302087c36048c360cbd3192e41344d8705d7a50fdb97c8b77d45a5ff503dd264\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/MutexLock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"./ErrorMessages.sol\\\";\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract MutexLock {\\n    enum State {\\n        RESERVED,\\n        UNLOCKED,\\n        LOCKED\\n    }\\n\\n    /// @notice The lock state.\\n    State private _lockState = State.UNLOCKED;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal view returns (bool) {\\n        return _lockState == State.LOCKED;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != State.UNLOCKED) {\\n            revert IllegalState(\\\"Lock already claimed\\\");\\n        }\\n\\n        // Claim the lock.\\n        _lockState = State.LOCKED;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = State.UNLOCKED;\\n    }\\n}\",\"keccak256\":\"0xe3aab21deaf0ce1c795f164630a6e495649779342e0f1f480efac4ff53bb0619\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/IWETH9.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../IERC20Metadata.sol\\\";\\n\\n/// @title IWETH9\\ninterface IWETH9 is IERC20, IERC20Metadata {\\n  /// @notice Deposits `msg.value` ethereum into the contract and mints `msg.value` tokens.\\n  function deposit() external payable;\\n\\n  /// @notice Burns `amount` tokens to retrieve `amount` ethereum from the contract.\\n  ///\\n  /// @dev This version of WETH utilizes the `transfer` function which hard codes the amount of gas\\n  ///      that is allowed to be utilized to be exactly 2300 when receiving ethereum.\\n  ///\\n  /// @param amount The amount of tokens to burn.\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x6df1a375b5b39f03ee997b1509f296c9ff3e66a96afbbe6c5924d5b4ac74db31\"},\"submodules/v2-foundry/src/interfaces/external/chainlink/IChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >= 0.6.6;\\n\\ninterface IChainlinkOracle {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n  function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80);\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\",\"keccak256\":\"0xabb21ca33471affd37434f6644958d9d63a4175572400de16b1678045263fa33\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/curve/IStableSwap2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nuint256 constant N_COINS = 2;\\n\\ninterface IStableSwap2Pool {\\n    function coins(uint256 index) external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[N_COINS] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256 amount);\\n\\n    function add_liquidity(uint256[N_COINS] calldata amounts, uint256 minimumMintAmount) external;\\n\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\\n\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 minimumDy\\n    ) external payable returns (uint256);\\n\\n    function remove_liquidity(uint256 amount, uint256[N_COINS] calldata minimumAmounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[N_COINS] calldata amounts,\\n        uint256 maximumBurnAmount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 i,\\n        uint256 minimumAmount\\n    ) external;\\n}\",\"keccak256\":\"0x3c991839b85e32f8098f462843cb32d01d7dc5637e78010c3464216e3f2da960\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStETH is IERC20 {\\n    function sharesOf(address account) external view returns (uint256);\\n    function getPooledEthByShares(uint256 sharesAmount) external view returns (uint256);\\n    function submit(address referral) external payable returns (uint256);\\n}\",\"keccak256\":\"0xea9fccea5c36e77b245dee9728b051e2a508daa4a747b04735c9326d3995f8a3\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/external/lido/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWstETH is IERC20 {\\n    function getWstETHByStETH(uint256 amount) external view returns (uint256);\\n    function getStETHByWstETH(uint256 amount) external view returns (uint256);\\n    function wrap(uint256 amount) external returns (uint256);\\n    function unwrap(uint256 amount) external returns (uint256);\\n}\",\"keccak256\":\"0x9821fbdfb3a0f7ed4fe995acc6cddf8a0910fa13ee02e1ddef9b6f324285444f\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalState} from \\\"../base/ErrorMessages.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  SafeERC20\\n/// @author Alchemix Finance\\nlibrary SafeERC20 {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a\\n    ///                success. Otherwise, this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6e6fcaae4927a1ac7673771740ada8cd4526c940267adde36029b23a6d7d17a3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6000805460ff191660019081179091556101e060405260056101a0819052640312e312e360dc1b6101c09081526200003892916200029e565b503480156200004657600080fd5b5060405162001c4f38038062001c4f833981016040819052620000699162000399565b80516001600160a01b0390811660809081526020830151821660a0908152604080850151841660c09081526060860151851660e0908152938601805186166101009081529387015186166101205290860180516101405293860151610160529185015184166101805290519151905163c661065760e01b8152600481019190915291169063c661065790602401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a919062000452565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031614620001b5576040516354a1577760e11b815260206004820152601d60248201527f437572766520706f6f6c2045544820746f6b656e206d69736d6174636800000060448201526064015b60405180910390fd5b80604001516001600160a01b031681608001516001600160a01b031663c66106578360e001516040518263ffffffff1660e01b8152600401620001fa91815260200190565b602060405180830381865afa15801562000218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023e919062000452565b6001600160a01b03161462000297576040516354a1577760e11b815260206004820152601f60248201527f437572766520706f6f6c20737445544820746f6b656e206d69736d61746368006044820152606401620001ac565b50620004b3565b828054620002ac9062000477565b90600052602060002090601f016020900481019282620002d057600085556200031b565b82601f10620002eb57805160ff19168380011785556200031b565b828001600101855582156200031b579182015b828111156200031b578251825591602001919060010190620002fe565b50620003299291506200032d565b5090565b5b808211156200032957600081556001016200032e565b60405161012081016001600160401b03811182821017156200037657634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200039457600080fd5b919050565b60006101208284031215620003ad57600080fd5b620003b762000344565b620003c2836200037c565b8152620003d2602084016200037c565b6020820152620003e5604084016200037c565b6040820152620003f8606084016200037c565b60608201526200040b608084016200037c565b60808201526200041e60a084016200037c565b60a082015260c083015160c082015260e083015160e0820152610100620004478185016200037c565b908201529392505050565b6000602082840312156200046557600080fd5b62000470826200037c565b9392505050565b600181811c908216806200048c57607f821691505b602082108103620004ad57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051610140516101605161018051611668620005e7600039600081816101e401526105d00152600081816103760152610b5a0152600081816103bf0152610b850152600081816102980152610ceb01526000818161010a0152818161023001528181610b260152610bbe01526000818160d6015281816102640152818161048d015281816104ca01528181610c370152610cae01526000818161030e01528181610545015281816105fb0152818161068f0152818161070b0152818161096301528181610a7d0152610b050152600081816103f30152818161072c0152818161076a015281816107e601528181610924015281816109ef01528181610e380152610e6a0152600081816103420152818161042a01526108c101526116686000f3fe6080604052600436106100c65760003560e01c80637647691d1161007f5780638f873bde116100595780638f873bde14610364578063a035b1fe14610398578063e0c88bf9146103ad578063fc0c546a146103e157600080fd5b80637647691d146102dc57806380a54001146102fc5780638de925f61461033057600080fd5b806313bac8201461019f5780631441a5a9146101d2578063218751b21461021e5780632495a5991461025257806333a8c8291461028657806354fd4d50146102ba57600080fd5b3661019a57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061012d5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156101985760405163973d02cb60e01b815260206004820152602f60248201527f5061796d656e7473206f6e6c79207065726d69747465642066726f6d2057455460448201526e12081bdc8818dd5c9d99481c1bdbdb608a1b60648201526084015b60405180910390fd5b005b600080fd5b3480156101ab57600080fd5b506101bf6101ba3660046112b1565b610415565b6040519081526020015b60405180910390f35b3480156101de57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c9565b34801561022a57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561025e57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561029257600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c657600080fd5b506102cf61081e565b6040516101c99190611349565b3480156102e857600080fd5b506101bf6102f73660046112b1565b6108ac565b34801561030857600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561033c57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561037057600080fd5b506101bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a457600080fd5b506101bf610ce1565b3480156103b957600080fd5b506101bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ed57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b600061041f610f15565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104885760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b604482015260640161018f565b6104b47f0000000000000000000000000000000000000000000000000000000000000000333086610f8a565b604051632e1a7d4d60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190611363565b60405163a1903eab60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a1903eab90869060240160206040518083038185885af1158015610647573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061066c9190611363565b506040516370a0823160e01b815230600482015260009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190611363565b6107049190611392565b90506107517f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361108a565b604051630ea598cb60e41b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ea598cb0906024016020604051808303816000875af11580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df9190611363565b905061080c7f00000000000000000000000000000000000000000000000000000000000000008683611192565b925050506108186111c5565b92915050565b6001805461082b906113a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610857906113a9565b80156108a45780601f10610879576101008083540402835291602001916108a4565b820191906000526020600020905b81548152906001019060200180831161088757829003601f168201915b505050505081565b60006108b6610f15565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461091f5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b604482015260640161018f565b61094b7f0000000000000000000000000000000000000000000000000000000000000000333086610f8a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190611363565b604051636f074d1f60e11b8152600481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de0e9a3e906024016020604051808303816000875af1158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190611363565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af09190611363565b90506000610afe8383611392565b9050610b4b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361108a565b604051630f7c084960e21b81527f0000000000000000000000000000000000000000000000000000000000000000600f90810b60048301527f0000000000000000000000000000000000000000000000000000000000000000900b602482015260448101829052600060648201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633df02124906084016020604051808303816000875af1158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c339190611363565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c9057600080fd5b505af1158015610ca4573d6000803e3d6000fd5b5050505050610cd47f00000000000000000000000000000000000000000000000000000000000000008783611192565b93505050506108186111c5565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611402565b94509450509350935060008313610dbc5760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b604482015260640161018f565b610dc96201518042611392565b821015610e105760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b604482015260640161018f565b670de0b6b3a7640000831315610e2c57670de0b6b3a764000092505b670de0b6b3a7640000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb2952fc610e8e7f00000000000000000000000000000000000000000000000000000000000000006111d8565b610e9990600a611536565b6040518263ffffffff1660e01b8152600401610eb791815260200190565b602060405180830381865afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190611363565b610f029190611545565b610f0c9190611564565b94505050505090565b600160005460ff166002811115610f2e57610f2e611586565b14610f735760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b604482015260640161018f565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610fee919061159c565b6000604051808303816000865af19150503d806000811461102b576040519150601f19603f3d011682016040523d82523d6000602084013e611030565b606091505b509150915081158061105e575080511580159061105e57508080602001905181019061105c91906115b8565b155b156110825785828260405163e7e40b5b60e01b815260040161018f939291906115da565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516110f7919061159c565b6000604051808303816000865af19150503d8060008114611134576040519150601f19603f3d011682016040523d82523d6000602084013e611139565b606091505b5091509150811580611167575080511580159061116757508080602001905181019061116591906115b8565b155b1561118b5784828260405163e7e40b5b60e01b815260040161018f939291906115da565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b906064016110b9565b600080546001919060ff19168280610f83565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b0386169161121e919061159c565b600060405180830381855afa9150503d8060008114611259576040519150601f19603f3d011682016040523d82523d6000602084013e61125e565b606091505b5091509150811580611271575060208151105b156112955783828260405163e7e40b5b60e01b815260040161018f939291906115da565b808060200190518101906112a9919061160f565b949350505050565b600080604083850312156112c457600080fd5b8235915060208301356001600160a01b03811681146112e257600080fd5b809150509250929050565b60005b838110156113085781810151838201526020016112f0565b83811115611317576000848401525b50505050565b600081518084526113358160208601602086016112ed565b601f01601f19169290920160200192915050565b60208152600061135c602083018461131d565b9392505050565b60006020828403121561137557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156113a4576113a461137c565b500390565b600181811c908216806113bd57607f821691505b6020821081036113dd57634e487b7160e01b600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff811681146113fd57600080fd5b919050565b600080600080600060a0868803121561141a57600080fd5b611423866113e3565b9450602086015193506040860151925060608601519150611446608087016113e3565b90509295509295909350565b600181815b8085111561148d5781600019048211156114735761147361137c565b8085161561148057918102915b93841c9390800290611457565b509250929050565b6000826114a457506001610818565b816114b157506000610818565b81600181146114c757600281146114d1576114ed565b6001915050610818565b60ff8411156114e2576114e261137c565b50506001821b610818565b5060208310610133831016604e8410600b8410161715611510575081810a610818565b61151a8383611452565b806000190482111561152e5761152e61137c565b029392505050565b600061135c60ff841683611495565b600081600019048311821515161561155f5761155f61137c565b500290565b60008261158157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600082516115ae8184602087016112ed565b9190910192915050565b6000602082840312156115ca57600080fd5b8151801515811461135c57600080fd5b6001600160a01b038416815282151560208201526060604082018190526000906116069083018461131d565b95945050505050565b60006020828403121561162157600080fd5b815160ff8116811461135c57600080fdfea264697066735822122083b8681e74b6a6957155e92f34348a721db447d4f40bed273f1b2e4f0d9ea92464736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c80637647691d1161007f5780638f873bde116100595780638f873bde14610364578063a035b1fe14610398578063e0c88bf9146103ad578063fc0c546a146103e157600080fd5b80637647691d146102dc57806380a54001146102fc5780638de925f61461033057600080fd5b806313bac8201461019f5780631441a5a9146101d2578063218751b21461021e5780632495a5991461025257806333a8c8291461028657806354fd4d50146102ba57600080fd5b3661019a57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061012d5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156101985760405163973d02cb60e01b815260206004820152602f60248201527f5061796d656e7473206f6e6c79207065726d69747465642066726f6d2057455460448201526e12081bdc8818dd5c9d99481c1bdbdb608a1b60648201526084015b60405180910390fd5b005b600080fd5b3480156101ab57600080fd5b506101bf6101ba3660046112b1565b610415565b6040519081526020015b60405180910390f35b3480156101de57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c9565b34801561022a57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561025e57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561029257600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c657600080fd5b506102cf61081e565b6040516101c99190611349565b3480156102e857600080fd5b506101bf6102f73660046112b1565b6108ac565b34801561030857600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561033c57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b34801561037057600080fd5b506101bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a457600080fd5b506101bf610ce1565b3480156103b957600080fd5b506101bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ed57600080fd5b506102067f000000000000000000000000000000000000000000000000000000000000000081565b600061041f610f15565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104885760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b604482015260640161018f565b6104b47f0000000000000000000000000000000000000000000000000000000000000000333086610f8a565b604051632e1a7d4d60e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190611363565b60405163a1903eab60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a1903eab90869060240160206040518083038185885af1158015610647573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061066c9190611363565b506040516370a0823160e01b815230600482015260009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190611363565b6107049190611392565b90506107517f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361108a565b604051630ea598cb60e41b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ea598cb0906024016020604051808303816000875af11580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df9190611363565b905061080c7f00000000000000000000000000000000000000000000000000000000000000008683611192565b925050506108186111c5565b92915050565b6001805461082b906113a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610857906113a9565b80156108a45780601f10610879576101008083540402835291602001916108a4565b820191906000526020600020905b81548152906001019060200180831161088757829003601f168201915b505050505081565b60006108b6610f15565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461091f5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b604482015260640161018f565b61094b7f0000000000000000000000000000000000000000000000000000000000000000333086610f8a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190611363565b604051636f074d1f60e11b8152600481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de0e9a3e906024016020604051808303816000875af1158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190611363565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af09190611363565b90506000610afe8383611392565b9050610b4b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361108a565b604051630f7c084960e21b81527f0000000000000000000000000000000000000000000000000000000000000000600f90810b60048301527f0000000000000000000000000000000000000000000000000000000000000000900b602482015260448101829052600060648201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633df02124906084016020604051808303816000875af1158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c339190611363565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610c9057600080fd5b505af1158015610ca4573d6000803e3d6000fd5b5050505050610cd47f00000000000000000000000000000000000000000000000000000000000000008783611192565b93505050506108186111c5565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611402565b94509450509350935060008313610dbc5760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b604482015260640161018f565b610dc96201518042611392565b821015610e105760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b604482015260640161018f565b670de0b6b3a7640000831315610e2c57670de0b6b3a764000092505b670de0b6b3a7640000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb2952fc610e8e7f00000000000000000000000000000000000000000000000000000000000000006111d8565b610e9990600a611536565b6040518263ffffffff1660e01b8152600401610eb791815260200190565b602060405180830381865afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190611363565b610f029190611545565b610f0c9190611564565b94505050505090565b600160005460ff166002811115610f2e57610f2e611586565b14610f735760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b604482015260640161018f565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610fee919061159c565b6000604051808303816000865af19150503d806000811461102b576040519150601f19603f3d011682016040523d82523d6000602084013e611030565b606091505b509150915081158061105e575080511580159061105e57508080602001905181019061105c91906115b8565b155b156110825785828260405163e7e40b5b60e01b815260040161018f939291906115da565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516110f7919061159c565b6000604051808303816000865af19150503d8060008114611134576040519150601f19603f3d011682016040523d82523d6000602084013e611139565b606091505b5091509150811580611167575080511580159061116757508080602001905181019061116591906115b8565b155b1561118b5784828260405163e7e40b5b60e01b815260040161018f939291906115da565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b906064016110b9565b600080546001919060ff19168280610f83565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b0386169161121e919061159c565b600060405180830381855afa9150503d8060008114611259576040519150601f19603f3d011682016040523d82523d6000602084013e61125e565b606091505b5091509150811580611271575060208151105b156112955783828260405163e7e40b5b60e01b815260040161018f939291906115da565b808060200190518101906112a9919061160f565b949350505050565b600080604083850312156112c457600080fd5b8235915060208301356001600160a01b03811681146112e257600080fd5b809150509250929050565b60005b838110156113085781810151838201526020016112f0565b83811115611317576000848401525b50505050565b600081518084526113358160208601602086016112ed565b601f01601f19169290920160200192915050565b60208152600061135c602083018461131d565b9392505050565b60006020828403121561137557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156113a4576113a461137c565b500390565b600181811c908216806113bd57607f821691505b6020821081036113dd57634e487b7160e01b600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff811681146113fd57600080fd5b919050565b600080600080600060a0868803121561141a57600080fd5b611423866113e3565b9450602086015193506040860151925060608601519150611446608087016113e3565b90509295509295909350565b600181815b8085111561148d5781600019048211156114735761147361137c565b8085161561148057918102915b93841c9390800290611457565b509250929050565b6000826114a457506001610818565b816114b157506000610818565b81600181146114c757600281146114d1576114ed565b6001915050610818565b60ff8411156114e2576114e261137c565b50506001821b610818565b5060208310610133831016604e8410600b8410161715611510575081810a610818565b61151a8383611452565b806000190482111561152e5761152e61137c565b029392505050565b600061135c60ff841683611495565b600081600019048311821515161561155f5761155f61137c565b500290565b60008261158157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600082516115ae8184602087016112ed565b9190910192915050565b6000602082840312156115ca57600080fd5b8151801515811461135c57600080fd5b6001600160a01b038416815282151560208201526060604082018190526000906116069083018461131d565b95945050505050565b60006020828403121561162157600080fd5b815160ff8116811461135c57600080fdfea264697066735822122083b8681e74b6a6957155e92f34348a721db447d4f40bed273f1b2e4f0d9ea92464736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "IllegalArgument(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "IllegalState(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "Unauthorized(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalArgument(string)": [
        {
          "notice": "An error used to indicate that an argument passed to a function is illegal or         inappropriate."
        }
      ],
      "IllegalState(string)": [
        {
          "notice": "An error used to indicate that a function has encountered an unrecoverable state."
        }
      ],
      "Unauthorized(string)": [
        {
          "notice": "An error used to indicate that a message sender tried to execute a privileged function."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51926,
        "contract": "submodules/v2-foundry/src/adapters/lido/WstETHAdapter.sol:WstETHAdapter",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)51920"
      },
      {
        "astId": 50216,
        "contract": "submodules/v2-foundry/src/adapters/lido/WstETHAdapter.sol:WstETHAdapter",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_enum(State)51920": {
        "encoding": "inplace",
        "label": "enum MutexLock.State",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}