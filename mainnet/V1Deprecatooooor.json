{
  "address": "0xdB39286FaDb3f6039C8B5d79BaFA21615c23b4EC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "alchemist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "altoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "transmuter",
          "type": "address"
        }
      ],
      "name": "deprecate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x385270d1bdb14063641aa9ce9369c80fa06a902e48a1df272c25769386bb7428",
  "receipt": {
    "to": null,
    "from": "0x526D542FFBAe26D510cD610b8050438586fd203C",
    "contractAddress": "0xdB39286FaDb3f6039C8B5d79BaFA21615c23b4EC",
    "transactionIndex": 0,
    "gasUsed": "375859",
    "logsBloom": "0x
    "blockHash": "0x2ce450f26c097b00111389e48e35dbf16aee793432da5fcb5029e72d51302405",
    "transactionHash": "0x385270d1bdb14063641aa9ce9369c80fa06a902e48a1df272c25769386bb7428",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15669021,
        "transactionHash": "0x385270d1bdb14063641aa9ce9369c80fa06a902e48a1df272c25769386bb7428",
        "address": "0xdB39286FaDb3f6039C8B5d79BaFA21615c23b4EC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000526d542ffbae26d510cd610b8050438586fd203c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2ce450f26c097b00111389e48e35dbf16aee793432da5fcb5029e72d51302405"
      }
    ],
    "blockNumber": 15669021,
    "cumulativeGasUsed": "375859",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d4c949bc4f0358a923e6a3b94c01ba6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"altoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transmuter\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/migration/V1Deprecatooooor.sol\":\"V1Deprecatooooor\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363634383136363335393935\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/interfaces/IAlToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n/// @title IAlToken\\ninterface IAlToken {\\n  function pauseAlchemist(address _toPause, bool _state) external;\\n}\",\"keccak256\":\"0xed261ae47101022531c9b77898607439dfd1d1185b02423158a519b29f809812\",\"license\":\"GPL-3.0\"},\"submodules/v2-foundry/src/interfaces/IAlchemistV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IVaultAdapter} from \\\"./IVaultAdapter.sol\\\";\\n\\ninterface IAlchemistV1 {\\n    function deposit(uint256 _amount) external;\\n    function migrate(IVaultAdapter _adapter) external;\\n    function mint(uint256 _amount) external;\\n    function setEmergencyExit(bool _emergencyExit) external;\\n    function flush() external returns (uint256);\\n    function getCdpTotalDeposited(address _account) external view returns (uint256);\\n    function getCdpTotalDebt(address _account) external view returns (uint256);\\n    function getVaultTotalDeposited(uint256 _vaultId) external view returns (uint256);\\n    function recall(uint256 _vaultId, uint256 _amount) external returns (uint256, uint256);\\n    function recallAll(uint256 _vaultId) external returns (uint256, uint256);\\n    function withdraw(uint256 _amount) external returns (uint256, uint256);\\n    function setTransmuter(address _transmuter) external;\\n    function liquidate(uint256 _amount) external returns (uint256, uint256);\\n    function harvest(uint256 _vaultId) external returns (uint256, uint256);\\n    function repay(uint256 _parentAmount, uint256 _childAmount) external;\\n    function vaultCount() external returns (uint256);\\n}\",\"keccak256\":\"0x7ffc778be1c8a1445944072672a244c20c9cbb697259a06f718102b3a6e242b3\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.12;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external returns (string memory);\\n  function symbol() external returns (string memory);\\n  function decimals() external returns (uint8);\\n}\",\"keccak256\":\"0xb55405e016dd12fa589d65284927b304e131eb83c531e4671d62c14b757aac5b\",\"license\":\"GPL-3.0\"},\"submodules/v2-foundry/src/interfaces/ITransmuterV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface ITransmuterV1 {\\n  function distribute(address origin, uint256 amount) external;\\n\\n  function migrateFunds(address migrateTo) external;\\n\\n  function setPause(bool val) external;\\n}\",\"keccak256\":\"0x3794dba518834394b79a79c606356d91494596478f9e59db101e7e641a22b8c5\",\"license\":\"GPL-3.0\"},\"submodules/v2-foundry/src/interfaces/IVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.12;\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\n\\n/// Interface for all Vault Adapter implementations.\\ninterface IVaultAdapter {\\n\\n  /// @dev Gets the token that the adapter accepts.\\n  function token() external view returns (IDetailedERC20);\\n\\n  /// @dev The total value of the assets deposited into the vault.\\n  function totalValue() external view returns (uint256);\\n\\n  /// @dev Deposits funds into the vault.\\n  ///\\n  /// @param _amount  the amount of funds to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Attempts to withdraw funds from the wrapped vault.\\n  ///\\n  /// The amount withdrawn to the recipient may be less than the amount requested.\\n  ///\\n  /// @param _recipient the recipient of the funds.\\n  /// @param _amount    the amount of funds to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0xc547af79feda6bd0709d54147ec497ac495942d2d9ab6e2f57083d2ae932b40d\",\"license\":\"GPL-3.0\"},\"submodules/v2-foundry/src/migration/V1Deprecatooooor.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\nimport {Ownable} from \\\"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {IAlchemistV1} from \\\"../interfaces/IAlchemistV1.sol\\\";\\nimport {IAlToken} from \\\"../interfaces/IAlToken.sol\\\";\\nimport {ITransmuterV1} from \\\"../interfaces/ITransmuterV1.sol\\\";\\n\\ncontract V1Deprecatooooor is Ownable {\\n    constructor() {}\\n\\n    function deprecate(address alchemist, address altoken, address transmuter) external onlyOwner {\\n        IAlToken(altoken).pauseAlchemist(address(alchemist), true);\\n        ITransmuterV1(transmuter).setPause(true);\\n        uint256 numVaults = IAlchemistV1(alchemist).vaultCount();\\n        // we are going to recall the funds from the most recent vault.\\n        // we are assuming that the new TransferAdapter has already been deployed and\\n        // added to the Alchemist via the migrate() function, which is why we need the (-2).\\n        IAlchemistV1(alchemist).recallAll(numVaults - 2);\\n        IAlchemistV1(alchemist).flush();\\n        IAlchemistV1(alchemist).setEmergencyExit(true);\\n    }\\n}\",\"keccak256\":\"0xcd84f5583a6b4a696e97f50b2bcb84251d28ca1ef93665c6c6ea9e15a29c29ff\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105628061007e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f85ee0f14610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008d575b600080fd5b61006461005f366004610465565b6100a0565b005b61006461030d565b600054604080516001600160a01b039092168252519081900360200190f35b61006461009b3660046104a8565b610321565b6100a861039f565b604051632d5cb7bd60e11b81526001600160a01b03848116600483015260016024830152831690635ab96f7a90604401600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505060405163bedb86fb60e01b8152600160048201526001600160a01b038416925063bedb86fb9150602401600060405180830381600087803b15801561014c57600080fd5b505af1158015610160573d6000803e3d6000fd5b505050506000836001600160a01b031663a7c6a1006040518163ffffffff1660e01b81526004016020604051808303816000875af11580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca91906104ca565b90506001600160a01b038416634c3a8e026101e66002846104e3565b6040518263ffffffff1660e01b815260040161020491815260200190565b60408051808303816000875af1158015610222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102469190610508565b5050836001600160a01b0316636b9f96ea6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac91906104ca565b506040516345ee075560e01b8152600160048201526001600160a01b038516906345ee075590602401600060405180830381600087803b1580156102ef57600080fd5b505af1158015610303573d6000803e3d6000fd5b5050505050505050565b61031561039f565b61031f60006103f9565b565b61032961039f565b6001600160a01b0381166103935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039c816103f9565b50565b6000546001600160a01b0316331461031f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461046057600080fd5b919050565b60008060006060848603121561047a57600080fd5b61048384610449565b925061049160208501610449565b915061049f60408501610449565b90509250925092565b6000602082840312156104ba57600080fd5b6104c382610449565b9392505050565b6000602082840312156104dc57600080fd5b5051919050565b60008282101561050357634e487b7160e01b600052601160045260246000fd5b500390565b6000806040838503121561051b57600080fd5b50508051602090910151909290915056fea2646970667358221220f9a7579e86ce64f2a0bff87d3290f9932db0bdb2c59099a7a443ef39d08ac86f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f85ee0f14610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008d575b600080fd5b61006461005f366004610465565b6100a0565b005b61006461030d565b600054604080516001600160a01b039092168252519081900360200190f35b61006461009b3660046104a8565b610321565b6100a861039f565b604051632d5cb7bd60e11b81526001600160a01b03848116600483015260016024830152831690635ab96f7a90604401600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505060405163bedb86fb60e01b8152600160048201526001600160a01b038416925063bedb86fb9150602401600060405180830381600087803b15801561014c57600080fd5b505af1158015610160573d6000803e3d6000fd5b505050506000836001600160a01b031663a7c6a1006040518163ffffffff1660e01b81526004016020604051808303816000875af11580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca91906104ca565b90506001600160a01b038416634c3a8e026101e66002846104e3565b6040518263ffffffff1660e01b815260040161020491815260200190565b60408051808303816000875af1158015610222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102469190610508565b5050836001600160a01b0316636b9f96ea6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac91906104ca565b506040516345ee075560e01b8152600160048201526001600160a01b038516906345ee075590602401600060405180830381600087803b1580156102ef57600080fd5b505af1158015610303573d6000803e3d6000fd5b5050505050505050565b61031561039f565b61031f60006103f9565b565b61032961039f565b6001600160a01b0381166103935760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61039c816103f9565b50565b6000546001600160a01b0316331461031f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461046057600080fd5b919050565b60008060006060848603121561047a57600080fd5b61048384610449565b925061049160208501610449565b915061049f60408501610449565b90509250925092565b6000602082840312156104ba57600080fd5b6104c382610449565b9392505050565b6000602082840312156104dc57600080fd5b5051919050565b60008282101561050357634e487b7160e01b600052601160045260246000fd5b500390565b6000806040838503121561051b57600080fd5b50508051602090910151909290915056fea2646970667358221220f9a7579e86ce64f2a0bff87d3290f9932db0bdb2c59099a7a443ef39d08ac86f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25140,
        "contract": "submodules/v2-foundry/src/migration/V1Deprecatooooor.sol:V1Deprecatooooor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}