{
  "language": "Solidity",
  "sources": {
    "submodules/v2-foundry/src/AlchemicTokenV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\nimport {AccessControl} from \"../lib/openzeppelin-contracts/contracts/access/AccessControl.sol\";\nimport {ERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title  AlchemicTokenV1\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for version one alchemic tokens.\ncontract AlchemicTokenV1 is AccessControl, ERC20(\"Alchemix USD\", \"alUSD\") {\n  using SafeERC20 for ERC20;\n\n  /// @notice An event which is emitted when a minter is paused or unpaused.\n  ///\n  /// @param minter The address of the minter.\n  /// @param state  A flag indicating if the minter is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n  \n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping (address => bool) public whiteList;\n  \n  /// @notice A set of addresses which are blacklisted from minting new tokens.\n  mapping (address => bool) public blacklist;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping (address => bool) public paused;\n\n  /// @notice The amount that each address is permitted to mint.\n  mapping (address => uint256) public ceiling;\n\n  /// @notice The amount of tokens that each address has already minted.\n  mapping (address => uint256) public hasMinted;\n  \n  constructor() {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    require(whiteList[msg.sender], \"AlTokenV1: Alchemist is not whitelisted\");\n    _;\n  }\n\n  /// @dev A modifier which checks that `msg.sender` is an admin.\n  modifier onlyAdmin() {\n    require(hasRole(ADMIN_ROLE, msg.sender), \"AlTokenV1: Only admin\");\n    _;\n  }\n\n  /// @dev A modifier which checks that `msg.sender` is a sentinel.\n  modifier onlySentinel() {\n    require(hasRole(SENTINEL_ROLE, msg.sender), \"AlTokenV1: Only sentinel\");\n    _;\n  }\n\n  /// @notice Mints tokens to `recipient`.\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is blacklisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  /// @notice This function reverts if `msg.sender` has exceeded their mintable ceiling.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    require(!blacklist[msg.sender], \"AlUSD: Alchemist is blacklisted.\");\n    require(!paused[msg.sender], \"AlUSD: Currently paused.\");\n\n    uint256 total = amount + hasMinted[msg.sender];\n    require(total <= ceiling[msg.sender], \"AlUSD: Alchemist's ceiling was breached.\");\n    hasMinted[msg.sender] = hasMinted[msg.sender] + amount;\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whiteList[minter] = state;\n  }\n\n  /// @notice Sets `sentinel` as a sentinel.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param sentinel The address to set as a sentinel.\n  function setSentinel(address sentinel) external onlyAdmin {\n    _setupRole(SENTINEL_ROLE, sentinel);\n  }\n\n  /// @notice Sets `minter` as blacklisted from minting.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to blacklist.\n  function setBlacklist(address minter) external onlySentinel {\n    blacklist[minter] = true;\n  }\n\n  /// @notice Pauses an alchemist from minting.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param alchemist The address of the alchemist to set as paused or unpaused.\n  /// @param state     A flag indicating if the alchemist should be paused or unpaused.\n  function pauseAlchemist(address alchemist, bool state) external onlySentinel {\n    paused[alchemist] = state;\n    emit Paused(alchemist, state);\n  }\n\n  /// @notice Sets the maximum amount of tokens that `minter` is allowed to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter  The address of the minter.\n  /// @param maximum The maximum amount of tokens that the minter is allowed to mint.\n  function setCeiling(address minter, uint256 maximum) external onlyAdmin {\n    ceiling[minter] = maximum;\n  }\n\n  /// @notice Burns `amount` tokens from `msg.sender`\n  ///\n  /// @param amount The amount of tokens to burn.\n  function burn(uint256 amount) public {\n      _burn(msg.sender, amount);\n  }\n\n  /// @notice Burns `amount` tokens from `owner`.\n  ///\n  /// @notice Reverts if the allowance of `msg.sender` is less than `amount`.\n  ///\n  /// @param owner  The address which owns the tokens to burn.\n  /// @param amount The amount of tokens to burn.\n  function burnFrom(address owner, uint256 amount) public {\n      uint256 decreasedAllowance = allowance(owner, msg.sender) - amount;\n      _approve(owner, msg.sender, decreasedAllowance);\n      _burn(owner, amount);\n  }\n\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\n  ///\n  /// @notice This reverts if the `msg.sender` is not whitelisted.\n  ///\n  /// @param amount The amount to lower the minted amount by.\n  function lowerHasMinted(uint256 amount) public onlyWhitelisted {\n      hasMinted[msg.sender] = hasMinted[msg.sender] - amount;\n  }\n}"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/utils/Functionalities.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport { DSTestPlus } from \"./DSTestPlus.sol\";\n\nimport \"../../../lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport { CheatCodes } from \"../../test/utils/Cheatcodes.sol\";\n\nimport { AlchemistV2 } from \"../../AlchemistV2.sol\";\nimport { AlchemicTokenV2 } from \"../../AlchemicTokenV2.sol\";\nimport { TransmuterV2 } from \"../../TransmuterV2.sol\";\nimport { TransmuterBuffer } from \"../../TransmuterBuffer.sol\";\nimport { Whitelist } from \"../../utils/Whitelist.sol\";\n\nimport { TestERC20 } from \"../mocks/TestERC20.sol\";\nimport { TestYieldToken } from \"../mocks/TestYieldToken.sol\";\nimport { TestYieldTokenAdapter } from \"../mocks/TestYieldTokenAdapter.sol\";\n\nimport { IERC20Mintable } from \"../../interfaces/IERC20Mintable.sol\";\nimport { ITokenAdapter } from \"../../interfaces/ITokenAdapter.sol\";\n\nimport { IAlchemistV2AdminActions } from \"../../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport { IAlchemistV2 } from \"../../interfaces/IAlchemistV2.sol\";\n\ncontract Functionalities is DSTestPlus {\n\t// Callable contract variables\n\tAlchemistV2 alchemist;\n\tTransmuterV2 transmuter;\n\tTransmuterBuffer transmuterBuffer;\n\n\t// Proxy variables\n\tTransparentUpgradeableProxy proxyAlchemist;\n\tTransparentUpgradeableProxy proxyTransmuter;\n\tTransparentUpgradeableProxy proxyTransmuterBuffer;\n\n\t// Contract variables\n\tCheatCodes cheats = CheatCodes(HEVM_ADDRESS);\n\tAlchemistV2 alchemistLogic;\n\tTransmuterV2 transmuterLogic;\n\tTransmuterBuffer transmuterBufferLogic;\n\tAlchemicTokenV2 alToken;\n\tTestYieldTokenAdapter tokenAdapter;\n\tWhitelist whitelist;\n\n\t// Token addresses\n\taddress fakeUnderlyingToken;\n\taddress fakeYieldToken;\n\n\t// Total minted debt\n\tuint256 public minted;\n\n\t// Total debt burned\n\tuint256 public burned;\n\n\t// Total tokens sent to transmuter\n\tuint256 public sentToTransmuter;\n\n\t// Parameters for AlchemicTokenV2\n\tstring public _name;\n\tstring public _symbol;\n\tuint256 public _flashFee;\n\n\taddress public alOwner;\n\n\tmapping(address => bool) users;\n\n\tfunction turnOn(address caller, address proxyOwner) public {\n\t\tcheats.assume(caller != address(0));\n\t\tcheats.assume(proxyOwner != address(0));\n\t\tcheats.assume(caller != proxyOwner);\n\t\tcheats.startPrank(caller);\n\n\t\t// Fake tokens\n\t\tTestERC20 testToken = new TestERC20(0, 18);\n\t\tfakeUnderlyingToken = address(testToken);\n\t\tTestYieldToken testYieldToken = new TestYieldToken(fakeUnderlyingToken);\n\t\tfakeYieldToken = address(testYieldToken);\n\n\t\t// Contracts and logic contracts\n\t\talOwner = caller;\n\t\talToken = new AlchemicTokenV2(_name, _symbol, _flashFee);\n\t\ttokenAdapter = new TestYieldTokenAdapter(fakeYieldToken);\n\t\ttransmuterBufferLogic = new TransmuterBuffer();\n\t\ttransmuterLogic = new TransmuterV2();\n\t\talchemistLogic = new AlchemistV2();\n\t\twhitelist = new Whitelist();\n\n\t\t// Proxy contracts\n\t\t// TransmuterBuffer proxy\n\t\tbytes memory transBufParams = abi.encodeWithSelector(\n\t\t\tTransmuterBuffer.initialize.selector,\n\t\t\talOwner,\n\t\t\taddress(alToken)\n\t\t);\n\n\t\tproxyTransmuterBuffer = new TransparentUpgradeableProxy(\n\t\t\taddress(transmuterBufferLogic),\n\t\t\tproxyOwner,\n\t\t\ttransBufParams\n\t\t);\n\n\t\ttransmuterBuffer = TransmuterBuffer(address(proxyTransmuterBuffer));\n\n\t\t// TransmuterV2 proxy\n\t\tbytes memory transParams = abi.encodeWithSelector(\n\t\t\tTransmuterV2.initialize.selector,\n\t\t\taddress(alToken),\n\t\t\tfakeUnderlyingToken,\n\t\t\taddress(transmuterBuffer),\n\t\t\twhitelist\n\t\t);\n\n\t\tproxyTransmuter = new TransparentUpgradeableProxy(address(transmuterLogic), proxyOwner, transParams);\n\n\t\ttransmuter = TransmuterV2(address(proxyTransmuter));\n\n\t\t// AlchemistV2 proxy\n\t\tIAlchemistV2AdminActions.InitializationParams memory params = IAlchemistV2AdminActions.InitializationParams({\n\t\t\tadmin: alOwner,\n\t\t\tdebtToken: address(alToken),\n\t\t\ttransmuter: address(transmuterBuffer),\n\t\t\tminimumCollateralization: 2 * 1e18,\n\t\t\tprotocolFee: 1000,\n\t\t\tprotocolFeeReceiver: address(10),\n\t\t\tmintingLimitMinimum: 1,\n\t\t\tmintingLimitMaximum: uint256(type(uint160).max),\n\t\t\tmintingLimitBlocks: 300,\n\t\t\twhitelist: address(whitelist)\n\t\t});\n\n\t\tbytes memory alchemParams = abi.encodeWithSelector(AlchemistV2.initialize.selector, params);\n\n\t\tproxyAlchemist = new TransparentUpgradeableProxy(address(alchemistLogic), proxyOwner, alchemParams);\n\n\t\talchemist = AlchemistV2(address(proxyAlchemist));\n\n\t\t// Whitelist alchemist proxy for minting tokens\n\t\talToken.setWhitelist(address(proxyAlchemist), true);\n\t\t// Set the alchemist for the transmuterBuffer\n\t\ttransmuterBuffer.setAlchemist(address(proxyAlchemist));\n\t\t// Set the transmuter buffer's transmuter\n\t\ttransmuterBuffer.setTransmuter(fakeUnderlyingToken, address(transmuter));\n\t\t// Set alOwner as a keeper\n\t\talchemist.setKeeper(alOwner, true);\n\t\t// Set flow rate for transmuter buffer\n\t\ttransmuterBuffer.setFlowRate(fakeUnderlyingToken, 325e18);\n\n\t\tcheats.stopPrank();\n\n\t\t// Address labels\n\t\tcheats.label(alOwner, \"Owner address\");\n\t\tcheats.label(address(tokenAdapter), \"Token adapter\");\n\t\tcheats.label(fakeYieldToken, \"Yield token\");\n\t\tcheats.label(fakeUnderlyingToken, \"Underlying token\");\n\t\tcheats.label(address(whitelist), \"Whitelist contract\");\n\t\tcheats.label(address(alchemist), \"Alchemist proxy\");\n\t\tcheats.label(address(alchemistLogic), \"Alchemist logic\");\n\t\tcheats.label(address(transmuterBuffer), \"Transmuter buffer\");\n\t\tcheats.label(address(transmuter), \"Transmuter\");\n\t}\n\n\tfunction addYieldToken(address yieldToken, address adapter) public {\n\t\tIAlchemistV2AdminActions.YieldTokenConfig memory config = IAlchemistV2AdminActions.YieldTokenConfig({\n\t\t\tadapter: adapter,\n\t\t\tmaximumLoss: 1,\n\t\t\tmaximumExpectedValue: 1e50,\n\t\t\tcreditUnlockBlocks: 1\n\t\t});\n\n\t\talchemist.addYieldToken(yieldToken, config);\n\t}\n\n\tfunction addUnderlyingToken(address underlyingToken) public {\n\t\tIAlchemistV2AdminActions.UnderlyingTokenConfig memory config = IAlchemistV2AdminActions.UnderlyingTokenConfig({\n\t\t\trepayLimitMinimum: 1,\n\t\t\trepayLimitMaximum: 1000,\n\t\t\trepayLimitBlocks: 10,\n\t\t\tliquidationLimitMinimum: 1,\n\t\t\tliquidationLimitMaximum: 1000,\n\t\t\tliquidationLimitBlocks: 7200\n\t\t});\n\n\t\talchemist.addUnderlyingToken(underlyingToken, config);\n\t}\n\n\t/*\n\t * Initializes a scenario with a CDP for each user\n\t */\n\tfunction setScenario(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList\n\t) public {\n\t\t// Deploy the Alchemix contracts and underlying and yield tokens\n\t\tturnOn(caller, proxyOwner);\n\n\t\t// Register underlying and yield token in Alchemist and TransmuterBuffer\n\t\tregisterTokens(proxyOwner);\n\n\t\t// Creates a CDP for each address userList[i] with enough collateral\n\t\t// to mint debtList[i] debt tokens, plus overCollateralList[i] extra\n\t\t// collateral\n\t\tcreateCDPs(userList, debtList, overCollateralList);\n\n\t\t// Mint debtList[i] debt tokens from userList[i]'s CDP\n\t\tmintDebts(userList, debtList);\n\t}\n\n\t/*\n\t * Adds pre-initialized tokens as underlying and yield tokens\n\t */\n\tfunction registerTokens(address proxyOwner) public {\n\t\tcheats.startPrank(alOwner);\n\n\t\t// Register underlying and yield tokens in Alchemist\n\t\taddUnderlyingToken(fakeUnderlyingToken);\n\t\talchemist.setUnderlyingTokenEnabled(fakeUnderlyingToken, true);\n\t\taddYieldToken(fakeYieldToken, address(tokenAdapter));\n\t\talchemist.setYieldTokenEnabled(fakeYieldToken, true);\n\n\t\t// Register underlying token in TransmuterBuffer\n\t\ttransmuterBuffer.registerAsset(fakeUnderlyingToken, address(transmuter));\n\n\t\tcheats.stopPrank();\n\t}\n\n\t/*\n\t * Ensure fuzzed arguments are consistent with what we want\n\t */\n\tfunction ensureConsistency(\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Ensure there is at least one user\n\t\tcheats.assume(userList.length > 1);\n\n\t\tcheats.assume(amount > 0);\n\n\t\t// Ensure there is a debt and a collateral for every user\n\t\t// Not == because it would lead to too many inputs being discarded\n\t\t// (can just ignore extra debt and collateral entries)\n\t\tcheats.assume(userList.length <= debtList.length);\n\t\tcheats.assume(debtList.length <= overCollateralList.length);\n\n\t\t// Ensure the user addresses are valid\n\t\tfor (uint256 i; i < userList.length; ++i) {\n\t\t\tensureValidUser(proxyOwner, userList[i]);\n\t\t\tusers[userList[i]] = true;\n\t\t}\n\n\t\tensureValidUser(proxyOwner, recipient);\n\t}\n\n\t/*\n\t * Ensure the user is not the 0 address nor the proxy owner and is unique\n\t */\n\tfunction ensureValidUser(address proxyOwner, address user) public {\n\t\tcheats.assume(user != address(0));\n\t\tcheats.assume(user != proxyOwner);\n\t\tcheats.assume(users[user] != true);\n\t}\n\n\t/*\n\t * Create CDPs for multiple users\n\t */\n\tfunction createCDPs(\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList\n\t) public {\n\t\tfor (uint256 i = 0; i < userList.length; ++i) {\n\t\t\t// Label as a user address, to help debugging\n\t\t\tcheats.label(userList[i], \"User\");\n\n\t\t\tcreateCDP(userList[i], debtList[i], overCollateralList[i]);\n\t\t}\n\t}\n\n\t/*\n\t * Create a CDP for the user with a balance equal to\n\t * minimum collateralization * debt + overCollateral\n\t */\n\tfunction createCDP(\n\t\taddress user,\n\t\tuint96 debt,\n\t\tuint96 overCollateral\n\t) public {\n\t\t// Start prank with tx.origin = msg.sender\n\t\tcheats.startPrank(user, user);\n\n\t\t// User total balance in underlying tokens =\n\t\t// minimum collateralization * debt + overCollateral\n\t\tuint256 underlyingBalance = calculateBalance(debt, overCollateral, fakeUnderlyingToken);\n\n\t\t// Mint underlying tokens to deposit\n\t\tassignToUser(user, fakeUnderlyingToken, underlyingBalance);\n\n\t\t// Deposit underlying tokens into the Alchemist\n\t\tif (underlyingBalance > 0) {\n\t\t\talchemist.depositUnderlying(\n\t\t\t\tfakeYieldToken,\n\t\t\t\tunderlyingBalance,\n\t\t\t\tuser,\n\t\t\t\tminimumAmountOut(underlyingBalance, fakeYieldToken)\n\t\t\t);\n\t\t}\n\n\t\tcheats.stopPrank();\n\t}\n\n\t/*\n\t * Calculates balance = minimum collateralization * debt + overCollateral\n\t */\n\tfunction calculateBalance(\n\t\tuint256 debt,\n\t\tuint256 overCollateral,\n\t\taddress underlyingToken\n\t) public returns (uint256) {\n\t\tIAlchemistV2.UnderlyingTokenParams memory params = alchemist.getUnderlyingTokenParameters(underlyingToken);\n\n\t\tassert(params.conversionFactor != 0);\n\n\t\t// Conversion factor used to normalize debt token amount\n\t\tuint256 normalizedDebt = debt / params.conversionFactor;\n\n\t\tuint256 minimumCollateralization = alchemist.minimumCollateralization();\n\n\t\tuint256 fixedPointScalar = alchemist.FIXED_POINT_SCALAR();\n\t\tuint256 minimumCollateral = (minimumCollateralization * normalizedDebt) / fixedPointScalar;\n\n\t\treturn minimumCollateral + overCollateral;\n\t}\n\n\t/*\n\t * Calculates the total debt minted\n\t */\n\tfunction calculateTotalMinted(address[] calldata userList, uint96[] calldata debtList) public returns (uint256) {\n\t\tuint256 totalMinted;\n\t\tfor (uint256 i = 0; i < userList.length; ++i) {\n\t\t\ttotalMinted += debtList[i];\n\t\t}\n\n\t\treturn totalMinted;\n\t}\n\n\t/*\n\t * Mints amount tokens to user and approves the Alchemist for spending them\n\t */\n\tfunction assignToUser(\n\t\taddress user,\n\t\taddress token,\n\t\tuint256 amount\n\t) public {\n\t\tIERC20Mintable(token).mint(user, amount);\n\t\tIERC20Mintable(token).approve(address(alchemist), amount);\n\t}\n\n\t/*\n\t * Mints amount yield tokens to user and approves the Alchemist for spending them\n\t * A user must have a balance of the underlying token to mint\n\t */\n\tfunction assignYieldTokenToUser(\n\t\taddress user,\n\t\taddress token,\n\t\tuint256 amount\n\t) public {\n\t\tIERC20Mintable(fakeUnderlyingToken).approve(address(fakeYieldToken), amount);\n\t\tTestYieldToken(token).mint(amount, user);\n\t\tTestYieldToken(token).approve(address(alchemist), amount);\n\t}\n\n\t/*\n\t * Returns the minimum amount of yield tokens accepted for a given amount\n\t * of underlying tokens\n\t */\n\tfunction minimumAmountOut(uint256 amount, address yieldToken) public view returns (uint256) {\n\t\t// No slippage accepted\n\t\treturn amount / yieldTokenPrice(yieldToken);\n\t}\n\n\t/*\n\t * Retrieves the current price of the yield token from the adapter\n\t */\n\tfunction yieldTokenPrice(address yieldToken) internal view returns (uint256) {\n\t\taddress adapter = alchemist.getYieldTokenParameters(yieldToken).adapter;\n\n\t\treturn ITokenAdapter(adapter).price();\n\t}\n\n\t/*\n\t * Mint debt from all users' CDPs\n\t */\n\tfunction mintDebts(address[] calldata userList, uint96[] calldata debtList) public {\n\t\tfor (uint256 i = 0; i < userList.length; ++i) {\n\t\t\tmintDebt(userList[i], debtList[i]);\n\t\t}\n\t}\n\n\t/*\n\t * Mint debt from a single user's CDP\n\t */\n\tfunction mintDebt(address user, uint256 debt) public {\n\t\tif (debt > 0) {\n\t\t\t// msg.sender = tx.origin\n\t\t\tcheats.startPrank(user, user);\n\n\t\t\talchemist.mint(debt, user);\n\n\t\t\tcheats.stopPrank();\n\t\t}\n\t}\n\n\t/*\n\t * Initialization for each test\n\t */\n\tfunction setupTest(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Discard an input if it violates assumptions\n\t\tensureConsistency(proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Initialize contracts, tokens, and user CDPs\n\t\tsetScenario(caller, proxyOwner, userList, debtList, overCollateralList);\n\n\t\t// Get total minted debt\n\t\tminted = calculateTotalMinted(userList, debtList);\n\t}\n\n\t/*\n\t * Set the amount to repay based on repay limit,\n\t * and if a user has enough tokens to make repayment\n\t */\n\tfunction setRepayAmount(\n\t\taddress user,\n\t\taddress fakeUnderlyingToken,\n\t\tuint96 amount\n\t) public returns (uint256) {\n\t\t// Get repay limit\n\t\t(, , uint256 repayLimit) = alchemist.getRepayLimitInfo(fakeUnderlyingToken);\n\n\t\t// Repay either limit or specific amount of debt\n\t\tuint256 repayAmount = amount > repayLimit ? repayLimit : amount;\n\n\t\t// Give the user underlying tokens to repay with if necessary\n\t\tif (TestERC20(fakeUnderlyingToken).balanceOf(user) < repayAmount) {\n\t\t\tassignToUser(user, fakeUnderlyingToken, repayAmount);\n\t\t}\n\n\t\treturn repayAmount;\n\t}\n\n\t/*\n\t * Set the amount to liquidate\n\t */\n\tfunction setLiquidationAmount(address fakeUnderlyingToken, uint96 amount) public returns (uint256) {\n\t\t// Get liquidation limit\n\t\t(, , uint256 liquidationLimit) = alchemist.getLiquidationLimitInfo(fakeUnderlyingToken);\n\n\t\t// Liquidate either maximum limit or specific amount\n\t\tuint256 liquidationAmount = amount > liquidationLimit ? liquidationLimit : amount;\n\n\t\treturn liquidationAmount;\n\t}\n\n\t/*\n\t * Assigns an account a harvestable balance\n\t */\n\tfunction setHarvestableBalance(uint256 amount) public {\n\t\tIERC20Mintable(fakeUnderlyingToken).approve(address(fakeYieldToken), amount);\n\t\tTestYieldToken(fakeYieldToken).slurp(amount);\n\t}\n}\n"
    },
    "submodules/v2-foundry/src/test/utils/DSTestPlus.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Test} from \"../../../lib/forge-std/src/Test.sol\";\n\nimport {Hevm} from \"./Hevm.sol\";\n\n/// @notice Extended testing framework for DappTools projects.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/test/utils/DSTestPlus.sol)\ncontract DSTestPlus is Test {\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    address internal constant DEAD_ADDRESS = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;\n\n    string private checkpointLabel;\n    uint256 private checkpointGasLeft;\n\n    function startMeasuringGas(string memory label) internal virtual {\n        checkpointLabel = label;\n        checkpointGasLeft = gasleft();\n    }\n\n    function stopMeasuringGas() internal virtual {\n        uint256 checkpointGasLeft2 = gasleft();\n\n        string memory label = checkpointLabel;\n\n        emit log_named_uint(string(abi.encodePacked(label, \" Gas\")), checkpointGasLeft - checkpointGasLeft2);\n    }\n\n    function assertUint128Eq(uint128 a, uint128 b) internal virtual {\n        assertEq(uint256(a), uint256(b));\n    }\n\n    function assertUint64Eq(uint64 a, uint64 b) internal virtual {\n        assertEq(uint256(a), uint256(b));\n    }\n\n    function assertUint96Eq(uint96 a, uint96 b) internal virtual {\n        assertEq(uint256(a), uint256(b));\n    }\n\n    function assertUint32Eq(uint32 a, uint32 b) internal virtual {\n        assertEq(uint256(a), uint256(b));\n    }\n\n    function assertBoolEq(bool a, bool b) internal virtual {\n        b ? assertTrue(a) : assertFalse(a);\n    }\n\n    function assertApproxEq(\n        uint256 a,\n        uint256 b,\n        uint256 maxDelta\n    ) internal virtual {\n        uint256 delta = a > b ? a - b : b - a;\n\n        if (delta > maxDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint(\"  Expected\", a);\n            emit log_named_uint(\"    Actual\", b);\n            emit log_named_uint(\" Max Delta\", maxDelta);\n            emit log_named_uint(\"     Delta\", delta);\n            fail();\n        }\n    }\n\n    function assertRelApproxEq(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta\n    ) internal virtual {\n        uint256 delta = a > b ? a - b : b - a;\n        uint256 abs = a > b ? a : b;\n\n        uint256 percentDelta = (delta * 1e18) / abs;\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint(\"    Expected\", a);\n            emit log_named_uint(\"      Actual\", b);\n            emit log_named_uint(\" Max % Delta\", maxPercentDelta);\n            emit log_named_uint(\"     % Delta\", percentDelta);\n            fail();\n        }\n    }\n\n    function assertBytesEq(bytes memory a, bytes memory b) internal virtual {\n        if (keccak256(a) != keccak256(b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"  Expected\", b);\n            emit log_named_bytes(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertUintArrayEq(uint256[] memory a, uint256[] memory b) internal virtual {\n        require(a.length == b.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < a.length; i++) {\n            assertEq(a[i], b[i]);\n        }\n    }\n\n    function expectError(string memory message) internal {\n        hevm.expectRevert(bytes(message));\n    }\n\n    function expectIllegalArgumentError(string memory message) internal {\n        hevm.expectRevert(abi.encodeWithSignature(\"IllegalArgument(string)\", message));\n    }\n\n    function expectIllegalStateError(string memory message) internal {\n        hevm.expectRevert(abi.encodeWithSignature(\"IllegalState(string)\", message));\n    }\n\n    function expectUnauthorizedError(string memory message) internal {\n        hevm.expectRevert(abi.encodeWithSignature(\"Unauthorized(string)\", message));\n    }\n\n    function expectUnsupportedOperationError(string memory message) internal {\n        hevm.expectRevert(abi.encodeWithSignature(\"UnsupportedOperation(string)\", message));\n    }\n\n    function min3(\n        uint256 a,\n        uint256 b,\n        uint256 c\n    ) internal pure returns (uint256) {\n        return a > b ? (b > c ? c : b) : (a > c ? c : a);\n    }\n\n    function min2(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? b : a;\n    }\n}"
    },
    "submodules/v2-foundry/src/test/utils/Cheatcodes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n// References for cheatcodes: https://onbjerg.github.io/foundry-book/reference/cheatcodes.html\ninterface CheatCodes {\n    // Set block.timestamp\n    function warp(uint256) external;\n    // Set block.number\n    function roll(uint256) external;\n    // Set block.basefee\n    function fee(uint256) external;\n    // Loads a storage slot from an address\n    function load(address account, bytes32 slot) external returns (bytes32);\n    // Stores a value to an address' storage slot\n    function store(address account, bytes32 slot, bytes32 value) external;\n    // Signs data\n    function sign(uint256 privateKey, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n    // Computes address for a given private key\n    function addr(uint256 privateKey) external returns (address);\n    // Performs a foreign function call via terminal\n    function ffi(string[] calldata) external returns (bytes memory);\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address) external;\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\n    function prank(address, address) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\n    function startPrank(address, address) external;\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n    // Sets an address' balance\n    function deal(address who, uint256 newBalance) external;\n    // Sets an address' code\n    function etch(address who, bytes calldata code) external;\n    // Expects an error on next call\n    function expectRevert(bytes calldata) external;\n    function expectRevert(bytes4) external;\n    // Record all storage reads and writes\n    function record() external;\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans)\n    function expectEmit(bool, bool, bool, bool) external;\n    // Mocks a call to an address, returning specified data.\n    // Calldata can either be strict or a partial match, e.g. if you only\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\n    // function will be mocked.\n    function mockCall(address, bytes calldata, bytes calldata) external;\n    // Clears all mocked calls\n    function clearMockedCalls() external;\n    // Expect a call to an address with the specified calldata.\n    // Calldata can either be strict or a partial match\n    function expectCall(address, bytes calldata) external;\n    function getCode(string calldata) external returns (bytes memory);\n    // Label an address in test traces\n    function label(address addr, string calldata label) external;\n    // When fuzzing, generate new inputs if conditional not met\n    function assume(bool) external;\n}\n\n"
    },
    "submodules/v2-foundry/src/AlchemistV2.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.13;\n\nimport {Initializable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\n\nimport {Unauthorized, IllegalState, IllegalArgument} from \"./base/Errors.sol\";\n\nimport \"./base/Multicall.sol\";\nimport \"./base/Mutex.sol\";\n\nimport \"./interfaces/IAlchemistV2.sol\";\nimport \"./interfaces/IERC20TokenReceiver.sol\";\nimport \"./interfaces/ITokenAdapter.sol\";\nimport \"./interfaces/IAlchemicToken.sol\";\nimport \"./interfaces/IWhitelist.sol\";\nimport \"./interfaces/IRewardCollector.sol\";\nimport \"./interfaces/external/vesper/IVesperRewards.sol\";\nimport \"./interfaces/external/vesper/IVesperPool.sol\";\n\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/Sets.sol\";\nimport \"./libraries/TokenUtils.sol\";\nimport \"./libraries/Limiters.sol\";\n\n/// @title  AlchemistV2\n/// @author Alchemix Finance\ncontract AlchemistV2 is IAlchemistV2, Initializable, Multicall, Mutex {\n    using Limiters for Limiters.LinearGrowthLimiter;\n    using Sets for Sets.AddressSet;\n\n    /// @notice A user account.\n    struct Account {\n        // A signed value which represents the current amount of debt or credit that the account has accrued.\n        // Positive values indicate debt, negative values indicate credit.\n        int256 debt;\n        // The share balances for each yield token.\n        mapping(address => uint256) balances;\n        // The last values recorded for accrued weights for each yield token.\n        mapping(address => uint256) lastAccruedWeights;\n        // The set of yield tokens that the account has deposited into the system.\n        Sets.AddressSet depositedTokens;\n        // The allowances for mints.\n        mapping(address => uint256) mintAllowances;\n        // The allowances for withdrawals.\n        mapping(address => mapping(address => uint256)) withdrawAllowances;\n    }\n\n    /// @notice The number of basis points there are to represent exactly 100%.\n    uint256 public constant BPS = 10_000;\n\n    /// @notice The scalar used for conversion of integral numbers to fixed point numbers. Fixed point numbers in this\n    ///         implementation have 18 decimals of resolution, meaning that 1 is represented as 1e18, 0.5 is\n    ///         represented as 5e17, and 2 is represented as 2e18.\n    uint256 public constant FIXED_POINT_SCALAR = 1e18;\n\n    /// @inheritdoc IAlchemistV2Immutables\n    string public constant override version = \"2.2.8\";\n\n    /// @inheritdoc IAlchemistV2Immutables\n    address public override debtToken;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override admin;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override pendingAdmin;\n\n    /// @inheritdoc IAlchemistV2State\n    mapping(address => bool) public override sentinels;\n\n    /// @inheritdoc IAlchemistV2State\n    mapping(address => bool) public override keepers;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override transmuter;\n\n    /// @inheritdoc IAlchemistV2State\n    uint256 public override minimumCollateralization;\n\n    /// @inheritdoc IAlchemistV2State\n    uint256 public override protocolFee;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override protocolFeeReceiver;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override whitelist;\n\n    /// @dev A linear growth function that limits the amount of debt-token minted.\n    Limiters.LinearGrowthLimiter private _mintingLimiter;\n\n    // @dev The repay limiters for each underlying token.\n    mapping(address => Limiters.LinearGrowthLimiter) private _repayLimiters;\n\n    // @dev The liquidation limiters for each underlying token.\n    mapping(address => Limiters.LinearGrowthLimiter) private _liquidationLimiters;\n\n    /// @dev Accounts mapped by the address that owns them.\n    mapping(address => Account) private _accounts;\n\n    /// @dev Underlying token parameters mapped by token address.\n    mapping(address => UnderlyingTokenParams) private _underlyingTokens;\n\n    /// @dev Yield token parameters mapped by token address.\n    mapping(address => YieldTokenParams) private _yieldTokens;\n\n    /// @dev An iterable set of the underlying tokens that are supported by the system.\n    Sets.AddressSet private _supportedUnderlyingTokens;\n\n    /// @dev An iterable set of the yield tokens that are supported by the system.\n    Sets.AddressSet private _supportedYieldTokens;\n\n    /// @inheritdoc IAlchemistV2State\n    address public override transferAdapter;\n\n    constructor() initializer {}\n\n    /// @inheritdoc IAlchemistV2State\n    function getYieldTokensPerShare(address yieldToken) external view override returns (uint256) {\n        return convertSharesToYieldTokens(yieldToken, 10**_yieldTokens[yieldToken].decimals);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getUnderlyingTokensPerShare(address yieldToken) external view override returns (uint256) {\n        return convertSharesToUnderlyingTokens(yieldToken, 10**_yieldTokens[yieldToken].decimals);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getSupportedUnderlyingTokens() external view override returns (address[] memory) {\n        return _supportedUnderlyingTokens.values;\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getSupportedYieldTokens() external view override returns (address[] memory) {\n        return _supportedYieldTokens.values;\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function isSupportedUnderlyingToken(address underlyingToken) external view override returns (bool) {\n        return _supportedUnderlyingTokens.contains(underlyingToken);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function isSupportedYieldToken(address yieldToken) external view override returns (bool) {\n        return _supportedYieldTokens.contains(yieldToken);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function accounts(address owner)\n        external view override\n        returns (\n            int256 debt,\n            address[] memory depositedTokens\n        )\n    {\n        Account storage account = _accounts[owner];\n\n        return (\n            _calculateUnrealizedDebt(owner),\n            account.depositedTokens.values\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function positions(address owner, address yieldToken)\n        external view override\n        returns (\n            uint256 shares,\n            uint256 lastAccruedWeight\n        )\n    {\n        Account storage account = _accounts[owner];\n        return (account.balances[yieldToken], account.lastAccruedWeights[yieldToken]);\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function mintAllowance(address owner, address spender)\n        external view override\n        returns (uint256)\n    {\n        Account storage account = _accounts[owner];\n        return account.mintAllowances[spender];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function withdrawAllowance(address owner, address spender, address yieldToken)\n        external view override\n        returns (uint256)\n    {\n        Account storage account = _accounts[owner];\n        return account.withdrawAllowances[spender][yieldToken];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getUnderlyingTokenParameters(address underlyingToken)\n        external view override\n        returns (UnderlyingTokenParams memory)\n    {\n        return _underlyingTokens[underlyingToken];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getYieldTokenParameters(address yieldToken)\n        external view override\n        returns (YieldTokenParams memory)\n    {\n        return _yieldTokens[yieldToken];\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getMintLimitInfo()\n        external view override\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        )\n    {\n        return (\n            _mintingLimiter.get(),\n            _mintingLimiter.rate,\n            _mintingLimiter.maximum\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getRepayLimitInfo(address underlyingToken)\n        external view override\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        )\n    {\n        Limiters.LinearGrowthLimiter storage limiter = _repayLimiters[underlyingToken];\n        return (\n            limiter.get(),\n            limiter.rate,\n            limiter.maximum\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2State\n    function getLiquidationLimitInfo(address underlyingToken)\n        external view override\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        )\n    {\n        Limiters.LinearGrowthLimiter storage limiter = _liquidationLimiters[underlyingToken];\n        return (\n            limiter.get(),\n            limiter.rate,\n            limiter.maximum\n        );\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function initialize(InitializationParams memory params) external initializer {\n        _checkArgument(params.protocolFee <= BPS);\n\n        debtToken                = params.debtToken;\n        admin                    = params.admin;\n        transmuter               = params.transmuter;\n        minimumCollateralization = params.minimumCollateralization;\n        protocolFee              = params.protocolFee;\n        protocolFeeReceiver      = params.protocolFeeReceiver;\n        whitelist                = params.whitelist;\n\n        _mintingLimiter = Limiters.createLinearGrowthLimiter(\n            params.mintingLimitMaximum,\n            params.mintingLimitBlocks,\n            params.mintingLimitMinimum\n        );\n\n        emit AdminUpdated(admin);\n        emit TransmuterUpdated(transmuter);\n        emit MinimumCollateralizationUpdated(minimumCollateralization);\n        emit ProtocolFeeUpdated(protocolFee);\n        emit MintingLimitUpdated(params.mintingLimitMaximum, params.mintingLimitBlocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setPendingAdmin(address value) external override {\n        _onlyAdmin();\n        pendingAdmin = value;\n        emit PendingAdminUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function acceptAdmin() external override {\n        _checkState(pendingAdmin != address(0));\n\n        if (msg.sender != pendingAdmin) {\n            revert Unauthorized();\n        }\n\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n\n        emit AdminUpdated(admin);\n        emit PendingAdminUpdated(address(0));\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setSentinel(address sentinel, bool flag) external override {\n        _onlyAdmin();\n        sentinels[sentinel] = flag;\n        emit SentinelSet(sentinel, flag);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setKeeper(address keeper, bool flag) external override {\n        _onlyAdmin();\n        keepers[keeper] = flag;\n        emit KeeperSet(keeper, flag);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function addUnderlyingToken(address underlyingToken, UnderlyingTokenConfig calldata config) external override lock {\n        _onlyAdmin();\n        _checkState(!_supportedUnderlyingTokens.contains(underlyingToken));\n\n        uint8 tokenDecimals = TokenUtils.expectDecimals(underlyingToken);\n        uint8 debtTokenDecimals = TokenUtils.expectDecimals(debtToken);\n\n        _checkArgument(tokenDecimals <= debtTokenDecimals);\n\n        _underlyingTokens[underlyingToken] = UnderlyingTokenParams({\n            decimals:         tokenDecimals,\n            conversionFactor: 10**(debtTokenDecimals - tokenDecimals),\n            enabled:          false\n        });\n\n        _repayLimiters[underlyingToken] = Limiters.createLinearGrowthLimiter(\n            config.repayLimitMaximum,\n            config.repayLimitBlocks,\n            config.repayLimitMinimum\n        );\n\n        _liquidationLimiters[underlyingToken] = Limiters.createLinearGrowthLimiter(\n            config.liquidationLimitMaximum,\n            config.liquidationLimitBlocks,\n            config.liquidationLimitMinimum\n        );\n\n        _supportedUnderlyingTokens.add(underlyingToken);\n\n        emit AddUnderlyingToken(underlyingToken);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function addYieldToken(address yieldToken, YieldTokenConfig calldata config) external override lock {\n        _onlyAdmin();\n        _checkArgument(config.maximumLoss <= BPS);\n        _checkArgument(config.creditUnlockBlocks > 0);\n\n        _checkState(!_supportedYieldTokens.contains(yieldToken));\n\n        ITokenAdapter adapter = ITokenAdapter(config.adapter);\n\n        _checkState(yieldToken == adapter.token());\n        _checkSupportedUnderlyingToken(adapter.underlyingToken());\n\n        _yieldTokens[yieldToken] = YieldTokenParams({\n            decimals:              TokenUtils.expectDecimals(yieldToken),\n            underlyingToken:       adapter.underlyingToken(),\n            adapter:               config.adapter,\n            maximumLoss:           config.maximumLoss,\n            maximumExpectedValue:  config.maximumExpectedValue,\n            creditUnlockRate:      FIXED_POINT_SCALAR / config.creditUnlockBlocks,\n            activeBalance:         0,\n            harvestableBalance:    0,\n            totalShares:           0,\n            expectedValue:         0,\n            accruedWeight:         0,\n            pendingCredit:         0,\n            distributedCredit:     0,\n            lastDistributionBlock: 0,\n            enabled:               false\n        });\n\n        _supportedYieldTokens.add(yieldToken);\n\n        TokenUtils.safeApprove(yieldToken, config.adapter, type(uint256).max);\n        TokenUtils.safeApprove(adapter.underlyingToken(), config.adapter, type(uint256).max);\n\n        emit AddYieldToken(yieldToken);\n        emit TokenAdapterUpdated(yieldToken, config.adapter);\n        emit MaximumLossUpdated(yieldToken, config.maximumLoss);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setUnderlyingTokenEnabled(address underlyingToken, bool enabled) external override {\n        _onlySentinelOrAdmin();\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _underlyingTokens[underlyingToken].enabled = enabled;\n        emit UnderlyingTokenEnabled(underlyingToken, enabled);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setYieldTokenEnabled(address yieldToken, bool enabled) external override {\n        _onlySentinelOrAdmin();\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].enabled = enabled;\n        emit YieldTokenEnabled(yieldToken, enabled);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureRepayLimit(address underlyingToken, uint256 maximum, uint256 blocks) external override {\n        _onlyAdmin();\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _repayLimiters[underlyingToken].update();\n        _repayLimiters[underlyingToken].configure(maximum, blocks);\n        emit RepayLimitUpdated(underlyingToken, maximum, blocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureLiquidationLimit(address underlyingToken, uint256 maximum, uint256 blocks) external override {\n        _onlyAdmin();\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _liquidationLimiters[underlyingToken].update();\n        _liquidationLimiters[underlyingToken].configure(maximum, blocks);\n        emit LiquidationLimitUpdated(underlyingToken, maximum, blocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setTransmuter(address value) external override {\n        _onlyAdmin();\n        _checkArgument(value != address(0));\n        transmuter = value;\n        emit TransmuterUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setMinimumCollateralization(uint256 value) external override {\n        _onlyAdmin();\n        _checkArgument(value >= 1e18);\n        minimumCollateralization = value;\n        emit MinimumCollateralizationUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setProtocolFee(uint256 value) external override {\n        _onlyAdmin();\n        _checkArgument(value <= BPS);\n        protocolFee = value;\n        emit ProtocolFeeUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setProtocolFeeReceiver(address value) external override {\n        _onlyAdmin();\n        _checkArgument(value != address(0));\n        protocolFeeReceiver = value;\n        emit ProtocolFeeReceiverUpdated(value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureMintingLimit(uint256 maximum, uint256 rate) external override {\n        _onlyAdmin();\n        _mintingLimiter.update();\n        _mintingLimiter.configure(maximum, rate);\n        emit MintingLimitUpdated(maximum, rate);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function configureCreditUnlockRate(address yieldToken, uint256 blocks) external override {\n        _onlyAdmin();\n        _checkArgument(blocks > 0);\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].creditUnlockRate = FIXED_POINT_SCALAR / blocks;\n        emit CreditUnlockRateUpdated(yieldToken, blocks);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setTokenAdapter(address yieldToken, address adapter) external override {\n        _onlyAdmin();\n        _checkState(yieldToken == ITokenAdapter(adapter).token());\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].adapter = adapter;\n        TokenUtils.safeApprove(yieldToken, adapter, type(uint256).max);\n        TokenUtils.safeApprove(ITokenAdapter(adapter).underlyingToken(), adapter, type(uint256).max);\n        emit TokenAdapterUpdated(yieldToken, adapter);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setMaximumExpectedValue(address yieldToken, uint256 value) external override {\n        _onlyAdmin();\n        _checkSupportedYieldToken(yieldToken);\n        _yieldTokens[yieldToken].maximumExpectedValue = value;\n        emit MaximumExpectedValueUpdated(yieldToken, value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setMaximumLoss(address yieldToken, uint256 value) external override {\n        _onlyAdmin();\n        _checkArgument(value <= BPS);\n        _checkSupportedYieldToken(yieldToken);\n\n        _yieldTokens[yieldToken].maximumLoss = value;\n\n        emit MaximumLossUpdated(yieldToken, value);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function snap(address yieldToken) external override lock {\n        _onlyAdmin();\n        _checkSupportedYieldToken(yieldToken);\n\n        uint256 expectedValue = convertYieldTokensToUnderlying(yieldToken, _yieldTokens[yieldToken].activeBalance);\n\n        _yieldTokens[yieldToken].expectedValue = expectedValue;\n\n        emit Snap(yieldToken, expectedValue);\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function sweepRewardTokens(address rewardToken, address yieldToken) external override lock {\n        _onlyKeeper();\n\n        if (_supportedYieldTokens.contains(rewardToken) || _supportedUnderlyingTokens.contains(rewardToken)) {\n            revert UnsupportedToken(rewardToken);\n        }\n\n        msg.sender.delegatecall(abi.encodeWithSignature(\"claim(address)\", yieldToken));\n\n        TokenUtils.safeTransfer(rewardToken, msg.sender, TokenUtils.safeBalanceOf(rewardToken, address(this)));\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function setTransferAdapterAddress(address transferAdapterAddress) external override lock {\n        _onlyAdmin();\n        transferAdapter = transferAdapterAddress;\n    }\n\n    /// @inheritdoc IAlchemistV2AdminActions\n    function transferDebtV1(\n        address owner, \n        int256 debt\n    ) external override lock {\n        _onlyTransferAdapter();\n        _poke(owner);\n        _updateDebt(owner, debt);\n        _validate(owner);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function approveMint(address spender, uint256 amount) external override {\n        _onlyWhitelisted();\n        _approveMint(msg.sender, spender, amount);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function approveWithdraw(address spender, address yieldToken, uint256 shares) external override {\n        _onlyWhitelisted();\n        _checkSupportedYieldToken(yieldToken);\n        _approveWithdraw(msg.sender, spender, yieldToken, shares);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function poke(address owner) external override lock {\n        _onlyWhitelisted();\n        _preemptivelyHarvestDeposited(owner);\n        _distributeUnlockedCreditDeposited(owner);\n        _poke(owner);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Deposit the yield tokens to the recipient.\n        uint256 shares = _deposit(yieldToken, amount, recipient);\n\n        // Transfer tokens from the message sender now that the internal storage updates have been committed.\n        TokenUtils.safeTransferFrom(yieldToken, msg.sender, address(this), amount);\n\n        return shares;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function depositUnderlying(\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Before depositing, the underlying tokens must be wrapped into yield tokens.\n        uint256 amountYieldTokens = _wrap(yieldToken, amount, minimumAmountOut);\n\n        // Deposit the yield-tokens to the recipient.\n        return _deposit(yieldToken, amountYieldTokens, recipient);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdraw(\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Withdraw the shares from the system.\n        uint256 amountYieldTokens = _withdraw(yieldToken, msg.sender, shares, recipient);\n\n        // Transfer the yield tokens to the recipient.\n        TokenUtils.safeTransfer(yieldToken, recipient, amountYieldTokens);\n\n        return amountYieldTokens;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdrawFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n\n        // Preemptively try and decrease the withdrawal allowance. This will save gas when the allowance is not\n        // sufficient for the withdrawal.\n        _decreaseWithdrawAllowance(owner, msg.sender, yieldToken, shares);\n\n        // Withdraw the shares from the system.\n        uint256 amountYieldTokens = _withdraw(yieldToken, owner, shares, recipient);\n\n        // Transfer the yield tokens to the recipient.\n        TokenUtils.safeTransfer(yieldToken, recipient, amountYieldTokens);\n\n        return amountYieldTokens;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdrawUnderlying(\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n        _checkLoss(yieldToken);\n\n        uint256 amountYieldTokens = _withdraw(yieldToken, msg.sender, shares, recipient);\n\n        return _unwrap(yieldToken, amountYieldTokens, recipient, minimumAmountOut);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function withdrawUnderlyingFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n        _checkArgument(recipient != address(0));\n        _checkSupportedYieldToken(yieldToken);\n        _checkLoss(yieldToken);\n        _decreaseWithdrawAllowance(owner, msg.sender, yieldToken, shares);\n\n        uint256 amountYieldTokens = _withdraw(yieldToken, owner, shares, recipient);\n\n        return _unwrap(yieldToken, amountYieldTokens, recipient, minimumAmountOut);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function mint(uint256 amount, address recipient) external override lock {\n        _onlyWhitelisted();\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        // Mint tokens from the message sender's account to the recipient.\n        _mint(msg.sender, amount, recipient);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function mintFrom(\n        address owner,\n        uint256 amount,\n        address recipient\n    ) external override lock {\n        _onlyWhitelisted();\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        // Preemptively try and decrease the minting allowance. This will save gas when the allowance is not sufficient\n        // for the mint.\n        _decreaseMintAllowance(owner, msg.sender, amount);\n\n        // Mint tokens from the owner's account to the recipient.\n        _mint(owner, amount, recipient);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function burn(uint256 amount, address recipient) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(recipient);\n\n        // Update the recipient's account, decrease the debt of the recipient by the number of tokens burned.\n        _poke(recipient);\n\n        // Check that the debt is greater than zero.\n        //\n        // It is possible that the number of debt which is repayable is equal to or less than zero after realizing the\n        // credit that was earned since the last update. We do not want to perform a noop so we need to check that the\n        // amount of debt to repay is greater than zero.\n        int256 debt;\n        _checkState((debt = _accounts[recipient].debt) > 0);\n\n        // Limit how much debt can be repaid up to the current amount of debt that the account has. This prevents\n        // situations where the user may be trying to repay their entire debt, but it decreases since they send the\n        // transaction and causes a revert because burning can never decrease the debt below zero.\n        //\n        // Casts here are safe because it is asserted that debt is greater than zero.\n        uint256 credit = amount > uint256(debt) ? uint256(debt) : amount;\n\n        // Update the recipient's debt.\n        _updateDebt(recipient, -SafeCast.toInt256(credit));\n\n        // Burn the tokens from the message sender.\n        TokenUtils.safeBurnFrom(debtToken, msg.sender, credit);\n\n        // Increase the global amount of mintable debt tokens.\n        // Do this after burning instead of before because mint limit increase is an action beneficial to the user.\n        _mintingLimiter.increase(credit);\n\n        emit Burn(msg.sender, credit, recipient);\n\n        return credit;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function repay(address underlyingToken, uint256 amount, address recipient) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(amount > 0);\n        _checkArgument(recipient != address(0));\n\n        _checkSupportedUnderlyingToken(underlyingToken);\n        _checkUnderlyingTokenEnabled(underlyingToken);\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(recipient);\n\n        // Update the recipient's account and decrease the amount of debt incurred.\n        _poke(recipient);\n\n        // Check that the debt is greater than zero.\n        //\n        // It is possible that the amount of debt which is repayable is equal to or less than zero after realizing the\n        // credit that was earned since the last update. We do not want to perform a noop so we need to check that the\n        // amount of debt to repay is greater than zero.\n        int256 debt;\n        _checkState((debt = _accounts[recipient].debt) > 0);\n\n        // Determine the maximum amount of underlying tokens that can be repaid.\n        //\n        // It is implied that this value is greater than zero because `debt` is greater than zero so a noop is not possible\n        // beyond this point. Casting the debt to an unsigned integer is also safe because `debt` is greater than zero.\n        uint256 maximumAmount = normalizeDebtTokensToUnderlying(underlyingToken, uint256(debt));\n\n        // Limit the number of underlying tokens to repay up to the maximum allowed.\n        uint256 actualAmount = amount > maximumAmount ? maximumAmount : amount;\n\n        Limiters.LinearGrowthLimiter storage limiter = _repayLimiters[underlyingToken];\n\n        // Check to make sure that the underlying token repay limit has not been breached.\n        uint256 currentRepayLimit = limiter.get();\n        if (actualAmount > currentRepayLimit) {\n          revert RepayLimitExceeded(underlyingToken, actualAmount, currentRepayLimit);\n        }\n\n        uint256 credit = normalizeUnderlyingTokensToDebt(underlyingToken, actualAmount);\n\n        // Update the recipient's debt.\n        _updateDebt(recipient, -SafeCast.toInt256(credit));\n\n        // Decrease the amount of the underlying token which is globally available to be repaid.\n        limiter.decrease(actualAmount);\n\n        // Transfer the repaid tokens to the transmuter.\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, transmuter, actualAmount);\n\n        // Inform the transmuter that it has received tokens.\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, actualAmount);\n\n        emit Repay(msg.sender, underlyingToken, actualAmount, recipient, credit);\n\n        return actualAmount;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function liquidate(\n        address yieldToken,\n        uint256 shares,\n        uint256 minimumAmountOut\n    ) external override lock returns (uint256) {\n        _onlyWhitelisted();\n\n        _checkArgument(shares > 0);\n\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        address underlyingToken = yieldTokenParams.underlyingToken;\n\n        _checkSupportedYieldToken(yieldToken);\n        _checkYieldTokenEnabled(yieldToken);\n        _checkUnderlyingTokenEnabled(underlyingToken);\n        _checkLoss(yieldToken);\n\n        // Calculate the unrealized debt.\n        //\n        // It is possible that the number of debt which is repayable is equal to or less than zero after realizing the\n        // credit that was earned since the last update. We do not want to perform a noop so we need to check that the\n        // amount of debt to repay is greater than zero.\n        int256 unrealizedDebt;\n        _checkState((unrealizedDebt = _calculateUnrealizedDebt(msg.sender)) > 0);\n\n        // Determine the maximum amount of shares that can be liquidated from the unrealized debt.\n        //\n        // It is implied that this value is greater than zero because `debt` is greater than zero. Casting the debt to an\n        // unsigned integer is also safe for this reason.\n        uint256 maximumShares = convertUnderlyingTokensToShares(\n          yieldToken,\n          normalizeDebtTokensToUnderlying(underlyingToken, uint256(unrealizedDebt))\n        );\n\n        // Limit the number of shares to liquidate up to the maximum allowed.\n        uint256 actualShares = shares > maximumShares ? maximumShares : shares;\n\n        // Unwrap the yield tokens that the shares are worth.\n        uint256 amountYieldTokens      = convertSharesToYieldTokens(yieldToken, actualShares);\n        uint256 amountUnderlyingTokens = _unwrap(yieldToken, amountYieldTokens, address(this), minimumAmountOut);\n\n        // Again, perform another noop check. It is possible that the amount of underlying tokens that were received by\n        // unwrapping the yield tokens was zero because the amount of yield tokens to unwrap was too small.\n        _checkState(amountUnderlyingTokens > 0);\n\n        Limiters.LinearGrowthLimiter storage limiter = _liquidationLimiters[underlyingToken];\n\n        // Check to make sure that the underlying token liquidation limit has not been breached.\n        uint256 liquidationLimit = limiter.get();\n        if (amountUnderlyingTokens > liquidationLimit) {\n          revert LiquidationLimitExceeded(underlyingToken, amountUnderlyingTokens, liquidationLimit);\n        }\n\n        // Buffers any harvestable yield tokens. This will properly synchronize the balance which is held by users\n        // and the balance which is held by the system. This is required for `_sync` to function correctly.\n        _preemptivelyHarvest(yieldToken);\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(msg.sender);\n\n        uint256 credit = normalizeUnderlyingTokensToDebt(underlyingToken, amountUnderlyingTokens);\n\n        // Update the message sender's account, proactively burn shares, decrease the amount of debt incurred, and then\n        // decrease the value of the token that the system is expected to hold.\n        _poke(msg.sender, yieldToken);\n        _burnShares(msg.sender, yieldToken, actualShares);\n        _updateDebt(msg.sender, -SafeCast.toInt256(credit));\n        _sync(yieldToken, amountYieldTokens, _usub);\n\n        // Decrease the amount of the underlying token which is globally available to be liquidated.\n        limiter.decrease(amountUnderlyingTokens);\n\n        // Transfer the liquidated tokens to the transmuter.\n        TokenUtils.safeTransfer(underlyingToken, transmuter, amountUnderlyingTokens);\n\n        // Inform the transmuter that it has received tokens.\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, amountUnderlyingTokens);\n\n        emit Liquidate(msg.sender, yieldToken, underlyingToken, actualShares, credit);\n\n        return actualShares;\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function donate(address yieldToken, uint256 amount) external override lock {\n        _onlyWhitelisted();\n        _checkArgument(amount > 0);\n\n        // Distribute any unlocked credit so that the accrued weight is up to date.\n        _distributeUnlockedCredit(yieldToken);\n\n        // Update the message sender's account. This will assure that any credit that was earned is not overridden.\n        _poke(msg.sender);\n\n        uint256 shares = _yieldTokens[yieldToken].totalShares - _accounts[msg.sender].balances[yieldToken];\n\n        _yieldTokens[yieldToken].accruedWeight += amount * FIXED_POINT_SCALAR / shares;\n        _accounts[msg.sender].lastAccruedWeights[yieldToken] = _yieldTokens[yieldToken].accruedWeight;\n\n        TokenUtils.safeBurnFrom(debtToken, msg.sender, amount);\n\n        // Increase the global amount of mintable debt tokens.\n        // Do this after burning instead of before because mint limit increase is an action beneficial to the user.\n        _mintingLimiter.increase(amount);\n\n        emit Donate(msg.sender, yieldToken, amount);\n    }\n\n    /// @inheritdoc IAlchemistV2Actions\n    function harvest(address yieldToken, uint256 minimumAmountOut) external override lock {\n        _onlyKeeper();\n        _checkSupportedYieldToken(yieldToken);\n\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        // Buffer any harvestable yield tokens. This will properly synchronize the balance which is held by users\n        // and the balance which is held by the system to be harvested during this call.\n        _preemptivelyHarvest(yieldToken);\n\n        // Load and proactively clear the amount of harvestable tokens so that future calls do not rely on stale data.\n        // Because we cannot call an external unwrap until the amount of harvestable tokens has been calculated,\n        // clearing this data immediately prevents any potential reentrancy attacks which would use stale harvest\n        // buffer values.\n        uint256 harvestableAmount = yieldTokenParams.harvestableBalance;\n        yieldTokenParams.harvestableBalance = 0;\n\n        // Check that the harvest will not be a no-op.\n        _checkState(harvestableAmount != 0);\n\n        address underlyingToken = yieldTokenParams.underlyingToken;\n        uint256 amountUnderlyingTokens = _unwrap(yieldToken, harvestableAmount, address(this), minimumAmountOut);\n\n        // Calculate how much of the unwrapped underlying tokens will be allocated for fees and distributed to users.\n        uint256 feeAmount = amountUnderlyingTokens * protocolFee / BPS;\n        uint256 distributeAmount = amountUnderlyingTokens - feeAmount;\n\n        uint256 credit = normalizeUnderlyingTokensToDebt(underlyingToken, distributeAmount);\n\n        // Distribute credit to all of the users who hold shares of the yield token.\n        _distributeCredit(yieldToken, credit);\n\n        // Transfer the tokens to the fee receiver and transmuter.\n        TokenUtils.safeTransfer(underlyingToken, protocolFeeReceiver, feeAmount);\n        TokenUtils.safeTransfer(underlyingToken, transmuter, distributeAmount);\n\n        // Inform the transmuter that it has received tokens.\n        IERC20TokenReceiver(transmuter).onERC20Received(underlyingToken, distributeAmount);\n\n        emit Harvest(yieldToken, minimumAmountOut, amountUnderlyingTokens, credit);\n    }\n\n    /// @dev Checks that the `msg.sender` is the administrator.\n    ///\n    /// @dev `msg.sender` must be the administrator or this call will revert with an {Unauthorized} error.\n    function _onlyAdmin() internal view {\n        if (msg.sender != admin) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks that the `msg.sender` is the administrator or a sentinel.\n    ///\n    /// @dev `msg.sender` must be either the administrator or a sentinel or this call will revert with an\n    ///      {Unauthorized} error.\n    function _onlySentinelOrAdmin() internal view {\n        // Check if the message sender is the administrator.\n        if (msg.sender == admin) {\n            return;\n        }\n\n        // Check if the message sender is a sentinel. After this check we can revert since we know that it is neither\n        // the administrator or a sentinel.\n        if (!sentinels[msg.sender]) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks that the `msg.sender` is a keeper.\n    ///\n    /// @dev `msg.sender` must be a keeper or this call will revert with an {Unauthorized} error.\n    function _onlyKeeper() internal view {\n        if (!keepers[msg.sender]) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks that the `msg.sender` is the V1 transfer adapter.\n    ///\n    /// @dev `msg.sender` must be the administrator or this call will revert with an {Unauthorized} error.\n    function _onlyTransferAdapter() internal view {\n        if (msg.sender != transferAdapter) {\n            revert Unauthorized();\n        }\n    }\n\n    /// @dev Preemptively harvests all of the yield tokens that have been deposited into an account.\n    ///\n    /// @param owner The address which owns the account.\n    function _preemptivelyHarvestDeposited(address owner) internal {\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; ++i) {\n            _preemptivelyHarvest(depositedTokens.values[i]);\n        }\n    }\n\n    /// @dev Preemptively harvests `yieldToken`.\n    ///\n    /// @dev This will earmark yield tokens to be harvested at a future time when the current value of the token is\n    ///      greater than the expected value. The purpose of this function is to synchronize the balance of the yield\n    ///      token which is held by users versus tokens which will be seized by the protocol.\n    ///\n    /// @param yieldToken The address of the yield token to preemptively harvest.\n    function _preemptivelyHarvest(address yieldToken) internal {\n        uint256 activeBalance = _yieldTokens[yieldToken].activeBalance;\n        if (activeBalance == 0) {\n            return;\n        }\n\n        uint256 currentValue = convertYieldTokensToUnderlying(yieldToken, activeBalance);\n        uint256 expectedValue = _yieldTokens[yieldToken].expectedValue;\n        if (currentValue <= expectedValue) {\n            return;\n        }\n\n        uint256 harvestable = convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue);\n        if (harvestable == 0) {\n            return;\n        }\n        _yieldTokens[yieldToken].activeBalance -= harvestable;\n        _yieldTokens[yieldToken].harvestableBalance += harvestable;\n    }\n\n    /// @dev Checks if a yield token is enabled.\n    ///\n    /// @param yieldToken The address of the yield token.\n    function _checkYieldTokenEnabled(address yieldToken) internal view {\n        if (!_yieldTokens[yieldToken].enabled) {\n          revert TokenDisabled(yieldToken);\n        }\n    }\n\n    /// @dev Checks if an underlying token is enabled.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    function _checkUnderlyingTokenEnabled(address underlyingToken) internal view {\n        if (!_underlyingTokens[underlyingToken].enabled) {\n          revert TokenDisabled(underlyingToken);\n        }\n    }\n\n    /// @dev Checks if an address is a supported yield token.\n    ///\n    /// If the address is not a supported yield token, this function will revert using a {UnsupportedToken} error.\n    ///\n    /// @param yieldToken The address to check.\n    function _checkSupportedYieldToken(address yieldToken) internal view {\n        if (!_supportedYieldTokens.contains(yieldToken)) {\n            revert UnsupportedToken(yieldToken);\n        }\n    }\n\n    /// @dev Checks if an address is a supported underlying token.\n    ///\n    /// If the address is not a supported yield token, this function will revert using a {UnsupportedToken} error.\n    ///\n    /// @param underlyingToken The address to check.\n    function _checkSupportedUnderlyingToken(address underlyingToken) internal view {\n        if (!_supportedUnderlyingTokens.contains(underlyingToken)) {\n            revert UnsupportedToken(underlyingToken);\n        }\n    }\n\n    /// @dev Checks if `amount` of debt tokens can be minted.\n    ///\n    /// @dev `amount` must be less than the current minting limit or this call will revert with a\n    ///      {MintingLimitExceeded} error.\n    ///\n    /// @param amount The amount to check.\n    function _checkMintingLimit(uint256 amount) internal view {\n        uint256 limit = _mintingLimiter.get();\n        if (amount > limit) {\n            revert MintingLimitExceeded(amount, limit);\n        }\n    }\n\n    /// @dev Checks if the current loss of `yieldToken` has exceeded its maximum acceptable loss.\n    ///\n    /// @dev The loss that `yieldToken` has incurred must be less than its maximum accepted value or this call will\n    ///      revert with a {LossExceeded} error.\n    ///\n    /// @param yieldToken The address of the yield token.\n    function _checkLoss(address yieldToken) internal view {\n        uint256 loss = _loss(yieldToken);\n        uint256 maximumLoss = _yieldTokens[yieldToken].maximumLoss;\n        if (loss > maximumLoss) {\n            revert LossExceeded(yieldToken, loss, maximumLoss);\n        }\n    }\n\n    /// @dev Deposits `amount` yield tokens into the account of `recipient`.\n    ///\n    /// @dev Emits a {Deposit} event.\n    ///\n    /// @param yieldToken The address of the yield token to deposit.\n    /// @param amount     The amount of yield tokens to deposit.\n    /// @param recipient  The recipient of the yield tokens.\n    ///\n    /// @return The number of shares minted to `recipient`.\n    function _deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) internal returns (uint256) {\n        _checkArgument(amount > 0);\n\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        address underlyingToken = yieldTokenParams.underlyingToken;\n\n        // Check that the yield token and it's underlying token are enabled. Disabling the yield token and or the\n        // underlying token prevents the system from holding more of the disabled yield token or underlying token.\n        _checkYieldTokenEnabled(yieldToken);\n        _checkUnderlyingTokenEnabled(underlyingToken);\n\n        // Check to assure that the token has not experienced a sudden unexpected loss. This prevents users from being\n        // able to deposit funds and then have them siphoned if the price recovers.\n        _checkLoss(yieldToken);\n\n        // Buffers any harvestable yield tokens. This will properly synchronize the balance which is held by users\n        // and the balance which is held by the system to eventually be harvested.\n        _preemptivelyHarvest(yieldToken);\n\n        // Distribute unlocked credit to depositors.\n        _distributeUnlockedCreditDeposited(recipient);\n\n        // Update the recipient's account, proactively issue shares for the deposited tokens to the recipient, and then\n        // increase the value of the token that the system is expected to hold.\n        _poke(recipient, yieldToken);\n        uint256 shares = _issueSharesForAmount(recipient, yieldToken, amount);\n        _sync(yieldToken, amount, _uadd);\n\n        // Check that the maximum expected value has not been breached.\n        uint256 maximumExpectedValue = yieldTokenParams.maximumExpectedValue;\n        if (yieldTokenParams.expectedValue > maximumExpectedValue) {\n          revert ExpectedValueExceeded(yieldToken, amount, maximumExpectedValue);\n        }\n\n        emit Deposit(msg.sender, yieldToken, amount, recipient);\n\n        return shares;\n    }\n\n    /// @dev Withdraw `yieldToken` from the account owned by `owner` by burning shares and receiving yield tokens of\n    ///      equivalent value.\n    ///\n    /// @dev Emits a {Withdraw} event.\n    ///\n    /// @param yieldToken The address of the yield token to withdraw.\n    /// @param owner      The address of the account owner to withdraw from.\n    /// @param shares     The number of shares to burn.\n    /// @param recipient  The recipient of the withdrawn shares. This parameter is only used for logging.\n    ///\n    /// @return The amount of yield tokens that the burned shares were exchanged for.\n    function _withdraw(\n        address yieldToken,\n        address owner,\n        uint256 shares,\n        address recipient\n    ) internal returns (uint256) {\n        // Buffers any harvestable yield tokens that the owner of the account has deposited. This will properly\n        // synchronize the balance of all the tokens held by the owner so that the validation check properly\n        // computes the total value of the tokens held by the owner.\n        _preemptivelyHarvestDeposited(owner);\n\n        // Distribute unlocked credit for all of the tokens that the user has deposited into the system. This updates\n        // the accrued weights so that the debt is properly calculated before the account is validated.\n        _distributeUnlockedCreditDeposited(owner);\n\n        uint256 amountYieldTokens = convertSharesToYieldTokens(yieldToken, shares);\n\n        // Update the owner's account, burn shares from the owner's account, and then decrease the value of the token\n        // that the system is expected to hold.\n        _poke(owner);\n        _burnShares(owner, yieldToken, shares);\n        _sync(yieldToken, amountYieldTokens, _usub);\n\n        // Valid the owner's account to assure that the collateralization invariant is still held.\n        _validate(owner);\n\n        emit Withdraw(owner, yieldToken, shares, recipient);\n\n        return amountYieldTokens;\n    }\n\n    /// @dev Mints debt tokens to `recipient` using the account owned by `owner`.\n    ///\n    /// @dev Emits a {Mint} event.\n    ///\n    /// @param owner     The owner of the account to mint from.\n    /// @param amount    The amount to mint.\n    /// @param recipient The recipient of the minted debt tokens.\n    function _mint(address owner, uint256 amount, address recipient) internal {\n        // Check that the system will allow for the specified amount to be minted.\n        _checkMintingLimit(amount);\n\n        // Preemptively harvest all tokens that the user has deposited into the system. This allows the debt to be\n        // properly calculated before the account is validated.\n        _preemptivelyHarvestDeposited(owner);\n\n        // Distribute unlocked credit for all of the tokens that the user has deposited into the system. This updates\n        // the accrued weights so that the debt is properly calculated before the account is validated.\n        _distributeUnlockedCreditDeposited(owner);\n\n        // Update the owner's account, increase their debt by the amount of tokens to mint, and then finally validate\n        // their account to assure that the collateralization invariant is still held.\n        _poke(owner);\n        _updateDebt(owner, SafeCast.toInt256(amount));\n        _validate(owner);\n\n        // Decrease the global amount of mintable debt tokens.\n        _mintingLimiter.decrease(amount);\n\n        // Mint the debt tokens to the recipient.\n        TokenUtils.safeMint(debtToken, recipient, amount);\n\n        emit Mint(owner, amount, recipient);\n    }\n\n    /// @dev Synchronizes the active balance and expected value of `yieldToken`.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount to add or subtract from the debt.\n    /// @param operation  The mathematical operation to perform for the update. Either one of {_uadd} or {_usub}.\n    function _sync(\n        address yieldToken,\n        uint256 amount,\n        function(uint256, uint256) internal pure returns (uint256) operation\n    ) internal {\n        YieldTokenParams memory yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 amountUnderlyingTokens = convertYieldTokensToUnderlying(yieldToken, amount);\n        uint256 updatedActiveBalance   = operation(yieldTokenParams.activeBalance, amount);\n        uint256 updatedExpectedValue   = operation(yieldTokenParams.expectedValue, amountUnderlyingTokens);\n\n        _yieldTokens[yieldToken].activeBalance = updatedActiveBalance;\n        _yieldTokens[yieldToken].expectedValue = updatedExpectedValue;\n    }\n\n    /// @dev Gets the amount of loss that `yieldToken` has incurred measured in basis points. When the expected\n    ///      underlying value is less than the actual value, this will return zero.\n    ///\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return The loss in basis points.\n    function _loss(address yieldToken) internal view returns (uint256) {\n        YieldTokenParams memory yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 amountUnderlyingTokens = convertYieldTokensToUnderlying(yieldToken, yieldTokenParams.activeBalance);\n        uint256 expectedUnderlyingValue = yieldTokenParams.expectedValue;\n\n        return expectedUnderlyingValue > amountUnderlyingTokens\n            ? ((expectedUnderlyingValue - amountUnderlyingTokens) * BPS) / expectedUnderlyingValue\n            : 0;\n    }\n\n    /// @dev Distributes `amount` credit to all depositors of `yieldToken`.\n    ///\n    /// @param yieldToken The address of the yield token to distribute credit for.\n    /// @param amount     The amount of credit to distribute in debt tokens.\n    function _distributeCredit(address yieldToken, uint256 amount) internal {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 pendingCredit     = yieldTokenParams.pendingCredit;\n        uint256 distributedCredit = yieldTokenParams.distributedCredit;\n        uint256 unlockedCredit    = _calculateUnlockedCredit(yieldToken);\n        uint256 lockedCredit      = pendingCredit - (distributedCredit + unlockedCredit);\n\n        // Distribute any unlocked credit before overriding it.\n        if (unlockedCredit > 0) {\n            yieldTokenParams.accruedWeight += unlockedCredit * FIXED_POINT_SCALAR / yieldTokenParams.totalShares;\n        }\n\n        yieldTokenParams.pendingCredit         = amount + lockedCredit;\n        yieldTokenParams.distributedCredit     = 0;\n        yieldTokenParams.lastDistributionBlock = block.number;\n    }\n\n    /// @dev Distributes unlocked credit for all of the yield tokens that have been deposited into the account owned\n    ///      by `owner`.\n    ///\n    /// @param owner The address of the account owner.\n    function _distributeUnlockedCreditDeposited(address owner) internal {\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; ++i) {\n            _distributeUnlockedCredit(depositedTokens.values[i]);\n        }\n    }\n\n    /// @dev Distributes unlocked credit of `yieldToken` to all depositors.\n    ///\n    /// @param yieldToken The address of the yield token to distribute unlocked credit for.\n    function _distributeUnlockedCredit(address yieldToken) internal {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 unlockedCredit = _calculateUnlockedCredit(yieldToken);\n        if (unlockedCredit == 0) {\n            return;\n        }\n\n        yieldTokenParams.accruedWeight     += unlockedCredit * FIXED_POINT_SCALAR / yieldTokenParams.totalShares;\n        yieldTokenParams.distributedCredit += unlockedCredit;\n    }\n\n    /// @dev Wraps `amount` of an underlying token into its `yieldToken`.\n    ///\n    /// @param yieldToken       The address of the yield token to wrap the underlying tokens into.\n    /// @param amount           The amount of the underlying token to wrap.\n    /// @param minimumAmountOut The minimum amount of yield tokens that are expected to be received from the operation.\n    ///\n    /// @return The amount of yield tokens that resulted from the operation.\n    function _wrap(\n        address yieldToken,\n        uint256 amount,\n        uint256 minimumAmountOut\n    ) internal returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        ITokenAdapter adapter = ITokenAdapter(yieldTokenParams.adapter);\n        address underlyingToken = yieldTokenParams.underlyingToken;\n\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        uint256 wrappedShares = adapter.wrap(amount, address(this));\n        if (wrappedShares < minimumAmountOut) {\n            revert SlippageExceeded(wrappedShares, minimumAmountOut);\n        }\n\n        return wrappedShares;\n    }\n\n    /// @dev Unwraps `amount` of `yieldToken` into its underlying token.\n    ///\n    /// @param yieldToken       The address of the yield token to unwrap.\n    /// @param amount           The amount of the underlying token to wrap.\n    /// @param recipient        The recipient of the tokens after they are unwrapped.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be received from the\n    ///                         operation.\n    ///\n    /// @return The amount of underlying tokens that resulted from the operation.\n    function _unwrap(\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) internal returns (uint256) {\n        ITokenAdapter adapter = ITokenAdapter(_yieldTokens[yieldToken].adapter);\n        uint256 amountUnwrapped = adapter.unwrap(amount, recipient);\n        if (amountUnwrapped < minimumAmountOut) {\n            revert SlippageExceeded(amountUnwrapped, minimumAmountOut);\n        }\n        return amountUnwrapped;\n    }\n\n    /// @dev Synchronizes the state for all of the tokens deposited in the account owned by `owner`.\n    ///\n    /// @param owner The address of the account owner.\n    function _poke(address owner) internal {\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; ++i) {\n            _poke(owner, depositedTokens.values[i]);\n        }\n    }\n\n    /// @dev Synchronizes the state of `yieldToken` for the account owned by `owner`.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param yieldToken The address of the yield token to synchronize the state for.\n    function _poke(address owner, address yieldToken) internal {\n        Account storage account = _accounts[owner];\n\n        uint256 currentAccruedWeight = _yieldTokens[yieldToken].accruedWeight;\n        uint256 lastAccruedWeight    = account.lastAccruedWeights[yieldToken];\n\n        if (currentAccruedWeight == lastAccruedWeight) {\n            return;\n        }\n\n        uint256 balance          = account.balances[yieldToken];\n        uint256 unrealizedCredit = (currentAccruedWeight - lastAccruedWeight) * balance / FIXED_POINT_SCALAR;\n\n        account.debt                           -= SafeCast.toInt256(unrealizedCredit);\n        account.lastAccruedWeights[yieldToken]  = currentAccruedWeight;\n    }\n\n    /// @dev Increases the debt by `amount` for the account owned by `owner`.\n    ///\n    /// @param owner     The address of the account owner.\n    /// @param amount    The amount to increase the debt by.\n    function _updateDebt(address owner, int256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.debt += amount;\n    }\n\n    /// @dev Set the mint allowance for `spender` to `amount` for the account owned by `owner`.\n    ///\n    /// @param owner   The address of the account owner.\n    /// @param spender The address of the spender.\n    /// @param amount  The amount of debt tokens to set the mint allowance to.\n    function _approveMint(address owner, address spender, uint256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.mintAllowances[spender] = amount;\n        emit ApproveMint(owner, spender, amount);\n    }\n\n    /// @dev Decrease the mint allowance for `spender` by `amount` for the account owned by `owner`.\n    ///\n    /// @param owner   The address of the account owner.\n    /// @param spender The address of the spender.\n    /// @param amount  The amount of debt tokens to decrease the mint allowance by.\n    function _decreaseMintAllowance(address owner, address spender, uint256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.mintAllowances[spender] -= amount;\n    }\n\n    /// @dev Set the withdraw allowance of `yieldToken` for `spender` to `shares` for the account owned by `owner`.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param spender    The address of the spender.\n    /// @param yieldToken The address of the yield token to set the withdraw allowance for.\n    /// @param shares     The amount of shares to set the withdraw allowance to.\n    function _approveWithdraw(address owner, address spender, address yieldToken, uint256 shares) internal {\n        Account storage account = _accounts[owner];\n        account.withdrawAllowances[spender][yieldToken] = shares;\n        emit ApproveWithdraw(owner, spender, yieldToken, shares);\n    }\n\n    /// @dev Decrease the withdraw allowance of `yieldToken` for `spender` by `amount` for the account owned by `owner`.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param spender    The address of the spender.\n    /// @param yieldToken The address of the yield token to decrease the withdraw allowance for.\n    /// @param amount     The amount of shares to decrease the withdraw allowance by.\n    function _decreaseWithdrawAllowance(address owner, address spender, address yieldToken, uint256 amount) internal {\n        Account storage account = _accounts[owner];\n        account.withdrawAllowances[spender][yieldToken] -= amount;\n    }\n\n    /// @dev Checks that the account owned by `owner` is properly collateralized.\n    ///\n    /// @dev If the account is undercollateralized then this will revert with an {Undercollateralized} error.\n    ///\n    /// @param owner The address of the account owner.\n    function _validate(address owner) internal view {\n        int256 debt = _accounts[owner].debt;\n        if (debt <= 0) {\n            return;\n        }\n\n        uint256 collateralization = totalValue(owner) * FIXED_POINT_SCALAR / uint256(debt);\n\n        if (collateralization < minimumCollateralization) {\n            revert Undercollateralized();\n        }\n    }\n\n    /// @dev Gets the total value of the deposit collateral measured in debt tokens of the account owned by `owner`.\n    ///\n    /// @param owner The address of the account owner.\n    ///\n    /// @return The total value.\n    function totalValue(address owner) public view returns (uint256) {\n        uint256 totalValue = 0;\n\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; ++i) {\n            address yieldToken             = depositedTokens.values[i];\n            address underlyingToken        = _yieldTokens[yieldToken].underlyingToken;\n            uint256 shares                 = _accounts[owner].balances[yieldToken];\n            uint256 amountUnderlyingTokens = convertSharesToUnderlyingTokens(yieldToken, shares);\n\n            totalValue += normalizeUnderlyingTokensToDebt(underlyingToken, amountUnderlyingTokens);\n        }\n\n        return totalValue;\n    }\n\n    /// @dev Issues shares of `yieldToken` for `amount` of its underlying token to `recipient`.\n    ///\n    /// IMPORTANT: `amount` must never be 0.\n    ///\n    /// @param recipient  The address of the recipient.\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of the underlying token.\n    ///\n    /// @return The amount of shares issued to `recipient`.\n    function _issueSharesForAmount(\n        address recipient,\n        address yieldToken,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 shares = convertYieldTokensToShares(yieldToken, amount);\n\n        if (_accounts[recipient].balances[yieldToken] == 0) {\n          _accounts[recipient].depositedTokens.add(yieldToken);\n        }\n\n        _accounts[recipient].balances[yieldToken] += shares;\n        _yieldTokens[yieldToken].totalShares += shares;\n\n        return shares;\n    }\n\n    /// @dev Burns `share` shares of `yieldToken` from the account owned by `owner`.\n    ///\n    /// @param owner      The address of the owner.\n    /// @param yieldToken The address of the yield token.\n    /// @param shares     The amount of shares to burn.\n    function _burnShares(address owner, address yieldToken, uint256 shares) internal {\n        Account storage account = _accounts[owner];\n\n        account.balances[yieldToken] -= shares;\n        _yieldTokens[yieldToken].totalShares -= shares;\n\n        if (account.balances[yieldToken] == 0) {\n            account.depositedTokens.remove(yieldToken);\n        }\n    }\n\n    /// @dev Gets the amount of debt that the account owned by `owner` will have after an update occurs.\n    ///\n    /// @param owner The address of the account owner.\n    ///\n    /// @return The amount of debt that the account owned by `owner` will have after an update.\n    function _calculateUnrealizedDebt(address owner) internal view returns (int256) {\n        int256 debt = _accounts[owner].debt;\n\n        Sets.AddressSet storage depositedTokens = _accounts[owner].depositedTokens;\n        for (uint256 i = 0; i < depositedTokens.values.length; ++i) {\n            address yieldToken = depositedTokens.values[i];\n\n            uint256 currentAccruedWeight = _yieldTokens[yieldToken].accruedWeight;\n            uint256 lastAccruedWeight    = _accounts[owner].lastAccruedWeights[yieldToken];\n            uint256 unlockedCredit       = _calculateUnlockedCredit(yieldToken);\n\n            currentAccruedWeight += unlockedCredit > 0\n                ? unlockedCredit * FIXED_POINT_SCALAR / _yieldTokens[yieldToken].totalShares\n                : 0;\n\n            if (currentAccruedWeight == lastAccruedWeight) {\n                continue;\n            }\n\n            uint256 balance = _accounts[owner].balances[yieldToken];\n            uint256 unrealizedCredit = ((currentAccruedWeight - lastAccruedWeight) * balance) / FIXED_POINT_SCALAR;\n\n            debt -= SafeCast.toInt256(unrealizedCredit);\n        }\n\n        return debt;\n    }\n\n    /// @dev Gets the virtual active balance of `yieldToken`.\n    ///\n    /// @dev The virtual active balance is the active balance minus any harvestable tokens which have yet to be realized.\n    ///\n    /// @param yieldToken The address of the yield token to get the virtual active balance of.\n    ///\n    /// @return The virtual active balance.\n    function _calculateUnrealizedActiveBalance(address yieldToken) internal view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 activeBalance = yieldTokenParams.activeBalance;\n        if (activeBalance == 0) {\n          return activeBalance;\n        }\n\n        uint256 currentValue = convertYieldTokensToUnderlying(yieldToken, activeBalance);\n        uint256 expectedValue = yieldTokenParams.expectedValue;\n        if (currentValue <= expectedValue) {\n          return activeBalance;\n        }\n\n        uint256 harvestable = convertUnderlyingTokensToYield(yieldToken, currentValue - expectedValue);\n        if (harvestable == 0) {\n          return activeBalance;\n        }\n\n        return activeBalance - harvestable;\n    }\n\n    /// @dev Calculates the amount of unlocked credit for `yieldToken` that is available for distribution.\n    ///\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return The amount of unlocked credit available.\n    function _calculateUnlockedCredit(address yieldToken) internal view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n\n        uint256 pendingCredit = yieldTokenParams.pendingCredit;\n        if (pendingCredit == 0) {\n            return 0;\n        }\n\n        uint256 creditUnlockRate      = yieldTokenParams.creditUnlockRate;\n        uint256 distributedCredit     = yieldTokenParams.distributedCredit;\n        uint256 lastDistributionBlock = yieldTokenParams.lastDistributionBlock;\n\n        uint256 percentUnlocked = (block.number - lastDistributionBlock) * creditUnlockRate;\n\n        return percentUnlocked < FIXED_POINT_SCALAR\n            ? (pendingCredit * percentUnlocked / FIXED_POINT_SCALAR) - distributedCredit\n            : pendingCredit - distributedCredit;\n    }\n\n    /// @dev Gets the amount of shares that `amount` of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of yield tokens.\n    ///\n    /// @return The number of shares.\n    function convertYieldTokensToShares(address yieldToken, uint256 amount) public view returns (uint256) {\n        if (_yieldTokens[yieldToken].totalShares == 0) {\n            return amount;\n        }\n        return amount * _yieldTokens[yieldToken].totalShares / _calculateUnrealizedActiveBalance(yieldToken);\n    }\n\n    /// @dev Gets the amount of yield tokens that `shares` shares of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param shares     The amount of shares.\n    ///\n    /// @return The amount of yield tokens.\n    function convertSharesToYieldTokens(address yieldToken, uint256 shares) public view returns (uint256) {\n        uint256 totalShares = _yieldTokens[yieldToken].totalShares;\n        if (totalShares == 0) {\n          return shares;\n        }\n        return (shares * _calculateUnrealizedActiveBalance(yieldToken)) / totalShares;\n    }\n\n    /// @dev Gets the amount of underlying tokens that `shares` shares of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param shares     The amount of shares.\n    ///\n    /// @return The amount of underlying tokens.\n    function convertSharesToUnderlyingTokens(address yieldToken, uint256 shares) public view returns (uint256) {\n        uint256 amountYieldTokens = convertSharesToYieldTokens(yieldToken, shares);\n        return convertYieldTokensToUnderlying(yieldToken, amountYieldTokens);\n    }\n\n    /// @dev Gets the amount of an underlying token that `amount` of `yieldToken` is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of yield tokens.\n    ///\n    /// @return The amount of underlying tokens.\n    function convertYieldTokensToUnderlying(address yieldToken, uint256 amount) public view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        ITokenAdapter adapter = ITokenAdapter(yieldTokenParams.adapter);\n        return amount * adapter.price() / 10**yieldTokenParams.decimals;\n    }\n\n    /// @dev Gets the amount of `yieldToken` that `amount` of its underlying token is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of underlying tokens.\n    ///\n    /// @return The amount of yield tokens.\n    function convertUnderlyingTokensToYield(address yieldToken, uint256 amount) public view returns (uint256) {\n        YieldTokenParams storage yieldTokenParams = _yieldTokens[yieldToken];\n        ITokenAdapter adapter = ITokenAdapter(yieldTokenParams.adapter);\n        return amount * 10**yieldTokenParams.decimals / adapter.price();\n    }\n\n    /// @dev Gets the amount of shares of `yieldToken` that `amount` of its underlying token is exchangeable for.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of underlying tokens.\n    ///\n    /// @return The amount of shares.\n    function convertUnderlyingTokensToShares(address yieldToken, uint256 amount) public view returns (uint256) {\n        uint256 amountYieldTokens = convertUnderlyingTokensToYield(yieldToken, amount);\n        return convertYieldTokensToShares(yieldToken, amountYieldTokens);\n    }\n\n    /// @dev Normalize `amount` of `underlyingToken` to a value which is comparable to units of the debt token.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of the debt token.\n    ///\n    /// @return The normalized amount.\n    function normalizeUnderlyingTokensToDebt(address underlyingToken, uint256 amount) public view returns (uint256) {\n        return amount * _underlyingTokens[underlyingToken].conversionFactor;\n    }\n\n    /// @dev Normalize `amount` of the debt token to a value which is comparable to units of `underlyingToken`.\n    ///\n    /// @dev This operation will result in truncation of some of the least significant digits of `amount`. This\n    ///      truncation amount will be the least significant N digits where N is the difference in decimals between\n    ///      the debt token and the underlying token.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of the debt token.\n    ///\n    /// @return The normalized amount.\n    function normalizeDebtTokensToUnderlying(address underlyingToken, uint256 amount) public view returns (uint256) {\n        return amount / _underlyingTokens[underlyingToken].conversionFactor;\n    }\n\n    /// @dev Checks the whitelist for msg.sender.\n    ///\n    /// Reverts if msg.sender is not in the whitelist.\n    function _onlyWhitelisted() internal view {\n        // Check if the message sender is an EOA. In the future, this potentially may break. It is important that functions\n        // which rely on the whitelist not be explicitly vulnerable in the situation where this no longer holds true.\n        if (tx.origin == msg.sender) {\n          return;\n        }\n\n        // Only check the whitelist for calls from contracts.\n        if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n          revert Unauthorized();\n        }\n    }\n\n    /// @dev Checks an expression and reverts with an {IllegalArgument} error if the expression is {false}.\n    ///\n    /// @param expression The expression to check.\n    function _checkArgument(bool expression) internal pure {\n        if (!expression) {\n            revert IllegalArgument();\n        }\n    }\n\n    /// @dev Checks an expression and reverts with an {IllegalState} error if the expression is {false}.\n    ///\n    /// @param expression The expression to check.\n    function _checkState(bool expression) internal pure {\n        if (!expression) {\n            revert IllegalState();\n        }\n    }\n\n    /// @dev Adds two unsigned 256 bit integers together and returns the result.\n    ///\n    /// @dev This operation is checked and will fail if the result overflows.\n    ///\n    /// @param x The first operand.\n    /// @param y The second operand.\n    ///\n    /// @return z The result.\n    function _uadd(uint256 x, uint256 y) internal pure returns (uint256 z) { z = x + y; }\n\n    /// @dev Subtracts two unsigned 256 bit integers together and returns the result.\n    ///\n    /// @dev This operation is checked and will fail if the result overflows.\n    ///\n    /// @param x The first operand.\n    /// @param y The second operand.\n    ///\n    /// @return z the result.\n    function _usub(uint256 x, uint256 y) internal pure returns (uint256 z) { z = x - y; }\n}\n"
    },
    "submodules/v2-foundry/src/AlchemicTokenV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {AccessControl} from \"../lib/openzeppelin-contracts/contracts/access/AccessControl.sol\";\nimport {ERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/Errors.sol\";\n\nimport {IERC3156FlashLender} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\";\nimport {IERC3156FlashBorrower} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\";\n\n/// @title  AlchemicTokenV2\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for version two alchemic tokens.\ncontract AlchemicTokenV2 is AccessControl, ReentrancyGuard, ERC20, IERC3156FlashLender {\n\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\n  /// @notice The expected return value from a flash mint receiver\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n  /// @notice The maximum number of basis points needed to represent 100%.\n  uint256 public constant BPS = 10_000;\n\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping(address => bool) public whitelisted;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping(address => bool) public paused;\n\n  /// @notice Fee for flash minting\n  uint256 public flashMintFee;\n\n  /// @notice Max flash mint amount\n  uint256 public maxFlashLoanAmount;\n\n  /// @notice An event which is emitted when a minter is paused from minting.\n  ///\n  /// @param minter The address of the minter which was paused.\n  /// @param state  A flag indicating if the alchemist is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice An event which is emitted when the flash mint fee is updated.\n  ///\n  /// @param fee The new flash mint fee.\n  event SetFlashMintFee(uint256 fee);\n\n  /// @notice An event which is emitted when the max flash loan is updated.\n  ///\n  /// @param maxFlashLoan The new max flash loan.\n  event SetMaxFlashLoan(uint256 maxFlashLoan);\n\n  constructor(string memory _name, string memory _symbol, uint256 _flashFee) ERC20(_name, _symbol) {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    flashMintFee = _flashFee;\n    emit SetFlashMintFee(_flashFee);\n  }\n\n  /// @dev A modifier which checks that the caller has the admin role.\n  modifier onlyAdmin() {\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks that the caller has the sentinel role.\n  modifier onlySentinel() {\n    if(!hasRole(SENTINEL_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    if(!whitelisted[msg.sender]) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @notice Sets the flash minting fee.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param newFee The new flash mint fee.\n  function setFlashFee(uint256 newFee) external onlyAdmin {\n    if (newFee >= BPS) {\n      revert IllegalArgument();\n    }\n    flashMintFee = newFee;\n    emit SetFlashMintFee(flashMintFee);\n  }\n\n  /// @notice Mints tokens to `a recipient.`\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    if (paused[msg.sender]) {\n      revert IllegalState();\n    }\n\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whitelisted[minter] = state;\n  }\n\n  /// @notice Sets `sentinel` as a sentinel.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param sentinel The address to set as a sentinel.\n  function setSentinel(address sentinel) external onlyAdmin {\n    _setupRole(SENTINEL_ROLE, sentinel);\n  }\n\n  /// @notice Pauses `minter` from minting tokens.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to set as paused or unpaused.\n  /// @param state  A flag indicating if the minter should be paused or unpaused.\n  function pauseMinter(address minter, bool state) external onlySentinel {\n    paused[minter] = state;\n    emit Paused(minter, state);\n  }\n\n  /// @notice Burns `amount` tokens from `msg.sender`.\n  ///\n  /// @param amount The amount of tokens to be burned.\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n\n  /// @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n  ///\n  /// @param account The address the burn tokens from.\n  /// @param amount  The amount of tokens to burn.\n  function burnFrom(address account, uint256 amount) external {\n    uint256 newAllowance = allowance(account, msg.sender) - amount;\n\n    _approve(account, msg.sender, newAllowance);\n    _burn(account, amount);\n  }\n\n  /// @notice Adjusts the maximum flashloan amount.\n  ///\n  /// @param _maxFlashLoanAmount The maximum flashloan amount.\n  function setMaxFlashLoan(uint256 _maxFlashLoanAmount) external onlyAdmin {\n    maxFlashLoanAmount = _maxFlashLoanAmount;\n    emit SetMaxFlashLoan(_maxFlashLoanAmount);\n  }\n\n  /// @notice Gets the maximum amount to be flash loaned of a token.\n  ///\n  /// @param token The address of the token.\n  ///\n  /// @return The maximum amount of `token` that can be flashed loaned.\n  function maxFlashLoan(address token) public view override returns (uint256) {\n    if (token != address(this)) {\n      return 0;\n    }\n    return maxFlashLoanAmount;\n  }\n\n  /// @notice Gets the flash loan fee of `amount` of `token`.\n  ///\n  /// @param token  The address of the token.`\n  /// @param amount The amount of `token` to flash mint.\n  ///\n  /// @return The flash loan fee.\n  function flashFee(address token, uint256 amount) public view override returns (uint256) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n    return amount * flashMintFee / BPS;\n  }\n\n  /// @notice Performs a flash mint (called flash loan to confirm with ERC3156 standard).\n  ///\n  /// @param receiver The address which will receive the flash minted tokens.\n  /// @param token    The address of the token to flash mint.\n  /// @param amount   How much to flash mint.\n  /// @param data     ABI encoded data to pass to the receiver.\n  ///\n  /// @return If the flash loan was successful.\n  function flashLoan(\n    IERC3156FlashBorrower receiver,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external override nonReentrant returns (bool) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n\n    if (amount > maxFlashLoan(token)) {\n      revert IllegalArgument();\n    }\n\n    uint256 fee = flashFee(token, amount);\n\n    _mint(address(receiver), amount);\n\n    if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != CALLBACK_SUCCESS) {\n      revert IllegalState();\n    }\n\n    _burn(address(receiver), amount + fee); // Will throw error if not enough to burn\n\n    return true;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/TransmuterV2.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.13;\n\nimport {Initializable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\";\nimport {AccessControlUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\";\n\n\nimport \"./base/Errors.sol\";\n\nimport \"./interfaces/IWhitelist.sol\";\n\nimport \"./interfaces/transmuter/ITransmuterV2.sol\";\nimport \"./interfaces/transmuter/ITransmuterBuffer.sol\";\n\nimport \"./libraries/FixedPointMath.sol\";\nimport \"./libraries/LiquidityMath.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/Tick.sol\";\nimport \"./libraries/TokenUtils.sol\";\n\n/// @title TransmuterV2\n///\n/// @notice A contract which facilitates the exchange of synthetic assets for their underlying\n//          asset. This contract guarantees that synthetic assets are exchanged exactly 1:1\n//          for the underlying asset.\ncontract TransmuterV2 is ITransmuterV2, Initializable, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\n  using FixedPointMath for FixedPointMath.Number;\n  using Tick for Tick.Cache;\n\n  struct Account {\n    // The total number of unexchanged tokens that an account has deposited into the system\n    uint256 unexchangedBalance;\n    // The total number of exchanged tokens that an account has had credited\n    uint256 exchangedBalance;\n    // The tick that the account has had their deposit associated in\n    uint256 occupiedTick;\n  }\n\n  struct UpdateAccountParams {\n    // The owner address whose account will be modified\n    address owner;\n    // The amount to change the account's unexchanged balance by\n    int256 unexchangedDelta;\n    // The amount to change the account's exchanged balance by\n    int256 exchangedDelta;\n  }\n\n  struct ExchangeCache {\n    // The total number of unexchanged tokens that exist at the start of the exchange call\n    uint256 totalUnexchanged;\n    // The tick which has been satisfied up to at the start of the exchange call\n    uint256 satisfiedTick;\n    // The head of the active ticks queue at the start of the exchange call\n    uint256 ticksHead;\n  }\n\n  struct ExchangeState {\n    // The position in the buffer of current tick which is being examined\n    uint256 examineTick;\n    // The total number of unexchanged tokens that currently exist in the system for the current distribution step\n    uint256 totalUnexchanged;\n    // The tick which has been satisfied up to, inclusive\n    uint256 satisfiedTick;\n    // The amount of tokens to distribute for the current step\n    uint256 distributeAmount;\n    // The accumulated weight to write at the new tick after the exchange is completed\n    FixedPointMath.Number accumulatedWeight;\n    // Reserved for the maximum weight of the current distribution step\n    FixedPointMath.Number maximumWeight;\n    // Reserved for the dusted weight of the current distribution step\n    FixedPointMath.Number dustedWeight;\n  }\n\n  struct UpdateAccountCache {\n    // The total number of unexchanged tokens that the account held at the start of the update call\n    uint256 unexchangedBalance;\n    // The total number of exchanged tokens that the account held at the start of the update call\n    uint256 exchangedBalance;\n    // The tick that the account's deposit occupies at the start of the update call\n    uint256 occupiedTick;\n    // The total number of unexchanged tokens that exist at the start of the update call\n    uint256 totalUnexchanged;\n    // The current tick that is being written to\n    uint256 currentTick;\n  }\n\n  struct UpdateAccountState {\n    // The updated unexchanged balance of the account being updated\n    uint256 unexchangedBalance;\n    // The updated exchanged balance of the account being updated\n    uint256 exchangedBalance;\n    // The updated total unexchanged balance\n    uint256 totalUnexchanged;\n  }\n\n  address public constant ZERO_ADDRESS = address(0);\n\n  /// @dev The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n\n  /// @dev The identifier of the sentinel role\n  bytes32 public constant SENTINEL = keccak256(\"SENTINEL\");\n\n  /// @inheritdoc ITransmuterV2\n  string public constant override version = \"2.2.1\";\n\n  /// @dev the synthetic token to be transmuted\n  address public syntheticToken;\n\n  /// @dev the underlying token to be received\n  address public override underlyingToken;\n\n  /// @dev The total amount of unexchanged tokens which are held by all accounts.\n  uint256 public totalUnexchanged;\n\n  /// @dev The total amount of tokens which are in the auxiliary buffer.\n  uint256 public totalBuffered;\n\n  /// @dev A mapping specifying all of the accounts.\n  mapping(address => Account) private accounts;\n\n  // @dev The tick buffer which stores all of the tick information along with the tick that is\n  //      currently being written to. The \"current\" tick is the tick at the buffer write position.\n  Tick.Cache private ticks;\n\n  // The tick which has been satisfied up to, inclusive.\n  uint256 private satisfiedTick;\n\n  /// @dev contract pause state\n  bool public isPaused;\n\n  /// @dev the source of the exchanged collateral\n  address public buffer;\n\n  /// @dev The address of the external whitelist contract.\n  address public override whitelist;\n\n  /// @dev The amount of decimal places needed to normalize collateral to debtToken\n  uint256 public override conversionFactor;\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() initializer {}\n\n  function initialize(\n    address _syntheticToken,\n    address _underlyingToken,\n    address _buffer,\n    address _whitelist\n  ) external initializer {\n    _setupRole(ADMIN, msg.sender);\n    _setRoleAdmin(ADMIN, ADMIN);\n    _setRoleAdmin(SENTINEL, ADMIN);\n\n    syntheticToken = _syntheticToken;\n    underlyingToken = _underlyingToken;\n    uint8 debtTokenDecimals = TokenUtils.expectDecimals(syntheticToken);\n    uint8 underlyingTokenDecimals = TokenUtils.expectDecimals(underlyingToken);\n    conversionFactor = 10**(debtTokenDecimals - underlyingTokenDecimals);\n    buffer = _buffer;\n    // Push a blank tick to function as a sentinel value in the active ticks queue.\n    ticks.next();\n\n    isPaused = false;\n    whitelist = _whitelist;\n  }\n\n  /// @dev A modifier which checks if caller is an alchemist.\n  modifier onlyBuffer() {\n    if (msg.sender != buffer) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if caller is a sentinel or admin.\n  modifier onlySentinelOrAdmin() {\n    if (!hasRole(SENTINEL, msg.sender) && !hasRole(ADMIN, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks whether the transmuter is unpaused.\n  modifier notPaused() {\n    if (isPaused) {\n      revert IllegalState();\n    }\n    _;\n  }\n\n  function _onlyAdmin() internal view {\n    if (!hasRole(ADMIN, msg.sender)) {\n      revert Unauthorized();\n    }\n  }\n\n  function setCollateralSource(address _newCollateralSource) external {\n    _onlyAdmin();\n    buffer = _newCollateralSource;\n    emit SetNewCollateralSource(_newCollateralSource);\n  }\n\n  function setPause(bool pauseState) external onlySentinelOrAdmin {\n    isPaused = pauseState;\n    emit Paused(isPaused);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function deposit(uint256 amount, address owner) external override nonReentrant {\n    _onlyWhitelisted();\n    _updateAccount(\n      UpdateAccountParams({\n        owner: owner,\n        unexchangedDelta: SafeCast.toInt256(amount),\n        exchangedDelta: 0\n      })\n    );\n    TokenUtils.safeTransferFrom(syntheticToken, msg.sender, address(this), amount);\n    emit Deposit(msg.sender, owner, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function withdraw(uint256 amount, address recipient) external override nonReentrant {\n    _onlyWhitelisted();\n    _updateAccount(\n      UpdateAccountParams({ \n        owner: msg.sender,\n        unexchangedDelta: -SafeCast.toInt256(amount),\n        exchangedDelta: 0\n      })\n    );\n    TokenUtils.safeTransfer(syntheticToken, recipient, amount);\n    emit Withdraw(msg.sender, recipient, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function claim(uint256 amount, address recipient) external override nonReentrant {\n    _onlyWhitelisted();\n    _updateAccount(\n      UpdateAccountParams({\n        owner: msg.sender,\n        unexchangedDelta: 0,\n        exchangedDelta: -SafeCast.toInt256(_normalizeUnderlyingTokensToDebt(amount))\n      })\n    );\n    TokenUtils.safeBurn(syntheticToken, _normalizeUnderlyingTokensToDebt(amount));\n    ITransmuterBuffer(buffer).withdraw(underlyingToken, amount, recipient);\n    emit Claim(msg.sender, recipient, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function exchange(uint256 amount) external override nonReentrant onlyBuffer notPaused {\n    uint256 normaizedAmount = _normalizeUnderlyingTokensToDebt(amount);\n\n    if (totalUnexchanged == 0) {\n      totalBuffered += normaizedAmount;\n      emit Exchange(msg.sender, amount);\n      return;\n    }\n\n    // Push a storage reference to the current tick.\n    Tick.Info storage current = ticks.current();\n\n    ExchangeCache memory cache = ExchangeCache({\n      totalUnexchanged: totalUnexchanged,\n      satisfiedTick: satisfiedTick,\n      ticksHead: ticks.head\n    });\n\n    ExchangeState memory state = ExchangeState({\n      examineTick: cache.ticksHead,\n      totalUnexchanged: cache.totalUnexchanged,\n      satisfiedTick: cache.satisfiedTick,\n      distributeAmount: normaizedAmount,\n      accumulatedWeight: current.accumulatedWeight,\n      maximumWeight: FixedPointMath.encode(0),\n      dustedWeight: FixedPointMath.encode(0)\n    });\n\n    // Distribute the buffered tokens as part of the exchange.\n    state.distributeAmount += totalBuffered;\n    totalBuffered = 0;\n\n    // Push a storage reference to the next tick to write to.\n    Tick.Info storage next = ticks.next();\n\n    // Only iterate through the active ticks queue when it is not empty.\n    while (state.examineTick != 0) {\n      // Check if there is anything left to distribute.\n      if (state.distributeAmount == 0) {\n        break;\n      }\n\n      Tick.Info storage examineTickData = ticks.get(state.examineTick);\n\n      // Add the weight for the distribution step to the accumulated weight.\n      state.accumulatedWeight = state.accumulatedWeight.add(\n        FixedPointMath.rational(state.distributeAmount, state.totalUnexchanged)\n      );\n\n      // Clear the distribute amount.\n      state.distributeAmount = 0;\n\n      // Calculate the current maximum weight in the system.\n      state.maximumWeight = state.accumulatedWeight.sub(examineTickData.accumulatedWeight);\n\n      // Check if there exists at least one account which is completely satisfied..\n      if (state.maximumWeight.n < FixedPointMath.ONE) {\n        break;\n      }\n\n      // Calculate how much weight of the distributed weight is dust.\n      state.dustedWeight = FixedPointMath.Number(state.maximumWeight.n - FixedPointMath.ONE);\n\n      // Calculate how many tokens to distribute in the next step. These are tokens from any tokens which\n      // were over allocated to accounts occupying the tick with the maximum weight.\n      state.distributeAmount = LiquidityMath.calculateProduct(examineTickData.totalBalance, state.dustedWeight);\n\n      // Remove the tokens which were completely exchanged from the total unexchanged balance.\n      state.totalUnexchanged -= examineTickData.totalBalance;\n\n      // Write that all ticks up to and including the examined tick have been satisfied.\n      state.satisfiedTick = state.examineTick;\n\n      // Visit the next active tick. This is equivalent to popping the head of the active ticks queue.\n      state.examineTick = examineTickData.next;\n    }\n\n    // Write the accumulated weight to the next tick.\n    next.accumulatedWeight = state.accumulatedWeight;\n\n    if (cache.totalUnexchanged != state.totalUnexchanged) {\n      totalUnexchanged = state.totalUnexchanged;\n    }\n\n    if (cache.satisfiedTick != state.satisfiedTick) {\n      satisfiedTick = state.satisfiedTick;\n    }\n\n    if (cache.ticksHead != state.examineTick) {\n      ticks.head = state.examineTick;\n    }\n\n    if (state.distributeAmount > 0) {\n      totalBuffered += state.distributeAmount;\n    }\n\n    emit Exchange(msg.sender, amount);\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function getUnexchangedBalance(address owner) external view override returns (uint256) {\n    Account storage account = accounts[owner];\n\n    if (account.occupiedTick <= satisfiedTick) {\n      return 0;\n    }\n\n    uint256 unexchangedBalance = account.unexchangedBalance;\n\n    uint256 exchanged = LiquidityMath.calculateProduct(\n      unexchangedBalance,\n      ticks.getWeight(account.occupiedTick, ticks.position)\n    );\n\n    unexchangedBalance -= exchanged;\n\n    return unexchangedBalance;\n  }\n\n  /// @inheritdoc ITransmuterV2\n  function getExchangedBalance(address owner) external view override returns (uint256 exchangedBalance) {\n    return _getExchangedBalance(owner);\n  }\n\n  function getClaimableBalance(address owner) external view override returns (uint256 claimableBalance) {\n    return _normalizeDebtTokensToUnderlying(_getExchangedBalance(owner));\n  }\n\n  /// @dev Updates an account.\n  ///\n  /// @param params The call parameters.\n  function _updateAccount(UpdateAccountParams memory params) internal {\n    Account storage account = accounts[params.owner];\n\n    UpdateAccountCache memory cache = UpdateAccountCache({\n      unexchangedBalance: account.unexchangedBalance,\n      exchangedBalance: account.exchangedBalance,\n      occupiedTick: account.occupiedTick,\n      totalUnexchanged: totalUnexchanged,\n      currentTick: ticks.position\n    });\n\n    UpdateAccountState memory state = UpdateAccountState({\n      unexchangedBalance: cache.unexchangedBalance,\n      exchangedBalance: cache.exchangedBalance,\n      totalUnexchanged: cache.totalUnexchanged\n    });\n\n    // Updating an account is broken down into five steps:\n    // 1). Synchronize the account if it previously occupied a satisfied tick\n    // 2). Update the account balances to account for exchanged tokens, if any\n    // 3). Apply the deltas to the account balances\n    // 4). Update the previously occupied and or current tick's liquidity\n    // 5). Commit changes to the account and global state when needed\n\n    // Step one:\n    // ---------\n    // Check if the tick that the account was occupying previously was satisfied. If it was, we acknowledge\n    // that all of the tokens were exchanged.\n    if (state.unexchangedBalance > 0 && satisfiedTick >= cache.occupiedTick) {\n      state.unexchangedBalance = 0;\n      state.exchangedBalance += cache.unexchangedBalance;\n    }\n\n    // Step Two:\n    // ---------\n    // Calculate how many tokens were exchanged since the last update.\n    if (state.unexchangedBalance > 0) {\n      uint256 exchanged = LiquidityMath.calculateProduct(\n        state.unexchangedBalance,\n        ticks.getWeight(cache.occupiedTick, cache.currentTick)\n      );\n\n      state.totalUnexchanged -= exchanged;\n      state.unexchangedBalance -= exchanged;\n      state.exchangedBalance += exchanged;\n    }\n\n    // Step Three:\n    // -----------\n    // Apply the unexchanged and exchanged deltas to the state.\n    state.totalUnexchanged = LiquidityMath.addDelta(state.totalUnexchanged, params.unexchangedDelta);\n    state.unexchangedBalance = LiquidityMath.addDelta(state.unexchangedBalance, params.unexchangedDelta);\n    state.exchangedBalance = LiquidityMath.addDelta(state.exchangedBalance, params.exchangedDelta);\n\n    // Step Four:\n    // ----------\n    // The following is a truth table relating various values which in combinations specify which logic branches\n    // need to be executed in order to update liquidity in the previously occupied and or current tick.\n    //\n    // Some states are not obtainable and are just discarded by setting all the branches to false.\n    //\n    // | P | C | M | Modify Liquidity | Add Liquidity | Subtract Liquidity |\n    // |---|---|---|------------------|---------------|--------------------|\n    // | F | F | F | F                | F             | F                  |\n    // | F | F | T | F                | F             | F                  |\n    // | F | T | F | F                | T             | F                  |\n    // | F | T | T | F                | T             | F                  |\n    // | T | F | F | F                | F             | T                  |\n    // | T | F | T | F                | F             | T                  |\n    // | T | T | F | T                | F             | F                  |\n    // | T | T | T | F                | T             | T                  |\n    //\n    // | Branch             | Reduction |\n    // |--------------------|-----------|\n    // | Modify Liquidity   | PCM'      |\n    // | Add Liquidity      | P'C + CM  |\n    // | Subtract Liquidity | PC' + PM  |\n\n    bool previouslyActive = cache.unexchangedBalance > 0;\n    bool currentlyActive = state.unexchangedBalance > 0;\n    bool migrate = cache.occupiedTick != cache.currentTick;\n\n    bool modifyLiquidity = previouslyActive && currentlyActive && !migrate;\n\n    if (modifyLiquidity) {\n      Tick.Info storage tick = ticks.get(cache.occupiedTick);\n\n      // Consolidate writes to save gas.\n      uint256 totalBalance = tick.totalBalance;\n      totalBalance -= cache.unexchangedBalance;\n      totalBalance += state.unexchangedBalance;\n      tick.totalBalance = totalBalance;\n    } else {\n      bool addLiquidity = (!previouslyActive && currentlyActive) || (currentlyActive && migrate);\n      bool subLiquidity = (previouslyActive && !currentlyActive) || (previouslyActive && migrate);\n\n      if (addLiquidity) {\n        Tick.Info storage tick = ticks.get(cache.currentTick);\n\n        if (tick.totalBalance == 0) {\n          ticks.addLast(cache.currentTick);\n        }\n\n        tick.totalBalance += state.unexchangedBalance;\n      }\n\n      if (subLiquidity) {\n        Tick.Info storage tick = ticks.get(cache.occupiedTick);\n        tick.totalBalance -= cache.unexchangedBalance;\n\n        if (tick.totalBalance == 0) {\n          ticks.remove(cache.occupiedTick);\n        }\n      }\n    }\n\n    // Step Five:\n    // ----------\n    // Commit the changes to the account.\n    if (cache.unexchangedBalance != state.unexchangedBalance) {\n      account.unexchangedBalance = state.unexchangedBalance;\n    }\n\n    if (cache.exchangedBalance != state.exchangedBalance) {\n      account.exchangedBalance = state.exchangedBalance;\n    }\n\n    if (cache.totalUnexchanged != state.totalUnexchanged) {\n      totalUnexchanged = state.totalUnexchanged;\n    }\n\n    if (cache.occupiedTick != cache.currentTick) {\n      account.occupiedTick = cache.currentTick;\n    }\n  }\n\n  /// @dev Checks the whitelist for msg.sender.\n  ///\n  /// @notice Reverts if msg.sender is not in the whitelist.\n  function _onlyWhitelisted() internal view {\n    // Check if the message sender is an EOA. In the future, this potentially may break. It is important that\n    // functions which rely on the whitelist not be explicitly vulnerable in the situation where this no longer\n    // holds true.\n    if (tx.origin != msg.sender) {\n      // Only check the whitelist for calls from contracts.\n      if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n        revert Unauthorized();\n      }\n    }\n  }\n\n  /// @dev Normalize `amount` of `underlyingToken` to a value which is comparable to units of the debt token.\n  ///\n  /// @param amount          The amount of the debt token.\n  ///\n  /// @return The normalized amount.\n  function _normalizeUnderlyingTokensToDebt(uint256 amount) internal view returns (uint256) {\n    return amount * conversionFactor;\n  }\n\n  /// @dev Normalize `amount` of the debt token to a value which is comparable to units of `underlyingToken`.\n  ///\n  /// @dev This operation will result in truncation of some of the least significant digits of `amount`. This\n  ///      truncation amount will be the least significant N digits where N is the difference in decimals between\n  ///      the debt token and the underlying token.\n  ///\n  /// @param amount          The amount of the debt token.\n  ///\n  /// @return The normalized amount.\n  function _normalizeDebtTokensToUnderlying(uint256 amount) internal view returns (uint256) {\n    return amount / conversionFactor;\n  }\n\n  function _getExchangedBalance(address owner) internal view returns (uint256 exchangedBalance) {\n    Account storage account = accounts[owner];\n\n    if (account.occupiedTick <= satisfiedTick) {\n      exchangedBalance = account.exchangedBalance;\n      exchangedBalance += account.unexchangedBalance;\n      return exchangedBalance;\n    }\n\n    exchangedBalance = account.exchangedBalance;\n\n    uint256 exchanged = LiquidityMath.calculateProduct(\n      account.unexchangedBalance,\n      ticks.getWeight(account.occupiedTick, ticks.position)\n    );\n\n    exchangedBalance += exchanged;\n\n    return exchangedBalance;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/TransmuterBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {AccessControl} from \"../lib/openzeppelin-contracts/contracts/access/AccessControl.sol\";\nimport {Initializable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\n\nimport \"./base/Errors.sol\";\n\nimport \"./interfaces/IAlchemistV2.sol\";\nimport \"./interfaces/ITokenAdapter.sol\";\nimport \"./interfaces/transmuter/ITransmuterBuffer.sol\";\nimport \"./interfaces/transmuter/ITransmuterV2.sol\";\n\nimport \"./libraries/FixedPointMath.sol\";\nimport \"./libraries/LiquidityMath.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"./libraries/TokenUtils.sol\";\nimport \"./interfaces/IERC20TokenReceiver.sol\";\n\n/// @title  ITransmuterBuffer\n/// @author Alchemix Finance\n///\n/// @notice An interface contract to buffer funds between the Alchemist and the Transmuter\ncontract TransmuterBuffer is ITransmuterBuffer, AccessControl, Initializable {\n    using FixedPointMath for FixedPointMath.Number;\n\n    uint256 public constant BPS = 10_000;\n\n    /// @notice The identifier of the role which maintains other roles.\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n\n    /// @notice The identifier of the keeper role.\n    bytes32 public constant KEEPER = keccak256(\"KEEPER\");\n\n    /// @inheritdoc ITransmuterBuffer\n    string public constant override version = \"2.2.0\";\n\n    /// @notice The alchemist address.\n    address public alchemist;\n\n    /// @notice The public transmuter address for each address.\n    mapping(address => address) public transmuter;\n\n    /// @notice The flowRate for each address.\n    mapping(address => uint256) public flowRate;\n\n    /// @notice The last update timestamp gor the flowRate for each address.\n    mapping(address => uint256) public lastFlowrateUpdate;\n\n    /// @notice The amount of flow available per ERC20.\n    mapping(address => uint256) public flowAvailable;\n\n    /// @notice The yieldTokens of each underlying supported by the Alchemist.\n    mapping(address => address[]) public _yieldTokens;\n\n    /// @notice The total amount of an underlying token that has been exchanged into the transmuter, and has not been claimed.\n    mapping(address => uint256) public currentExchanged;\n\n    /// @notice The underlying-tokens registered in the TransmuterBuffer.\n    address[] public registeredUnderlyings;\n\n    /// @notice The debt-token used by the TransmuterBuffer.\n    address public debtToken;\n\n    /// @notice A mapping of weighting schemas to be used in actions taken on the Alchemist (burn, deposit).\n    mapping(address => Weighting) public weightings;\n\n    /// @dev A mapping of addresses to denote permissioned sources of funds\n    mapping(address => bool) public sources;\n\n    /// @dev A mapping of addresses to their respective AMOs.\n    mapping(address => address) public amos;\n\n    /// @dev A mapping of underlying tokens to divert to the AMO.\n    mapping(address => bool) public divertToAmo;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    /// @dev Initialize the contract\n    ///\n    /// @param _admin     The governing address of the buffer.\n    /// @param _debtToken The debt token minted by the Alchemist and accepted by the Transmuter.\n    function initialize(address _admin, address _debtToken) external initializer {\n        _setupRole(ADMIN, _admin);\n        _setRoleAdmin(ADMIN, ADMIN);\n        _setRoleAdmin(KEEPER, ADMIN);\n        debtToken = _debtToken;\n    }\n\n    /// @dev Only allows the transmuter to call the modified function\n    ///\n    /// Reverts if the caller is not a correct transmuter.\n    ///\n    /// @param underlyingToken the underlying token associated with the transmuter.\n    modifier onlyTransmuter(address underlyingToken) {\n        if (msg.sender != transmuter[underlyingToken]) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @dev Only allows a governance-permissioned source to call the modified function\n    ///\n    /// Reverts if the caller is not a permissioned source.\n    modifier onlySource() {\n        if (!sources[msg.sender]) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @dev Only calls from the admin address are authorized to pass.\n    modifier onlyAdmin() {\n        if (!hasRole(ADMIN, msg.sender)) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @dev Only calls from a keeper address are authorized to pass.\n    modifier onlyKeeper() {\n        if (!hasRole(KEEPER, msg.sender)) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getWeight(address weightToken, address token)\n        external\n        view\n        override\n        returns (uint256 weight)\n    {\n        return weightings[weightToken].weights[token];\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getAvailableFlow(address underlyingToken)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        // total amount of collateral that the buffer controls in the alchemist\n        uint256 totalUnderlyingBuffered = getTotalUnderlyingBuffered(\n            underlyingToken\n        );\n\n        if (totalUnderlyingBuffered < flowAvailable[underlyingToken]) {\n            return totalUnderlyingBuffered;\n        } else {\n            return flowAvailable[underlyingToken];\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getTotalCredit() public view override returns (uint256) {\n        (int256 debt, ) = IAlchemistV2(alchemist).accounts(address(this));\n        return debt >= 0 ? 0 : SafeCast.toUint256(-debt);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function getTotalUnderlyingBuffered(address underlyingToken)\n        public\n        view\n        override\n        returns (uint256 totalBuffered)\n    {\n        totalBuffered = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        for (uint256 i = 0; i < _yieldTokens[underlyingToken].length; ++i) {\n            totalBuffered += _getTotalBuffered(_yieldTokens[underlyingToken][i]);\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setWeights(\n        address weightToken,\n        address[] memory tokens,\n        uint256[] memory weights\n    ) external override onlyAdmin {\n        if(tokens.length != weights.length) {\n            revert IllegalArgument();\n        }\n        Weighting storage weighting = weightings[weightToken];\n        delete weighting.tokens;\n        weighting.totalWeight = 0;\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            address yieldToken = tokens[i];\n\n            // For any weightToken that is not the debtToken, we want to verify that the yield-tokens being\n            // set for the weight schema accept said weightToken as collateral.\n            //\n            // We don't want to do this check on the debtToken because it is only used in the burnCredit() function\n            // and we want to be able to burn credit to any yield-token in the Alchemist.\n            if (weightToken != debtToken) {\n                IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist)\n                    .getYieldTokenParameters(yieldToken);\n                address underlyingToken = ITokenAdapter(params.adapter)\n                    .underlyingToken();\n\n                if (weightToken != underlyingToken) {\n                    revert IllegalState();\n                }\n            }\n\n            weighting.tokens.push(yieldToken);\n            weighting.weights[yieldToken] = weights[i];\n            weighting.totalWeight += weights[i];\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setSource(address source, bool flag) external override onlyAdmin {\n        if (sources[source] == flag) {\n            revert IllegalArgument();\n        }\n        sources[source] = flag;\n        emit SetSource(source, flag);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setTransmuter(address underlyingToken, address newTransmuter) external override onlyAdmin {\n        if (ITransmuterV2(newTransmuter).underlyingToken() != underlyingToken) {\n            revert IllegalArgument();\n        }\n        transmuter[underlyingToken] = newTransmuter;\n        emit SetTransmuter(underlyingToken, newTransmuter);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setAlchemist(address _alchemist) external override onlyAdmin {\n        sources[alchemist] = false;\n        sources[_alchemist] = true;\n\n        if (alchemist != address(0)) {\n            for (uint256 i = 0; i < registeredUnderlyings.length; ++i) {\n                TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, 0);\n            }\n            TokenUtils.safeApprove(debtToken, alchemist, 0);\n        }\n\n        alchemist = _alchemist;\n        for (uint256 i = 0; i < registeredUnderlyings.length; ++i) {\n            TokenUtils.safeApprove(registeredUnderlyings[i], alchemist, type(uint256).max);\n        }\n        TokenUtils.safeApprove(debtToken, alchemist, type(uint256).max);\n\n        emit SetAlchemist(alchemist);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setAmo(address underlyingToken, address amo) external override onlyAdmin {\n        amos[underlyingToken] = amo;\n        emit SetAmo(underlyingToken, amo);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setDivertToAmo(address underlyingToken, bool divert) external override onlyAdmin {\n        divertToAmo[underlyingToken] = divert;\n        emit SetDivertToAmo(underlyingToken, divert);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function registerAsset(\n        address underlyingToken,\n        address _transmuter\n    ) external override onlyAdmin {\n        if (!IAlchemistV2(alchemist).isSupportedUnderlyingToken(underlyingToken)) {\n            revert IllegalState();\n        }\n\n        // only add to the array if not already contained in it\n        for (uint256 i = 0; i < registeredUnderlyings.length; ++i) {\n            if (registeredUnderlyings[i] == underlyingToken) {\n                revert IllegalState();\n            }\n        }\n\n        if (ITransmuterV2(_transmuter).underlyingToken() != underlyingToken) {\n            revert IllegalArgument();\n        }\n\n        transmuter[underlyingToken] = _transmuter;\n        registeredUnderlyings.push(underlyingToken);\n        TokenUtils.safeApprove(underlyingToken, alchemist, type(uint256).max);\n        emit RegisterAsset(underlyingToken, _transmuter);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function setFlowRate(address underlyingToken, uint256 _flowRate)\n        external\n        override\n        onlyAdmin\n    {\n        _exchange(underlyingToken);\n\n        flowRate[underlyingToken] = _flowRate;\n        emit SetFlowRate(underlyingToken, _flowRate);\n    }\n\n    /// @inheritdoc IERC20TokenReceiver\n    function onERC20Received(address underlyingToken, uint256 amount)\n        external\n        override\n        onlySource\n    {\n        if (divertToAmo[underlyingToken]) {\n            _flushToAmo(underlyingToken, amount);\n        } else {\n            _updateFlow(underlyingToken);\n\n            // total amount of collateral that the buffer controls in the alchemist\n            uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n\n            // if there is not enough locally buffered collateral to meet the flow rate, exchange only the exchanged amount\n            if (localBalance < flowAvailable[underlyingToken]) {\n                currentExchanged[underlyingToken] += amount;\n                ITransmuterV2(transmuter[underlyingToken]).exchange(amount);\n            } else {\n                uint256 exchangeable = flowAvailable[underlyingToken] - currentExchanged[underlyingToken];\n                currentExchanged[underlyingToken] += exchangeable;\n                ITransmuterV2(transmuter[underlyingToken]).exchange(exchangeable);\n            }\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function exchange(address underlyingToken) external override onlyKeeper {\n        _exchange(underlyingToken);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function flushToAmo(address underlyingToken, uint256 amount) external override onlyKeeper {\n        if (divertToAmo[underlyingToken]) {\n            _flushToAmo(underlyingToken, amount);\n        } else {\n            revert IllegalState();\n        }\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function withdraw(\n        address underlyingToken,\n        uint256 amount,\n        address recipient\n    ) external override onlyTransmuter(underlyingToken) {\n        if (amount > flowAvailable[underlyingToken]) {\n            revert IllegalArgument();\n        }\n\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        if (amount > localBalance) {\n            revert IllegalArgument();\n        }\n\n        flowAvailable[underlyingToken] -= amount;\n        currentExchanged[underlyingToken] -= amount;\n\n        TokenUtils.safeTransfer(underlyingToken, recipient, amount);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function withdrawFromAlchemist(\n        address yieldToken,\n        uint256 shares,\n        uint256 minimumAmountOut\n    ) external override onlyKeeper {\n        IAlchemistV2(alchemist).withdrawUnderlying(yieldToken, shares, address(this), minimumAmountOut);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function refreshStrategies() public override {\n        address[] memory supportedYieldTokens = IAlchemistV2(alchemist)\n            .getSupportedYieldTokens();\n        address[] memory supportedUnderlyingTokens = IAlchemistV2(alchemist)\n            .getSupportedUnderlyingTokens();\n\n        if (registeredUnderlyings.length != supportedUnderlyingTokens.length) {\n            revert IllegalState();\n        }\n\n        // clear current strats\n        for (uint256 j = 0; j < registeredUnderlyings.length; ++j) {\n            delete _yieldTokens[registeredUnderlyings[j]];\n        }\n\n        uint256 numYTokens = supportedYieldTokens.length;\n        for (uint256 i = 0; i < numYTokens; ++i) {\n            address yieldToken = supportedYieldTokens[i];\n\n            IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist)\n                .getYieldTokenParameters(yieldToken);\n            if (params.enabled) {\n                _yieldTokens[params.underlyingToken].push(yieldToken);\n            }\n        }\n        emit RefreshStrategies();\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function burnCredit() external override onlyKeeper {\n        IAlchemistV2(alchemist).poke(address(this));\n        uint256 credit = getTotalCredit();\n        if (credit == 0) {\n            revert IllegalState();\n        }\n        IAlchemistV2(alchemist).mint(credit, address(this));\n\n        _alchemistAction(credit, debtToken, _alchemistDonate);\n    }\n\n    /// @inheritdoc ITransmuterBuffer\n    function depositFunds(address underlyingToken, uint256 amount)\n        external\n        override\n        onlyKeeper\n    {\n        if (amount == 0) {\n            revert IllegalArgument();\n        }\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        if (localBalance < amount) {\n            revert IllegalArgument();\n        }\n        _updateFlow(underlyingToken);\n        \n        // Don't deposit exchanged funds into the Alchemist.\n        // Doing so puts those funds at risk, and could lead to users being unable to claim\n        // their transmuted funds in the event of a vault loss.\n        if (localBalance - amount < currentExchanged[underlyingToken]) {\n            revert IllegalState();\n        }\n        _alchemistAction(amount, underlyingToken, _alchemistDeposit);\n    }\n\n    /// @dev Gets the total value of the yield tokens in units of underlying tokens that this contract holds.\n    ///\n    /// @param yieldToken The address of the target yield token.\n    /// @return totalBuffered The total amount buffered.\n    function _getTotalBuffered(address yieldToken)\n        internal\n        view\n        returns (uint256)\n    {\n        (uint256 balance, ) = IAlchemistV2(alchemist).positions(address(this), yieldToken);\n        IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist)\n            .getYieldTokenParameters(yieldToken);\n        uint256 tokensPerShare = IAlchemistV2(alchemist)\n            .getUnderlyingTokensPerShare(yieldToken);\n        return (balance * tokensPerShare) / 10**params.decimals;\n    }\n\n    /// @dev Updates the available flow for a give underlying token.\n    ///\n    /// @param underlyingToken the underlying token whos flow is being updated.\n    /// @return marginalFlow the marginal flow.\n    function _updateFlow(address underlyingToken) internal returns (uint256) {\n        // additional flow to be allocated based on flow rate\n        uint256 marginalFlow = (block.timestamp -\n            lastFlowrateUpdate[underlyingToken]) * flowRate[underlyingToken];\n        flowAvailable[underlyingToken] += marginalFlow;\n        lastFlowrateUpdate[underlyingToken] = block.timestamp;\n        return marginalFlow;\n    }\n\n    /// @notice Runs an action on the Alchemist according to a given weighting schema.\n    ///\n    /// This function gets a weighting schema defined under the `weightToken` key, and calls the target action\n    /// with a weighted value of `amount` and the associated token.\n    ///\n    /// @param amount       The amount of funds to use in the action.\n    /// @param weightToken  The key of the weighting schema to be used for the action.\n    /// @param action       The action to be taken.\n    function _alchemistAction(\n        uint256 amount,\n        address weightToken,\n        function(address, uint256) action\n    ) internal {\n        IAlchemistV2(alchemist).poke(address(this));\n\n        Weighting storage weighting = weightings[weightToken];\n        for (uint256 j = 0; j < weighting.tokens.length; ++j) {\n            address token = weighting.tokens[j];\n            uint256 actionAmt = (amount * weighting.weights[token]) / weighting.totalWeight;\n            action(token, actionAmt);\n        }\n    }\n\n    /// @notice Donate credit weight to a target yield-token by burning debt-tokens.\n    ///\n    /// @param token    The target yield-token.\n    /// @param amount      The amount of debt-tokens to burn.\n    function _alchemistDonate(address token, uint256 amount) internal {\n        IAlchemistV2(alchemist).donate(token, amount);\n    }\n\n    /// @notice Deposits funds into the Alchemist.\n    ///\n    /// @param token  The yield-token to deposit.\n    /// @param amount The amount to deposit.\n    function _alchemistDeposit(address token, uint256 amount) internal {\n        IAlchemistV2(alchemist).depositUnderlying(\n            token,\n            amount,\n            address(this),\n            0\n        );\n    }\n\n    /// @notice Withdraws funds from the Alchemist.\n    ///\n    /// @param token            The yield-token to withdraw.\n    /// @param amountUnderlying The amount of underlying to withdraw.\n    function _alchemistWithdraw(address token, uint256 amountUnderlying) internal {\n        uint8 decimals = TokenUtils.expectDecimals(token);\n        uint256 pricePerShare = IAlchemistV2(alchemist).getUnderlyingTokensPerShare(token);\n        uint256 wantShares = amountUnderlying * 10**decimals / pricePerShare;\n        (uint256 availableShares, uint256 lastAccruedWeight) = IAlchemistV2(alchemist).positions(address(this), token);\n        if (wantShares > availableShares) {\n            wantShares = availableShares;\n        }\n        // Allow 1% slippage\n        uint256 minimumAmountOut = amountUnderlying - amountUnderlying * 100 / BPS;\n        if (wantShares > 0) {\n            IAlchemistV2(alchemist).withdrawUnderlying(token, wantShares, address(this), minimumAmountOut);\n        }\n    }\n\n    /// @notice Pull necessary funds from the Alchemist and exchange them.\n    ///\n    /// @param underlyingToken The underlying-token to exchange.\n    function _exchange(address underlyingToken) internal {\n        _updateFlow(underlyingToken);\n\n        uint256 totalUnderlyingBuffered = getTotalUnderlyingBuffered(underlyingToken);\n        uint256 initialLocalBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        uint256 want = 0;\n        // Here we assume the invariant underlyingToken.balanceOf(address(this)) >= currentExchanged[underlyingToken].\n        if (totalUnderlyingBuffered < flowAvailable[underlyingToken]) {\n            // Pull the rest of the funds from the Alchemist.\n            want = totalUnderlyingBuffered - initialLocalBalance;\n        } else if (initialLocalBalance < flowAvailable[underlyingToken]) {\n            // totalUnderlyingBuffered > flowAvailable so we have funds available to pull.\n            want = flowAvailable[underlyingToken] - initialLocalBalance;\n        }\n\n        if (want > 0) {\n            _alchemistAction(want, underlyingToken, _alchemistWithdraw);\n        }\n\n        uint256 localBalance = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        uint256 exchangeDelta = 0;\n        if (localBalance > flowAvailable[underlyingToken]) {\n            exchangeDelta = flowAvailable[underlyingToken] - currentExchanged[underlyingToken];\n        } else {\n            exchangeDelta = localBalance - currentExchanged[underlyingToken];\n        }\n\n        if (exchangeDelta > 0) {\n            currentExchanged[underlyingToken] += exchangeDelta;\n            ITransmuterV2(transmuter[underlyingToken]).exchange(exchangeDelta);\n        }\n    }\n\n    /// @notice Flush funds to the amo.\n    ///\n    /// @param underlyingToken The underlyingToken to flush.\n    /// @param amount          The amount to flush.\n    function _flushToAmo(address underlyingToken, uint256 amount) internal {\n        TokenUtils.safeTransfer(underlyingToken, amos[underlyingToken], amount);\n        IERC20TokenReceiver(amos[underlyingToken]).onERC20Received(underlyingToken, amount);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/utils/Whitelist.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport \"../base/Errors.sol\";\nimport \"../interfaces/IWhitelist.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"../libraries/Sets.sol\";\n\n/// @title  Whitelist\n/// @author Alchemix Finance\ncontract Whitelist is IWhitelist, Ownable {\n  using Sets for Sets.AddressSet;\n  Sets.AddressSet addresses;\n\n  /// @inheritdoc IWhitelist\n  bool public override disabled;\n\n  constructor() Ownable() {}\n\n  /// @inheritdoc IWhitelist\n  function getAddresses() external view returns (address[] memory) {\n    return addresses.values;\n  }\n\n  /// @inheritdoc IWhitelist\n  function add(address caller) external override {\n    _onlyAdmin();\n    if (disabled) {\n      revert IllegalState();\n    }\n    addresses.add(caller);\n    emit AccountAdded(caller);\n  }\n\n  /// @inheritdoc IWhitelist\n  function remove(address caller) external override {\n    _onlyAdmin();\n    if (disabled) {\n      revert IllegalState();\n    }\n    addresses.remove(caller);\n    emit AccountRemoved(caller);\n  }\n\n  /// @inheritdoc IWhitelist\n  function disable() external override {\n    _onlyAdmin();\n    disabled = true;\n    emit WhitelistDisabled();\n  }\n\n  /// @inheritdoc IWhitelist\n  function isWhitelisted(address account) external view override returns (bool) {\n    return disabled || addresses.contains(account);\n  }\n\n  /// @dev Reverts if the caller is not the contract owner.\n  function _onlyAdmin() internal view {\n    if (msg.sender != owner()) {\n      revert Unauthorized();\n    }\n  }\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/IERC20Burnable.sol\";\nimport \"../../interfaces/IERC20Mintable.sol\";\n\ncontract TestERC20 is IERC20, IERC20Mintable, IERC20Burnable {\n    uint256 public override totalSupply;\n    uint8 public decimals;\n    mapping(address => uint256) public override balanceOf;\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    constructor(uint256 amountToMint, uint8 _decimals) {\n        decimals = _decimals;\n        mint(msg.sender, amountToMint);\n    }\n\n    function mint(address to, uint256 amount) public override {\n        uint256 balanceNext = balanceOf[to] + amount;\n        require(balanceNext >= amount, 'overflow balance');\n        balanceOf[to] = balanceNext;\n        totalSupply += amount;\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        uint256 balanceBefore = balanceOf[msg.sender];\n        require(balanceBefore >= amount, 'insufficient balance');\n        balanceOf[msg.sender] = balanceBefore - amount;\n\n        uint256 balanceRecipient = balanceOf[recipient];\n        require(balanceRecipient + amount >= balanceRecipient, 'recipient balance overflow');\n        balanceOf[recipient] = balanceRecipient + amount;\n\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        uint256 allowanceBefore = allowance[sender][msg.sender];\n        require(allowanceBefore >= amount, 'allowance insufficient');\n\n        allowance[sender][msg.sender] = allowanceBefore - amount;\n\n        uint256 balanceRecipient = balanceOf[recipient];\n\n        require(balanceRecipient + amount >= balanceRecipient, 'overflow balance recipient');\n        balanceOf[recipient] = balanceRecipient + amount;\n        uint256 balanceSender = balanceOf[sender];\n\n        require(balanceSender >= amount, 'underflow balance sender');\n        balanceOf[sender] = balanceSender - amount;\n\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function burnFrom(\n        address owner,\n        uint256 amount\n    ) public override returns (bool) {\n        uint256 allowanceBefore = allowance[owner][msg.sender];\n        require(allowanceBefore >= amount, 'allowance insufficient');\n\n        allowance[owner][msg.sender] = allowanceBefore - amount;\n\n        uint256 balanceOwner = balanceOf[owner];\n        require(balanceOwner >= amount, 'overflow balance recipient');\n        balanceOf[owner] = balanceOwner - amount;\n        totalSupply -= amount;\n\n        emit Transfer(msg.sender, address(0), amount);\n        return true;\n    }\n\n    function burn(uint256 amount) public override returns (bool) {\n        uint256 balanceOwner = balanceOf[msg.sender];\n        require(balanceOwner >= amount, 'overflow balance recipient');\n        balanceOf[msg.sender] = balanceOwner - amount;\n        totalSupply -= amount;\n\n        emit Transfer(msg.sender, address(0), amount);\n        return true;\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestYieldToken.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport { ERC20 } from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../../libraries/TokenUtils.sol\";\nimport \"../../interfaces/test/ITestYieldToken.sol\";\nimport \"./TestERC20.sol\";\n\n/// @title  TestYieldToken\n/// @author Alchemix Finance\ncontract TestYieldToken is ITestYieldToken, ERC20 {\n\taddress private constant BLACKHOLE = address(0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB);\n\tuint256 private constant BPS = 10000;\n\n\taddress public override underlyingToken;\n\tuint8 private _decimals;\n\tuint256 public slippage;\n\n\tconstructor(address _underlyingToken) ERC20(\"Yield Token\", \"Yield Token\") {\n\t\tunderlyingToken = _underlyingToken;\n\t\t_decimals = TokenUtils.expectDecimals(_underlyingToken);\n\t\tslippage = 0;\n\t}\n\n\tfunction decimals() public view override returns (uint8) {\n\t\treturn _decimals;\n\t}\n\n\tfunction price() external view override returns (uint256) {\n\t\treturn _shareValue(10**_decimals);\n\t}\n\n\tfunction setSlippage(uint256 _slippage) external {\n\t\tslippage = _slippage;\n\t}\n\n\tfunction mint(uint256 amount, address recipient) external override returns (uint256) {\n\t\tassert(amount > 0);\n\n\t\tuint256 shares = _issueSharesForAmount(recipient, amount);\n\n\t\tTokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n\n\t\treturn shares;\n\t}\n\n\tfunction redeem(uint256 shares, address recipient) external override returns (uint256) {\n\t\tassert(shares > 0);\n\n\t\tuint256 value = _shareValue(shares);\n\t\tvalue = (value * (BPS - slippage)) / BPS;\n\t\t_burn(msg.sender, shares);\n\t\tTokenUtils.safeTransfer(underlyingToken, recipient, value);\n\n\t\treturn value;\n\t}\n\n\tfunction slurp(uint256 amount) external override {\n\t\tTokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n\t}\n\n\tfunction siphon(uint256 amount) external override {\n\t\tTokenUtils.safeTransfer(underlyingToken, BLACKHOLE, amount);\n\t}\n\n\tfunction _issueSharesForAmount(address to, uint256 amount) internal returns (uint256) {\n\t\tuint256 shares = 0;\n\t\tif (totalSupply() > 0) {\n\t\t\tshares = (amount * totalSupply()) / TokenUtils.safeBalanceOf(underlyingToken, address(this));\n\t\t} else {\n\t\t\tshares = amount;\n\t\t}\n\t\tshares = (shares * (BPS - slippage)) / BPS;\n\t\t_mint(to, shares);\n\t\treturn shares;\n\t}\n\n\tfunction _shareValue(uint256 shares) internal view returns (uint256) {\n\t\tif (totalSupply() == 0) {\n\t\t\treturn shares;\n\t\t}\n\t\treturn (shares * TokenUtils.safeBalanceOf(underlyingToken, address(this))) / totalSupply();\n\t}\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestYieldTokenAdapter.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/ITokenAdapter.sol\";\nimport \"../../interfaces/test/ITestYieldToken.sol\";\n\nimport \"../../libraries/TokenUtils.sol\";\n\n/// @title  TestYieldTokenAdapter\n/// @author Alchemix Finance\ncontract TestYieldTokenAdapter is ITokenAdapter {\n    string public constant override version = \"2.0.0\";\n    \n    /// @inheritdoc ITokenAdapter\n    address public immutable override token;\n\n    /// @inheritdoc ITokenAdapter\n    address public immutable override underlyingToken;\n\n    constructor(address _token) {\n        token = _token;\n        underlyingToken = ITestYieldToken(_token).underlyingToken();\n        IERC20(ITestYieldToken(_token).underlyingToken()).approve(_token, type(uint256).max);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view override returns (uint256) {\n        return ITestYieldToken(token).price();\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        return ITestYieldToken(token).mint(amount, recipient);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\n        return ITestYieldToken(token).redeem(amount, recipient);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/IERC20Mintable.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @title  IERC20Mintable\n/// @author Alchemix Finance\ninterface IERC20Mintable is IERC20 {\n    /// @notice Mints `amount` tokens to `recipient`.\n    ///\n    /// @param recipient The address which will receive the minted tokens.\n    /// @param amount    The amount of tokens to mint.\n    function mint(address recipient, uint256 amount) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/ITokenAdapter.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  ITokenAdapter\n/// @author Alchemix Finance\ninterface ITokenAdapter {\n    /// @notice Gets the current version.\n    ///\n    /// @return The version.\n    function version() external view returns (string memory);\n\n    /// @notice Gets the address of the yield token that this adapter supports.\n    ///\n    /// @return The address of the yield token.\n    function token() external view returns (address);\n\n    /// @notice Gets the address of the underlying token that the yield token wraps.\n    ///\n    /// @return The address of the underlying token.\n    function underlyingToken() external view returns (address);\n\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\n    ///         for.\n    ///\n    /// @return The price.\n    function price() external view returns (uint256);\n\n    /// @notice Wraps `amount` underlying tokens into the yield token.\n    ///\n    /// @param amount    The amount of the underlying token to wrap.\n    /// @param recipient The address which will receive the yield tokens.\n    ///\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\n    function wrap(uint256 amount, address recipient)\n        external\n        returns (uint256 amountYieldTokens);\n\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\n    ///\n    /// @param amount    The amount of yield-tokens to redeem.\n    /// @param recipient The recipient of the resulting underlying-tokens.\n    ///\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\n    function unwrap(uint256 amount, address recipient)\n        external\n        returns (uint256 amountUnderlyingTokens);\n}"
    },
    "submodules/v2-foundry/src/interfaces/alchemist/IAlchemistV2AdminActions.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2AdminActions\n/// @author Alchemix Finance\n///\n/// @notice Specifies admin and or sentinel actions.\ninterface IAlchemistV2AdminActions {\n    /// @notice Contract initialization parameters.\n    struct InitializationParams {\n        // The initial admin account.\n        address admin;\n        // The ERC20 token used to represent debt.\n        address debtToken;\n        // The initial transmuter or transmuter buffer.\n        address transmuter;\n        // The minimum collateralization ratio that an account must maintain.\n        uint256 minimumCollateralization;\n        // The percentage fee taken from each harvest measured in units of basis points.\n        uint256 protocolFee;\n        // The address that receives protocol fees.\n        address protocolFeeReceiver;\n        // A limit used to prevent administrators from making minting functionality inoperable.\n        uint256 mintingLimitMinimum;\n        // The maximum number of tokens that can be minted per period of time.\n        uint256 mintingLimitMaximum;\n        // The number of blocks that it takes for the minting limit to be refreshed.\n        uint256 mintingLimitBlocks;\n        // The address of the whitelist.\n        address whitelist;\n    }\n\n    /// @notice Configuration parameters for an underlying token.\n    struct UnderlyingTokenConfig {\n        // A limit used to prevent administrators from making repayment functionality inoperable.\n        uint256 repayLimitMinimum;\n        // The maximum number of underlying tokens that can be repaid per period of time.\n        uint256 repayLimitMaximum;\n        // The number of blocks that it takes for the repayment limit to be refreshed.\n        uint256 repayLimitBlocks;\n        // A limit used to prevent administrators from making liquidation functionality inoperable.\n        uint256 liquidationLimitMinimum;\n        // The maximum number of underlying tokens that can be liquidated per period of time.\n        uint256 liquidationLimitMaximum;\n        // The number of blocks that it takes for the liquidation limit to be refreshed.\n        uint256 liquidationLimitBlocks;\n    }\n\n    /// @notice Configuration parameters of a yield token.\n    struct YieldTokenConfig {\n        // The adapter used by the system to interop with the token.\n        address adapter;\n        // The maximum percent loss in expected value that can occur before certain actions are disabled measured in\n        // units of basis points.\n        uint256 maximumLoss;\n        // The maximum value that can be held by the system before certain actions are disabled measured in the\n        // underlying token.\n        uint256 maximumExpectedValue;\n        // The number of blocks that credit will be distributed over to depositors.\n        uint256 creditUnlockBlocks;\n    }\n\n    /// @notice Initialize the contract.\n    ///\n    /// @notice `params.protocolFee` must be in range or this call will with an {IllegalArgument} error.\n    /// @notice The minting growth limiter parameters must be valid or this will revert with an {IllegalArgument} error. For more information, see the {Limiters} library.\n    ///\n    /// @notice Emits an {AdminUpdated} event.\n    /// @notice Emits a {TransmuterUpdated} event.\n    /// @notice Emits a {MinimumCollateralizationUpdated} event.\n    /// @notice Emits a {ProtocolFeeUpdated} event.\n    /// @notice Emits a {ProtocolFeeReceiverUpdated} event.\n    /// @notice Emits a {MintingLimitUpdated} event.\n    ///\n    /// @param params The contract initialization parameters.\n    function initialize(InitializationParams memory params) external;\n\n    /// @notice Sets the pending administrator.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {PendingAdminUpdated} event.\n    ///\n    /// @dev This is the first step in the two-step process of setting a new administrator. After this function is called, the pending administrator will then need to call {acceptAdmin} to complete the process.\n    ///\n    /// @param value the address to set the pending admin to.\n    function setPendingAdmin(address value) external;\n\n    /// @notice Allows for `msg.sender` to accepts the role of administrator.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice The current pending administrator must be non-zero or this call will revert with an {IllegalState} error.\n    ///\n    /// @dev This is the second step in the two-step process of setting a new administrator. After this function is successfully called, this pending administrator will be reset and the new administrator will be set.\n    ///\n    /// @notice Emits a {AdminUpdated} event.\n    /// @notice Emits a {PendingAdminUpdated} event.\n    function acceptAdmin() external;\n\n    /// @notice Sets an address as a sentinel.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param sentinel The address to set or unset as a sentinel.\n    /// @param flag     A flag indicating of the address should be set or unset as a sentinel.\n    function setSentinel(address sentinel, bool flag) external;\n\n    /// @notice Sets an address as a keeper.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param keeper The address to set or unset as a keeper.\n    /// @param flag   A flag indicating of the address should be set or unset as a keeper.\n    function setKeeper(address keeper, bool flag) external;\n\n    /// @notice Adds an underlying token to the system.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param underlyingToken The address of the underlying token to add.\n    /// @param config          The initial underlying token configuration.\n    function addUnderlyingToken(\n        address underlyingToken,\n        UnderlyingTokenConfig calldata config\n    ) external;\n\n    /// @notice Adds a yield token to the system.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {AddYieldToken} event.\n    /// @notice Emits a {TokenAdapterUpdated} event.\n    /// @notice Emits a {MaximumLossUpdated} event.\n    ///\n    /// @param yieldToken The address of the yield token to add.\n    /// @param config     The initial yield token configuration.\n    function addYieldToken(address yieldToken, YieldTokenConfig calldata config)\n        external;\n\n    /// @notice Sets an underlying token as either enabled or disabled.\n    ///\n    /// @notice `msg.sender` must be either the admin or a sentinel or this call will revert with an {Unauthorized} error.\n    /// @notice `underlyingToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits an {UnderlyingTokenEnabled} event.\n    ///\n    /// @param underlyingToken The address of the underlying token to enable or disable.\n    /// @param enabled         If the underlying token should be enabled or disabled.\n    function setUnderlyingTokenEnabled(address underlyingToken, bool enabled)\n        external;\n\n    /// @notice Sets a yield token as either enabled or disabled.\n    ///\n    /// @notice `msg.sender` must be either the admin or a sentinel or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {YieldTokenEnabled} event.\n    ///\n    /// @param yieldToken The address of the yield token to enable or disable.\n    /// @param enabled    If the underlying token should be enabled or disabled.\n    function setYieldTokenEnabled(address yieldToken, bool enabled) external;\n\n    /// @notice Configures the the repay limit of `underlyingToken`.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `underlyingToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {ReplayLimitUpdated} event.\n    ///\n    /// @param underlyingToken The address of the underlying token to configure the repay limit of.\n    /// @param maximum         The maximum repay limit.\n    /// @param blocks          The number of blocks it will take for the maximum repayment limit to be replenished when it is completely exhausted.\n    function configureRepayLimit(\n        address underlyingToken,\n        uint256 maximum,\n        uint256 blocks\n    ) external;\n\n    /// @notice Configure the liquidation limiter of `underlyingToken`.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `underlyingToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {LiquidationLimitUpdated} event.\n    ///\n    /// @param underlyingToken The address of the underlying token to configure the liquidation limit of.\n    /// @param maximum         The maximum liquidation limit.\n    /// @param blocks          The number of blocks it will take for the maximum liquidation limit to be replenished when it is completely exhausted.\n    function configureLiquidationLimit(\n        address underlyingToken,\n        uint256 maximum,\n        uint256 blocks\n    ) external;\n\n    /// @notice Set the address of the transmuter.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `value` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {TransmuterUpdated} event.\n    ///\n    /// @param value The address of the transmuter.\n    function setTransmuter(address value) external;\n\n    /// @notice Set the minimum collateralization ratio.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {MinimumCollateralizationUpdated} event.\n    ///\n    /// @param value The new minimum collateralization ratio.\n    function setMinimumCollateralization(uint256 value) external;\n\n    /// @notice Sets the fee that the protocol will take from harvests.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `value` must be in range or this call will with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {ProtocolFeeUpdated} event.\n    ///\n    /// @param value The value to set the protocol fee to measured in basis points.\n    function setProtocolFee(uint256 value) external;\n\n    /// @notice Sets the address which will receive protocol fees.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `value` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {ProtocolFeeReceiverUpdated} event.\n    ///\n    /// @param value The address to set the protocol fee receiver to.\n    function setProtocolFeeReceiver(address value) external;\n\n    /// @notice Configures the minting limiter.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @notice Emits a {MintingLimitUpdated} event.\n    ///\n    /// @param maximum The maximum minting limit.\n    /// @param blocks  The number of blocks it will take for the maximum minting limit to be replenished when it is completely exhausted.\n    function configureMintingLimit(uint256 maximum, uint256 blocks) external;\n\n    /// @notice Sets the rate at which credit will be completely available to depositors after it is harvested.\n    ///\n    /// @notice Emits a {CreditUnlockRateUpdated} event.\n    ///\n    /// @param yieldToken The address of the yield token to set the credit unlock rate for.\n    /// @param blocks     The number of blocks that it will take before the credit will be unlocked.\n    function configureCreditUnlockRate(address yieldToken, uint256 blocks) external;\n\n    /// @notice Sets the token adapter of a yield token.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice The token that `adapter` supports must be `yieldToken` or this call will revert with a {IllegalState} error.\n    ///\n    /// @notice Emits a {TokenAdapterUpdated} event.\n    ///\n    /// @param yieldToken The address of the yield token to set the adapter for.\n    /// @param adapter    The address to set the token adapter to.\n    function setTokenAdapter(address yieldToken, address adapter) external;\n\n    /// @notice Sets the maximum expected value of a yield token that the system can hold.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @param yieldToken The address of the yield token to set the maximum expected value for.\n    /// @param value      The maximum expected value of the yield token denoted measured in its underlying token.\n    function setMaximumExpectedValue(address yieldToken, uint256 value)\n        external;\n\n    /// @notice Sets the maximum loss that a yield bearing token will permit before restricting certain actions.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @dev There are two types of loss of value for yield bearing assets: temporary or permanent. The system will automatically restrict actions which are sensitive to both forms of loss when detected. For example, deposits must be restricted when an excessive loss is encountered to prevent users from having their collateral harvested from them. While the user would receive credit, which then could be exchanged for value equal to the collateral that was harvested from them, it is seen as a negative user experience because the value of their collateral should have been higher than what was originally recorded when they made their deposit.\n    ///\n    /// @param yieldToken The address of the yield bearing token to set the maximum loss for.\n    /// @param value      The value to set the maximum loss to. This is in units of basis points.\n    function setMaximumLoss(address yieldToken, uint256 value) external;\n\n    /// @notice Snap the expected value `yieldToken` to the current value.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @dev This function should only be used in the event of a loss in the target yield-token. For example, say a third-party protocol experiences a fifty percent loss. The expected value (amount of underlying tokens) of the yield tokens being held by the system would be two times the real value that those yield tokens could be redeemed for. This function gives governance a way to realize those losses so that users can continue using the token as normal.\n    ///\n    /// @param yieldToken The address of the yield token to snap.\n    function snap(address yieldToken) external;\n\n    /// @notice Sweep all of 'rewardtoken' from the alchemist into the rewardCollector;\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    /// @notice `rewardToken` must not be a yield or underlying token or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @param rewardToken The address of the reward token sweep.\n    /// @param yieldToken The address of the yield token whose rewards are being swept.\n    function sweepRewardTokens(address rewardToken, address yieldToken) external;\n\n    /// @notice Set the address of the V1 transfer adapter.\n    ///\n    /// @notice `msg.sender` must be the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param transferAdapterAddress The address of the V1 transfer adapter to be set in the alchemist.\n    function setTransferAdapterAddress(address transferAdapterAddress) external;\n\n    /// @notice Accept debt from the V1 transfer vault adapter.\n    ///\n    /// @notice `msg.sender` must be a sentinal or the admin or this call will revert with an {Unauthorized} error.\n    ///\n    /// @param owner    The owner of the account whos debt to increase.\n    /// @param debt     The amount of debt incoming from the V1 tranfer adapter.\n    function transferDebtV1(address owner, int256 debt) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/IAlchemistV2.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"./alchemist/IAlchemistV2Actions.sol\";\nimport \"./alchemist/IAlchemistV2AdminActions.sol\";\nimport \"./alchemist/IAlchemistV2Errors.sol\";\nimport \"./alchemist/IAlchemistV2Immutables.sol\";\nimport \"./alchemist/IAlchemistV2Events.sol\";\nimport \"./alchemist/IAlchemistV2State.sol\";\n\n/// @title  IAlchemistV2\n/// @author Alchemix Finance\ninterface IAlchemistV2 is\n    IAlchemistV2Actions,\n    IAlchemistV2AdminActions,\n    IAlchemistV2Errors,\n    IAlchemistV2Immutables,\n    IAlchemistV2Events,\n    IAlchemistV2State\n{ }\n"
    },
    "submodules/v2-foundry/src/test/utils/Hevm.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\ninterface Hevm {\n    // Set block.timestamp\n    function warp(uint256) external;\n    // Set block.number\n    function roll(uint256) external;\n    // Set block.basefee\n    function fee(uint256) external;\n    // Loads a storage slot from an address\n    function load(address account, bytes32 slot) external returns (bytes32);\n    // Stores a value to an address' storage slot\n    function store(address account, bytes32 slot, bytes32 value) external;\n    // Signs data\n    function sign(uint256 privateKey, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n    // Computes address for a given private key\n    function addr(uint256 privateKey) external returns (address);\n    // Performs a foreign function call via terminal\n    function ffi(string[] calldata) external returns (bytes memory);\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address) external;\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\n    function prank(address, address) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\n\n    function startPrank(address, address) external;\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n    // Sets an address' balance\n    function deal(address who, uint256 newBalance) external;\n    // Sets an address' code\n    function etch(address who, bytes calldata code) external;\n    // Expects an error on next call\n    function expectRevert(bytes calldata) external;\n    function expectRevert(bytes4) external;\n    function expectRevert() external;\n    // Record all storage reads and writes\n    function record() external;\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans)\n    function expectEmit(bool, bool, bool, bool) external;\n    // Mocks a call to an address, returning specified data.\n    // Calldata can either be strict or a partial match, e.g. if you only\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\n    // function will be mocked.\n    function mockCall(address, bytes calldata, bytes calldata) external;\n    // Clears all mocked calls\n    function clearMockedCalls() external;\n    // Expect a call to an address with the specified calldata.\n    // Calldata can either be strict or a partial match\n    function expectCall(address, bytes calldata) external;\n    function getCode(string calldata) external returns (bytes memory);\n\n    // Label an address in test traces\n    function label(address addr, string calldata label) external;\n\n    // When fuzzing, generate new inputs if conditional not met\n    function assume(bool) external;\n}"
    },
    "submodules/v2-foundry/lib/forge-std/src/Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"./Script.sol\";\nimport \"../lib/ds-test/src/test.sol\";\n\n// Wrappers around Cheatcodes to avoid footguns\nabstract contract Test is DSTest, Script {\n    using stdStorage for StdStorage;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    StdStorage internal stdstore;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                    STD-LOGS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    event log_array(uint256[] val);\n    event log_array(int256[] val);\n    event log_array(address[] val);\n    event log_named_array(string key, uint256[] val);\n    event log_named_array(string key, int256[] val);\n    event log_named_array(string key, address[] val);\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                    STD-CHEATS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address who) internal {\n        vm.deal(who, 1 << 128);\n        vm.prank(who);\n    }\n\n    function hoax(address who, uint256 give) internal {\n        vm.deal(who, give);\n        vm.prank(who);\n    }\n\n    function hoax(address who, address origin) internal {\n        vm.deal(who, 1 << 128);\n        vm.prank(who, origin);\n    }\n\n    function hoax(address who, address origin, uint256 give) internal {\n        vm.deal(who, give);\n        vm.prank(who, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address who) internal {\n        vm.deal(who, 1 << 128);\n        vm.startPrank(who);\n    }\n\n    function startHoax(address who, uint256 give) internal {\n        vm.deal(who, give);\n        vm.startPrank(who);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address who, address origin) internal {\n        vm.deal(who, 1 << 128);\n        vm.startPrank(who, origin);\n    }\n\n    function startHoax(address who, address origin, uint256 give) internal {\n        vm.deal(who, give);\n        vm.startPrank(who, origin);\n    }\n\n    function changePrank(address who) internal {\n        vm.stopPrank();\n        vm.startPrank(who);\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal returns(address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal returns(address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // DEPRECATED: Use `deal` instead\n    function tip(address token, address to, uint256 give) internal {\n        emit log_named_string(\"WARNING\", \"Test tip(address,address,uint256): The `tip` stdcheat has been deprecated. Use `deal` instead.\");\n        stdstore\n            .target(token)\n            .sig(0x70a08231)\n            .with_key(to)\n            .checked_write(give);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal {\n        deal(token, to, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal {\n        // get current balance\n        (, bytes memory balData) = token.call(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore\n            .target(token)\n            .sig(0x70a08231)\n            .with_key(to)\n            .checked_write(give);\n\n        // update total supply\n        if(adjust){\n            (, bytes memory totSupData) = token.call(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if(give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore\n                .target(token)\n                .sig(0x18160ddd)\n                .checked_write(totSup);\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal virtual returns (uint256 result) {\n        require(min <= max, \"Test bound(uint256,uint256,uint256): Max is less than min.\");\n\n        uint256 size = max - min;\n\n        if (size == 0)\n        {\n            result = min;\n        }\n        else if (size == UINT256_MAX)\n        {\n            result = x;\n        }\n        else\n        {\n            ++size; // make `max` inclusive\n            uint256 mod = x % size;\n            result = min + mod;\n        }\n\n        emit log_named_uint(\"Bound Result\", result);\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args)\n        internal\n        returns (address addr)\n    {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(\n            addr != address(0),\n            \"Test deployCode(string,bytes): Deployment failed.\"\n        );\n    }\n\n    function deployCode(string memory what)\n        internal\n        returns (address addr)\n    {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(\n            addr != address(0),\n            \"Test deployCode(string): Deployment failed.\"\n        );\n    }\n\n    /// deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val)\n        internal\n        returns (address addr)\n    {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(\n            addr != address(0),\n            \"Test deployCode(string,bytes,uint256): Deployment failed.\"\n        );\n    }\n\n    function deployCode(string memory what, uint256 val)\n        internal\n        returns (address addr)\n    {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(\n            addr != address(0),\n            \"Test deployCode(string,uint256): Deployment failed.\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                    STD-ASSERTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function fail(string memory err) internal virtual {\n        emit log_named_string(\"Error\", err);\n        fail();\n    }\n\n    function assertFalse(bool data) internal virtual {\n        assertTrue(!data);\n    }\n\n    function assertFalse(bool data, string memory err) internal virtual {\n        assertTrue(!data, err);\n    }\n\n    function assertEq(bool a, bool b) internal {\n        if (a != b) {\n            emit log                (\"Error: a == b not satisfied [bool]\");\n            emit log_named_string   (\"  Expected\", b ? \"true\" : \"false\");\n            emit log_named_string   (\"    Actual\", a ? \"true\" : \"false\");\n            fail();\n        }\n    }\n\n    function assertEq(bool a, bool b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes memory a, bytes memory b) internal {\n        assertEq0(a, b);\n    }\n\n    function assertEq(bytes memory a, bytes memory b, string memory err) internal {\n        assertEq0(a, b, err);\n    }\n\n    function assertEq(uint256[] memory a, uint256[] memory b) internal {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log(\"Error: a == b not satisfied [uint[]]\");\n            emit log_named_array(\"  Expected\", b);\n            emit log_named_array(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq(int256[] memory a, int256[] memory b) internal {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log(\"Error: a == b not satisfied [int[]]\");\n            emit log_named_array(\"  Expected\", b);\n            emit log_named_array(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq(address[] memory a, address[] memory b) internal {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log(\"Error: a == b not satisfied [address[]]\");\n            emit log_named_array(\"  Expected\", b);\n            emit log_named_array(\"    Actual\", a);\n            fail();\n        }\n    }\n\n    function assertEq(uint256[] memory a, uint256[] memory b, string memory err) internal {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(int256[] memory a, int256[] memory b, string memory err) internal {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n\n    function assertEq(address[] memory a, address[] memory b, string memory err) internal {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEqUint(uint256 a, uint256 b) internal {\n        assertEq(uint256(a), uint256(b));\n    }\n\n    function assertApproxEqAbs(\n        uint256 a,\n        uint256 b,\n        uint256 maxDelta\n    ) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log            (\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint (\"  Expected\", b);\n            emit log_named_uint (\"    Actual\", a);\n            emit log_named_uint (\" Max Delta\", maxDelta);\n            emit log_named_uint (\"     Delta\", delta);\n            fail();\n        }\n    }\n\n    function assertApproxEqAbs(\n        uint256 a,\n        uint256 b,\n        uint256 maxDelta,\n        string memory err\n    ) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log_named_string   (\"Error\", err);\n            assertApproxEqAbs(a, b, maxDelta);\n        }\n    }\n\n    function assertApproxEqAbs(\n        int256 a,\n        int256 b,\n        uint256 maxDelta\n    ) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log            (\"Error: a ~= b not satisfied [int]\");\n            emit log_named_int  (\"  Expected\", b);\n            emit log_named_int  (\"    Actual\", a);\n            emit log_named_uint (\" Max Delta\", maxDelta);\n            emit log_named_uint (\"     Delta\", delta);\n            fail();\n        }\n    }\n\n    function assertApproxEqAbs(\n        int256 a,\n        int256 b,\n        uint256 maxDelta,\n        string memory err\n    ) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log_named_string   (\"Error\", err);\n            assertApproxEqAbs(a, b, maxDelta);\n        }\n    }\n\n    function assertApproxEqRel(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the expected is 0, actual must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log                    (\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint         (\"    Expected\", b);\n            emit log_named_uint         (\"      Actual\", a);\n            emit log_named_decimal_uint (\" Max % Delta\", maxPercentDelta, 18);\n            emit log_named_decimal_uint (\"     % Delta\", percentDelta, 18);\n            fail();\n        }\n    }\n\n    function assertApproxEqRel(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b, err); // If the expected is 0, actual must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string       (\"Error\", err);\n            assertApproxEqRel(a, b, maxPercentDelta);\n        }\n    }\n\n    function assertApproxEqRel(\n        int256 a,\n        int256 b,\n        uint256 maxPercentDelta\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the expected is 0, actual must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log                   (\"Error: a ~= b not satisfied [int]\");\n            emit log_named_int         (\"    Expected\", b);\n            emit log_named_int         (\"      Actual\", a);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta, 18);\n            fail();\n        }\n    }\n\n    function assertApproxEqRel(\n        int256 a,\n        int256 b,\n        uint256 maxPercentDelta,\n        string memory err\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the expected is 0, actual must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string      (\"Error\", err);\n            assertApproxEqRel(a, b, maxPercentDelta);\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              JSON PARSING\n    //////////////////////////////////////////////////////////////*/\n\n   // Data structures to parse Transaction objects from the broadcast artifact\n   // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n   // and then converted to the one that is used by the user for better UX.\n\n   struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n   // Data structures to parse Transaction objects from the broadcast artifact\n   // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n   // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy{\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy{\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList{\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        returns(EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs)\n        internal pure\n        returns (Tx1559[] memory)\n    {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx)\n        internal pure\n        returns (Tx1559 memory)\n    {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash= rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode= rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal pure\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = bytesToUint(rawDetail.nonce);\n        txDetail.txType = bytesToUint(rawDetail.txType);\n        txDetail.value = bytesToUint(rawDetail.value);\n        txDetail.gas = bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n\n    }\n\n    function readTx1559s(string memory path)\n        internal\n        returns (Tx1559[] memory)\n    {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData =\n            vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n\n    function readTx1559(string memory path, uint256 index)\n        internal\n        returns (Tx1559 memory)\n    {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\",vm.toString(index), \"]\"));\n        bytes memory parsedDeployData =\n            vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path)\n        internal\n        returns (Receipt[] memory)\n    {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint index)\n        internal\n        returns (Receipt memory)\n    {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\",vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts)\n        internal pure\n        returns(Receipt[] memory)\n    {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt)\n        internal pure\n        returns(Receipt memory)\n    {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed= bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = bytesToUint(rawReceipt.gasUsed);\n        receipt.status = bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal pure\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n\n    }\n\n    function bytesToUint(bytes memory b) internal pure returns (uint256){\n            uint256 number;\n            for (uint i=0; i < b.length; i++) {\n                number = number + uint(uint8(b[i]))*(2**(8*(b.length-(i+1))));\n            }\n        return number;\n    }\n\n}\n\n/*//////////////////////////////////////////////////////////////////////////\n                                STD-ERRORS\n//////////////////////////////////////////////////////////////////////////*/\n\nlibrary stdError {\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\n    // DEPRECATED: Use Vm's `expectRevert` without any arguments instead\n    bytes public constant lowLevelError = bytes(\"\"); // `0x`\n}\n\n/*//////////////////////////////////////////////////////////////////////////\n                                STD-STORAGE\n//////////////////////////////////////////////////////////////////////////*/\n\nstruct StdStorage {\n    mapping (address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\n    mapping (address => mapping(bytes4 =>  mapping(bytes32 => bool))) finds;\n\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n}\n\nlibrary stdStorage {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint slot);\n    event WARNING_UninitedSlot(address who, uint slot);\n\n    uint256 private constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n    int256 private constant INT256_MAX = 57896044618658097711785492504343953926634992332820282019728792003956564819967;\n\n    Vm private constant vm_std_store = Vm(address(uint160(uint256(keccak256('hevm cheat code')))));\n\n    function sigs(\n        string memory sigStr\n    )\n        internal\n        pure\n        returns (bytes4)\n    {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(\n        StdStorage storage self\n    )\n        internal\n        returns (uint256)\n    {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n        }\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        vm_std_store.record();\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32*field_depth);\n        }\n\n        (bytes32[] memory reads, ) = vm_std_store.accesses(address(who));\n        if (reads.length == 1) {\n            bytes32 curr = vm_std_store.load(who, reads[0]);\n            if (curr == bytes32(0)) {\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\n            }\n            if (fdat != curr) {\n                require(false, \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\");\n            }\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n        } else if (reads.length > 1) {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm_std_store.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n                // store\n                vm_std_store.store(who, reads[i], bytes32(hex\"1337\"));\n                bool success;\n                bytes memory rdat;\n                {\n                    (success, rdat) = who.staticcall(cald);\n                    fdat = bytesToBytes32(rdat, 32*field_depth);\n                }\n\n                if (success && fdat == bytes32(hex\"1337\")) {\n                    // we found which of the slots is the actual one\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n                    vm_std_store.store(who, reads[i], prev);\n                    break;\n                }\n                vm_std_store.store(who, reads[i], prev);\n            }\n        } else {\n            require(false, \"stdStorage find(StdStorage): No storage use detected for target.\");\n        }\n\n        require(self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))], \"stdStorage find(StdStorage): Slot(s) not found.\");\n\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(\n        StdStorage storage self,\n        bytes32 set\n    ) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            find(self);\n        }\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\n\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32*field_depth);\n        }\n        bytes32 curr = vm_std_store.load(who, slot);\n\n        if (fdat != curr) {\n            require(false, \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\");\n        }\n        vm_std_store.store(who, slot, set);\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        address t = self._target;\n        uint256 s = find(self);\n        return abi.encode(vm_std_store.load(t, bytes32(s)));\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function bytesToBytes32(bytes memory b, uint offset) public pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory)\n    {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n\n\n}\n\n\n/*//////////////////////////////////////////////////////////////////////////\n                                STD-MATH\n//////////////////////////////////////////////////////////////////////////*/\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN)\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b\n            ? a - b\n            : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/forge-std/src/Script.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\nimport \"./console.sol\";\nimport \"./console2.sol\";\nimport \"./StdJson.sol\";\n\nabstract contract Script {\n    bool public IS_SCRIPT = true;\n    address constant private VM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    Vm public constant vm = Vm(VM_ADDRESS);\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapated from Solmate implementation (https://github.com/transmissions11/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure returns (address) {\n        // The integer zero is treated as an empty byte string, and as a result it only has a length prefix, 0x80, computed via 0x80 + 0.\n        // A one byte integer uses its own value as its length prefix, there is no additional \"0x80 + length\" prefix that comes before it.\n        if (nonce == 0x00)             return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, bytes1(0x80))));\n        if (nonce <= 0x7f)             return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, uint8(nonce))));\n\n        // Nonces greater than 1 byte all follow a consistent encoding scheme, where each value is preceded by a prefix of 0x80 + length.\n        if (nonce <= 2**8 - 1)  return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployer, bytes1(0x81), uint8(nonce))));\n        if (nonce <= 2**16 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployer, bytes1(0x82), uint16(nonce))));\n        if (nonce <= 2**24 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployer, bytes1(0x83), uint24(nonce))));\n\n        // More details about RLP encoding can be found here: https://eth.wiki/fundamentals/rlp\n        // 0xda = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x84 ++ nonce)\n        // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n        // 0x84 = 0x80 + 0x04 (0x04 = the bytes length of the nonce, 4 bytes, in hex)\n        // We assume nobody can have a nonce large enough to require more than 32 bytes.\n        return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xda), bytes1(0x94), deployer, bytes1(0x84), uint32(nonce))));\n    }\n\n    function addressFromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index) internal returns (address who, uint256 privateKey) {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/forge-std/lib/ds-test/src/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.5.0;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool private _failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function failed() public returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            bool globalFailed = false;\n            if (hasHEVMContext()) {\n                (, bytes memory retdata) = HEVM_ADDRESS.call(\n                    abi.encodePacked(\n                        bytes4(keccak256(\"load(address,bytes32)\")),\n                        abi.encode(HEVM_ADDRESS, bytes32(\"failed\"))\n                    )\n                );\n                globalFailed = abi.decode(retdata, (bool));\n            }\n            return globalFailed;\n        }\n    }\n\n    function fail() internal virtual {\n        if (hasHEVMContext()) {\n            (bool status, ) = HEVM_ADDRESS.call(\n                abi.encodePacked(\n                    bytes4(keccak256(\"store(address,bytes32,bytes32)\")),\n                    abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01)))\n                )\n            );\n            status; // Silence compiler warnings\n        }\n        _failed = true;\n    }\n\n    function hasHEVMContext() internal view returns (bool) {\n        uint256 hevmCodeSize = 0;\n        assembly {\n            hevmCodeSize := extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\n        }\n        return hevmCodeSize > 0;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"      Left\", a);\n            emit log_named_address(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"      Left\", a);\n            emit log_named_bytes32(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"      Left\", a);\n            emit log_named_int(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"      Left\", a);\n            emit log_named_uint(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"      Left\", a, decimals);\n            emit log_named_decimal_int(\"     Right\", b, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertNotEq(address a, address b) internal {\n        if (a == b) {\n            emit log(\"Error: a != b not satisfied [address]\");\n            emit log_named_address(\"      Left\", a);\n            emit log_named_address(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertNotEq(address a, address b, string memory err) internal {\n        if (a == b) {\n            emit log_named_string (\"Error\", err);\n            assertNotEq(a, b);\n        }\n    }\n\n    function assertNotEq(bytes32 a, bytes32 b) internal {\n        if (a == b) {\n            emit log(\"Error: a != b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"      Left\", a);\n            emit log_named_bytes32(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertNotEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a == b) {\n            emit log_named_string (\"Error\", err);\n            assertNotEq(a, b);\n        }\n    }\n    function assertNotEq32(bytes32 a, bytes32 b) internal {\n        assertNotEq(a, b);\n    }\n    function assertNotEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertNotEq(a, b, err);\n    }\n\n    function assertNotEq(int a, int b) internal {\n        if (a == b) {\n            emit log(\"Error: a != b not satisfied [int]\");\n            emit log_named_int(\"      Left\", a);\n            emit log_named_int(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertNotEq(int a, int b, string memory err) internal {\n        if (a == b) {\n            emit log_named_string(\"Error\", err);\n            assertNotEq(a, b);\n        }\n    }\n    function assertNotEq(uint a, uint b) internal {\n        if (a == b) {\n            emit log(\"Error: a != b not satisfied [uint]\");\n            emit log_named_uint(\"      Left\", a);\n            emit log_named_uint(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertNotEq(uint a, uint b, string memory err) internal {\n        if (a == b) {\n            emit log_named_string(\"Error\", err);\n            assertNotEq(a, b);\n        }\n    }\n    function assertNotEqDecimal(int a, int b, uint decimals) internal {\n        if (a == b) {\n            emit log(\"Error: a != b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"      Left\", a, decimals);\n            emit log_named_decimal_int(\"     Right\", b, decimals);\n            fail();\n        }\n    }\n    function assertNotEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a == b) {\n            emit log_named_string(\"Error\", err);\n            assertNotEqDecimal(a, b, decimals);\n        }\n    }\n    function assertNotEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a == b) {\n            emit log(\"Error: a != b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\n            fail();\n        }\n    }\n    function assertNotEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a == b) {\n            emit log_named_string(\"Error\", err);\n            assertNotEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"      Left\", a);\n            emit log_named_string(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertNotEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a != b not satisfied [string]\");\n            emit log_named_string(\"      Left\", a);\n            emit log_named_string(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertNotEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertNotEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"      Left\", a);\n            emit log_named_bytes(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n\n    function assertNotEq0(bytes memory a, bytes memory b) internal {\n        if (checkEq0(a, b)) {\n            emit log(\"Error: a != b not satisfied [bytes]\");\n            emit log_named_bytes(\"      Left\", a);\n            emit log_named_bytes(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertNotEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertNotEq0(a, b);\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/forge-std/src/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
    },
    "submodules/v2-foundry/lib/forge-std/src/StdJson.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\nimport \"./Vm.sol\";\n\n// Helpers for parsing keys into types.\nlibrary stdJson {\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key)\n        internal\n        returns (bytes memory)\n    {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key)\n        internal\n        returns (uint256)\n    {\n        return abi.decode(vm.parseJson(json, key), (uint256));\n    }\n\n    function readUintArray(string memory json, string memory key)\n        internal\n        returns (uint256[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (uint256[]));\n    }\n\n    function readInt(string memory json, string memory key)\n        internal\n        returns (int256)\n    {\n        return abi.decode(vm.parseJson(json, key), (int256));\n    }\n\n    function readIntArray(string memory json, string memory key)\n        internal\n        returns (int256[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (int256[]));\n    }\n\n    function readBytes32(string memory json, string memory key)\n        internal\n        returns (bytes32)\n    {\n        return abi.decode(vm.parseJson(json, key), (bytes32));\n    }\n\n    function readBytes32Array(string memory json, string memory key)\n        internal\n        returns (bytes32[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (bytes32[]));\n    }\n\n    function readString(string memory json, string memory key)\n        internal\n        returns (string memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (string));\n    }\n\n    function readStringArray(string memory json, string memory key)\n        internal\n        returns (string[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (string[]));\n    }\n\n    function readAddress(string memory json, string memory key)\n        internal\n        returns (address)\n    {\n        return abi.decode(vm.parseJson(json, key), (address));\n    }\n\n    function readAddressArray(string memory json, string memory key)\n        internal\n        returns (address[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (address[]));\n    }\n\n    function readBool(string memory json, string memory key)\n        internal\n        returns (bool)\n    {\n        return abi.decode(vm.parseJson(json, key), (bool));\n    }\n\n    function readBoolArray(string memory json, string memory key)\n        internal\n        returns (bool[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (bool[]));\n    }\n\n    function readBytes(string memory json, string memory key)\n        internal\n        returns (bytes memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (bytes));\n    }\n\n    function readBytesArray(string memory json, string memory key)\n        internal\n        returns (bytes[] memory)\n    {\n        return abi.decode(vm.parseJson(json, key), (bytes[]));\n    }\n\n\n}\n"
    },
    "submodules/v2-foundry/lib/forge-std/src/console2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n// The orignal console.sol uses `int` and `uint` for computing function selectors, but it should\n// use `int256` and `uint256`. This modified version fixes that. This version is recommended\n// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\n// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\n// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\n\nlibrary console2 {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
    },
    "submodules/v2-foundry/lib/forge-std/src/Vm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\ninterface Vm {\n    struct Log {\n        bytes32[] topics;\n        bytes data;\n    }\n\n    // Sets block.timestamp (newTimestamp)\n    function warp(uint256) external;\n    // Sets block.height (newHeight)\n    function roll(uint256) external;\n    // Sets block.basefee (newBasefee)\n    function fee(uint256) external;\n    // Sets block.difficulty (newDifficulty)\n    function difficulty(uint256) external;\n    // Sets block.chainid\n    function chainId(uint256) external;\n    // Loads a storage slot from an address (who, slot)\n    function load(address,bytes32) external returns (bytes32);\n    // Stores a value to an address' storage slot, (who, slot, value)\n    function store(address,bytes32,bytes32) external;\n    // Signs data, (privateKey, digest) => (v, r, s)\n    function sign(uint256,bytes32) external returns (uint8,bytes32,bytes32);\n    // Gets the address for a given private key, (privateKey) => (address)\n    function addr(uint256) external returns (address);\n    // Gets the nonce of an account\n    function getNonce(address) external returns (uint64);\n    // Sets the nonce of an account; must be higher than the current nonce of the account\n    function setNonce(address, uint64) external;\n    // Performs a foreign function call via the terminal, (stringInputs) => (result)\n    function ffi(string[] calldata) external returns (bytes memory);\n    // Sets environment variables, (name, value)\n    function setEnv(string calldata, string calldata) external;\n    // Reads environment variables, (name) => (value)\n    function envBool(string calldata) external returns (bool);\n    function envUint(string calldata) external returns (uint256);\n    function envInt(string calldata) external returns (int256);\n    function envAddress(string calldata) external returns (address);\n    function envBytes32(string calldata) external returns (bytes32);\n    function envString(string calldata) external returns (string memory);\n    function envBytes(string calldata) external returns (bytes memory);\n    // Reads environment variables as arrays, (name, delim) => (value[])\n    function envBool(string calldata, string calldata) external returns (bool[] memory);\n    function envUint(string calldata, string calldata) external returns (uint256[] memory);\n    function envInt(string calldata, string calldata) external returns (int256[] memory);\n    function envAddress(string calldata, string calldata) external returns (address[] memory);\n    function envBytes32(string calldata, string calldata) external returns (bytes32[] memory);\n    function envString(string calldata, string calldata) external returns (string[] memory);\n    function envBytes(string calldata, string calldata) external returns (bytes[] memory);\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address) external;\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\n    function prank(address,address) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\n    function startPrank(address,address) external;\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n    // Sets an address' balance, (who, newBalance)\n    function deal(address, uint256) external;\n    // Sets an address' code, (who, newCode)\n    function etch(address, bytes calldata) external;\n    // Expects an error on next call\n    function expectRevert(bytes calldata) external;\n    function expectRevert(bytes4) external;\n    function expectRevert() external;\n    // Records all storage reads and writes\n    function record() external;\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans)\n    function expectEmit(bool,bool,bool,bool) external;\n    function expectEmit(bool,bool,bool,bool,address) external;\n    // Mocks a call to an address, returning specified data.\n    // Calldata can either be strict or a partial match, e.g. if you only\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\n    // function will be mocked.\n    function mockCall(address,bytes calldata,bytes calldata) external;\n    // Mocks a call to an address with a specific msg.value, returning specified data.\n    // Calldata match takes precedence over msg.value in case of ambiguity.\n    function mockCall(address,uint256,bytes calldata,bytes calldata) external;\n    // Clears all mocked calls\n    function clearMockedCalls() external;\n    // Expects a call to an address with the specified calldata.\n    // Calldata can either be a strict or a partial match\n    function expectCall(address,bytes calldata) external;\n    // Expects a call to an address with the specified msg.value and calldata\n    function expectCall(address,uint256,bytes calldata) external;\n    // Gets the _creation_ bytecode from an artifact file. Takes in the relative path to the json file\n    function getCode(string calldata) external returns (bytes memory);\n    // Gets the _deployed_ bytecode from an artifact file. Takes in the relative path to the json file\n    function getDeployedCode(string calldata) external returns (bytes memory);\n    // Labels an address in call traces\n    function label(address, string calldata) external;\n    // If the condition is false, discard this run's fuzz inputs and generate new ones\n    function assume(bool) external;\n    // Sets block.coinbase (who)\n    function coinbase(address) external;\n    // Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain\n    function broadcast() external;\n    // Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain\n    function broadcast(address) external;\n    // Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain\n    function broadcast(uint256) external;\n    // Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain\n    function startBroadcast() external;\n    // Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain\n    function startBroadcast(address) external;\n    // Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain\n    function startBroadcast(uint256) external;\n    // Stops collecting onchain transactions\n    function stopBroadcast() external;\n\n    // Reads the entire content of file to string, (path) => (data)\n    function readFile(string calldata) external returns (string memory);\n    // Reads the entire content of file as binary. Path is relative to the project root. (path) => (data)\n    function readFileBinary(string calldata) external returns (bytes memory);\n    // Get the path of the current project root\n    function projectRoot() external returns (string memory);\n    // Reads next line of file to string, (path) => (line)\n    function readLine(string calldata) external returns (string memory);\n    // Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    // (path, data) => ()\n    function writeFile(string calldata, string calldata) external;\n    // Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    // Path is relative to the project root. (path, data) => ()\n    function writeFileBinary(string calldata, bytes calldata) external;\n    // Writes line to file, creating a file if it does not exist.\n    // (path, data) => ()\n    function writeLine(string calldata, string calldata) external;\n    // Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    // (path) => ()\n    function closeFile(string calldata) external;\n    // Removes file. This cheatcode will revert in the following situations, but is not limited to just these cases:\n    // - Path points to a directory.\n    // - The file doesn't exist.\n    // - The user lacks permissions to remove the file.\n    // (path) => ()\n    function removeFile(string calldata) external;\n\n    // Convert values to a string, (value) => (stringified value)\n    function toString(address) external returns(string memory);\n    function toString(bytes calldata) external returns(string memory);\n    function toString(bytes32) external returns(string memory);\n    function toString(bool) external returns(string memory);\n    function toString(uint256) external returns(string memory);\n    function toString(int256) external returns(string memory);\n\n    // Convert values from a string, (string) => (parsed value)\n    function parseBytes(string calldata) external returns (bytes memory);\n    function parseAddress(string calldata) external returns (address);\n    function parseUint(string calldata) external returns (uint256);\n    function parseInt(string calldata) external returns (int256);\n    function parseBytes32(string calldata) external returns (bytes32);\n    function parseBool(string calldata) external returns (bool);\n\n    // Record all the transaction logs\n    function recordLogs() external;\n    // Gets all the recorded logs, () => (logs)\n    function getRecordedLogs() external returns (Log[] memory);\n    // Snapshot the current state of the evm.\n    // Returns the id of the snapshot that was created.\n    // To revert a snapshot use `revertTo`\n    function snapshot() external returns(uint256);\n    // Revert the state of the evm to a previous snapshot\n    // Takes the snapshot id to revert to.\n    // This deletes the snapshot and all snapshots taken after the given snapshot id.\n    function revertTo(uint256) external returns(bool);\n\n    // Creates a new fork with the given endpoint and block and returns the identifier of the fork\n    function createFork(string calldata,uint256) external returns(uint256);\n    // Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\n    function createFork(string calldata) external returns(uint256);\n    // Creates a new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction\n    function createFork(string calldata, bytes32) external returns (uint256);\n    // Creates _and_ also selects a new fork with the given endpoint and block and returns the identifier of the fork\n    function createSelectFork(string calldata,uint256) external returns(uint256);\n    // Creates _and_ also selects new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction\n    function createSelectFork(string calldata, bytes32) external returns (uint256);\n    // Creates _and_ also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork\n    function createSelectFork(string calldata) external returns(uint256);\n    // Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256) external;\n    /// Returns the currently active fork\n    /// Reverts if no fork is currently active\n    function activeFork() external returns(uint256);\n    // Updates the currently active fork to given block number\n    // This is similar to `roll` but for the currently active fork\n    function rollFork(uint256) external;\n    // Updates the currently active fork to given transaction\n    // this will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block\n    function rollFork(bytes32) external;\n    // Updates the given fork to given block number\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n    // Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block\n    function rollFork(uint256 forkId, bytes32 transaction) external;\n\n    // Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    // Meaning, changes made to the state of this account will be kept when switching forks\n    function makePersistent(address) external;\n    function makePersistent(address, address) external;\n    function makePersistent(address, address, address) external;\n    function makePersistent(address[] calldata) external;\n    // Revokes persistent status from the address, previously added via `makePersistent`\n    function revokePersistent(address) external;\n    function revokePersistent(address[] calldata) external;\n    // Returns true if the account is marked as persistent\n    function isPersistent(address) external returns (bool);\n\n    // In forking mode, explicitly grant the given address cheatcode access\n    function allowCheatcodes(address) external;\n\n    // Fetches the given transaction from the active fork and executes it on the current state\n    function transact(bytes32 txHash) external;\n    // Fetches the given transaction from the given fork and executes it on the current state\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    // Returns the RPC url for the given alias\n    function rpcUrl(string calldata) external returns(string memory);\n    // Returns all rpc urls and their aliases `[alias, url][]`\n    function rpcUrls() external returns(string[2][] memory);\n\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}\n    function deriveKey(string calldata, uint32) external returns (uint256);\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path {path}{index}\n    function deriveKey(string calldata, string calldata, uint32) external returns (uint256);\n    // Adds a private key to the local forge wallet and returns the address\n    function rememberKey(uint256) external returns (address);\n\n    // parseJson\n\n    // Given a string of JSON, return the ABI-encoded value of provided key\n    // (stringified json, key) => (ABI-encoded data)\n    // Read the note below!\n    function parseJson(string calldata, string calldata) external returns(bytes memory);\n\n    // Given a string of JSON, return it as ABI-encoded, (stringified json, key) => (ABI-encoded data)\n    // Read the note below!\n    function parseJson(string calldata) external returns(bytes memory);\n\n    // Note:\n    // ----\n    // In case the returned value is a JSON object, it's encoded as a ABI-encoded tuple. As JSON objects\n    // don't have the notion of ordered, but tuples do, they JSON object is encoded with it's fields ordered in\n    // ALPHABETICAL ordser. That means that in order to succesfully decode the tuple, we need to define a tuple that\n    // encodes the fields in the same order, which is alphabetical. In the case of Solidity structs, they are encoded\n    // as tuples, with the attributes in the order in which they are defined.\n    // For example: json = { 'a': 1, 'b': 0xa4tb......3xs}\n    // a: uint256\n    // b: address\n    // To decode that json, we need to define a struct or a tuple as follows:\n    // struct json = { uint256 a; address b; }\n    // If we defined a json struct with the opposite order, meaning placing the address b first, it would try to\n    // decode the tuple in that order, and thus fail.\n\n}\n"
    },
    "submodules/v2-foundry/src/base/Errors.sol": {
      "content": "pragma solidity ^0.8.13;\n\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\n///         `msg.origin` is not authorized.\nerror Unauthorized();\n\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\n///         or entered an illegal condition which is not recoverable from.\nerror IllegalState();\n\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\n///         to the function.\nerror IllegalArgument();"
    },
    "submodules/v2-foundry/src/base/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.13;\n\n/// @title  Multicall\n/// @author Uniswap Labs\n///\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall {\n    error MulticallFailed(bytes data, bytes result);\n\n    function multicall(\n        bytes[] calldata data\n    ) external payable returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; ++i) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                revert MulticallFailed(data[i], result);\n            }\n\n            results[i] = result;\n        }\n    }\n}"
    },
    "submodules/v2-foundry/src/base/Mutex.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.13;\n\n/// @title  Mutex\n/// @author Alchemix Finance\n///\n/// @notice Provides a mutual exclusion lock for implementing contracts.\nabstract contract Mutex {\n    /// @notice An error which is thrown when a lock is attempted to be claimed before it has been freed.\n    error LockAlreadyClaimed();\n\n    /// @notice The lock state. Non-zero values indicate the lock has been claimed.\n    uint256 private _lockState;\n\n    /// @dev A modifier which acquires the mutex.\n    modifier lock() {\n        _claimLock();\n\n        _;\n\n        _freeLock();\n    }\n\n    /// @dev Gets if the mutex is locked.\n    ///\n    /// @return if the mutex is locked.\n    function _isLocked() internal returns (bool) {\n        return _lockState == 1;\n    }\n\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\n    function _claimLock() internal {\n        // Check that the lock has not been claimed yet.\n        if (_lockState != 0) {\n            revert LockAlreadyClaimed();\n        }\n\n        // Claim the lock.\n        _lockState = 1;\n    }\n\n    /// @dev Frees the lock.\n    function _freeLock() internal {\n        _lockState = 0;\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IERC20TokenReceiver.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IERC20TokenReceiver\n/// @author Alchemix Finance\ninterface IERC20TokenReceiver {\n    /// @notice Informs implementors of this interface that an ERC20 token has been transferred.\n    ///\n    /// @param token The token that was transferred.\n    /// @param value The amount of the token that was transferred.\n    function onERC20Received(address token, uint256 value) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/IAlchemicToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @title  IAlchemicToken\n/// @author Alchemix Finance\ninterface IAlchemicToken is IERC20 {\n  /// @notice Gets the total amount of minted tokens for an account.\n  ///\n  /// @param account The address of the account.\n  ///\n  /// @return The total minted.\n  function hasMinted(address account) external view returns (uint256);\n\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\n  ///\n  /// This reverts if the `msg.sender` is not whitelisted.\n  ///\n  /// @param amount The amount to lower the minted amount by.\n  function lowerHasMinted(uint256 amount) external;\n\n  /// @notice Sets the mint allowance for a given account'\n  ///\n  /// This reverts if the `msg.sender` is not admin\n  ///\n  /// @param toSetCeiling The account whos allowance to update\n  /// @param ceiling      The amount of tokens allowed to mint\n  function setCeiling(address toSetCeiling, uint256 ceiling) external;\n\n  /// @notice Updates the state of an address in the whitelist map\n  ///\n  /// This reverts if msg.sender is not admin\n  ///\n  /// @param toWhitelist the address whos state is being updated\n  /// @param state the boolean state of the whitelist\n  function setWhitelist(address toWhitelist, bool state) external;\n\n  function mint(address recipient, uint256 amount) external;\n\n  function burn(uint256 amount) external;\n\n  function burnFrom(address account, uint256 amount) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/IWhitelist.sol": {
      "content": "pragma solidity ^0.8.13;\n\n/// @title  Whitelist\n/// @author Alchemix Finance\ninterface IWhitelist {\n  /// @dev Emitted when a contract is added to the whitelist.\n  ///\n  /// @param account The account that was added to the whitelist.\n  event AccountAdded(address account);\n\n  /// @dev Emitted when a contract is removed from the whitelist.\n  ///\n  /// @param account The account that was removed from the whitelist.\n  event AccountRemoved(address account);\n\n  /// @dev Emitted when the whitelist is deactivated.\n  event WhitelistDisabled();\n\n  /// @dev Returns the list of addresses that are whitelisted for the given contract address.\n  ///\n  /// @return addresses The addresses that are whitelisted to interact with the given contract.\n  function getAddresses() external view returns (address[] memory addresses);\n\n  /// @dev Returns the disabled status of a given whitelist.\n  ///\n  /// @return disabled A flag denoting if the given whitelist is disabled.\n  function disabled() external view returns (bool);\n\n  /// @dev Adds an contract to the whitelist.\n  ///\n  /// @param caller The address to add to the whitelist.\n  function add(address caller) external;\n\n  /// @dev Adds a contract to the whitelist.\n  ///\n  /// @param caller The address to remove from the whitelist.\n  function remove(address caller) external;\n\n  /// @dev Disables the whitelist of the target whitelisted contract.\n  ///\n  /// This can only occur once. Once the whitelist is disabled, then it cannot be reenabled.\n  function disable() external;\n\n  /// @dev Checks that the `msg.sender` is whitelisted when it is not an EOA.\n  ///\n  /// @param account The account to check.\n  ///\n  /// @return whitelisted A flag denoting if the given account is whitelisted.\n  function isWhitelisted(address account) external view returns (bool);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/IRewardCollector.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface IRewardCollector {\n    /// @notice Gets the current version.\n    ///\n    /// @return The version.\n    function version() external view returns (string memory);\n\n    /// @notice Gets the current reward token.\n    ///\n    /// @return The reward token.\n    function rewardToken() external view returns (address);\n\n    /// @notice Gets the current swap router.\n    ///\n    /// @return The swap router address.\n    function swapRouter() external view returns (address);\n\n    /// @notice Gets the current debt token.\n    ///\n    /// @return The debt token\n    function debtToken() external view returns (address);\n\n    /// @notice Claims rewards tokens, swaps for alUSD.\n    ///\n    /// @param  token                The yield token to claim rewards for.\n    /// @param  minimumAmountOut     The minimum returns to accept.\n    ///\n    /// @return claimed              The amount of reward tokens claimed.\n    function claimAndDistributeRewards(address token, uint256 minimumAmountOut) external returns (uint256 claimed);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/vesper/IVesperRewards.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IVesperRewards {\n    function claimReward(address) external;\n\n    function claimable(address) external view returns (address[] memory, uint256[] memory);\n\n    function rewardTokens(uint256) external view returns (address);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVesperPool is IERC20 {\n    function deposit() external payable;\n\n    function deposit(uint256 _share) external;\n\n    function governor() external returns (address);\n\n    function keepers() external returns (address);\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts)\n        external\n        returns (bool);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external;\n\n    function resetApproval() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function withdrawETH(uint256 _amount) external;\n\n    function whitelistedWithdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function pricePerShare() external view returns (uint256);\n\n    function token() external view returns (address);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n\n    function withdrawFee() external view returns (uint256);\n\n    function poolRewards() external view returns (address);\n\n    function getStrategies() external view returns (address[] memory);\n}"
    },
    "submodules/v2-foundry/src/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IllegalArgument} from \"../base/Errors.sol\";\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n  /// @notice Cast a uint256 to a int256, revert on overflow\n  /// @param y The uint256 to be casted\n  /// @return z The casted integer, now type int256\n  function toInt256(uint256 y) internal pure returns (int256 z) {\n    if (y >= 2**255) {\n      revert IllegalArgument();\n    }\n    z = int256(y);\n  }\n\n  /// @notice Cast a int256 to a uint256, revert on underflow\n  /// @param y The int256 to be casted\n  /// @return z The casted integer, now type uint256\n  function toUint256(int256 y) internal pure returns (uint256 z) {\n    if (y < 0) {\n      revert IllegalArgument();\n    }\n    z = uint256(y);\n  }\n}\n"
    },
    "submodules/v2-foundry/src/libraries/Sets.sol": {
      "content": "pragma solidity ^0.8.13;\n\n/// @title  Sets\n/// @author Alchemix Finance\nlibrary Sets {\n    using Sets for AddressSet;\n\n    /// @notice A data structure holding an array of values with an index mapping for O(1) lookup.\n    struct AddressSet {\n        address[] values;\n        mapping(address => uint256) indexes;\n    }\n\n    /// @dev Add a value to a Set\n    ///\n    /// @param self  The Set.\n    /// @param value The value to add.\n    ///\n    /// @return Whether the operation was successful (unsuccessful if the value is already contained in the Set)\n    function add(AddressSet storage self, address value) internal returns (bool) {\n        if (self.contains(value)) {\n            return false;\n        }\n        self.values.push(value);\n        self.indexes[value] = self.values.length;\n        return true;\n    }\n\n    /// @dev Remove a value from a Set\n    ///\n    /// @param self  The Set.\n    /// @param value The value to remove.\n    ///\n    /// @return Whether the operation was successful (unsuccessful if the value was not contained in the Set)\n    function remove(AddressSet storage self, address value) internal returns (bool) {\n        uint256 index = self.indexes[value];\n        if (index == 0) {\n            return false;\n        }\n\n        // Normalize the index since we know that the element is in the set.\n        index--;\n\n        uint256 lastIndex = self.values.length - 1;\n\n        if (index != lastIndex) {\n            address lastValue = self.values[lastIndex];\n            self.values[index] = lastValue;\n            self.indexes[lastValue] = index + 1;\n        }\n\n        self.values.pop();\n\n        delete self.indexes[value];\n\n        return true;\n    }\n\n    /// @dev Returns true if the value exists in the Set\n    ///\n    /// @param self  The Set.\n    /// @param value The value to check.\n    ///\n    /// @return True if the value is contained in the Set, False if it is not.\n    function contains(AddressSet storage self, address value) internal view returns (bool) {\n        return self.indexes[value] != 0;\n    }\n}"
    },
    "submodules/v2-foundry/src/libraries/TokenUtils.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/IERC20Burnable.sol\";\nimport \"../interfaces/IERC20Mintable.sol\";\n\n/// @title  TokenUtils\n/// @author Alchemix Finance\nlibrary TokenUtils {\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\n    ///\n    /// @param target  The target address.\n    /// @param success If the call to the token was a success.\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\n    ///                this is malformed data when the call was a success.\n    error ERC20CallFailed(address target, bool success, bytes data);\n\n    /// @dev A safe function to get the decimals of an ERC20 token.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\n    ///\n    /// @param token The target token.\n    ///\n    /// @return The amount of decimals of the token.\n    function expectDecimals(address token) internal view returns (uint8) {\n        (bool success, bytes memory data) = token.staticcall(\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\n        );\n\n        if (token.code.length == 0 || !success || data.length < 32) {\n            revert ERC20CallFailed(token, success, data);\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Gets the balance of tokens held by an account.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\n    ///\n    /// @param token   The token to check the balance of.\n    /// @param account The address of the token holder.\n    ///\n    /// @return The balance of the tokens held by an account.\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\n        (bool success, bytes memory data) = token.staticcall(\n            abi.encodeWithSelector(IERC20.balanceOf.selector, account)\n        );\n\n        if (token.code.length == 0 || !success || data.length < 32) {\n            revert ERC20CallFailed(token, success, data);\n        }\n\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev Transfers tokens to another address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\n    ///\n    /// @param token     The token to transfer.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to transfer.\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\n        );\n\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Approves tokens for the smart contract.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\n    ///\n    /// @param token   The token to approve.\n    /// @param spender The contract to spend the tokens.\n    /// @param value   The amount of tokens to approve.\n    function safeApprove(address token, address spender, uint256 value) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Transfer tokens from one address to another address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\n    ///\n    /// @param token     The token to transfer.\n    /// @param owner     The address of the owner.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to transfer.\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\n        );\n\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Mints tokens to an address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\n    ///\n    /// @param token     The token to mint.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to mint.\n    function safeMint(address token, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\n        );\n\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Burns tokens.\n    ///\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\n    ///\n    /// @param token  The token to burn.\n    /// @param amount The amount of tokens to burn.\n    function safeBurn(address token, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\n        );\n\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Burns tokens from its total supply.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\n    ///\n    /// @param token  The token to burn.\n    /// @param owner  The owner of the tokens.\n    /// @param amount The amount of tokens to burn.\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\n        );\n\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n}"
    },
    "submodules/v2-foundry/src/libraries/Limiters.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {IllegalArgument} from \"../base/Errors.sol\";\n\n/// @title  Functions\n/// @author Alchemix Finance\nlibrary Limiters {\n    using Limiters for LinearGrowthLimiter;\n\n    /// @dev A maximum cooldown to avoid malicious governance bricking the contract.\n    /// @dev 1 day @ 12 sec / block\n    uint256 constant public MAX_COOLDOWN_BLOCKS = 1 days / 12 seconds;\n\n    /// @dev The scalar used to convert integral types to fixed point numbers.\n    uint256 constant public FIXED_POINT_SCALAR = 1e18;\n\n    /// @dev The configuration and state of a linear growth function (LGF).\n    struct LinearGrowthLimiter {\n        uint256 maximum;        /// The maximum limit of the function.\n        uint256 rate;           /// The rate at which the function increases back to its maximum.\n        uint256 lastValue;      /// The most recently saved value of the function.\n        uint256 lastBlock;      /// The block that `lastValue` was recorded.\n        uint256 minLimit;       /// A minimum limit to avoid malicious governance bricking the contract\n    }\n\n    /// @dev Instantiates a new linear growth function.\n    ///\n    /// @param maximum The maximum value for the LGF.\n    /// @param blocks  The number of blocks that determines the rate of the LGF.\n    /// @param _minLimit The new minimum limit of the LGF.\n    ///\n    /// @return The LGF struct.\n    function createLinearGrowthLimiter(uint256 maximum, uint256 blocks, uint256 _minLimit) internal view returns (LinearGrowthLimiter memory) {\n        if (blocks > MAX_COOLDOWN_BLOCKS) {\n            revert IllegalArgument();\n        }\n\n        if (maximum < _minLimit) {\n            revert IllegalArgument();\n        }\n\n        return LinearGrowthLimiter({\n            maximum: maximum,\n            rate: maximum * FIXED_POINT_SCALAR / blocks,\n            lastValue: maximum,\n            lastBlock: block.number,\n            minLimit: _minLimit\n        });\n    }\n\n    /// @dev Configure an LGF.\n    ///\n    /// @param self    The LGF to configure.\n    /// @param maximum The maximum value of the LFG.\n    /// @param blocks  The number of recovery blocks of the LGF.\n    function configure(LinearGrowthLimiter storage self, uint256 maximum, uint256 blocks) internal {\n        if (blocks > MAX_COOLDOWN_BLOCKS) {\n            revert IllegalArgument();\n        }\n\n        if (maximum < self.minLimit) {\n            revert IllegalArgument();\n        }\n\n        if (self.lastValue > maximum) {\n            self.lastValue = maximum;\n        }\n\n        self.maximum = maximum;\n        self.rate = maximum * FIXED_POINT_SCALAR / blocks;\n    }\n\n    /// @dev Updates the state of an LGF by updating `lastValue` and `lastBlock`.\n    ///\n    /// @param self the LGF to update.\n    function update(LinearGrowthLimiter storage self) internal {\n        self.lastValue = self.get();\n        self.lastBlock = block.number;\n    }\n\n    /// @dev Increase the value of the linear growth limiter.\n    ///\n    /// @param self   The linear growth limiter.\n    /// @param amount The amount to decrease `lastValue`.\n    function increase(LinearGrowthLimiter storage self, uint256 amount) internal {\n        uint256 value = self.get();\n        self.lastValue = value + amount;\n        self.lastBlock = block.number;\n    }\n\n    /// @dev Decrease the value of the linear growth limiter.\n    ///\n    /// @param self   The linear growth limiter.\n    /// @param amount The amount to decrease `lastValue`.\n    function decrease(LinearGrowthLimiter storage self, uint256 amount) internal {\n        uint256 value = self.get();\n        self.lastValue = value - amount;\n        self.lastBlock = block.number;\n    }\n\n    /// @dev Get the current value of the linear growth limiter.\n    ///\n    /// @return The current value.\n    function get(LinearGrowthLimiter storage self) internal view returns (uint256) {\n        uint256 elapsed = block.number - self.lastBlock;\n        if (elapsed == 0) {\n            return self.lastValue;\n        }\n        uint256 delta = elapsed * self.rate / FIXED_POINT_SCALAR;\n        uint256 value = self.lastValue + delta;\n        return value > self.maximum ? self.maximum : value;\n    }\n}"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/alchemist/IAlchemistV2Actions.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Actions\n/// @author Alchemix Finance\n///\n/// @notice Specifies user actions.\ninterface IAlchemistV2Actions {\n    /// @notice Approve `spender` to mint `amount` debt tokens.\n    ///\n    /// **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @param spender The address that will be approved to mint.\n    /// @param amount  The amount of tokens that `spender` will be allowed to mint.\n    function approveMint(address spender, uint256 amount) external;\n\n    /// @notice Approve `spender` to withdraw `amount` shares of `yieldToken`.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @param spender    The address that will be approved to withdraw.\n    /// @param yieldToken The address of the yield token that `spender` will be allowed to withdraw.\n    /// @param shares     The amount of shares that `spender` will be allowed to withdraw.\n    function approveWithdraw(\n        address spender,\n        address yieldToken,\n        uint256 shares\n    ) external;\n\n    /// @notice Synchronizes the state of the account owned by `owner`.\n    ///\n    /// @param owner The owner of the account to synchronize.\n    function poke(address owner) external;\n\n    /// @notice Deposit a yield token into a user's account.\n    ///\n    /// @notice An approval must be set for `yieldToken` which is greater than `amount`.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `yieldToken` must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `yieldToken` underlying token must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or the call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Deposit} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **_NOTE:_** When depositing, the `AlchemistV2` contract must have **allowance()** to spend funds on behalf of **msg.sender** for at least **amount** of the **yieldToken** being deposited.  This can be done via the standard `ERC20.approve()` method.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amount = 50000;\n    /// @notice IERC20(ydai).approve(alchemistAddress, amount);\n    /// @notice AlchemistV2(alchemistAddress).deposit(ydai, amount, msg.sender);\n    /// @notice ```\n    ///\n    /// @param yieldToken The yield-token to deposit.\n    /// @param amount     The amount of yield tokens to deposit.\n    /// @param recipient  The owner of the account that will receive the resulting shares.\n    ///\n    /// @return sharesIssued The number of shares issued to `recipient`.\n    function deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) external returns (uint256 sharesIssued);\n\n    /// @notice Deposit an underlying token into the account of `recipient` as `yieldToken`.\n    ///\n    /// @notice An approval must be set for the underlying token of `yieldToken` which is greater than `amount`.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or the call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Deposit} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** When depositing, the `AlchemistV2` contract must have **allowance()** to spend funds on behalf of **msg.sender** for at least **amount** of the **underlyingToken** being deposited.  This can be done via the standard `ERC20.approve()` method.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amount = 50000;\n    /// @notice AlchemistV2(alchemistAddress).depositUnderlying(ydai, amount, msg.sender, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken       The address of the yield token to wrap the underlying tokens into.\n    /// @param amount           The amount of the underlying token to deposit.\n    /// @param recipient        The address of the recipient.\n    /// @param minimumAmountOut The minimum amount of yield tokens that are expected to be deposited to `recipient`.\n    ///\n    /// @return sharesIssued The number of shares issued to `recipient`.\n    function depositUnderlying(\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external returns (uint256 sharesIssued);\n\n    /// @notice Withdraw yield tokens to `recipient` by burning `share` shares. The number of yield tokens withdrawn to `recipient` will depend on the value of shares for that yield token at the time of the call.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getYieldTokensPerShare(ydai);\n    /// @notice uint256 amtYieldTokens = 5000;\n    /// @notice AlchemistV2(alchemistAddress).withdraw(ydai, amtYieldTokens / pps, msg.sender);\n    /// @notice ```\n    ///\n    /// @param yieldToken The address of the yield token to withdraw.\n    /// @param shares     The number of shares to burn.\n    /// @param recipient  The address of the recipient.\n    ///\n    /// @return amountWithdrawn The number of yield tokens that were withdrawn to `recipient`.\n    function withdraw(\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Withdraw yield tokens to `recipient` by burning `share` shares from the account of `owner`\n    ///\n    /// @notice `owner` must have an withdrawal allowance which is greater than `amount` for this call to succeed.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getYieldTokensPerShare(ydai);\n    /// @notice uint256 amtYieldTokens = 5000;\n    /// @notice AlchemistV2(alchemistAddress).withdrawFrom(msg.sender, ydai, amtYieldTokens / pps, msg.sender);\n    /// @notice ```\n    ///\n    /// @param owner      The address of the account owner to withdraw from.\n    /// @param yieldToken The address of the yield token to withdraw.\n    /// @param shares     The number of shares to burn.\n    /// @param recipient  The address of the recipient.\n    ///\n    /// @return amountWithdrawn The number of yield tokens that were withdrawn to `recipient`.\n    function withdrawFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Withdraw underlying tokens to `recipient` by burning `share` shares and unwrapping the yield tokens that the shares were redeemed for.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice The loss in expected value of `yieldToken` must be less than the maximum permitted by the system or this call will revert with a {LossExceeded} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** The caller of `withdrawFrom()` must have **withdrawAllowance()** to withdraw funds on behalf of **owner** for at least the amount of `yieldTokens` that **shares** will be converted to.  This can be done via the `approveWithdraw()` or `permitWithdraw()` methods.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getUnderlyingTokensPerShare(ydai);\n    /// @notice uint256 amountUnderlyingTokens = 5000;\n    /// @notice AlchemistV2(alchemistAddress).withdrawUnderlying(ydai, amountUnderlyingTokens / pps, msg.sender, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken       The address of the yield token to withdraw.\n    /// @param shares           The number of shares to burn.\n    /// @param recipient        The address of the recipient.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    ///\n    /// @return amountWithdrawn The number of underlying tokens that were withdrawn to `recipient`.\n    function withdrawUnderlying(\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Withdraw underlying tokens to `recipient` by burning `share` shares from the account of `owner` and unwrapping the yield tokens that the shares were redeemed for.\n    ///\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice The loss in expected value of `yieldToken` must be less than the maximum permitted by the system or this call will revert with a {LossExceeded} error.\n    ///\n    /// @notice Emits a {Withdraw} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** The caller of `withdrawFrom()` must have **withdrawAllowance()** to withdraw funds on behalf of **owner** for at least the amount of `yieldTokens` that **shares** will be converted to.  This can be done via the `approveWithdraw()` or `permitWithdraw()` methods.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 pps = AlchemistV2(alchemistAddress).getUnderlyingTokensPerShare(ydai);\n    /// @notice uint256 amtUnderlyingTokens = 5000 * 10**ydai.decimals();\n    /// @notice AlchemistV2(alchemistAddress).withdrawUnderlying(msg.sender, ydai, amtUnderlyingTokens / pps, msg.sender, 1);\n    /// @notice ```\n    ///\n    /// @param owner            The address of the account owner to withdraw from.\n    /// @param yieldToken       The address of the yield token to withdraw.\n    /// @param shares           The number of shares to burn.\n    /// @param recipient        The address of the recipient.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    ///\n    /// @return amountWithdrawn The number of underlying tokens that were withdrawn to `recipient`.\n    function withdrawUnderlyingFrom(\n        address owner,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external returns (uint256 amountWithdrawn);\n\n    /// @notice Mint `amount` debt tokens.\n    ///\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Mint} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice uint256 amtDebt = 5000;\n    /// @notice AlchemistV2(alchemistAddress).mint(amtDebt, msg.sender);\n    /// @notice ```\n    ///\n    /// @param amount    The amount of tokens to mint.\n    /// @param recipient The address of the recipient.\n    function mint(uint256 amount, address recipient) external;\n\n    /// @notice Mint `amount` debt tokens from the account owned by `owner` to `recipient`.\n    ///\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    ///\n    /// @notice Emits a {Mint} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    /// @notice **_NOTE:_** The caller of `mintFrom()` must have **mintAllowance()** to mint debt from the `Account` controlled by **owner** for at least the amount of **yieldTokens** that **shares** will be converted to.  This can be done via the `approveMint()` or `permitMint()` methods.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice uint256 amtDebt = 5000;\n    /// @notice AlchemistV2(alchemistAddress).mintFrom(msg.sender, amtDebt, msg.sender);\n    /// @notice ```\n    ///\n    /// @param owner     The address of the owner of the account to mint from.\n    /// @param amount    The amount of tokens to mint.\n    /// @param recipient The address of the recipient.\n    function mintFrom(\n        address owner,\n        uint256 amount,\n        address recipient\n    ) external;\n\n    /// @notice Burn `amount` debt tokens to credit the account owned by `recipient`.\n    ///\n    /// @notice `amount` will be limited up to the amount of debt that `recipient` currently holds.\n    ///\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `recipient` must have non-zero debt or this call will revert with an {IllegalState} error.\n    ///\n    /// @notice Emits a {Burn} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice uint256 amtBurn = 5000;\n    /// @notice AlchemistV2(alchemistAddress).burn(amtBurn, msg.sender);\n    /// @notice ```\n    ///\n    /// @param amount    The amount of tokens to burn.\n    /// @param recipient The address of the recipient.\n    ///\n    /// @return amountBurned The amount of tokens that were burned.\n    function burn(uint256 amount, address recipient) external returns (uint256 amountBurned);\n\n    /// @notice Repay `amount` debt using `underlyingToken` to credit the account owned by `recipient`.\n    ///\n    /// @notice `amount` will be limited up to the amount of debt that `recipient` currently holds.\n    ///\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `recipient` must be non-zero or this call will revert with an {IllegalArgument} error.\n    /// @notice `underlyingToken` must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `amount` must be less than or equal to the current available repay limit or this call will revert with a {ReplayLimitExceeded} error.\n    ///\n    /// @notice Emits a {Repay} event.\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address dai = 0x6b175474e89094c44da98b954eedeac495271d0f;\n    /// @notice uint256 amtRepay = 5000;\n    /// @notice AlchemistV2(alchemistAddress).repay(dai, amtRepay, msg.sender);\n    /// @notice ```\n    ///\n    /// @param underlyingToken The address of the underlying token to repay.\n    /// @param amount          The amount of the underlying token to repay.\n    /// @param recipient       The address of the recipient which will receive credit.\n    ///\n    /// @return amountRepaid The amount of tokens that were repaid.\n    function repay(\n        address underlyingToken,\n        uint256 amount,\n        address recipient\n    ) external returns (uint256 amountRepaid);\n\n    /// @notice\n    ///\n    /// @notice `shares` will be limited up to an equal amount of debt that `recipient` currently holds.\n    ///\n    /// @notice `shares` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice `yieldToken` must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice `yieldToken` underlying token must be enabled or this call will revert with a {TokenDisabled} error.\n    /// @notice The loss in expected value of `yieldToken` must be less than the maximum permitted by the system or this call will revert with a {LossExceeded} error.\n    /// @notice `amount` must be less than or equal to the current available liquidation limit or this call will revert with a {LiquidationLimitExceeded} error.\n    ///\n    /// @notice Emits a {Liquidate} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amtSharesLiquidate = 5000 * 10**ydai.decimals();\n    /// @notice AlchemistV2(alchemistAddress).liquidate(ydai, amtSharesLiquidate, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken       The address of the yield token to liquidate.\n    /// @param shares           The number of shares to burn for credit.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be liquidated.\n    ///\n    /// @return sharesLiquidated The amount of shares that were liquidated.\n    function liquidate(\n        address yieldToken,\n        uint256 shares,\n        uint256 minimumAmountOut\n    ) external returns (uint256 sharesLiquidated);\n\n    /// @notice Burns `amount` debt tokens to credit accounts which have deposited `yieldToken`.\n    ///\n    /// @notice `amount` must be greater than zero or this call will revert with a {IllegalArgument} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    ///\n    /// @notice Emits a {Donate} event.\n    ///\n    /// @notice **_NOTE:_** This function is WHITELISTED.\n    ///\n    /// @notice **Example:**\n    /// @notice ```\n    /// @notice address ydai = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    /// @notice uint256 amtSharesLiquidate = 5000;\n    /// @notice AlchemistV2(alchemistAddress).liquidate(dai, amtSharesLiquidate, 1);\n    /// @notice ```\n    ///\n    /// @param yieldToken The address of the yield token to credit accounts for.\n    /// @param amount     The amount of debt tokens to burn.\n    function donate(address yieldToken, uint256 amount) external;\n\n    /// @notice Harvests outstanding yield that a yield token has accumulated and distributes it as credit to holders.\n    ///\n    /// @notice `msg.sender` must be a keeper or this call will revert with an {Unauthorized} error.\n    /// @notice `yieldToken` must be registered or this call will revert with a {UnsupportedToken} error.\n    /// @notice The amount being harvested must be greater than zero or else this call will revert with an {IllegalState} error.\n    ///\n    /// @notice Emits a {Harvest} event.\n    ///\n    /// @param yieldToken       The address of the yield token to harvest.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    function harvest(address yieldToken, uint256 minimumAmountOut) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/alchemist/IAlchemistV2Errors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Errors\n/// @author Alchemix Finance\n///\n/// @notice Specifies errors.\ninterface IAlchemistV2Errors {\n    /// @notice An error which is used to indicate that an operation failed because it tried to operate on a token that the system did not recognize.\n    ///\n    /// @param token The address of the token.\n    error UnsupportedToken(address token);\n\n    /// @notice An error which is used to indicate that an operation failed because it tried to operate on a token that has been disabled.\n    ///\n    /// @param token The address of the token.\n    error TokenDisabled(address token);\n\n    /// @notice An error which is used to indicate that an operation failed because an account became undercollateralized.\n    error Undercollateralized();\n\n    /// @notice An error which is used to indicate that an operation failed because the expected value of a yield token in the system exceeds the maximum value permitted.\n    ///\n    /// @param yieldToken           The address of the yield token.\n    /// @param expectedValue        The expected value measured in units of the underlying token.\n    /// @param maximumExpectedValue The maximum expected value permitted measured in units of the underlying token.\n    error ExpectedValueExceeded(address yieldToken, uint256 expectedValue, uint256 maximumExpectedValue);\n\n    /// @notice An error which is used to indicate that an operation failed because the loss that a yield token in the system exceeds the maximum value permitted.\n    ///\n    /// @param yieldToken  The address of the yield token.\n    /// @param loss        The amount of loss measured in basis points.\n    /// @param maximumLoss The maximum amount of loss permitted measured in basis points.\n    error LossExceeded(address yieldToken, uint256 loss, uint256 maximumLoss);\n\n    /// @notice An error which is used to indicate that a minting operation failed because the minting limit has been exceeded.\n    ///\n    /// @param amount    The amount of debt tokens that were requested to be minted.\n    /// @param available The amount of debt tokens which are available to mint.\n    error MintingLimitExceeded(uint256 amount, uint256 available);\n\n    /// @notice An error which is used to indicate that an repay operation failed because the repay limit for an underlying token has been exceeded.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of underlying tokens that were requested to be repaid.\n    /// @param available       The amount of underlying tokens that are available to be repaid.\n    error RepayLimitExceeded(address underlyingToken, uint256 amount, uint256 available);\n\n    /// @notice An error which is used to indicate that an repay operation failed because the liquidation limit for an underlying token has been exceeded.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param amount          The amount of underlying tokens that were requested to be liquidated.\n    /// @param available       The amount of underlying tokens that are available to be liquidated.\n    error LiquidationLimitExceeded(address underlyingToken, uint256 amount, uint256 available);\n\n    /// @notice An error which is used to indicate that the slippage of a wrap or unwrap operation was exceeded.\n    ///\n    /// @param amount           The amount of underlying or yield tokens returned by the operation.\n    /// @param minimumAmountOut The minimum amount of the underlying or yield token that was expected when performing\n    ///                         the operation.\n    error SlippageExceeded(uint256 amount, uint256 minimumAmountOut);\n}"
    },
    "submodules/v2-foundry/src/interfaces/alchemist/IAlchemistV2Immutables.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Immutables\n/// @author Alchemix Finance\ninterface IAlchemistV2Immutables {\n    /// @notice Returns the version of the alchemist.\n    ///\n    /// @return The version.\n    function version() external view returns (string memory);\n\n    /// @notice Returns the address of the debt token used by the system.\n    ///\n    /// @return The address of the debt token.\n    function debtToken() external view returns (address);\n}"
    },
    "submodules/v2-foundry/src/interfaces/alchemist/IAlchemistV2Events.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2Events\n/// @author Alchemix Finance\ninterface IAlchemistV2Events {\n    /// @notice Emitted when the pending admin is updated.\n    ///\n    /// @param pendingAdmin The address of the pending admin.\n    event PendingAdminUpdated(address pendingAdmin);\n\n    /// @notice Emitted when the administrator is updated.\n    ///\n    /// @param admin The address of the administrator.\n    event AdminUpdated(address admin);\n\n    /// @notice Emitted when an address is set or unset as a sentinel.\n    ///\n    /// @param sentinel The address of the sentinel.\n    /// @param flag     A flag indicating if `sentinel` was set or unset as a sentinel.\n    event SentinelSet(address sentinel, bool flag);\n\n    /// @notice Emitted when an address is set or unset as a keeper.\n    ///\n    /// @param sentinel The address of the keeper.\n    /// @param flag     A flag indicating if `keeper` was set or unset as a sentinel.\n    event KeeperSet(address sentinel, bool flag);\n\n    /// @notice Emitted when an underlying token is added.\n    ///\n    /// @param underlyingToken The address of the underlying token that was added.\n    event AddUnderlyingToken(address indexed underlyingToken);\n\n    /// @notice Emitted when a yield token is added.\n    ///\n    /// @param yieldToken The address of the yield token that was added.\n    event AddYieldToken(address indexed yieldToken);\n\n    /// @notice Emitted when an underlying token is enabled or disabled.\n    ///\n    /// @param underlyingToken The address of the underlying token that was enabled or disabled.\n    /// @param enabled         A flag indicating if the underlying token was enabled or disabled.\n    event UnderlyingTokenEnabled(address indexed underlyingToken, bool enabled);\n\n    /// @notice Emitted when an yield token is enabled or disabled.\n    ///\n    /// @param yieldToken The address of the yield token that was enabled or disabled.\n    /// @param enabled    A flag indicating if the yield token was enabled or disabled.\n    event YieldTokenEnabled(address indexed yieldToken, bool enabled);\n\n    /// @notice Emitted when the repay limit of an underlying token is updated.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param maximum         The updated maximum repay limit.\n    /// @param blocks          The updated number of blocks it will take for the maximum repayment limit to be replenished when it is completely exhausted.\n    event RepayLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\n\n    /// @notice Emitted when the liquidation limit of an underlying token is updated.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    /// @param maximum         The updated maximum liquidation limit.\n    /// @param blocks          The updated number of blocks it will take for the maximum liquidation limit to be replenished when it is completely exhausted.\n    event LiquidationLimitUpdated(address indexed underlyingToken, uint256 maximum, uint256 blocks);\n\n    /// @notice Emitted when the transmuter is updated.\n    ///\n    /// @param transmuter The updated address of the transmuter.\n    event TransmuterUpdated(address transmuter);\n\n    /// @notice Emitted when the minimum collateralization is updated.\n    ///\n    /// @param minimumCollateralization The updated minimum collateralization.\n    event MinimumCollateralizationUpdated(uint256 minimumCollateralization);\n\n    /// @notice Emitted when the protocol fee is updated.\n    ///\n    /// @param protocolFee The updated protocol fee.\n    event ProtocolFeeUpdated(uint256 protocolFee);\n    \n    /// @notice Emitted when the protocol fee receiver is updated.\n    ///\n    /// @param protocolFeeReceiver The updated address of the protocol fee receiver.\n    event ProtocolFeeReceiverUpdated(address protocolFeeReceiver);\n\n    /// @notice Emitted when the minting limit is updated.\n    ///\n    /// @param maximum The updated maximum minting limit.\n    /// @param blocks  The updated number of blocks it will take for the maximum minting limit to be replenished when it is completely exhausted.\n    event MintingLimitUpdated(uint256 maximum, uint256 blocks);\n\n    /// @notice Emitted when the credit unlock rate is updated.\n    ///\n    /// @param yieldToken The address of the yield token.\n    /// @param blocks     The number of blocks that distributed credit will unlock over.\n    event CreditUnlockRateUpdated(address yieldToken, uint256 blocks);\n\n    /// @notice Emitted when the adapter of a yield token is updated.\n    ///\n    /// @param yieldToken   The address of the yield token.\n    /// @param tokenAdapter The updated address of the token adapter.\n    event TokenAdapterUpdated(address yieldToken, address tokenAdapter);\n\n    /// @notice Emitted when the maximum expected value of a yield token is updated.\n    ///\n    /// @param yieldToken           The address of the yield token.\n    /// @param maximumExpectedValue The updated maximum expected value.\n    event MaximumExpectedValueUpdated(address indexed yieldToken, uint256 maximumExpectedValue);\n\n    /// @notice Emitted when the maximum loss of a yield token is updated.\n    ///\n    /// @param yieldToken  The address of the yield token.\n    /// @param maximumLoss The updated maximum loss.\n    event MaximumLossUpdated(address indexed yieldToken, uint256 maximumLoss);\n\n    /// @notice Emitted when the expected value of a yield token is snapped to its current value.\n    ///\n    /// @param yieldToken    The address of the yield token.\n    /// @param expectedValue The updated expected value measured in the yield token's underlying token.\n    event Snap(address indexed yieldToken, uint256 expectedValue);\n\n    /// @notice Emitted when a the admin sweeps all of one reward token from the Alchemist\n    ///\n    /// @param rewardToken The address of the reward token.\n    /// @param amount      The amount of 'rewardToken' swept into the admin.\n    event SweepRewardTokens(address indexed rewardToken, uint256 amount);\n\n    /// @notice Emitted when a the admin sweeps all of one token from the Alchemist\n    ///\n    /// @param token The address of the reward token.\n    /// @param amount      The amount of 'token' swept into the admin.\n    event SweepTokens(address indexed token, uint256 amount);\n\n    /// @notice Emitted when `owner` grants `spender` the ability to mint debt tokens on its behalf.\n    ///\n    /// @param owner   The address of the account owner.\n    /// @param spender The address which is being permitted to mint tokens on the behalf of `owner`.\n    /// @param amount  The amount of debt tokens that `spender` is allowed to mint.\n    event ApproveMint(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @notice Emitted when `owner` grants `spender` the ability to withdraw `yieldToken` from its account.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param spender    The address which is being permitted to mint tokens on the behalf of `owner`.\n    /// @param yieldToken The address of the yield token that `spender` is allowed to withdraw.\n    /// @param amount     The amount of shares of `yieldToken` that `spender` is allowed to withdraw.\n    event ApproveWithdraw(address indexed owner, address indexed spender, address indexed yieldToken, uint256 amount);\n\n    /// @notice Emitted when a user deposits `amount of `yieldToken` to `recipient`.\n    ///\n    /// @notice This event does not imply that `sender` directly deposited yield tokens. It is possible that the\n    ///         underlying tokens were wrapped.\n    ///\n    /// @param sender       The address of the user which deposited funds.\n    /// @param yieldToken   The address of the yield token that was deposited.\n    /// @param amount       The amount of yield tokens that were deposited.\n    /// @param recipient    The address that received the deposited funds.\n    event Deposit(address indexed sender, address indexed yieldToken, uint256 amount, address recipient);\n\n    /// @notice Emitted when `shares` shares of `yieldToken` are burned to withdraw `yieldToken` from the account owned\n    ///         by `owner` to `recipient`.\n    ///\n    /// @notice This event does not imply that `recipient` received yield tokens. It is possible that the yield tokens\n    ///         were unwrapped.\n    ///\n    /// @param owner      The address of the account owner.\n    /// @param yieldToken The address of the yield token that was withdrawn.\n    /// @param shares     The amount of shares that were burned.\n    /// @param recipient  The address that received the withdrawn funds.\n    event Withdraw(address indexed owner, address indexed yieldToken, uint256 shares, address recipient);\n\n    /// @notice Emitted when `amount` debt tokens are minted to `recipient` using the account owned by `owner`.\n    ///\n    /// @param owner     The address of the account owner.\n    /// @param amount    The amount of tokens that were minted.\n    /// @param recipient The recipient of the minted tokens.\n    event Mint(address indexed owner, uint256 amount, address recipient);\n\n    /// @notice Emitted when `sender` burns `amount` debt tokens to grant credit to `recipient`.\n    ///\n    /// @param sender    The address which is burning tokens.\n    /// @param amount    The amount of tokens that were burned.\n    /// @param recipient The address that received credit for the burned tokens.\n    event Burn(address indexed sender, uint256 amount, address recipient);\n\n    /// @notice Emitted when `amount` of `underlyingToken` are repaid to grant credit to `recipient`.\n    ///\n    /// @param sender          The address which is repaying tokens.\n    /// @param underlyingToken The address of the underlying token that was used to repay debt.\n    /// @param amount          The amount of the underlying token that was used to repay debt.\n    /// @param recipient       The address that received credit for the repaid tokens.\n    /// @param credit          The amount of debt that was paid-off to the account owned by owner.\n    event Repay(address indexed sender, address indexed underlyingToken, uint256 amount, address recipient, uint256 credit);\n\n    /// @notice Emitted when `sender` liquidates `share` shares of `yieldToken`.\n    ///\n    /// @param owner           The address of the account owner liquidating shares.\n    /// @param yieldToken      The address of the yield token.\n    /// @param underlyingToken The address of the underlying token.\n    /// @param shares          The amount of the shares of `yieldToken` that were liquidated.\n    /// @param credit          The amount of debt that was paid-off to the account owned by owner.\n    event Liquidate(address indexed owner, address indexed yieldToken, address indexed underlyingToken, uint256 shares, uint256 credit);\n\n    /// @notice Emitted when `sender` burns `amount` debt tokens to grant credit to users who have deposited `yieldToken`.\n    ///\n    /// @param sender     The address which burned debt tokens.\n    /// @param yieldToken The address of the yield token.\n    /// @param amount     The amount of debt tokens which were burned.\n    event Donate(address indexed sender, address indexed yieldToken, uint256 amount);\n\n    /// @notice Emitted when `yieldToken` is harvested.\n    ///\n    /// @param yieldToken       The address of the yield token that was harvested.\n    /// @param minimumAmountOut The maximum amount of loss that is acceptable when unwrapping the underlying tokens into yield tokens, measured in basis points.\n    /// @param totalHarvested   The total amount of underlying tokens harvested.\n    /// @param credit           The total amount of debt repaid to depositors of `yieldToken`.\n    event Harvest(address indexed yieldToken, uint256 minimumAmountOut, uint256 totalHarvested, uint256 credit);\n}"
    },
    "submodules/v2-foundry/src/interfaces/alchemist/IAlchemistV2State.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n/// @title  IAlchemistV2State\n/// @author Alchemix Finance\ninterface IAlchemistV2State {\n    /// @notice Defines underlying token parameters.\n    struct UnderlyingTokenParams {\n        // The number of decimals the token has. This value is cached once upon registering the token so it is important\n        // that the decimals of the token are immutable or the system will begin to have computation errors.\n        uint8 decimals;\n        // A coefficient used to normalize the token to a value comparable to the debt token. For example, if the\n        // underlying token is 8 decimals and the debt token is 18 decimals then the conversion factor will be\n        // 10^10. One unit of the underlying token will be comparably equal to one unit of the debt token.\n        uint256 conversionFactor;\n        // A flag to indicate if the token is enabled.\n        bool enabled;\n    }\n\n    /// @notice Defines yield token parameters.\n    struct YieldTokenParams {\n        // The number of decimals the token has. This value is cached once upon registering the token so it is important\n        // that the decimals of the token are immutable or the system will begin to have computation errors.\n        uint8 decimals;\n        // The associated underlying token that can be redeemed for the yield-token.\n        address underlyingToken;\n        // The adapter used by the system to wrap, unwrap, and lookup the conversion rate of this token into its\n        // underlying token.\n        address adapter;\n        // The maximum percentage loss that is acceptable before disabling certain actions.\n        uint256 maximumLoss;\n        // The maximum value of yield tokens that the system can hold, measured in units of the underlying token.\n        uint256 maximumExpectedValue;\n        // The percent of credit that will be unlocked per block. The representation of this value is a 18  decimal\n        // fixed point integer.\n        uint256 creditUnlockRate;\n        // The current balance of yield tokens which are held by users.\n        uint256 activeBalance;\n        // The current balance of yield tokens which are earmarked to be harvested by the system at a later time.\n        uint256 harvestableBalance;\n        // The total number of shares that have been minted for this token.\n        uint256 totalShares;\n        // The expected value of the tokens measured in underlying tokens. This value controls how much of the token\n        // can be harvested. When users deposit yield tokens, it increases the expected value by how much the tokens\n        // are exchangeable for in the underlying token. When users withdraw yield tokens, it decreases the expected\n        // value by how much the tokens are exchangeable for in the underlying token.\n        uint256 expectedValue;\n        // The current amount of credit which is will be distributed over time to depositors.\n        uint256 pendingCredit;\n        // The amount of the pending credit that has been distributed.\n        uint256 distributedCredit;\n        // The block number which the last credit distribution occurred.\n        uint256 lastDistributionBlock;\n        // The total accrued weight. This is used to calculate how much credit a user has been granted over time. The\n        // representation of this value is a 18 decimal fixed point integer.\n        uint256 accruedWeight;\n        // A flag to indicate if the token is enabled.\n        bool enabled;\n    }\n\n    /// @notice Gets the address of the admin.\n    ///\n    /// @return admin The admin address.\n    function admin() external view returns (address admin);\n\n    /// @notice Gets the address of the pending administrator.\n    ///\n    /// @return pendingAdmin The pending administrator address.\n    function pendingAdmin() external view returns (address pendingAdmin);\n\n    /// @notice Gets the address of the transfer adapter.\n    ///\n    /// @return transferAdapter The transfer adapter address.\n    function transferAdapter() external view returns (address transferAdapter);\n\n    /// @notice Gets if an address is a sentinel.\n    ///\n    /// @param sentinel The address to check.\n    ///\n    /// @return isSentinel If the address is a sentinel.\n    function sentinels(address sentinel) external view returns (bool isSentinel);\n\n    /// @notice Gets if an address is a keeper.\n    ///\n    /// @param keeper The address to check.\n    ///\n    /// @return isKeeper If the address is a keeper\n    function keepers(address keeper) external view returns (bool isKeeper);\n\n    /// @notice Gets the address of the transmuter.\n    ///\n    /// @return transmuter The transmuter address.\n    function transmuter() external view returns (address transmuter);\n\n    /// @notice Gets the minimum collateralization.\n    ///\n    /// @notice Collateralization is determined by taking the total value of collateral that a user has deposited into their account and dividing it their debt.\n    ///\n    /// @dev The value returned is a 18 decimal fixed point integer.\n    ///\n    /// @return minimumCollateralization The minimum collateralization.\n    function minimumCollateralization() external view returns (uint256 minimumCollateralization);\n\n    /// @notice Gets the protocol fee.\n    ///\n    /// @return protocolFee The protocol fee.\n    function protocolFee() external view returns (uint256 protocolFee);\n\n    /// @notice Gets the protocol fee receiver.\n    ///\n    /// @return protocolFeeReceiver The protocol fee receiver.\n    function protocolFeeReceiver() external view returns (address protocolFeeReceiver);\n\n    /// @notice Gets the address of the whitelist contract.\n    ///\n    /// @return whitelist The address of the whitelist contract.\n    function whitelist() external view returns (address whitelist);\n    \n    /// @notice Gets the conversion rate of underlying tokens per share.\n    ///\n    /// @param yieldToken The address of the yield token to get the conversion rate for.\n    ///\n    /// @return rate The rate of underlying tokens per share.\n    function getUnderlyingTokensPerShare(address yieldToken) external view returns (uint256 rate);\n\n    /// @notice Gets the conversion rate of yield tokens per share.\n    ///\n    /// @param yieldToken The address of the yield token to get the conversion rate for.\n    ///\n    /// @return rate The rate of yield tokens per share.\n    function getYieldTokensPerShare(address yieldToken) external view returns (uint256 rate);\n\n    /// @notice Gets the supported underlying tokens.\n    ///\n    /// @dev The order of the entries returned by this function is not guaranteed to be consistent between calls.\n    ///\n    /// @return tokens The supported underlying tokens.\n    function getSupportedUnderlyingTokens() external view returns (address[] memory tokens);\n\n    /// @notice Gets the supported yield tokens.\n    ///\n    /// @dev The order of the entries returned by this function is not guaranteed to be consistent between calls.\n    ///\n    /// @return tokens The supported yield tokens.\n    function getSupportedYieldTokens() external view returns (address[] memory tokens);\n\n    /// @notice Gets if an underlying token is supported.\n    ///\n    /// @param underlyingToken The address of the underlying token to check.\n    ///\n    /// @return isSupported If the underlying token is supported.\n    function isSupportedUnderlyingToken(address underlyingToken) external view returns (bool isSupported);\n\n    /// @notice Gets if a yield token is supported.\n    ///\n    /// @param yieldToken The address of the yield token to check.\n    ///\n    /// @return isSupported If the yield token is supported.\n    function isSupportedYieldToken(address yieldToken) external view returns (bool isSupported);\n\n    /// @notice Gets information about the account owned by `owner`.\n    ///\n    /// @param owner The address that owns the account.\n    ///\n    /// @return debt            The unrealized amount of debt that the account had incurred.\n    /// @return depositedTokens The yield tokens that the owner has deposited.\n    function accounts(address owner) external view returns (int256 debt, address[] memory depositedTokens);\n\n    /// @notice Gets information about a yield token position for the account owned by `owner`.\n    ///\n    /// @param owner      The address that owns the account.\n    /// @param yieldToken The address of the yield token to get the position of.\n    ///\n    /// @return shares            The amount of shares of that `owner` owns of the yield token.\n    /// @return lastAccruedWeight The last recorded accrued weight of the yield token.\n    function positions(address owner, address yieldToken)\n        external view\n        returns (\n            uint256 shares,\n            uint256 lastAccruedWeight\n        );\n\n    /// @notice Gets the amount of debt tokens `spender` is allowed to mint on behalf of `owner`.\n    ///\n    /// @param owner   The owner of the account.\n    /// @param spender The address which is allowed to mint on behalf of `owner`.\n    ///\n    /// @return allowance The amount of debt tokens that `spender` can mint on behalf of `owner`.\n    function mintAllowance(address owner, address spender) external view returns (uint256 allowance);\n\n    /// @notice Gets the amount of shares of `yieldToken` that `spender` is allowed to withdraw on behalf of `owner`.\n    ///\n    /// @param owner      The owner of the account.\n    /// @param spender    The address which is allowed to withdraw on behalf of `owner`.\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return allowance The amount of shares that `spender` can withdraw on behalf of `owner`.\n    function withdrawAllowance(address owner, address spender, address yieldToken) external view returns (uint256 allowance);\n\n    /// @notice Gets the parameters of an underlying token.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    ///\n    /// @return params The underlying token parameters.\n    function getUnderlyingTokenParameters(address underlyingToken)\n        external view\n        returns (UnderlyingTokenParams memory params);\n\n    /// @notice Get the parameters and state of a yield-token.\n    ///\n    /// @param yieldToken The address of the yield token.\n    ///\n    /// @return params The yield token parameters.\n    function getYieldTokenParameters(address yieldToken)\n        external view\n        returns (YieldTokenParams memory params);\n\n    /// @notice Gets current limit, maximum, and rate of the minting limiter.\n    ///\n    /// @return currentLimit The current amount of debt tokens that can be minted.\n    /// @return rate         The maximum possible amount of tokens that can be liquidated at a time.\n    /// @return maximum      The highest possible maximum amount of debt tokens that can be minted at a time.\n    function getMintLimitInfo()\n        external view\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        );\n\n    /// @notice Gets current limit, maximum, and rate of a repay limiter for `underlyingToken`.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    ///\n    /// @return currentLimit The current amount of underlying tokens that can be repaid.\n    /// @return rate         The rate at which the the current limit increases back to its maximum in tokens per block.\n    /// @return maximum      The maximum possible amount of tokens that can be repaid at a time.\n    function getRepayLimitInfo(address underlyingToken)\n        external view\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        );\n\n    /// @notice Gets current limit, maximum, and rate of the liquidation limiter for `underlyingToken`.\n    ///\n    /// @param underlyingToken The address of the underlying token.\n    ///\n    /// @return currentLimit The current amount of underlying tokens that can be liquidated.\n    /// @return rate         The rate at which the function increases back to its maximum limit (tokens / block).\n    /// @return maximum      The highest possible maximum amount of debt tokens that can be liquidated at a time.\n    function getLiquidationLimitInfo(address underlyingToken)\n        external view\n        returns (\n            uint256 currentLimit,\n            uint256 rate,\n            uint256 maximum\n        );\n}"
    },
    "submodules/v2-foundry/src/interfaces/IERC20Burnable.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @title  IERC20Burnable\n/// @author Alchemix Finance\ninterface IERC20Burnable is IERC20 {\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\n    ///\n    /// @param amount The amount of tokens to burn.\n    ///\n    /// @return If burning the tokens was successful.\n    function burn(uint256 amount) external returns (bool);\n\n    /// @notice Burns `amount` tokens from `owner`'s balance.\n    ///\n    /// @param owner  The address to burn tokens from.\n    /// @param amount The amount of tokens to burn.\n    ///\n    /// @return If burning the tokens was successful.\n    function burnFrom(address owner, uint256 amount) external returns (bool);\n}"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC3156FlashBorrower.sol\";\n\n/**\n * @dev Interface of the ERC3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * _Available since v4.1._\n */\ninterface IERC3156FlashLender {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC3156FlashBorrower.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * _Available since v4.1._\n */\ninterface IERC3156FlashBorrower {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"IERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/transmuter/ITransmuterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\n/// @title ITransmuterV2\n/// @author Alchemix Finance\ninterface ITransmuterV2 {\n  /// @notice Emitted when the admin address is updated.\n  ///\n  /// @param admin The new admin address.\n  event AdminUpdated(address admin);\n\n  /// @notice Emitted when the pending admin address is updated.\n  ///\n  /// @param pendingAdmin The new pending admin address.\n  event PendingAdminUpdated(address pendingAdmin);\n\n  /// @notice Emitted when the system is paused or unpaused.\n  ///\n  /// @param flag `true` if the system has been paused, `false` otherwise.\n  event Paused(bool flag);\n\n  /// @dev Emitted when a deposit is performed.\n  ///\n  /// @param sender The address of the depositor.\n  /// @param owner  The address of the account that received the deposit.\n  /// @param amount The amount of tokens deposited.\n  event Deposit(\n    address indexed sender,\n    address indexed owner,\n    uint256 amount\n  );\n\n  /// @dev Emitted when a withdraw is performed.\n  ///\n  /// @param sender    The address of the `msg.sender` executing the withdraw.\n  /// @param recipient The address of the account that received the withdrawn tokens.\n  /// @param amount    The amount of tokens withdrawn.\n  event Withdraw(\n    address indexed sender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @dev Emitted when a claim is performed.\n  ///\n  /// @param sender    The address of the claimer / account owner.\n  /// @param recipient The address of the account that received the claimed tokens.\n  /// @param amount    The amount of tokens claimed.\n  event Claim(\n    address indexed sender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  /// @dev Emitted when an exchange is performed.\n  ///\n  /// @param sender The address that called `exchange()`.\n  /// @param amount The amount of tokens exchanged.\n  event Exchange(\n    address indexed sender,\n    uint256 amount\n  );\n\n  /// @dev Emitted when a collateral source is set.\n  ///\n  /// @param newCollateralSource The new collateral source.\n  event SetNewCollateralSource(\n    address newCollateralSource\n  );\n\n  /// @notice Gets the version.\n  ///\n  /// @return The version.\n  function version() external view returns (string memory);\n\n  /// @dev Gets the supported underlying token.\n  ///\n  /// @return The underlying token.\n  function underlyingToken() external view returns (address);\n\n  /// @notice Gets the address of the whitelist contract.\n  ///\n  /// @return whitelist The address of the whitelist contract.\n  function whitelist() external view returns (address whitelist);\n\n  /// @dev Gets the unexchanged balance of an account.\n  ///\n  /// @param owner The address of the account owner.\n  ///\n  /// @return The unexchanged balance.\n  function getUnexchangedBalance(address owner) external view returns (uint256);\n\n  /// @dev Gets the exchanged balance of an account, in units of `debtToken`.\n  ///\n  /// @param owner The address of the account owner.\n  ///\n  /// @return The exchanged balance.\n  function getExchangedBalance(address owner) external view returns (uint256);\n\n  /// @dev Gets the claimable balance of an account, in units of `underlyingToken`.\n  ///\n  /// @param owner The address of the account owner.\n  ///\n  /// @return The claimable balance.\n  function getClaimableBalance(address owner) external view returns (uint256);\n\n  /// @dev The conversion factor used to convert between underlying token amounts and debt token amounts.\n  ///\n  /// @return The conversion factor.\n  function conversionFactor() external view returns (uint256);\n\n  /// @dev Deposits tokens to be exchanged into an account.\n  ///\n  /// @param amount The amount of tokens to deposit.\n  /// @param owner  The owner of the account to deposit the tokens into.\n  function deposit(uint256 amount, address owner) external;\n\n  /// @dev Withdraws tokens from the caller's account that were previously deposited to be exchanged.\n  ///\n  /// @param amount    The amount of tokens to withdraw.\n  /// @param recipient The address which will receive the withdrawn tokens.\n  function withdraw(uint256 amount, address recipient) external;\n\n  /// @dev Claims exchanged tokens.\n  ///\n  /// @param amount    The amount of tokens to claim.\n  /// @param recipient The address which will receive the claimed tokens.\n  function claim(uint256 amount, address recipient) external;\n\n  /// @dev Exchanges `amount` underlying tokens for `amount` synthetic tokens staked in the system.\n  ///\n  /// @param amount The amount of tokens to exchange.\n  function exchange(uint256 amount) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/transmuter/ITransmuterBuffer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./ITransmuterV2.sol\";\nimport \"../IAlchemistV2.sol\";\nimport \"../IERC20TokenReceiver.sol\";\n\n/// @title  ITransmuterBuffer\n/// @author Alchemix Finance\ninterface ITransmuterBuffer is IERC20TokenReceiver {\n  /// @notice Parameters used to define a given weighting schema.\n  ///\n  /// Weighting schemas can be used to generally weight assets in relation to an action or actions that will be taken.\n  /// In the TransmuterBuffer, there are 2 actions that require weighting schemas: `burnCredit` and `depositFunds`.\n  ///\n  /// `burnCredit` uses a weighting schema that determines which yield-tokens are targeted when burning credit from\n  /// the `Account` controlled by the TransmuterBuffer, via the `Alchemist.donate` function.\n  ///\n  /// `depositFunds` uses a weighting schema that determines which yield-tokens are targeted when depositing\n  /// underlying-tokens into the Alchemist.\n  struct Weighting {\n    // The weights of the tokens used by the schema.\n    mapping(address => uint256) weights;\n    // The tokens used by the schema.\n    address[] tokens;\n    // The total weight of the schema (sum of the token weights).\n    uint256 totalWeight;\n  }\n\n  /// @notice Emitted when the alchemist is set.\n  ///\n  /// @param alchemist The address of the alchemist.\n  event SetAlchemist(address alchemist);\n\n  /// @notice Emitted when the amo is set.\n  ///\n  /// @param underlyingToken The address of the underlying token.\n  /// @param amo             The address of the amo.\n  event SetAmo(address underlyingToken, address amo);\n\n  /// @notice Emitted when the the status of diverting to the amo is set for a given underlying token.\n  ///\n  /// @param underlyingToken The address of the underlying token.\n  /// @param divert          Whether or not to divert funds to the amo.\n  event SetDivertToAmo(address underlyingToken, bool divert);\n\n  /// @notice Emitted when an underlying token is registered.\n  ///\n  /// @param underlyingToken The address of the underlying token.\n  /// @param transmuter      The address of the transmuter for the underlying token.\n  event RegisterAsset(address underlyingToken, address transmuter);\n\n  /// @notice Emitted when an underlying token's flow rate is updated.\n  ///\n  /// @param underlyingToken The underlying token.\n  /// @param flowRate        The flow rate for the underlying token.\n  event SetFlowRate(address underlyingToken, uint256 flowRate);\n\n  /// @notice Emitted when the strategies are refreshed.\n  event RefreshStrategies();\n\n  /// @notice Emitted when a source is set.\n  event SetSource(address source, bool flag);\n\n  /// @notice Emitted when a transmuter is updated.\n  event SetTransmuter(address underlyingToken, address transmuter);\n\n  /// @notice Gets the current version.\n  ///\n  /// @return The version.\n  function version() external view returns (string memory);\n\n  /// @notice Gets the total credit held by the TransmuterBuffer.\n  ///\n  /// @return The total credit.\n  function getTotalCredit() external view returns (uint256);\n\n  /// @notice Gets the total amount of underlying token that the TransmuterBuffer controls in the Alchemist.\n  ///\n  /// @param underlyingToken The underlying token to query.\n  ///\n  /// @return totalBuffered The total buffered.\n  function getTotalUnderlyingBuffered(address underlyingToken) external view returns (uint256 totalBuffered);\n\n  /// @notice Gets the total available flow for the underlying token\n  ///\n  /// The total available flow will be the lesser of `flowAvailable[token]` and `getTotalUnderlyingBuffered`.\n  ///\n  /// @param underlyingToken The underlying token to query.\n  ///\n  /// @return availableFlow The available flow.\n  function getAvailableFlow(address underlyingToken) external view returns (uint256 availableFlow);\n\n  /// @notice Gets the weight of the given weight type and token\n  ///\n  /// @param weightToken The type of weight to query.\n  /// @param token       The weighted token.\n  ///\n  /// @return weight The weight of the token for the given weight type.\n  function getWeight(address weightToken, address token) external view returns (uint256 weight);\n\n  /// @notice Set a source of funds.\n  ///\n  /// @param source The target source.\n  /// @param flag   The status to set for the target source.\n  function setSource(address source, bool flag) external;\n\n  /// @notice Set transmuter by admin.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param underlyingToken The target underlying token to update.\n  /// @param newTransmuter   The new transmuter for the target `underlyingToken`.\n  function setTransmuter(address underlyingToken, address newTransmuter) external;\n\n  /// @notice Set alchemist by admin.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param alchemist The new alchemist whose funds we are handling.\n  function setAlchemist(address alchemist) external;\n\n  /// @notice Set the address of the amo for a target underlying token.\n  ///\n  /// @param underlyingToken The address of the underlying token to set.\n  /// @param amo The address of the underlying token's new amo.\n  function setAmo(address underlyingToken, address amo) external;\n\n  /// @notice Set whether or not to divert funds to the amo.\n  ///\n  /// @param underlyingToken The address of the underlying token to set.\n  /// @param divert          Whether or not to divert underlying token to the amo.\n  function setDivertToAmo(address underlyingToken, bool divert) external;\n\n  /// @notice Refresh the yield-tokens in the TransmuterBuffer.\n  ///\n  /// This requires a call anytime governance adds a new yield token to the alchemist.\n  function refreshStrategies() external;\n\n  /// @notice Registers an underlying-token.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param underlyingToken The underlying-token being registered.\n  /// @param transmuter      The transmuter for the underlying-token.\n  function registerAsset(address underlyingToken, address transmuter) external;\n\n  /// @notice Set flow rate of an underlying token.\n  ///\n  /// This function reverts if the caller is not the current admin.\n  ///\n  /// @param underlyingToken The underlying-token getting the flow rate set.\n  /// @param flowRate        The new flow rate.\n  function setFlowRate(address underlyingToken, uint256 flowRate) external;\n\n  /// @notice Sets up a weighting schema.\n  ///\n  /// @param weightToken The name of the weighting schema.\n  /// @param tokens      The yield-tokens to weight.\n  /// @param weights     The weights of the yield tokens.\n  function setWeights(address weightToken, address[] memory tokens, uint256[] memory weights) external;\n\n  /// @notice Exchanges any available flow into the Transmuter.\n  ///\n  /// This function is a way for the keeper to force funds to be exchanged into the Transmuter.\n  ///\n  /// This function will revert if called by any account that is not a keeper. If there is not enough local balance of\n  /// `underlyingToken` held by the TransmuterBuffer any additional funds will be withdrawn from the Alchemist by\n  /// unwrapping `yieldToken`.\n  ///\n  /// @param underlyingToken The address of the underlying token to exchange.\n  function exchange(address underlyingToken) external;\n\n  /// @notice Flushes funds to the amo.\n  ///\n  /// @param underlyingToken The underlying token to flush.\n  /// @param amount          The amount to flush.\n  function flushToAmo(address underlyingToken, uint256 amount) external;\n\n  /// @notice Burns available credit in the alchemist.\n  function burnCredit() external;\n\n  /// @notice Deposits local collateral into the alchemist\n  ///\n  /// @param underlyingToken The collateral to deposit.\n  /// @param amount          The amount to deposit.\n  function depositFunds(address underlyingToken, uint256 amount) external;\n\n  /// @notice Withdraws collateral from the alchemist\n  ///\n  /// This function reverts if:\n  /// - The caller is not the transmuter.\n  /// - There is not enough flow available to fulfill the request.\n  /// - There is not enough underlying collateral in the alchemist controlled by the buffer to fulfil the request.\n  ///\n  /// @param underlyingToken The underlying token to withdraw.\n  /// @param amount          The amount to withdraw.\n  /// @param recipient       The account receiving the withdrawn funds.\n  function withdraw(\n    address underlyingToken,\n    uint256 amount,\n    address recipient\n  ) external;\n\n  /// @notice Withdraws collateral from the alchemist\n  ///\n  /// @param yieldToken       The yield token to withdraw.\n  /// @param shares           The amount of Alchemist shares to withdraw.\n  /// @param minimumAmountOut The minimum amount of underlying tokens needed to be received as a result of unwrapping the yield tokens.\n  function withdrawFromAlchemist(\n    address yieldToken,\n    uint256 shares,\n    uint256 minimumAmountOut\n  ) external;\n}\n"
    },
    "submodules/v2-foundry/src/libraries/FixedPointMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\n/**\n * @notice A library which implements fixed point decimal math.\n */\nlibrary FixedPointMath {\n  /** @dev This will give approximately 60 bits of precision */\n  uint256 public constant DECIMALS = 18;\n  uint256 public constant ONE = 10**DECIMALS;\n\n  /**\n   * @notice A struct representing a fixed point decimal.\n   */\n  struct Number {\n    uint256 n;\n  }\n\n  /**\n   * @notice Encodes a unsigned 256-bit integer into a fixed point decimal.\n   *\n   * @param value The value to encode.\n   * @return      The fixed point decimal representation.\n   */\n  function encode(uint256 value) internal pure returns (Number memory) {\n    return Number(FixedPointMath.encodeRaw(value));\n  }\n\n  /**\n   * @notice Encodes a unsigned 256-bit integer into a uint256 representation of a\n   *         fixed point decimal.\n   *\n   * @param value The value to encode.\n   * @return      The fixed point decimal representation.\n   */\n  function encodeRaw(uint256 value) internal pure returns (uint256) {\n    return value * ONE;\n  }\n\n  /**\n   * @notice Encodes a uint256 MAX VALUE into a uint256 representation of a\n   *         fixed point decimal.\n   *\n   * @return      The uint256 MAX VALUE fixed point decimal representation.\n   */\n  function max() internal pure returns (Number memory) {\n    return Number(type(uint256).max);\n  }\n\n  /**\n   * @notice Creates a rational fraction as a Number from 2 uint256 values\n   *\n   * @param n The numerator.\n   * @param d The denominator.\n   * @return  The fixed point decimal representation.\n   */\n  function rational(uint256 n, uint256 d) internal pure returns (Number memory) {\n    Number memory numerator = encode(n);\n    return FixedPointMath.div(numerator, d);\n  }\n\n  /**\n   * @notice Adds two fixed point decimal numbers together.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand.\n   * @return      The result.\n   */\n  function add(Number memory self, Number memory value) internal pure returns (Number memory) {\n    return Number(self.n + value.n);\n  }\n\n  /**\n   * @notice Adds a fixed point number to a unsigned 256-bit integer.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand. This will be converted to a fixed point decimal.\n   * @return      The result.\n   */\n  function add(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return add(self, FixedPointMath.encode(value));\n  }\n\n  /**\n   * @notice Subtract a fixed point decimal from another.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand.\n   * @return      The result.\n   */\n  function sub(Number memory self, Number memory value) internal pure returns (Number memory) {\n    return Number(self.n - value.n);\n  }\n\n  /**\n   * @notice Subtract a unsigned 256-bit integer from a fixed point decimal.\n   *\n   * @param self  The left hand operand.\n   * @param value The right hand operand. This will be converted to a fixed point decimal.\n   * @return      The result.\n   */\n  function sub(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return sub(self, FixedPointMath.encode(value));\n  }\n\n  /**\n   * @notice Multiplies a fixed point decimal by another fixed point decimal.\n   *\n   * @param self  The fixed point decimal to multiply.\n   * @param number The fixed point decimal to multiply by.\n   * @return      The result.\n   */\n  function mul(Number memory self, Number memory number) internal pure returns (Number memory) {\n    return Number((self.n * number.n) / ONE);\n  }\n\n  /**\n   * @notice Multiplies a fixed point decimal by an unsigned 256-bit integer.\n   *\n   * @param self  The fixed point decimal to multiply.\n   * @param value The unsigned 256-bit integer to multiply by.\n   * @return      The result.\n   */\n  function mul(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return Number(self.n * value);\n  }\n\n  /**\n   * @notice Divides a fixed point decimal by an unsigned 256-bit integer.\n   *\n   * @param self  The fixed point decimal to multiply by.\n   * @param value The unsigned 256-bit integer to divide by.\n   * @return      The result.\n   */\n  function div(Number memory self, uint256 value) internal pure returns (Number memory) {\n    return Number(self.n / value);\n  }\n\n  /**\n   * @notice Compares two fixed point decimals.\n   *\n   * @param self  The left hand number to compare.\n   * @param value The right hand number to compare.\n   * @return      When the left hand number is less than the right hand number this returns -1,\n   *              when the left hand number is greater than the right hand number this returns 1,\n   *              when they are equal this returns 0.\n   */\n  function cmp(Number memory self, Number memory value) internal pure returns (int256) {\n    if (self.n < value.n) {\n      return -1;\n    }\n\n    if (self.n > value.n) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @notice Gets if two fixed point numbers are equal.\n   *\n   * @param self  the first fixed point number.\n   * @param value the second fixed point number.\n   *\n   * @return if they are equal.\n   */\n  function equals(Number memory self, Number memory value) internal pure returns (bool) {\n    return self.n == value.n;\n  }\n\n  /**\n   * @notice Truncates a fixed point decimal into an unsigned 256-bit integer.\n   *\n   * @return The integer portion of the fixed point decimal.\n   */\n  function truncate(Number memory self) internal pure returns (uint256) {\n    return self.n / ONE;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport { IllegalArgument } from \"../base/Errors.sol\";\n\nimport { FixedPointMath } from \"./FixedPointMath.sol\";\n\n/// @title  LiquidityMath\n/// @author Alchemix Finance\nlibrary LiquidityMath {\n  using FixedPointMath for FixedPointMath.Number;\n\n  uint256 constant PRECISION = 1e18;\n\n  /// @dev Adds a signed delta to an unsigned integer.\n  ///\n  /// @param  x The unsigned value to add the delta to.\n  /// @param  y The signed delta value to add.\n  /// @return z The result.\n  function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\n    if (y < 0) {\n      if ((z = x - uint256(-y)) >= x) {\n        revert IllegalArgument();\n      }\n    } else {\n      if ((z = x + uint256(y)) < x) {\n        revert IllegalArgument();\n      }\n    }\n  }\n\n  /// @dev Calculate a uint256 representation of x * y using FixedPointMath\n  ///\n  /// @param  x The first factor\n  /// @param  y The second factor (fixed point)\n  /// @return z The resulting product, after truncation\n  function calculateProduct(uint256 x, FixedPointMath.Number memory y) internal pure returns (uint256 z) {\n    z = y.mul(x).truncate();\n  }\n\n  /// @notice normalises non 18 digit token values to 18 digits.\n  function normalizeValue(uint256 input, uint256 decimals) internal pure returns (uint256) {\n    return (input * PRECISION) / (10**decimals);\n  }\n\n  /// @notice denormalizes 18 digits back to a token's digits\n  function deNormalizeValue(uint256 input, uint256 decimals) internal pure returns (uint256) {\n    return (input * (10**decimals)) / PRECISION;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport {FixedPointMath} from \"./FixedPointMath.sol\";\n\nlibrary Tick {\n  using FixedPointMath for FixedPointMath.Number;\n\n  struct Info {\n    // The total number of unexchanged tokens that have been associated with this tick\n    uint256 totalBalance;\n    // The accumulated weight of the tick which is the sum of the previous ticks accumulated weight plus the weight\n    // that added at the time that this tick was created\n    FixedPointMath.Number accumulatedWeight;\n    // The previous active node. When this value is zero then there is no predecessor\n    uint256 prev;\n    // The next active node. When this value is zero then there is no successor\n    uint256 next;\n  }\n\n  struct Cache {\n    // The mapping which specifies the ticks in the buffer\n    mapping(uint256 => Info) values;\n    // The current tick which is being written to\n    uint256 position;\n    // The first tick which will be examined when iterating through the queue\n    uint256 head;\n    // The last tick which new nodes will be appended after\n    uint256 tail;\n  }\n\n  /// @dev Gets the next tick in the buffer.\n  ///\n  /// This increments the position in the buffer.\n  ///\n  /// @return The next tick.\n  function next(Tick.Cache storage self) internal returns (Tick.Info storage) {\n    ++self.position;\n    return self.values[self.position];\n  }\n\n  /// @dev Gets the current tick being written to.\n  ///\n  /// @return The current tick.\n  function current(Tick.Cache storage self) internal view returns (Tick.Info storage) {\n    return self.values[self.position];\n  }\n\n  /// @dev Gets the nth tick in the buffer.\n  ///\n  /// @param self The reference to the buffer.\n  /// @param n    The nth tick to get.\n  function get(Tick.Cache storage self, uint256 n) internal view returns (Tick.Info storage) {\n    return self.values[n];\n  }\n\n  function getWeight(\n    Tick.Cache storage self,\n    uint256 from,\n    uint256 to\n  ) internal view returns (FixedPointMath.Number memory) {\n    Tick.Info storage startingTick = self.values[from];\n    Tick.Info storage endingTick = self.values[to];\n\n    FixedPointMath.Number memory startingAccumulatedWeight = startingTick.accumulatedWeight;\n    FixedPointMath.Number memory endingAccumulatedWeight = endingTick.accumulatedWeight;\n\n    return endingAccumulatedWeight.sub(startingAccumulatedWeight);\n  }\n\n  function addLast(Tick.Cache storage self, uint256 id) internal {\n    if (self.head == 0) {\n      self.head = self.tail = id;\n      return;\n    }\n\n    // Don't add the tick if it is already the tail. This has to occur after the check if the head\n    // is null since the tail may not be updated once the queue is made empty.\n    if (self.tail == id) {\n      return;\n    }\n\n    Tick.Info storage tick = self.values[id];\n    Tick.Info storage tail = self.values[self.tail];\n\n    tick.prev = self.tail;\n    tail.next = id;\n    self.tail = id;\n  }\n\n  function remove(Tick.Cache storage self, uint256 id) internal {\n    Tick.Info storage tick = self.values[id];\n\n    // Update the head if it is the tick we are removing.\n    if (self.head == id) {\n      self.head = tick.next;\n    }\n\n    // Update the tail if it is the tick we are removing.\n    if (self.tail == id) {\n      self.tail = tick.prev;\n    }\n\n    // Unlink the previously occupied tick from the next tick in the list.\n    if (tick.prev != 0) {\n      self.values[tick.prev].next = tick.next;\n    }\n\n    // Unlink the previously occupied tick from the next tick in the list.\n    if (tick.next != 0) {\n      self.values[tick.next].prev = tick.prev;\n    }\n\n    // Zero out the pointers.\n    // NOTE(nomad): This fixes the bug where the current accrued weight would get erased.\n    self.values[id].next = 0;\n    self.values[id].prev = 0;\n  }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/test/ITestYieldToken.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @title  ITestYieldToken\n/// @author Alchemix Finance\ninterface ITestYieldToken is IERC20 {\n    /// @notice Gets the address of underlying token that the yield token wraps.\n    ///\n    /// @return The underlying token address.\n    function underlyingToken() external view returns (address);\n\n    /// @notice Gets the conversion rate of one whole unit of this token for the underlying token.\n    ///\n    /// @return The price.\n    function price() external view returns (uint256);\n\n    /// @notice Mints an amount of yield tokens from `amount` underlying tokens and transfers them to `recipient`.\n    ///\n    /// @param amount    The amount of underlying tokens.\n    /// @param recipient The address which will receive the minted yield tokens.\n    ///\n    /// @return The amount of minted yield tokens.\n    function mint(uint256 amount, address recipient) external returns (uint256);\n\n    /// @notice Redeems yield tokens for underlying tokens.\n    ///\n    /// @param amount    The amount of yield tokens to redeem.\n    /// @param recipient The address which will receive the redeemed underlying tokens.\n    ///\n    /// @return The amount of underlying tokens that the yield tokens were redeemed for.\n    function redeem(uint256 amount, address recipient) external returns (uint256);\n\n    /// @notice Simulates an atomic harvest of `amount` underlying tokens.\n    ///\n    /// @param amount The amount of the underlying token.\n    function slurp(uint256 amount) external;\n\n    /// @notice Simulates an atomic loss of `amount` underlying tokens.\n    ///\n    /// @param amount The amount of the underlying token.\n    function siphon(uint256 amount) external;\n}\n"
    },
    "submodules/v2-foundry/src/test/utils/Invariants.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport { Functionalities } from \"./Functionalities.sol\";\n\nimport { IERC20 } from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport { AlchemistV2 } from \"../../AlchemistV2.sol\";\n\ncontract Invariants is Functionalities {\n\t/* Invariant A1: Assume all CDPs are fully updated (using _poke) and no rounding errors. */\n\t/* Let m be the amount of debt tokens minted by the Alchemist, b the amount of debt tokens */\n\t/* burned by the Alchemist, d the sum of all debts in the Alchemist, and t the amount of */\n\t/* underlying tokens sent to the TransmuterBuffer from the Alchemist. Then, m = b + d + t. */\n\t/* Note that if a CDP has credit (negative debt) this amount is subtracted from d. */\n\tfunction invariantA1(\n\t\taddress[] calldata userList,\n\t\taddress yieldToken,\n\t\tuint256 tokensMinted,\n\t\tuint256 tokensBurned,\n\t\tuint256 sentToTransmuter\n\t) public {\n\t\temit log(\"Checking Invariant A1\");\n\n\t\tint256 debt;\n\t\tint256 debtsAccrued;\n\n\t\tfor (uint256 i = 0; i < userList.length; i++) {\n\t\t\t(debt, ) = alchemist.accounts(userList[i]);\n\t\t\tdebtsAccrued += debt;\n\t\t}\n\n\t\temit log(\"Eq with state variables\");\n\t\temit log_named_int(\"Tokens minted\", int256(tokensMinted));\n\t\temit log_named_int(\"Debts accured\", debtsAccrued);\n\t\temit log_named_int(\"The sum\", int256(tokensBurned) + debtsAccrued + int256(sentToTransmuter));\n\n\t\tassertEq(int256(tokensMinted), int256(tokensBurned) + debtsAccrued + int256(sentToTransmuter));\n\t}\n\n\t/* Invariant A2: The total number of shares of a yield token is equal to the sum */\n\t/* of the shares of that yield token over all CDPs. */\n\tfunction invariantA2(address[] calldata userList, address yieldToken) public {\n\t\temit log(\"Checking Invariant A2\");\n\n\t\tuint256 totalShares = alchemist.getYieldTokenParameters(yieldToken).totalShares;\n\t\tuint256 sumSharesCDPs;\n\t\tuint256 shares;\n\n\t\t// Sum of the shares of that yield token over all CDPs.\n\t\tfor (uint256 i = 0; i < userList.length; i++) {\n\t\t\t(shares, ) = alchemist.positions(userList[i], yieldToken);\n\t\t\tsumSharesCDPs += shares;\n\t\t}\n\n\t\tassertEq(totalShares, sumSharesCDPs);\n\t}\n\n\t/* Invariant A3: Let b be the balance and t the total number of shares of a given yield token. */\n\t/* Then, b ≤ t, and b = 0 if and only if t = 0 */\n\tfunction invariantA3(address[] calldata userList, address yieldToken) public {\n\t\temit log(\"Checking Invariant A3\");\n\n\t\tAlchemistV2.YieldTokenParams memory params = alchemist.getYieldTokenParameters(yieldToken);\n\n\t\tuint256 balance = params.activeBalance;\n\t\tuint256 totalShares = params.totalShares;\n\n\t\tassertLe(balance, totalShares);\n\n\t\tbool balanceIsZero = balance == 0;\n\t\tbool sharesIsZero = totalShares == 0;\n\t\tassertTrue(balanceIsZero == sharesIsZero);\n\t}\n\n\t/* Invariant A7: Assuming the price of a yield token never drops to 0, the expected value */\n\t/* of the yield token equals 0 only if its balance equals 0. */\n\tfunction invariantA7(address[] calldata userList, address yieldToken) public {\n\t\temit log(\"Checking Invariant A7\");\n\n\t\tuint256 priceYieldToken = tokenAdapter.price();\n\t\tAlchemistV2.YieldTokenParams memory params = alchemist.getYieldTokenParameters(yieldToken);\n\n\t\tif (priceYieldToken != 0) {\n\t\t\tif (params.expectedValue == 0) {\n\t\t\t\temit log_named_uint(\"expectedValue\", params.expectedValue);\n\t\t\t\temit log_named_uint(\"activeBalance\", params.activeBalance);\n\t\t\t\tassertEq(params.activeBalance, 0);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Invariant A8: If a yield token or its underlying token is not supported in the protocol, */\n\t/* then no user has any balance in that yield token. */\n\tfunction invariantA8(\n\t\taddress[] calldata userList,\n\t\taddress yieldToken,\n\t\taddress underlyingToken\n\t) public {\n\t\temit log(\"Checking Invariant A8\");\n\n\t\tuint256 sumSharesCDPs;\n\t\tuint256 shares = 0;\n\n\t\tif (!alchemist.isSupportedYieldToken(yieldToken) || !alchemist.isSupportedUnderlyingToken(underlyingToken)) {\n\t\t\t// Sum of the shares of that yield token over all CDPs.\n\t\t\tfor (uint256 i = 0; i < userList.length; i++) {\n\t\t\t\t(shares, ) = alchemist.positions(userList[i], yieldToken);\n\t\t\t\tsumSharesCDPs += shares;\n\t\t\t}\n\t\t}\n\t\tassertEq(sumSharesCDPs, 0);\n\t}\n\n\tfunction checkAllInvariants(\n\t\taddress[] calldata userList,\n\t\taddress fakeYieldToken,\n\t\taddress fakeUnderlyingToken,\n\t\tuint256 minted,\n\t\tuint256 burned,\n\t\tuint256 sentToTransmuter\n\t) public {\n\t\tinvariantA1(userList, fakeYieldToken, minted, burned, sentToTransmuter);\n\t\tinvariantA2(userList, fakeYieldToken);\n\t\tinvariantA3(userList, fakeYieldToken);\n\t\tinvariantA7(userList, fakeYieldToken);\n\t\tinvariantA8(userList, fakeYieldToken, fakeUnderlyingToken);\n\t}\n\n\t/* Invariant A1 with range assertions to account for rounding errors\n\t */\n\tfunction invariantA1Range(\n\t\taddress[] calldata userList,\n\t\taddress yieldToken,\n\t\tuint256 tokensMinted,\n\t\tuint256 tokensBurned,\n\t\tuint256 sentToTransmuter\n\t) public {\n\t\temit log(\"Checking Invariant A1 Range\");\n\n\t\tint256 debt;\n\t\tint256 debtsAccrued;\n\n\t\tfor (uint256 i = 0; i < userList.length; i++) {\n\t\t\t(debt, ) = alchemist.accounts(userList[i]);\n\t\t\tdebtsAccrued += debt;\n\t\t}\n\n\t\tint256 sum = int256(tokensBurned) + debtsAccrued + int256(sentToTransmuter);\n\n\t\temit log(\"Eq with state variables\");\n\t\temit log_named_int(\"Tokens minted\", int256(tokensMinted));\n\t\temit log_named_int(\"Debts accured\", debtsAccrued);\n\t\temit log_named_int(\"The sum\", sum);\n\n\t\tassertRelApproxEq(tokensMinted, uint256(sum), 300);\n\t}\n}\n"
    },
    "submodules/v2-foundry/src/utils/RewardCollectorVesper.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {TokenUtils} from \"../libraries/TokenUtils.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2State} from \"../interfaces/alchemist/IAlchemistV2State.sol\";\nimport {ICurveFactoryethpool} from \"../interfaces/ICurveFactoryethpool.sol\";\nimport {IStableMetaPool} from \"../interfaces/external/curve/IStableMetaPool.sol\";\nimport {ISwapRouter} from \"../interfaces/external/uniswap/ISwapRouter.sol\";\nimport {IVesperPool} from \"../interfaces/external/vesper/IVesperPool.sol\";\nimport {IVesperRewards} from \"../interfaces/external/vesper/IVesperRewards.sol\";\nimport {IWETH9} from \"../interfaces/external/IWETH9.sol\";\n\n\nimport {Unauthorized, IllegalState, IllegalArgument} from \"../base/ErrorMessages.sol\";\n\nimport \"../interfaces/IRewardCollector.sol\";\nimport \"../libraries/Sets.sol\";\nimport \"../libraries/TokenUtils.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address debtToken;\n    address rewardToken;\n    address swapRouter;\n}\n\n/// @title  RewardCollectorVesper\n/// @author Alchemix Finance\ncontract RewardCollectorVesper is IRewardCollector {\n    uint256 constant FIXED_POINT_SCALAR = 1e18;\n    uint256 constant BPS = 10000;\n    string public override version = \"1.0.0\";\n    address public alchemist;\n    address public debtToken;\n    address public override rewardToken;\n    address public override swapRouter;\n    address constant alUSD = 0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9;\n    address constant alETH = 0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6;\n    address constant curveFactoryPool = 0xC4C319E2D4d66CcA4464C0c2B32c9Bd23ebe784e;\n    address constant curveMetaPool = 0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c;\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    constructor(InitializationParams memory params) {\n        alchemist       = params.alchemist;\n        debtToken       = params.debtToken;\n        rewardToken     = params.rewardToken;\n        swapRouter      = params.swapRouter;\n    }\n\n    function claim(address yieldToken) external {\n        IVesperRewards(IVesperPool(yieldToken).poolRewards()).claimReward(address(this));\n    }\n\n    function claimAndDistributeRewards(address token, uint256 minimumAmountOut) external returns (uint256) {\n        IAlchemistV2(alchemist).sweepRewardTokens(rewardToken, token);\n\n        uint256 claimed = IERC20(rewardToken).balanceOf(address(this));\n        uint256 received;\n        \n        if (claimed == 0) return 0;\n\n        if (debtToken == alUSD) {\n            // Swap VSP -> WETH -> DAI\n            // As of now this will only swap DAI for alUSD in curve\n            // Possibly need to rotate which tokens get used\n            bytes memory swapPath = abi.encodePacked(rewardToken, uint24(3000), WETH, uint24(3000), DAI);\n\n            ISwapRouter.ExactInputParams memory params =\n                ISwapRouter.ExactInputParams({\n                    path: swapPath,\n                    recipient: address(this),\n                    amountIn: claimed,\n                    amountOutMinimum: minimumAmountOut\n                });\n\n            received = ISwapRouter(swapRouter).exactInput(params);\n            // Curve 3CRV + alUSD meta pool swap to alUSD\n            IStableMetaPool(curveMetaPool).exchange_underlying(1, 0, received, received * 9900 / BPS);\n        } else if (debtToken == alETH) {\n            // Swap VSP -> WETH\n            bytes memory swapPath = abi.encodePacked(rewardToken, uint24(3000), WETH);\n\n            ISwapRouter.ExactInputParams memory params =\n                ISwapRouter.ExactInputParams({\n                    path: swapPath,\n                    recipient: address(this),\n                    amountIn: claimed,\n                    amountOutMinimum: minimumAmountOut\n                });\n\n            received = ISwapRouter(swapRouter).exactInput(params);\n            IWETH9(WETH).withdraw(received);\n            // Curve alETH + ETH factory pool swap to alETH\n            ICurveFactoryethpool(curveFactoryPool).exchange{value: received}(0, 1, received, received * 9900 / BPS);\n        } else {\n            revert IllegalState(\"Reward collector `debtToken` is not supported\");\n        }\n\n        IAlchemistV2(alchemist).donate(token, IERC20(debtToken).balanceOf(address(this)));\n\n        return claimed;\n    }\n\n    receive() external payable {}\n}"
    },
    "submodules/v2-foundry/src/interfaces/ICurveFactoryethpool.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface ICurveFactoryethpool {\n    /// @notice Perform an exchange between two underlying coins\n    /// @dev Index values can be found via the `underlying_coins` public getter method\n    /// @param i Index value for the underlying coin to send\n    /// @param j Index valie of the underlying coin to recieve\n    /// @param dx Amount of `i` being exchanged\n    /// @param min_dy Minimum amount of `j` to receive\n    /// @return Actual amount of `j` received\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/curve/IStableMetaPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @dev TODO\nuint256 constant N_COINS = 2;\n\ninterface IStableMetaPool is IERC20 {\n    function get_balances() external view returns (uint256[N_COINS] memory);\n\n    function coins(uint256 index) external view returns (IERC20);\n\n    function A() external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function calc_token_amount(\n        uint256[N_COINS] calldata amounts,\n        bool deposit\n    ) external view returns (uint256 amount);\n\n    function add_liquidity(\n        uint256[N_COINS] calldata amounts,\n        uint256 minimumMintAmount\n    ) external returns (uint256 minted);\n\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\n\n    function get_dy_underlying(int128 i, int128 j, uint256 dx, uint256[N_COINS] calldata balances) external view returns (uint256 dy);\n\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minimumDy) external returns (uint256);\n\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minimumDy) external returns (uint256);\n\n    function remove_liquidity(uint256 amount, uint256[N_COINS] calldata minimumAmounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[N_COINS] calldata amounts,\n        uint256 maximumBurnAmount\n    ) external returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 tokenAmount,\n        int128 i,\n        uint256 minimumAmount\n    ) external returns (uint256);\n\n    function get_price_cumulative_last() external view returns (uint256[N_COINS] calldata);\n\n    function block_timestamp_last() external view returns (uint256);\n\n    function get_twap_balances(\n        uint256[N_COINS] calldata firstBalances,\n        uint256[N_COINS] calldata lastBalances,\n        uint256 timeElapsed\n    ) external view returns (uint256[N_COINS] calldata);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256[N_COINS] calldata balances\n    ) external view returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/uniswap/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title  ISwapRouter\n/// @author Uniswap Labs\n///\n/// @notice Functions for swapping tokens via Uniswap V3.\ninterface ISwapRouter {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token.\n  ///\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata.\n  ///\n  /// @return amountOut The amount of the received token\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n  struct ExactInputParams {\n    bytes path;\n    address recipient;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n  }\n\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path.\n  ///\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata.\n  ///\n  /// @return amountOut The amount of the received token\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n  struct ExactOutputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token.\n  ///\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata.\n  ///\n  /// @return amountIn The amount of the input token.\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n  struct ExactOutputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n  }\n\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed).\n  ///\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata.\n  ///\n  /// @return amountIn The amount of the input token\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n\n  /// @notice Ensures that the current (synthetic) tick over the path is no worse than\n  /// `maximumTickDivergence` ticks away from the average as of `secondsAgo`\n  /// @param path The path to fetch prices over\n  /// @param maximumTickDivergence The maximum number of ticks that the price can degrade by\n  /// @param secondsAgo The number of seconds ago to compute oracle prices against\n  function checkOracleSlippage(\n      bytes memory path,\n      uint24 maximumTickDivergence,\n      uint32 secondsAgo\n  ) external view;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/IWETH9.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../IERC20Metadata.sol\";\n\n/// @title IWETH9\ninterface IWETH9 is IERC20, IERC20Metadata {\n  /// @notice Deposits `msg.value` ethereum into the contract and mints `msg.value` tokens.\n  function deposit() external payable;\n\n  /// @notice Burns `amount` tokens to retrieve `amount` ethereum from the contract.\n  ///\n  /// @dev This version of WETH utilizes the `transfer` function which hard codes the amount of gas\n  ///      that is allowed to be utilized to be exactly 2300 when receiving ethereum.\n  ///\n  /// @param amount The amount of tokens to burn.\n  function withdraw(uint256 amount) external;\n}"
    },
    "submodules/v2-foundry/src/base/ErrorMessages.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.4;\n\n/// @notice An error used to indicate that an argument passed to a function is illegal or\n///         inappropriate.\n///\n/// @param message The error message.\nerror IllegalArgument(string message);\n\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\n///\n/// @param message The error message.\nerror IllegalState(string message);\n\n/// @notice An error used to indicate that an operation is unsupported.\n///\n/// @param message The error message.\nerror UnsupportedOperation(string message);\n\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\n///\n/// @param message The error message.\nerror Unauthorized(string message);"
    },
    "submodules/v2-foundry/src/interfaces/IERC20Metadata.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IERC20Metadata\n/// @author Alchemix Finance\ninterface IERC20Metadata {\n    /// @notice Gets the name of the token.\n    ///\n    /// @return The name.\n    function name() external view returns (string memory);\n\n    /// @notice Gets the symbol of the token.\n    ///\n    /// @return The symbol.\n    function symbol() external view returns (string memory);\n\n    /// @notice Gets the number of decimals that the token has.\n    ///\n    /// @return The number of decimals.\n    function decimals() external view returns (uint8);\n}"
    },
    "submodules/v2-foundry/src/utils/RewardCollectorOptimism.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {TokenUtils} from \"../libraries/TokenUtils.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IStaticAToken} from \"../interfaces/external/aave/IStaticAToken.sol\";\nimport {IVelodromeSwapRouter} from \"../interfaces/external/velodrome/IVelodromeSwapRouter.sol\";\nimport {Unauthorized, IllegalState, IllegalArgument} from \"../base/ErrorMessages.sol\";\n\nimport \"../interfaces/IRewardCollector.sol\";\nimport \"../libraries/Sets.sol\";\nimport \"../libraries/TokenUtils.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address debtToken;\n    address rewardToken;\n    address swapRouter;\n}\n\n/// @title  RewardCollectorOptimism\n/// @author Alchemix Finance\ncontract RewardCollectorOptimism is IRewardCollector {\n    uint256 constant FIXED_POINT_SCALAR = 1e18;\n    uint256 constant BPS = 10000;\n    string public override version = \"1.0.0\";\n    address public alchemist;\n    address public debtToken;\n    address public override rewardToken;\n    address public override swapRouter;\n\n    constructor(InitializationParams memory params) {\n        alchemist       = params.alchemist;\n        debtToken       = params.debtToken;\n        rewardToken     = params.rewardToken;\n        swapRouter      = params.swapRouter;\n    }\n\n    function claimAndDistributeRewards(address token, uint256 minimumAmountOut) external returns (uint256) {\n        IStaticAToken(token).claimRewards();\n        uint256 claimed = IERC20(rewardToken).balanceOf(address(this));\n\n        if (claimed == 0) return 0;\n\n        if (debtToken == 0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A) {\n            // Velodrome Swap Routes: OP -> USDC -> alUSD\n            IVelodromeSwapRouter.route[] memory routes = new IVelodromeSwapRouter.route[](2);\n            routes[0] = IVelodromeSwapRouter.route(0x4200000000000000000000000000000000000042, 0x7F5c764cBc14f9669B88837ca1490cCa17c31607, false);\n            routes[1] = IVelodromeSwapRouter.route(0x7F5c764cBc14f9669B88837ca1490cCa17c31607, 0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A, true);\n            IVelodromeSwapRouter(swapRouter).swapExactTokensForTokens(claimed, minimumAmountOut, routes, address(this), block.timestamp);\n        } else if (debtToken == 0x3E29D3A9316dAB217754d13b28646B76607c5f04) {\n            // Velodrome Swap Routes: OP -> alETH\n            IVelodromeSwapRouter.route[] memory routes = new IVelodromeSwapRouter.route[](1);\n            routes[0] = IVelodromeSwapRouter.route(0x4200000000000000000000000000000000000042, 0x3E29D3A9316dAB217754d13b28646B76607c5f04, false);\n            IVelodromeSwapRouter(swapRouter).swapExactTokensForTokens(claimed, minimumAmountOut, routes, address(this), block.timestamp);\n        } else {\n            revert IllegalState(\"Reward collector `debtToken` is not supported\");\n        }\n\n        // Donate to alchemist depositors\n        IAlchemistV2(alchemist).donate(token, IERC20(debtToken).balanceOf(address(this)));\n\n        return claimed;\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IStaticAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IAToken} from \"./IAToken.sol\";\nimport {ILendingPool} from \"./ILendingPool.sol\";\n\n/// @title  IStaticAToken\n/// @author Aave\n///\n/// @dev Wrapper token that allows to deposit tokens on the Aave protocol and receive token which balance doesn't\n///      increase automatically, but uses an ever-increasing exchange rate. Only supporting deposits and withdrawals.\ninterface IStaticAToken is IERC20 {\n  struct SignatureParams {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  function LENDING_POOL() external returns (ILendingPool);\n  function ATOKEN() external view returns (IERC20);\n  function ASSET() external returns (IERC20);\n\n  function _nonces(address owner) external returns (uint256);\n\n  function claimRewards() external;\n\n  function deposit(\n    address recipient,\n    uint256 amount,\n    uint16 referralCode,\n    bool fromUnderlying\n  ) external returns (uint256);\n\n  function withdraw(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256);\n\n  function withdrawDynamicAmount(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s,\n    uint256 chainId\n  ) external;\n\n  function metaDeposit(\n    address depositor,\n    address recipient,\n    uint256 value,\n    uint16 referralCode,\n    bool fromUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256);\n\n  function metaWithdraw(\n    address owner,\n    address recipient,\n    uint256 staticAmount,\n    uint256 dynamicAmount,\n    bool toUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256, uint256);\n\n  function dynamicBalanceOf(address account) external view returns (uint256);\n\n  /// @dev Converts a static amount (scaled balance on aToken) to the aToken/underlying value, using the current\n  ///      liquidity index on Aave.\n  ///\n  /// @param amount The amount to convert from.\n  ///\n  /// @return dynamicAmount The dynamic amount.\n  function staticToDynamicAmount(uint256 amount) external view returns (uint256 dynamicAmount);\n\n  /// @dev Converts an aToken or underlying amount to the what it is denominated on the aToken as scaled balance,\n  ///      function of the principal and the liquidity index.\n  ///\n  /// @param amount The amount to convert from.\n  ///\n  /// @return staticAmount The static (scaled) amount.\n  function dynamicToStaticAmount(uint256 amount) external view returns (uint256 staticAmount);\n\n  /// @dev Returns the Aave liquidity index of the underlying aToken, denominated rate here as it can be considered as\n  ///      an ever-increasing exchange rate.\n  ///\n  /// @return The rate.\n  function rate() external view returns (uint256);\n\n  /// @dev Function to return a dynamic domain separator, in order to be compatible with forks changing chainId.\n  ///\n  /// @param chainId The chain id.\n  ///\n  /// @return The domain separator.\n  function getDomainSeparator(uint256 chainId) external returns (bytes32);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/velodrome/IVelodromeSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n\ninterface IVelodromeSwapRouter {\n    struct route {\n        address from;\n        address to;\n        bool stable;\n    }\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function getAmountsOut(\n        uint amountIn,\n        route[] memory routes\n    ) external view returns (uint[] memory amounts);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\nimport {IInitializableAToken} from './IInitializableAToken.sol';\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\n\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\n  /**\n   * @dev Emitted after the mint action\n   * @param from The address performing the mint\n   * @param value The amount being\n   * @param index The new liquidity index of the reserve\n   **/\n  event Mint(address indexed from, uint256 value, uint256 index);\n\n  /**\n   * @dev Mints `amount` aTokens to `user`\n   * @param user The address receiving the minted tokens\n   * @param amount The amount of tokens getting minted\n   * @param index The new liquidity index of the reserve\n   * @return `true` if the the previous balance of the user was 0\n   */\n  function mint(\n    address user,\n    uint256 amount,\n    uint256 index\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted after aTokens are burned\n   * @param from The owner of the aTokens, getting them burned\n   * @param target The address that will receive the underlying\n   * @param value The amount being burned\n   * @param index The new liquidity index of the reserve\n   **/\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n\n  /**\n   * @dev Emitted during the transfer action\n   * @param from The user whose tokens are being transferred\n   * @param to The recipient\n   * @param value The amount being transferred\n   * @param index The new liquidity index of the reserve\n   **/\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n\n  /**\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n   * @param user The owner of the aTokens, getting them burned\n   * @param receiverOfUnderlying The address that will receive the underlying\n   * @param amount The amount being burned\n   * @param index The new liquidity index of the reserve\n   **/\n  function burn(\n    address user,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external;\n\n  /**\n   * @dev Mints aTokens to the reserve treasury\n   * @param amount The amount of tokens getting minted\n   * @param index The new liquidity index of the reserve\n   */\n  function mintToTreasury(uint256 amount, uint256 index) external;\n\n  /**\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n   * @param from The address getting liquidated, current owner of the aTokens\n   * @param to The recipient\n   * @param value The amount of tokens getting transferred\n   **/\n  function transferOnLiquidation(\n    address from,\n    address to,\n    uint256 value\n  ) external;\n\n  /**\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n   * assets in borrow(), withdraw() and flashLoan()\n   * @param user The recipient of the underlying\n   * @param amount The amount getting transferred\n   * @return The amount transferred\n   **/\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\n\n  /**\n   * @dev Invoked to execute actions on the aToken side after a repayment.\n   * @param user The user executing the repayment\n   * @param amount The amount getting repaid\n   **/\n  function handleRepayment(address user, uint256 amount) external;\n\n  /**\n   * @dev Returns the address of the incentives controller contract\n   **/\n  function getIncentivesController() external view returns (IAaveIncentivesController);\n\n  /**\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n   **/\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport * as DataTypes from \"./DataTypes.sol\";\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\n\ninterface ILendingPool {\n  /// @dev Emitted on `deposit`.\n  ///\n  /// @param reserve    The address of the underlying asset of the reserve.\n  /// @param user       The address initiating the deposit.\n  /// @param onBehalfOf The beneficiary of the deposit, receiving the aTokens.\n  /// @param amount     The amount deposited.\n  /// @param referral   The referral code used.\n  event Deposit(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referral\n  );\n\n  /// @dev Emitted on `withdraw`.\n  ///\n  /// @param reserve The address of the underlying asset being withdrawn.\n  /// @param user    The address initiating the withdrawal, owner of aTokens.\n  /// @param to      Address that will receive the underlying.\n  /// @param amount  The amount to be withdrawn.\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n  \n  /// @dev Emitted on `borrow` and `flashLoan` when debt needs to be opened.\n  ///\n  /// @param reserve        The address of the underlying asset being borrowed.\n  /// @param user           The address of the user initiating the `borrow`, receiving the funds on `borrow` or just\n  ///                       initiator of the transaction on `flashLoan`.\n  /// @param onBehalfOf     The address that will be getting the debt.\n  /// @param amount         The amount borrowed out.\n  /// @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable.\n  /// @param borrowRate     The numeric rate at which the user has borrowed.\n  /// @param referral       The referral code used.\n  event Borrow(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint256 borrowRateMode,\n    uint256 borrowRate,\n    uint16 indexed referral\n  );\n\n  /// @dev Emitted on `repay`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve.\n  /// @param user    The beneficiary of the repayment, getting his debt reduced.\n  /// @param repayer The address of the user initiating the `repay`, providing the funds.\n  /// @param amount  The amount repaid.\n  event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n  \n  /// @dev Emitted on `swapBorrowRateMode`.\n  ///\n  /// @param reserve  The address of the underlying asset of the reserve\n  /// @param user     The address of the user swapping his rate mode\n  /// @param rateMode The rate mode that the user wants to swap to\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n  \n  /// @dev Emitted on `setUserUseReserveAsCollateral`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve\n  /// @param user    The address of the user enabling the usage as collateral\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n  /// @dev Emitted on `setUserUseReserveAsCollateral`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve\n  /// @param user    The address of the user enabling the usage as collateral\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n  \n  /// @dev Emitted on `rebalanceStableBorrowRate`.\n  ///\n  /// @param reserve The address of the underlying asset of the reserve\n  /// @param user    The address of the user for which the rebalance has been executed\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n  /// @dev Emitted on `flashLoan`.\n  ///\n  /// @param target       The address of the flash loan receiver contract.\n  /// @param initiator    The address initiating the flash loan.\n  /// @param asset        The address of the asset being flash borrowed.\n  /// @param amount       The amount flash borrowed.\n  /// @param premium      The fee flash borrowed.\n  /// @param referralCode The referral code used.\n  event FlashLoan(\n    address indexed target,\n    address indexed initiator,\n    address indexed asset,\n    uint256 amount,\n    uint256 premium,\n    uint16 referralCode\n  );\n\n  /// @dev Emitted when the pause is triggered.\n  event Paused();\n\n  /// @dev Emitted when the pause is lifted.\n  event Unpaused();\n\n  /// @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via LendingPoolCollateral\n  ///      manager using a DELEGATECALL.\n  ///\n  /// This allows to have the events in the generated ABI for LendingPool.\n  ///\n  /// @param collateralAsset            The address of the underlying asset used as collateral, to receive as result of\n  ///                                   the liquidation.\n  /// @param debtAsset                  The address of the underlying borrowed asset to be repaid with the liquidation.\n  /// @param user                       The address of the borrower getting liquidated.\n  /// @param debtToCover                The debt amount of borrowed `asset` the liquidator wants to cover.\n  /// @param liquidatedCollateralAmount The amount of collateral received by the liquidator.\n  /// @param liquidator                 The address of the liquidator\n  /// @param receiveAToken              `true` if the liquidators wants to receive the collateral aTokens, `false` if\n  ///                                   he wants to receive the underlying collateral asset directly.\n  event LiquidationCall(\n    address indexed collateralAsset,\n    address indexed debtAsset,\n    address indexed user,\n    uint256 debtToCover,\n    uint256 liquidatedCollateralAmount,\n    address liquidator,\n    bool receiveAToken\n  );\n\n  /// @dev Emitted when the state of a reserve is updated.\n  ///\n  /// NOTE: This event is actually declared in the ReserveLogic library and emitted in the `updateInterestRates`\n  /// function. Since the function is internal, the event will actually be fired by the LendingPool contract. The event\n  /// is therefore replicated here so it gets added to the LendingPool ABI.\n  ///\n  /// @param reserve             The address of the underlying asset of the reserve.\n  /// @param liquidityRate       The new liquidity rate.\n  /// @param stableBorrowRate    The new stable borrow rate.\n  /// @param variableBorrowRate  The new variable borrow rate.\n  /// @param liquidityIndex      The new liquidity index\n  /// @param variableBorrowIndex The new variable borrow index\n  event ReserveDataUpdated(\n    address indexed reserve,\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex\n  );\n\n  /// @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n  ///\n  /// - E.g. User deposits 100 USDC and gets in return 100 aUSDC.\n  ///\n  /// @param asset        The address of the underlying asset to deposit.\n  /// @param amount       The amount to be deposited.\n  /// @param onBehalfOf   The address that will receive the aTokens, same as msg.sender if the user wants to receive\n  ///                     them on his own wallet, or a different address if the beneficiary of aTokens is a different\n  ///                     wallet.\n  /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.0 if the\n  ///                     action is executed directly by the user, without any middle-man\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /// @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned.\n  ///\n  /// E.g. User has 100 aUSDC, calls `withdraw` and receives 100 USDC, burning the 100 aUSDC.\n  ///\n  /// @param asset  The address of the underlying asset to withdraw\n  /// @param amount The underlying amount to be withdrawn.\n  /// @param to     Address that will receive the underlying, same as msg.sender if the user wants to receive it on his\n  ///               own wallet, or a different address if the beneficiary is a different wallet.\n  ///\n  /// @return amountWithdrawn The final amount withdrawn\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256 amountWithdrawn);\n\n  /// @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n  ///     already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n  ///     corresponding debt token (StableDebtToken or VariableDebtToken).\n  ///\n  /// - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet and\n  ///   100 stable/variable debt tokens, depending on the `interestRateMode`.\n  ///\n  /// @param asset            The address of the underlying asset to borrow.\n  /// @param amount           The amount to be borrowed.\n  /// @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n  /// @param referralCode     Code used to register the integrator originating the operation, for potential rewards.\n  ///                         0 if the action is executed directly by the user, without any middle-man\n  /// @param onBehalfOf       Address of the user who will receive the debt. Should be the address of the borrower\n  ///                         itself calling the function if he wants to borrow against his own collateral, or the\n  ///                         address of the credit delegator if he has been given credit delegation allowance\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /// @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned.\n  ///\n  /// - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address.\n  ///\n  /// @param asset      The address of the borrowed underlying asset previously borrowed.\n  /// @param amount     The amount to repay.\n  /// @param rateMode   The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n  /// @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the user\n  ///                   calling the function if he wants to reduce/remove his own debt, or the address of any other\n  ///                   other borrower whose debt should be removed.\n  ///\n  /// @return amountRepaid The final amount repaid.\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external returns (uint256 amountRepaid);\n\n  /// @dev Allows a borrower to swap his debt between stable and variable mode, or vice versa.\n  ///\n  /// @param asset    The address of the underlying asset borrowed.\n  /// @param rateMode The rate mode that the user wants to swap to.\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n  /// @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n  ///\n  /// - Users can be rebalanced if the following conditions are satisfied:\n  ///   1. Usage ratio is above 95%\n  ///   2. the current deposit APY is below REBALANCE_UP_THRESHOLD  maxVariableBorrowRate, which means that too much\n  ///      has been borrowed at a stable rate and depositors are not earning enough.\n  ///\n  /// @param asset The address of the underlying asset borrowed.\n  /// @param user The address of the user to be rebalanced.\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /// @dev Allows depositors to enable/disable a specific deposited asset as collateral.\n  ///\n  /// @param asset            The address of the underlying asset deposited.\n  /// @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise.\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n  \n  /// @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1.\n  ///\n  /// - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives a\n  ///   proportionally amount of the `collateralAsset` plus a bonus to cover market risk.\n  ///\n  /// @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the\n  ///                        liquidation.\n  /// @param debtAsset       The address of the underlying borrowed asset to be repaid with the liquidation.\n  /// @param user            The address of the borrower getting liquidated.\n  /// @param debtToCover     The debt amount of borrowed `asset` the liquidator wants to cover.\n  /// @param receiveAToken   `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to\n  ///                        receive the underlying collateral asset directly\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  /// @dev Allows smart contracts to access the liquidity of the pool within one transaction, as long as the amount\n  ///      taken plus a fee is returned.\n  ///\n  /// IMPORTANT There are security concerns for developers of flash loan receiver contracts that must be kept into\n  /// consideration.\n  ///\n  /// For further details please visit https://developers.aave.com.\n  ///\n  /// @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver\n  ///                        interface.\n  /// @param assets          The addresses of the assets being flash-borrowed.\n  /// @param amounts         The amounts amounts being flash-borrowed.\n  /// @param modes           Types of the debt to open if the flash loan is not returned.\n  /// @param onBehalfOf      The address  that will receive the debt in the case of using on `modes` 1 or 2.\n  /// @param params          Variadic packed params to pass to the receiver as extra information.\n  /// @param referralCode    Code used to register the integrator originating the operation, for potential rewards. 0\n  ///                        if the action is executed directly by the user, without any middle-man\n  function flashLoan(\n    address receiverAddress,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata modes,\n    address onBehalfOf,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /// @dev Returns the user account data across all the reserves.\n  ///\n  /// @param user The address of the user.\n  ///\n  /// @return totalCollateralETH          The total collateral in ETH of the user.\n  /// @return totalDebtETH                The total debt in ETH of the user.\n  /// @return availableBorrowsETH         The borrowing power left of the user.\n  /// @return currentLiquidationThreshold The liquidation threshold of the user.\n  /// @return ltv                         The loan to value of the user.\n  /// @return healthFactor                The current health factor of the user.\n  function getUserAccountData(address user)\n    external\n    view\n    returns (\n      uint256 totalCollateralETH,\n      uint256 totalDebtETH,\n      uint256 availableBorrowsETH,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    );\n\n  function initReserve(\n    address reserve,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n    /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function supply(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n  function setConfiguration(address reserve, uint256 configuration) external;\n\n  /// @dev Returns the configuration of the reserve.\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The configuration of the reserve.\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n  /// @dev Returns the configuration of the user across all the reserves.\n  ///\n  /// @param user The user address.\n  ///\n  /// @return The configuration of the user.\n  function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n  \n  /// @dev Returns the normalized income normalized income of the reserve.\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The reserve's normalized income.\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /// @dev Returns the normalized variable debt per unit of asset.`\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The reserve normalized variable debt.\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n  /// @dev Returns the state and configuration of the reserve.\n  ///\n  /// @param asset The address of the underlying asset of the reserve.\n  ///\n  /// @return The state of the reserve.\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromAfter,\n    uint256 balanceToBefore\n  ) external;\n\n  function getReservesList() external view returns (address[] memory);\n\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n  function setPause(bool val) external;\n\n  function paused() external view returns (bool);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\ninterface IScaledBalanceToken {\n  /// @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated stored balance\n  ///      divided by the reserve's liquidity index at the moment of the update.\n  ///\n  /// @param user The user whose balance is calculated.\n  ///\n  /// @return The scaled balance of the user.\n  function scaledBalanceOf(address user) external view returns (uint256);\n\n  /// @dev Returns the scaled balance of the user and the scaled total supply.\n  ///\n  /// @param user The address of the user.\n  ///\n  /// @return scaledBalance     The scaled balance of the user.\n  /// @return scaledTotalSupply The scaled balance and the scaled total supply.\n  function getScaledUserBalanceAndSupply(address user)\n    external view\n    returns (\n      uint256 scaledBalance,\n      uint256 scaledTotalSupply\n    );\n\n  /// @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index).\n  ///\n  /// @return The scaled total supply.\n  function scaledTotalSupply() external view returns (uint256);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IInitializableAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport {ILendingPool} from './ILendingPool.sol';\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\n\n/**\n * @title IInitializableAToken\n * @notice Interface for the initialize function on AToken\n * @author Aave\n **/\ninterface IInitializableAToken {\n  /**\n   * @dev Emitted when an aToken is initialized\n   * @param underlyingAsset The address of the underlying asset\n   * @param pool The address of the associated lending pool\n   * @param treasury The address of the treasury\n   * @param incentivesController The address of the incentives controller for this aToken\n   * @param aTokenDecimals the decimals of the underlying\n   * @param aTokenName the name of the aToken\n   * @param aTokenSymbol the symbol of the aToken\n   * @param params A set of encoded parameters for additional initialization\n   **/\n  event Initialized(\n    address indexed underlyingAsset,\n    address indexed pool,\n    address treasury,\n    address incentivesController,\n    uint8 aTokenDecimals,\n    string aTokenName,\n    string aTokenSymbol,\n    bytes params\n  );\n\n  /**\n   * @dev Initializes the aToken\n   * @param pool The address of the lending pool where this aToken will be used\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n   * @param incentivesController The smart contract managing potential incentives distribution\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n   * @param aTokenName The name of the aToken\n   * @param aTokenSymbol The symbol of the aToken\n   */\n  function initialize(\n    ILendingPool pool,\n    address treasury,\n    address underlyingAsset,\n    IAaveIncentivesController incentivesController,\n    uint8 aTokenDecimals,\n    string calldata aTokenName,\n    string calldata aTokenSymbol,\n    bytes calldata params\n  ) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\ninterface IAaveIncentivesController {\n  event RewardsAccrued(address indexed user, uint256 amount);\n\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\n\n  event RewardsClaimed(\n    address indexed user,\n    address indexed to,\n    address indexed claimer,\n    uint256 amount\n  );\n\n  event ClaimerSet(address indexed user, address indexed claimer);\n\n  /*\n   * @dev Returns the configuration of the distribution for a certain asset\n   * @param asset The address of the reference asset of the distribution\n   * @return The asset index, the emission per second and the last updated timestamp\n   **/\n  function getAssetData(address asset)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256\n    );\n\n  /**\n   * @dev Whitelists an address to claim the rewards on behalf of another address\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n  function setClaimer(address user, address claimer) external;\n\n  /**\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n   * @param user The address of the user\n   * @return The claimer address\n   */\n  function getClaimer(address user) external view returns (address);\n\n  /**\n   * @dev Configure assets for a certain rewards emission\n   * @param assets The assets to incentivize\n   * @param emissionsPerSecond The emission for each asset\n   */\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\n    external;\n\n  /**\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\n   * @param asset The address of the user\n   * @param userBalance The balance of the user of the asset in the lending pool\n   * @param totalSupply The total supply of the asset in the lending pool\n   **/\n  function handleAction(\n    address asset,\n    uint256 userBalance,\n    uint256 totalSupply\n  ) external;\n\n  /**\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n   * @param user The address of the user\n   * @return The rewards\n   **/\n  function getRewardsBalance(address[] calldata assets, address user)\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n   * @param amount Amount of rewards to claim\n   * @param to Address that will be receiving the rewards\n   * @return Rewards claimed\n   **/\n  function claimRewards(\n    address[] calldata assets,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n   * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param amount Amount of rewards to claim\n   * @param user Address to check and claim rewards\n   * @param to Address that will be receiving the rewards\n   * @return Rewards claimed\n   **/\n  function claimRewardsOnBehalf(\n    address[] calldata assets,\n    uint256 amount,\n    address user,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @dev returns the unclaimed rewards of the user\n   * @param user the address of the user\n   * @return the unclaimed user rewards\n   */\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n  /**\n   * @dev returns the unclaimed rewards of the user\n   * @param user the address of the user\n   * @param asset The asset to incentivize\n   * @return the user index for the asset\n   */\n  function getUserAssetData(address user, address asset) external view returns (uint256);\n\n  /**\n   * @dev for backward compatibility with previous implementation of the Incentives controller\n   */\n  function REWARD_TOKEN() external view returns (address);\n\n  /**\n   * @dev for backward compatibility with previous implementation of the Incentives controller\n   */\n  function PRECISION() external view returns (uint8);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\n// @dev Refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\nstruct ReserveData {\n  // Stores the reserve configuration.\n  ReserveConfigurationMap configuration;\n  // The liquidity index. Expressed in ray.\n  uint128 liquidityIndex;\n  // Variable borrow index. Expressed in ray.\n  uint128 variableBorrowIndex;\n  // The current supply rate. Expressed in ray.\n  uint128 currentLiquidityRate;\n  // The current variable borrow rate. Expressed in ray.\n  uint128 currentVariableBorrowRate;\n  // The current stable borrow rate. Expressed in ray.\n  uint128 currentStableBorrowRate;\n  uint40 lastUpdateTimestamp;\n  // Tokens addresses.\n  address aTokenAddress;\n  address stableDebtTokenAddress;\n  address variableDebtTokenAddress;\n  // Address of the interest rate strategy.\n  address interestRateStrategyAddress;\n  // The id of the reserve. Represents the position in the list of the active reserves.\n  uint8 id;\n}\n\nstruct ReserveConfigurationMap {\n  //bit 0-15: LTV\n  //bit 16-31: Liq. threshold\n  //bit 32-47: Liq. bonus\n  //bit 48-55: Decimals\n  //bit 56: Reserve is active\n  //bit 57: reserve is frozen\n  //bit 58: borrowing is enabled\n  //bit 59: stable rate borrowing enabled\n  //bit 60-63: reserved\n  //bit 64-79: reserve factor\n  uint256 data;\n}\n\nstruct UserConfigurationMap {\n  uint256 data;\n}\n\nenum InterestRateMode {\n  NONE,\n  STABLE,\n  VARIABLE\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\n/// @title  ILendingPoolAddressesProvider\n/// @author Aave\n///\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles.\n///\n/// - Acting also as factory of proxies and admin of those, so with right to change its implementations.\n/// - Owned by the Aave Governance.\ninterface ILendingPoolAddressesProvider {\n  event MarketIdSet(string newMarketId);\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function getMarketId() external view returns (string memory);\n\n  function setMarketId(string calldata marketId) external;\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address impl) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "submodules/v2-foundry/src/migration/MigrationTool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {\n    IllegalArgument,\n    IllegalState,\n    Unauthorized\n} from \"../base/ErrorMessages.sol\";\n\nimport {Multicall} from \"../base/Multicall.sol\";\nimport {Mutex} from \"../base/Mutex.sol\";\n\nimport {TokenUtils} from \"../libraries/TokenUtils.sol\";\n\nimport {IAlchemicToken} from \"../interfaces/IAlchemicToken.sol\";\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2State} from \"../interfaces/alchemist/IAlchemistV2State.sol\";\nimport {IMigrationTool} from \"../interfaces/IMigrationTool.sol\";\nimport {IWETH9} from \"../interfaces/external/IWETH9.sol\";\nimport {SafeCast} from \"../libraries/SafeCast.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address[] collateralAddresses;\n}\n\ncontract MigrationTool is IMigrationTool, Multicall {\n    string public override version = \"1.0.1\";\n    uint256 FIXED_POINT_SCALAR = 1e18;\n\n    mapping(address => uint256) public decimals;\n\n    IAlchemistV2 public immutable alchemist;\n    IAlchemicToken public immutable alchemicToken;\n    address[] public collateralAddresses;\n\n    constructor(InitializationParams memory params) {\n        uint size = params.collateralAddresses.length;\n\n        alchemist       = IAlchemistV2(params.alchemist);\n        alchemicToken   = IAlchemicToken(alchemist.debtToken());\n        collateralAddresses = params.collateralAddresses;\n\n        for(uint i = 0; i < size; i++){\n            decimals[collateralAddresses[i]] = TokenUtils.expectDecimals(collateralAddresses[i]);\n        }\n    }\n\n    /// @inheritdoc IMigrationTool\n    function migrateVaults(\n        address startingYieldToken,\n        address targetYieldToken,\n        uint256 shares,\n        uint256 minReturnShares,\n        uint256 minReturnUnderlying\n    ) external override returns (uint256) {\n        // Yield tokens cannot be the same to prevent slippage on current position\n        if (startingYieldToken == targetYieldToken) {\n            revert IllegalArgument(\"Yield tokens cannot be the same\");\n        }\n\n        // If either yield token is invalid, revert\n        if (!alchemist.isSupportedYieldToken(startingYieldToken)) {\n            revert IllegalArgument(\"Yield token is not supported\");\n        }\n\n        if (!alchemist.isSupportedYieldToken(targetYieldToken)) {\n            revert IllegalArgument(\"Yield token is not supported\");\n        }\n\n        IAlchemistV2State.YieldTokenParams memory startingParams = alchemist.getYieldTokenParameters(startingYieldToken);\n        IAlchemistV2State.YieldTokenParams memory targetParams = alchemist.getYieldTokenParameters(targetYieldToken);\n\n        // If starting and target underlying tokens are not the same then revert\n        if (startingParams.underlyingToken != targetParams.underlyingToken) {\n            revert IllegalArgument(\"Cannot swap between different collaterals\");\n        }\n\n        // Original debt\n        (int256 debt, ) = alchemist.accounts(msg.sender);\n\n        // Avoid calculations and repayments if user doesn't need this to migrate\n        uint256 debtTokenValue;\n        uint256 mintable;\n        if (debt > 0) {\n            // Convert shares to amount of debt tokens\n            debtTokenValue = _convertToDebt(shares, startingYieldToken, startingParams.underlyingToken);\n            mintable = debtTokenValue * FIXED_POINT_SCALAR / alchemist.minimumCollateralization();\n            // Mint tokens to this contract and burn them in the name of the user\n            alchemicToken.mint(address(this), mintable);\n            TokenUtils.safeApprove(address(alchemicToken), address(alchemist), mintable);\n            alchemist.burn(mintable, msg.sender);\n        }\n\n        // Withdraw what you can from the old position\n        uint256 underlyingWithdrawn = alchemist.withdrawUnderlyingFrom(msg.sender, startingYieldToken, shares, address(this), minReturnUnderlying);\n\n        // Deposit into new position\n        TokenUtils.safeApprove(targetParams.underlyingToken, address(alchemist), underlyingWithdrawn);\n        uint256 newPositionShares = alchemist.depositUnderlying(targetYieldToken, underlyingWithdrawn, msg.sender, minReturnShares);\n\n        if (debt > 0) {\n            (int256 latestDebt, ) = alchemist.accounts(msg.sender);\n            // Mint al token which will be burned to fulfill flash loan requirements\n            alchemist.mintFrom(msg.sender, SafeCast.toUint256(debt - latestDebt), address(this));\n            alchemicToken.burn(alchemicToken.balanceOf(address(this)));\n        }\n\n\t    return newPositionShares;\n\t}\n\n    function _convertToDebt(uint256 shares, address yieldToken, address underlyingToken) internal returns(uint256) {\n        // Math safety\n        if (TokenUtils.expectDecimals(underlyingToken) > 18) {\n            revert IllegalState(\"Underlying token decimals exceeds 18\");\n        }\n\n        uint256 underlyingValue = shares * alchemist.getUnderlyingTokensPerShare(yieldToken) / 10**TokenUtils.expectDecimals(yieldToken);\n        return underlyingValue * 10**(18 - decimals[underlyingToken]);\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IMigrationTool.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IMigrationTool\n/// @author Alchemix Finance\ninterface IMigrationTool {\n    event Received(address, uint);\n\n    /// @notice Gets the current version.\n    ///\n    /// @return The version.\n    function version() external view returns (string memory);\n\n    /// @notice Migrates 'shares' from 'startingVault' to 'targetVault'.\n    ///\n    /// @param startingYieldToken   The yield token from which the user wants to withdraw.\n    /// @param targetYieldToken     The yield token that the user wishes to create a new position in.\n    /// @param shares               The shares of tokens to migrate.\n    /// @param minReturnShares      The maximum shares of slippage that the user will accept on new position.\n    /// @param minReturnUnderlying  The minimum underlying value when withdrawing from old position.\n    ///\n    /// @return finalShares The underlying Value of the new position.\n    function migrateVaults(\n        address startingYieldToken,\n        address targetYieldToken,\n        uint256 shares,\n        uint256 minReturnShares,\n        uint256 minReturnUnderlying\n    ) external returns (uint256 finalShares);\n}"
    },
    "submodules/v2-foundry/src/test/MigrationToolUSD.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {AlchemistV2} from \"../AlchemistV2.sol\";\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\n\nimport {StaticAToken} from \"../external/aave/StaticAToken.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {\n    AAVETokenAdapter,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/aave/AAVETokenAdapter.sol\";\n\nimport {\n    MigrationTool,\n    InitializationParams as MigrationInitializationParams\n} from \"../migration/MigrationTool.sol\";\n\nimport {IAlchemicToken} from \"../interfaces/IAlchemicToken.sol\";\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport {ILendingPool} from \"../interfaces/external/aave/ILendingPool.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\ncontract MigrationToolTestUSD is DSTestPlus {\n    address constant aDAI = 0x028171bCA77440897B824Ca71D1c56caC55b68A3;\n    address constant admin = 0x8392F6669292fA56123F71949B52d883aE57e225;\n    address constant alchemistUSD = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n    address constant alUSD = 0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9;\n    address constant aUSDC = 0xBcca60bB61934080951369a648Fb03DF4F96263C;\n    address constant aUSDT = 0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811;\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant invalidYieldToken = 0x23D3D0f1c697247d5e0a9efB37d8b0ED0C464f7f;\n    address constant owner = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address constant whitelistUSD = 0x78537a6CeBa16f412E123a90472C6E0e9A8F1132;\n    address constant yvDAI = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    address constant yvUSDC = 0xa354F35829Ae975e850e23e9615b11Da1B3dC4DE;\n    address constant yvUSDT = 0x7Da96a3891Add058AdA2E826306D812C638D87a7;\n    uint256 constant BPS = 10000;\n    uint256 constant MAX_INT = 2**256 - 1;\n\n    AlchemistV2 newAlchemistV2;\n    StaticAToken staticATokenDAI;\n    StaticAToken staticATokenUSDC;\n    StaticAToken staticATokenUSDT;\n\n    IAlchemicToken AlUSD;\n    IAlchemistV2 AlchemistUSD;\n    ILendingPool lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n    IWhitelist WhitelistUSD;\n\n    MigrationTool migrationToolUSD;\n\n    function setUp() external {\n        MigrationInitializationParams memory migrationParams = MigrationInitializationParams(alchemistUSD, new address[](3));\n        migrationParams.collateralAddresses[0] = (0x6B175474E89094C44Da98b954EedeAC495271d0F);\n        migrationParams.collateralAddresses[1] = (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n        migrationParams.collateralAddresses[2] = (0xdAC17F958D2ee523a2206206994597C13D831ec7);\n        migrationToolUSD = new MigrationTool(migrationParams);\n\n        AlUSD = IAlchemicToken(alUSD);\n\n        AlchemistUSD = IAlchemistV2(alchemistUSD);\n\n        WhitelistUSD = IWhitelist(whitelistUSD);\n\n        // Set contract permissions and ceiling for alchemic tokens\n        hevm.startPrank(admin);\n        AlUSD.setWhitelist(address(migrationToolUSD), true);\n        AlUSD.setCeiling(address(migrationToolUSD), MAX_INT);\n        hevm.stopPrank();\n\n        // Set user and contract whitelist permissions\n        // Update deposit limits\n        hevm.startPrank(owner);\n        WhitelistUSD.add(address(this));\n        WhitelistUSD.add(address(0xbeef));\n        WhitelistUSD.add(address(migrationToolUSD));\n        AlchemistUSD.setMaximumExpectedValue(yvUSDT, MAX_INT);\n        hevm.stopPrank();\n\n        staticATokenDAI = new StaticAToken(\n            lendingPool,\n            aDAI,\n            \"saDAI\",\n            \"staticAaveDAI\"\n        );\n\n        staticATokenUSDT = new StaticAToken(\n            lendingPool,\n            aUSDT,\n            \"saUSDT\",\n            \"staticAaveUSDT\"\n        );\n\n        staticATokenUSDC = new StaticAToken(\n            lendingPool,\n            aUSDC,\n            \"saUSDC\",\n            \"staticAaveUSDC\"\n        );\n\n        newAlchemistV2 = new AlchemistV2();\n\n        hevm.etch(alchemistUSD, address(newAlchemistV2).code);\n\n        addAdapter(alchemistUSD, address(staticATokenDAI), DAI);\n        addAdapter(alchemistUSD, address(staticATokenUSDC), USDC);\n        addAdapter(alchemistUSD, address(staticATokenUSDT), USDT);\n    }\n\n    function testUnsupportedVaults() external {\n        expectIllegalArgumentError(\"Yield token is not supported\");\n        migrationToolUSD.migrateVaults(invalidYieldToken, yvDAI, 100e18, 99e18, 0);\n        \n        expectIllegalArgumentError(\"Yield token is not supported\");\n        migrationToolUSD.migrateVaults(yvDAI , invalidYieldToken, 100e18, 99e18, 0);\n    }\n\n    function testMigrationSameVault() external {\n        expectIllegalArgumentError(\"Yield tokens cannot be the same\");\n        migrationToolUSD.migrateVaults(yvDAI, yvDAI, 100e18, 99e18, 0);\n    }\n\n    function testMigrationDifferentUnderlying() external {\n        expectIllegalArgumentError(\"Cannot swap between different collaterals\");\n        migrationToolUSD.migrateVaults(yvDAI, yvUSDC, 100e18, 90e18, 0);\n    }\n\n    // DAI\n    function testMigrateMaxDAI() external {\n        migrationDifferentVaultMaximumShares(1000e18, yvDAI, DAI, address(staticATokenDAI), 18, BPS);\n    }\n\n    function testMigratePartialDAI() external {\n        migrationDifferentVaultPartialShares(1000e18, yvDAI, DAI, address(staticATokenDAI), 18, BPS);\n    }\n\n    function testMigrateDaiPartialDebt() external {\n        migrationDifferentVaultMaximumShares(1000e18, yvDAI, DAI, address(staticATokenDAI), 18, 10);\n    }\n\n    function testMigrateMaxDAINoDebt() external {\n        migrationDifferentVaultMaximumShares(1000e18, yvDAI, DAI, address(staticATokenDAI), 18, 0);\n    }\n\n    // USDT\n    function testMigrateMaxUSDT() external {\n        migrationDifferentVaultMaximumShares(1000e6, yvUSDT, USDT, address(staticATokenUSDT), 6, BPS);\n    }\n\n    function testMigratePartialUSDT() external {\n        migrationDifferentVaultPartialShares(1000e6, yvUSDT, USDT, address(staticATokenUSDT), 6, BPS);\n    }\n\n    function testMigrateUSDTParitalDebt() external {\n        migrationDifferentVaultPartialShares(1000e6, yvUSDT, USDT, address(staticATokenUSDT), 6, 100);\n    }\n    function testMigrateMaxUSDTNoDebt() external {\n        migrationDifferentVaultMaximumShares(1000e6, yvUSDT, USDT, address(staticATokenUSDT), 6, 0);\n    }\n\n    // USDC\n    function testMigrateMaxUSDC() external {\n        migrationDifferentVaultMaximumShares(1000e6, yvUSDC, USDC, address(staticATokenUSDC), 6, BPS);\n    }\n\n    function testMigratePartialUSDC() external {\n        migrationDifferentVaultPartialShares(1000e6, yvUSDC, USDC, address(staticATokenUSDC), 6, BPS);\n    }\n\n    function testMigrateUSDCPartialDebt() external {\n        migrationDifferentVaultPartialShares(1000e6, yvUSDC, USDC, address(staticATokenUSDC), 6, 420);\n    }\n\n    function testMigrateMaxUSDCNoDebt() external {\n        migrationDifferentVaultMaximumShares(1000e6, yvUSDC, USDC, address(staticATokenUSDC), 6, 0);\n    }\n\n    function testMigrationFuzz(uint256 p1, uint256 p2, uint256 p3, uint256 debtBps) external {\n        hevm.assume(p1 >= 1e18);\n        hevm.assume(p2 >= 1e6);\n        hevm.assume(p3 >= 1e6);\n        hevm.assume(debtBps >= 0);\n        hevm.assume(debtBps <= BPS);\n\n        // Pre deposit a random position\n        while (p1 > 2000000e18) {\n            p1 = p1 / 2;\n        }\n        // Create new position\n         deal(DAI, address(this), p1);\n        SafeERC20.safeApprove(DAI, alchemistUSD, p1);\n        AlchemistUSD.depositUnderlying(yvDAI, p1, address(this), 0);\n        (uint256 shares, ) = AlchemistUSD.positions(address(this), yvDAI);\n        uint256 underlyingValue = shares * AlchemistUSD.getUnderlyingTokensPerShare(yvDAI)  / 10**18;\n        if (debtBps > 0) {\n            AlchemistUSD.mint(underlyingValue/2 * debtBps / BPS, address(this));\n        }\n\n        // Pre deposit a random position\n        while (p2 > 2000000e6) {\n            p2 = p2 / 2;\n        }\n        // Create new position\n         deal(USDC, address(this), p2);\n        SafeERC20.safeApprove(USDC, alchemistUSD, p2);\n        AlchemistUSD.depositUnderlying(yvUSDC, p2, address(this), 0);\n        (shares, ) = AlchemistUSD.positions(address(this), yvUSDC);\n        underlyingValue = shares * AlchemistUSD.getUnderlyingTokensPerShare(yvUSDC)  / 10**6;\n        uint256 debtValue = underlyingValue * 10**(18 - 6);\n        if (debtBps > 0) {\n            AlchemistUSD.mint(debtValue/2 * debtBps / BPS, address(this));\n        }\n\n        // Migrate random amount\n        while (p3 > 2000000e6) {\n            p3 = p3 / 2;\n        }\n\n        migrationDifferentVaultMaximumShares(p3, yvUSDT, USDT, address(staticATokenUSDT), 6, debtBps);\n    }\n\n    function testZap() external {\n        deal(DAI, address(this), 1000e18);\n\n        // Create new position\n        SafeERC20.safeApprove(DAI, alchemistUSD, 1000e18);\n        AlchemistUSD.depositUnderlying(yvDAI, 1000e18, address(this), 0);\n        (uint256 shares, ) = AlchemistUSD.positions(address(this), yvDAI);\n\n        // Debt conversion in this case only divides by 1 so I left it out.\n        uint256 underlyingValue = shares * AlchemistUSD.getUnderlyingTokensPerShare(yvDAI)  / 10**18;\n\n        // Debt after original mint\n        (int256 firstPositionDebt, ) = AlchemistUSD.accounts(address(this));\n\n        // Approve the migration tool to withdraw and mint on behalf of the user\n        AlchemistUSD.approveWithdraw(address(migrationToolUSD), yvDAI, shares);\n        AlchemistUSD.approveMint(address(migrationToolUSD), underlyingValue);\n\n        // Verify new position underlying value is within 0.01% of original\n        uint256 newShares = migrationToolUSD.migrateVaults(yvDAI, address(staticATokenDAI), shares, 0, 0);\n        uint256 newUnderlyingValue = newShares * AlchemistUSD.getUnderlyingTokensPerShare(address(staticATokenDAI)) / 10**18;\n        assertGt(newUnderlyingValue, underlyingValue * 9999 / BPS);\n\n        verifyCdp(firstPositionDebt, newShares, address(staticATokenDAI));\n\n        // Verify old position is gone\n        (uint256 sharesConfirmed, ) = AlchemistUSD.positions(address(this), yvDAI);\n        assertEq(0, sharesConfirmed);\n    }\n\n    function migrationDifferentVaultMaximumShares(uint256 amount, address yearnToken, address underlying, address staticToken, uint256 decimals, uint256 debtBps) public {\n        deal(underlying, address(this), amount);\n\n        // Create new position\n        SafeERC20.safeApprove(underlying, alchemistUSD, amount);\n        AlchemistUSD.depositUnderlying(yearnToken, amount, address(this), 0);\n        (uint256 shares, ) = AlchemistUSD.positions(address(this), yearnToken);\n\n        // Debt conversion in this case only divides by 1 so I left it out.\n        uint256 underlyingValue = shares * AlchemistUSD.getUnderlyingTokensPerShare(yearnToken)  / 10**decimals;\n        uint256 debtValue = underlyingValue * 10**(18 - decimals);\n        if (debtBps > 0) {\n            AlchemistUSD.mint(debtValue/2 * debtBps / BPS, address(this));\n        }\n        \n        // Debt after original mint\n        (int256 firstPositionDebt, ) = AlchemistUSD.accounts(address(this));\n\n        // Approve the migration tool to withdraw and mint on behalf of the user\n        AlchemistUSD.approveWithdraw(address(migrationToolUSD), yearnToken, shares);\n        AlchemistUSD.approveMint(address(migrationToolUSD), debtValue);\n\n        // Verify new position underlying value is within 0.01% of original\n        uint256 newShares = migrationToolUSD.migrateVaults(yearnToken, staticToken, shares, 0, 0);\n        uint256 newUnderlyingValue = newShares * AlchemistUSD.getUnderlyingTokensPerShare(staticToken) / 10**decimals;\n        assertGt(newUnderlyingValue, underlyingValue * 9999 / BPS);\n\n        verifyCdp(firstPositionDebt, newShares, staticToken);\n\n        // Verify old position is gone\n        (uint256 sharesConfirmed, ) = AlchemistUSD.positions(address(this), yearnToken);\n        assertEq(0, sharesConfirmed);\n    }\n\n    function migrationDifferentVaultPartialShares(uint256 amount, address yearnToken, address underlying, address staticToken, uint256 decimals, uint256 debtBps) public {\n        deal(underlying, address(this), amount);\n        \n        // Create new position\n        SafeERC20.safeApprove(underlying, alchemistUSD, amount);\n        AlchemistUSD.depositUnderlying(yearnToken, amount, address(this), 0);\n        (uint256 shares, ) = AlchemistUSD.positions(address(this), yearnToken);\n\n        // Debt conversion in this case only divides by 1 so I left it out.\n        uint256 underlyingValue = shares * AlchemistUSD.getUnderlyingTokensPerShare(yearnToken)  / 10**decimals;\n        uint256 debtValue = underlyingValue * 10**(18 - decimals);\n        if (debtBps > 0) {\n            AlchemistUSD.mint(debtValue/2 * debtBps / BPS, address(this));\n        }\n\n        // Debt after original mint\n        (int256 firstPositionDebt, ) = AlchemistUSD.accounts(address(this));\n\n        // Approve the migration tool to withdraw and mint on behalf of the user\n        AlchemistUSD.approveWithdraw(address(migrationToolUSD), yearnToken, shares);\n        AlchemistUSD.approveMint(address(migrationToolUSD), debtValue);\n\n        // Verify new position underlying value is within 0.1% of original\n        (uint256 oldShares, ) = AlchemistUSD.positions(address(this), yearnToken);\n        uint256 newShares = migrationToolUSD.migrateVaults(yearnToken, staticToken, shares / 2, 0, 0);\n        uint256 newUnderlyingValue = (newShares + oldShares) * AlchemistUSD.getUnderlyingTokensPerShare(staticToken) / 10**decimals;\n        assertGt(newUnderlyingValue, underlyingValue * 9999 / BPS);\n\n        verifyCdp(firstPositionDebt, newShares, staticToken);\n\n        // Verify old position\n        (uint256 sharesConfirmed, ) = AlchemistUSD.positions(address(this), yearnToken);\n        assertApproxEq(shares / 2, sharesConfirmed, 1);\n    }\n\n    function addAdapter(address alchemist, address aToken, address underlyingToken) public {\n        AAVETokenAdapter newAdapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:       alchemist,\n            token:           aToken,\n            underlyingToken: underlyingToken\n        }));\n\n        IAlchemistV2.YieldTokenConfig memory ytc = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(newAdapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000 ether,\n            creditUnlockBlocks: 7200\n        });\n\n        hevm.startPrank(owner);\n        IAlchemistV2(alchemist).addYieldToken(aToken, ytc);\n        IAlchemistV2(alchemist).setYieldTokenEnabled(aToken, true);\n        hevm.stopPrank();\n    }\n\n    function verifyCdp(int256 firstPositionDebt, uint256 newShares, address staticToken) internal {\n        // Verify debts are the same\n        (int256 secondPositionDebt, ) = AlchemistUSD.accounts(address(this));\n        assertEq(secondPositionDebt, firstPositionDebt);\n\n        // Verify new position\n        (uint256 sharesConfirmed, ) = AlchemistUSD.positions(address(this), staticToken);\n        assertEq(newShares, sharesConfirmed);\n    }\n\n}"
    },
    "submodules/v2-foundry/src/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.4;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IllegalState} from \"../base/ErrorMessages.sol\";\n\nimport {IERC20Metadata} from \"../interfaces/IERC20Metadata.sol\";\n\n/// @title  SafeERC20\n/// @author Alchemix Finance\nlibrary SafeERC20 {\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\n    ///\n    /// @param target  The target address.\n    /// @param success If the call to the token was a success.\n    /// @param data    The resulting data from the call. This is error data when the call was not a\n    ///                success. Otherwise, this is malformed data when the call was a success.\n    error ERC20CallFailed(address target, bool success, bytes data);\n\n    /// @dev A safe function to get the decimals of an ERC20 token.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an\n    ///      unexpected value.\n    ///\n    /// @param token The target token.\n    ///\n    /// @return The amount of decimals of the token.\n    function expectDecimals(address token) internal view returns (uint8) {\n        (bool success, bytes memory data) = token.staticcall(\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\n        );\n\n        if (!success || data.length < 32) {\n            revert ERC20CallFailed(token, success, data);\n        }\n\n        return abi.decode(data, (uint8));\n    }\n\n    /// @dev Transfers tokens to another address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an\n    ///      unexpected value.\n    ///\n    /// @param token     The token to transfer.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to transfer.\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Approves tokens for the smart contract.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an\n    ///      unexpected value.\n    ///\n    /// @param token   The token to approve.\n    /// @param spender The contract to spend the tokens.\n    /// @param value   The amount of tokens to approve.\n    function safeApprove(address token, address spender, uint256 value) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n\n    /// @dev Transfer tokens from one address to another address.\n    ///\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an\n    ///      unexpected value.\n    ///\n    /// @param token     The token to transfer.\n    /// @param owner     The address of the owner.\n    /// @param recipient The address of the recipient.\n    /// @param amount    The amount of tokens to transfer.\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\n        );\n\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\n            revert ERC20CallFailed(token, success, data);\n        }\n    }\n}"
    },
    "submodules/v2-foundry/src/external/aave/StaticAToken.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPool} from '../../interfaces/external/aave/ILendingPool.sol';\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IAToken} from '../../interfaces/external/aave/IAToken.sol';\nimport {ERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {WadRayMath} from './WadRayMath.sol';\nimport {TokenUtils} from \"../../libraries/TokenUtils.sol\";\n\n/**\n * @title StaticAToken\n * @dev Wrapper token that allows to deposit tokens on the Aave protocol and receive\n * a token which balance doesn't increase automatically, but uses an ever-increasing exchange rate\n * - Only supporting deposits and withdrawals\n * @author Aave\n **/\ncontract StaticAToken is ERC20 {\n  using SafeERC20 for IERC20;\n  using WadRayMath for uint256;\n\n  struct SignatureParams {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  bytes public constant EIP712_REVISION = bytes('1');\n  bytes32 internal constant EIP712_DOMAIN =\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n  bytes32 public constant PERMIT_TYPEHASH =\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\n  bytes32 public constant METADEPOSIT_TYPEHASH =\n    keccak256(\n      'Deposit(address depositor,address recipient,uint256 value,uint16 referralCode,bool fromUnderlying,uint256 nonce,uint256 deadline)'\n    );\n  bytes32 public constant METAWITHDRAWAL_TYPEHASH =\n    keccak256(\n      'Withdraw(address owner,address recipient,uint256 staticAmount, uint256 dynamicAmount, bool toUnderlying, uint256 nonce,uint256 deadline)'\n    );\n\n  ILendingPool public immutable LENDING_POOL;\n  IERC20 public immutable ATOKEN;\n  IERC20 public immutable ASSET;\n\n  /// @dev owner => next valid nonce to submit with permit(), metaDeposit() and metaWithdraw()\n  /// We choose to have sequentiality on them for each user to avoid potentially dangerous/bad UX cases\n  mapping(address => uint256) public _nonces;\n\n  uint8 private _decimals;\n\n  constructor(\n    ILendingPool lendingPool,\n    address aToken,\n    string memory wrappedTokenName,\n    string memory wrappedTokenSymbol\n  ) public ERC20(wrappedTokenName, wrappedTokenSymbol) {\n    LENDING_POOL = lendingPool;\n    ATOKEN = IERC20(aToken);\n\n    IERC20 underlyingAsset = IERC20(IAToken(aToken).UNDERLYING_ASSET_ADDRESS());\n    ASSET = underlyingAsset;\n    TokenUtils.safeApprove(address(underlyingAsset), address(lendingPool), type(uint256).max);\n    _decimals = IERC20Metadata(aToken).decimals();\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev Deposits `ASSET` in the Aave protocol and mints static aTokens to msg.sender\n   * @param recipient The address that will receive the static aTokens\n   * @param amount The amount of underlying `ASSET` to deposit (e.g. deposit of 100 USDC)\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param fromUnderlying bool\n   * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\n   * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\n   * @return uint256 The amount of StaticAToken minted, static balance\n   **/\n  function deposit(\n    address recipient,\n    uint256 amount,\n    uint16 referralCode,\n    bool fromUnderlying\n  ) external returns (uint256) {\n    return _deposit(msg.sender, recipient, amount, referralCode, fromUnderlying);\n  }\n\n  /**\n   * @dev Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\n   * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\n   * @param amount The amount to withdraw, in static balance of StaticAToken\n   * @param toUnderlying bool\n   * - `true` for the recipient to get underlying tokens (e.g. USDC)\n   * - `false` for the recipient to get aTokens (e.g. aUSDC)\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\n   **/\n  function withdraw(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256) {\n    return _withdraw(msg.sender, recipient, amount, 0, toUnderlying);\n  }\n\n  /**\n   * @dev Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\n   * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\n   * @param amount The amount to withdraw, in dynamic balance of aToken/underlying asset\n   * @param toUnderlying bool\n   * - `true` for the recipient to get underlying tokens (e.g. USDC)\n   * - `false` for the recipient to get aTokens (e.g. aUSDC)\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\n   **/\n  function withdrawDynamicAmount(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256) {\n    return _withdraw(msg.sender, recipient, 0, amount, toUnderlying);\n  }\n\n  /**\n   * @dev Implements the permit function as for\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner The owner of the funds\n   * @param spender The spender\n   * @param value The amount\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param v Signature param\n   * @param s Signature param\n   * @param r Signature param\n   * @param chainId Passing the chainId in order to be fork-compatible\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s,\n    uint256 chainId\n  ) external {\n    require(owner != address(0), 'INVALID_OWNER');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          getDomainSeparator(chainId),\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n        )\n      );\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\n    _nonces[owner] = currentValidNonce + 1;\n    _approve(owner, spender, value);\n  }\n\n  /**\n   * @dev Allows to deposit on Aave via meta-transaction\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param depositor Address from which the funds to deposit are going to be pulled\n   * @param recipient Address that will receive the staticATokens, in the average case, same as the `depositor`\n   * @param value The amount to deposit\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param fromUnderlying bool\n   * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\n   * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param sigParams Signature params: v,r,s\n   * @param chainId Passing the chainId in order to be fork-compatible\n   * @return uint256 The amount of StaticAToken minted, static balance\n   */\n  function metaDeposit(\n    address depositor,\n    address recipient,\n    uint256 value,\n    uint16 referralCode,\n    bool fromUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256) {\n    require(depositor != address(0), 'INVALID_DEPOSITOR');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[depositor];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          getDomainSeparator(chainId),\n          keccak256(\n            abi.encode(\n              METADEPOSIT_TYPEHASH,\n              depositor,\n              recipient,\n              value,\n              referralCode,\n              fromUnderlying,\n              currentValidNonce,\n              deadline\n            )\n          )\n        )\n      );\n    require(\n      depositor == ecrecover(digest, sigParams.v, sigParams.r, sigParams.s),\n      'INVALID_SIGNATURE'\n    );\n    _nonces[depositor] = currentValidNonce + 1;\n    return _deposit(depositor, recipient, value, referralCode, fromUnderlying);\n  }\n\n  /**\n   * @dev Allows to withdraw from Aave via meta-transaction\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner Address owning the staticATokens\n   * @param recipient Address that will receive the underlying withdrawn from Aave\n   * @param staticAmount The amount of staticAToken to withdraw. If > 0, `dynamicAmount` needs to be 0\n   * @param dynamicAmount The amount of underlying/aToken to withdraw. If > 0, `staticAmount` needs to be 0\n   * @param toUnderlying bool\n   * - `true` for the recipient to get underlying tokens (e.g. USDC)\n   * - `false` for the recipient to get aTokens (e.g. aUSDC)\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param sigParams Signature params: v,r,s\n   * @param chainId Passing the chainId in order to be fork-compatible\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\n   */\n  function metaWithdraw(\n    address owner,\n    address recipient,\n    uint256 staticAmount,\n    uint256 dynamicAmount,\n    bool toUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256, uint256) {\n    require(owner != address(0), 'INVALID_DEPOSITOR');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          getDomainSeparator(chainId),\n          keccak256(\n            abi.encode(\n              METAWITHDRAWAL_TYPEHASH,\n              owner,\n              recipient,\n              staticAmount,\n              dynamicAmount,\n              toUnderlying,\n              currentValidNonce,\n              deadline\n            )\n          )\n        )\n      );\n    require(owner == ecrecover(digest, sigParams.v, sigParams.r, sigParams.s), 'INVALID_SIGNATURE');\n    _nonces[owner] = currentValidNonce + 1;\n    return _withdraw(owner, recipient, staticAmount, dynamicAmount, toUnderlying);\n  }\n\n  /**\n   * @dev Utility method to get the current aToken balance of an user, from his staticAToken balance\n   * @param account The address of the user\n   * @return uint256 The aToken balance\n   **/\n  function dynamicBalanceOf(address account) external view returns (uint256) {\n    return staticToDynamicAmount(balanceOf(account));\n  }\n\n  /**\n   * @dev Converts a static amount (scaled balance on aToken) to the aToken/underlying value,\n   * using the current liquidity index on Aave\n   * @param amount The amount to convert from\n   * @return uint256 The dynamic amount\n   **/\n  function staticToDynamicAmount(uint256 amount) public view returns (uint256) {\n    return amount.rayMul(rate());\n  }\n\n  /**\n   * @dev Converts an aToken or underlying amount to the what it is denominated on the aToken as\n   * scaled balance, function of the principal and the liquidity index\n   * @param amount The amount to convert from\n   * @return uint256 The static (scaled) amount\n   **/\n  function dynamicToStaticAmount(uint256 amount) public view returns (uint256) {\n    return amount.rayDiv(rate());\n  }\n\n  /**\n   * @dev Returns the Aave liquidity index of the underlying aToken, denominated rate here\n   * as it can be considered as an ever-increasing exchange rate\n   * @return bytes32 The domain separator\n   **/\n  function rate() public view returns (uint256) {\n    return LENDING_POOL.getReserveNormalizedIncome(address(ASSET));\n  }\n\n  /**\n   * @dev Function to return a dynamic domain separator, in order to be compatible with forks changing chainId\n   * @param chainId The chain id\n   * @return bytes32 The domain separator\n   **/\n  function getDomainSeparator(uint256 chainId) public view returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          EIP712_DOMAIN,\n          keccak256(bytes(name())),\n          keccak256(EIP712_REVISION),\n          chainId,\n          address(this)\n        )\n      );\n  }\n\n  function _deposit(\n    address depositor,\n    address recipient,\n    uint256 amount,\n    uint16 referralCode,\n    bool fromUnderlying\n  ) internal returns (uint256) {\n    require(recipient != address(0), 'INVALID_RECIPIENT');\n\n    if (fromUnderlying) {\n      ASSET.safeTransferFrom(depositor, address(this), amount);\n      LENDING_POOL.deposit(address(ASSET), amount, address(this), referralCode);\n    } else {\n      ATOKEN.safeTransferFrom(depositor, address(this), amount);\n    }\n\n    uint256 amountToMint = dynamicToStaticAmount(amount);\n    _mint(recipient, amountToMint);\n    return amountToMint;\n  }\n\n  function _withdraw(\n    address owner,\n    address recipient,\n    uint256 staticAmount,\n    uint256 dynamicAmount,\n    bool toUnderlying\n  ) internal returns (uint256, uint256) {\n    require(recipient != address(0), 'INVALID_RECIPIENT');\n    require(staticAmount == 0 || dynamicAmount == 0, 'ONLY_ONE_AMOUNT_FORMAT_ALLOWED');\n\n    uint256 userBalance = balanceOf(owner);\n\n    uint256 amountToWithdraw;\n    uint256 amountToBurn;\n\n    uint256 currentRate = rate();\n    if (staticAmount > 0) {\n      amountToBurn = (staticAmount > userBalance) ? userBalance : staticAmount;\n      amountToWithdraw = (staticAmount > userBalance)\n        ? _staticToDynamicAmount(userBalance, currentRate)\n        : _staticToDynamicAmount(staticAmount, currentRate);\n    } else {\n      uint256 dynamicUserBalance = _staticToDynamicAmount(userBalance, currentRate);\n      amountToWithdraw = (dynamicAmount > dynamicUserBalance) ? dynamicUserBalance : dynamicAmount;\n      amountToBurn = _dynamicToStaticAmount(amountToWithdraw, currentRate);\n    }\n\n    _burn(owner, amountToBurn);\n\n    if (toUnderlying) {\n      LENDING_POOL.withdraw(address(ASSET), amountToWithdraw, recipient);\n    } else {\n      ATOKEN.safeTransfer(recipient, amountToWithdraw);\n    }\n\n    return (amountToBurn, amountToWithdraw);\n  }\n\n  function _dynamicToStaticAmount(uint256 amount, uint256 rate) internal pure returns (uint256) {\n    return amount.rayDiv(rate);\n  }\n\n  function _staticToDynamicAmount(uint256 amount, uint256 rate) internal pure returns (uint256) {\n    return amount.rayMul(rate);\n  }\n}"
    },
    "submodules/v2-foundry/src/adapters/aave/AAVETokenAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {IllegalState, Unauthorized} from \"../../base/ErrorMessages.sol\";\nimport {MutexLock} from \"../../base/MutexLock.sol\";\nimport {IERC20Metadata} from \"../../interfaces/IERC20Metadata.sol\";\nimport {ITokenAdapter} from \"../../interfaces/ITokenAdapter.sol\";\nimport {IStaticAToken} from \"../../interfaces/external/aave/IStaticAToken.sol\";\n\nimport {TokenUtils} from \"../../libraries/TokenUtils.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address token;\n    address underlyingToken;\n}\n\ncontract AAVETokenAdapter is ITokenAdapter, MutexLock {\n    string public constant override version = \"1.0.0\";\n    address public alchemist;\n    address public override token;\n    address public override underlyingToken;\n    uint8 public tokenDecimals;\n\n    constructor(InitializationParams memory params) {\n        alchemist = params.alchemist;\n        token = params.token;\n        underlyingToken = params.underlyingToken;\n        TokenUtils.safeApprove(underlyingToken, token, type(uint256).max);\n        tokenDecimals = TokenUtils.expectDecimals(token);\n    }\n\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\n    modifier onlyAlchemist() {\n        if (msg.sender != alchemist) {\n            revert Unauthorized(\"Not alchemist\");\n        }\n        _;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view override returns (uint256) {\n        return IStaticAToken(token).staticToDynamicAmount(10**tokenDecimals);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(uint256 amount, address recipient) external lock onlyAlchemist override returns (uint256) {\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        // 0 - referral code (deprecated).\n        // true - \"from underlying\", we are depositing the underlying token, not the aToken.\n        return IStaticAToken(token).deposit(recipient, amount, 0, true);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function unwrap(uint256 amount, address recipient) external lock onlyAlchemist override returns (uint256) {\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\n        // true - \"to underlying\", we are withdrawing the underlying token, not the aToken.\n        (uint256 amountBurnt, uint256 amountWithdrawn) = IStaticAToken(token).withdraw(recipient, amount, true);\n        if (amountBurnt != amount) {\n           revert IllegalState(\"Amount burnt mismatch\");\n        }\n        return amountWithdrawn;\n    }\n} "
    },
    "submodules/v2-foundry/src/external/aave/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\nimport {Errors} from './Errors.sol';\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n **/\n\nlibrary WadRayMath {\n  uint256 internal constant WAD = 1e18;\n  uint256 internal constant halfWAD = WAD / 2;\n\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant halfRAY = RAY / 2;\n\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n  /**\n   * @return One ray, 1e27\n   **/\n  function ray() internal pure returns (uint256) {\n    return RAY;\n  }\n\n  /**\n   * @return One wad, 1e18\n   **/\n\n  function wad() internal pure returns (uint256) {\n    return WAD;\n  }\n\n  /**\n   * @return Half ray, 1e27/2\n   **/\n  function halfRay() internal pure returns (uint256) {\n    return halfRAY;\n  }\n\n  /**\n   * @return Half ray, 1e18/2\n   **/\n  function halfWad() internal pure returns (uint256) {\n    return halfWAD;\n  }\n\n  /**\n   * @dev Multiplies two wad, rounding half up to the nearest wad\n   * @param a Wad\n   * @param b Wad\n   * @return The result of a*b, in wad\n   **/\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n    return (a * b + halfWAD) / WAD;\n  }\n\n  /**\n   * @dev Divides two wad, rounding half up to the nearest wad\n   * @param a Wad\n   * @param b Wad\n   * @return The result of a/b, in wad\n   **/\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\n    uint256 halfB = b / 2;\n\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n    return (a * WAD + halfB) / b;\n  }\n\n  /**\n   * @dev Multiplies two ray, rounding half up to the nearest ray\n   * @param a Ray\n   * @param b Ray\n   * @return The result of a*b, in ray\n   **/\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n    return (a * b + halfRAY) / RAY;\n  }\n\n  /**\n   * @dev Divides two ray, rounding half up to the nearest ray\n   * @param a Ray\n   * @param b Ray\n   * @return The result of a/b, in ray\n   **/\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\n    uint256 halfB = b / 2;\n\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\n\n    return (a * RAY + halfB) / b;\n  }\n\n  /**\n   * @dev Casts ray down to wad\n   * @param a Ray\n   * @return a casted to wad, rounded half up to the nearest wad\n   **/\n  function rayToWad(uint256 a) internal pure returns (uint256) {\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\n    uint256 result = halfRatio + a;\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\n\n    return result / WAD_RAY_RATIO;\n  }\n\n  /**\n   * @dev Converts wad up to ray\n   * @param a Wad\n   * @return a converted in ray\n   **/\n  function wadToRay(uint256 a) internal pure returns (uint256) {\n    uint256 result = a * WAD_RAY_RATIO;\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\n    return result;\n  }\n}"
    },
    "submodules/v2-foundry/src/external/aave/Errors.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n * @dev Error messages prefix glossary:\n *  - VL = ValidationLogic\n *  - MATH = Math libraries\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\n *  - AT = AToken\n *  - SDT = StableDebtToken\n *  - VDT = VariableDebtToken\n *  - LP = LendingPool\n *  - LPAPR = LendingPoolAddressesProviderRegistry\n *  - LPC = LendingPoolConfiguration\n *  - RL = ReserveLogic\n *  - LPCM = LendingPoolCollateralManager\n *  - P = Pausable\n */\nlibrary Errors {\n  //common errors\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\n\n  //contract specific errors\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \"There isn't enough liquidity available to liquidate\"\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\n  string public constant MATH_ADDITION_OVERFLOW = '49';\n  string public constant MATH_DIVISION_BY_ZERO = '50';\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\n  string public constant RC_INVALID_LTV = '67';\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\n  string public constant RC_INVALID_LIQ_BONUS = '69';\n  string public constant RC_INVALID_DECIMALS = '70';\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\n  string public constant UL_INVALID_INDEX = '77';\n  string public constant LP_NOT_CONTRACT = '78';\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\n\n  enum CollateralManagerErrors {\n    NO_ERROR,\n    NO_COLLATERAL_AVAILABLE,\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\n    CURRRENCY_NOT_BORROWED,\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\n    NOT_ENOUGH_LIQUIDITY,\n    NO_ACTIVE_RESERVE,\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\n    INVALID_EQUAL_ASSETS_TO_SWAP,\n    FROZEN_RESERVE\n  }\n}"
    },
    "submodules/v2-foundry/src/base/MutexLock.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.13;\n\nimport {IllegalState} from \"./ErrorMessages.sol\";\n\n/// @title  Mutex\n/// @author Alchemix Finance\n///\n/// @notice Provides a mutual exclusion lock for implementing contracts.\nabstract contract MutexLock {\n    enum State {\n        RESERVED,\n        UNLOCKED,\n        LOCKED\n    }\n\n    /// @notice The lock state.\n    State private _lockState = State.UNLOCKED;\n\n    /// @dev A modifier which acquires the mutex.\n    modifier lock() {\n        _claimLock();\n\n        _;\n\n        _freeLock();\n    }\n\n    /// @dev Gets if the mutex is locked.\n    ///\n    /// @return if the mutex is locked.\n    function _isLocked() internal view returns (bool) {\n        return _lockState == State.LOCKED;\n    }\n\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\n    function _claimLock() internal {\n        // Check that the lock has not been claimed yet.\n        if (_lockState != State.UNLOCKED) {\n            revert IllegalState(\"Lock already claimed\");\n        }\n\n        // Claim the lock.\n        _lockState = State.LOCKED;\n    }\n\n    /// @dev Frees the lock.\n    function _freeLock() internal {\n        _lockState = State.UNLOCKED;\n    }\n}"
    },
    "submodules/v2-foundry/src/test/mocks/TestWhitelisted.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../../../lib/openzeppelin-contracts/contracts/access/AccessControl.sol\";\n\nimport { Unauthorized } from \"../../base/Errors.sol\";\n\nimport \"../../utils/Whitelist.sol\";\nimport \"../../interfaces/IWhitelist.sol\";\n\ncontract TestWhitelisted is AccessControl {\n  event Success();\n\n  bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n  address public whitelist;\n\n  constructor(address _whitelist) {\n    _setupRole(ADMIN, msg.sender);\n    _setRoleAdmin(ADMIN, ADMIN);\n    whitelist = _whitelist;\n  }\n\n  function test() external {\n    // Check if the message sender is an EOA. In the future, this potentially may break. It is important that\n    // functions which rely on the whitelist not be explicitly vulnerable in the situation where this no longer\n    // holds true.\n    if (tx.origin != msg.sender) {\n      // Only check the whitelist for calls from contracts.\n      if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n        revert Unauthorized();\n      }\n    }\n    emit Success();\n  }\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestWhitelistedCaller.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./TestWhitelisted.sol\";\n\ncontract TestWhitelistedCaller {\n    constructor() {\n\n    }\n\n    function test(address target) external {\n        TestWhitelisted(target).test();\n    }\n}"
    },
    "submodules/v2-foundry/src/mocks/YearnVaultMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\n\nimport \"../libraries/TokenUtils.sol\";\nimport \"../interfaces/IERC20Minimal.sol\";\n\ncontract YearnVaultMock is ERC20 {\n  uint256 public constant PERCENT_RESOLUTION = 10000;\n  uint256 public min = 9500;\n  uint256 public constant max = 10000;\n\n  address public token;\n\n  uint256 public depositLimit;\n\n  // this is for testing purposes only. not an actual part of a yearn vault\n  uint256 public forcedSlippage = 0;\n\n  constructor(address _token) ERC20(\"Yearn Mock\", \"yMOCK\") {\n    token = _token;\n    depositLimit = type(uint256).max;\n  }\n\n  function vdecimals() external view returns (uint8) {\n    return decimals();\n  }\n\n  function balance() public view returns (uint256) {\n    return IERC20Minimal(token).balanceOf(address(this));\n  }\n\n  function available() public view returns (uint256) {\n    return (IERC20Minimal(token).balanceOf(address(this)) * min) / max;\n  }\n\n  function deposit() external returns (uint256) {\n    return deposit(type(uint256).max);\n  }\n\n  function deposit(uint256 _amount) public returns (uint256) {\n    uint256 _pool = balance();\n    uint256 _before = IERC20Minimal(token).balanceOf(address(this));\n    // If _amount not specified, transfer the full token balance,\n    // up to deposit limit\n    if (_amount == type(uint256).max) {\n      _amount = Math.min(depositLimit - balance(), IERC20Minimal(token).balanceOf(msg.sender));\n    } else {\n      require(balance() + _amount <= depositLimit, \"deposit limit breached\");\n    }\n\n    require(_amount > 0, \"must deposit something\");\n\n    TokenUtils.safeTransferFrom(token, msg.sender, address(this), _amount);\n    uint256 _after = IERC20Minimal(token).balanceOf(address(this));\n    _amount = _after - _before; // Additional check for deflationary tokens\n    uint256 _shares = 0;\n    if (totalSupply() == 0) {\n      _shares = _amount;\n    } else {\n      _shares = (_amount * totalSupply()) / _pool;\n    }\n    _mint(msg.sender, _shares);\n    return _amount;\n  }\n\n  function withdraw() external returns (uint256) {\n    return withdraw(balanceOf(msg.sender), msg.sender, 0);\n  }\n\n  function withdraw(uint256 _shares) external returns (uint256) {\n    return withdraw(_shares, msg.sender, 0);\n  }\n\n  function withdraw(uint256 _shares, address _recipient) public returns (uint256) {\n    return withdraw(_shares, _recipient, 0);\n  }\n\n  function withdraw(\n    uint256 _shares,\n    address _recipient,\n    uint256 maxSlippage\n  ) public returns (uint256) {\n    // mirror real vault behavior\n    if (_shares == type(uint256).max) {\n      _shares = balanceOf(msg.sender);\n    }\n    uint256 _r = (balance() * _shares) / totalSupply();\n    _burn(msg.sender, _shares);\n\n    // apply mock slippage\n    uint256 withdrawnAmt = _r - (_r * forcedSlippage) / PERCENT_RESOLUTION;\n    require(withdrawnAmt >= _r - (_r * maxSlippage) / PERCENT_RESOLUTION, \"too much slippage\");\n\n\n    TokenUtils.safeTransfer(token, _recipient, _r);\n    return _r;\n  }\n\n  function pricePerShare() external view returns (uint256) {\n    uint256 _totalSupply = totalSupply();\n    if (_totalSupply == 0) {\n      return 0;\n    } else {\n      return (balance() * 1e18) / totalSupply();\n    }\n  }\n\n  function maxAvailableShares() external view returns (uint256) {\n    return totalSupply();\n  }\n\n  function setDepositLimit(uint256 _depositLimit) external {\n    depositLimit = _depositLimit;\n  }\n\n  function totalAssets() external view returns (uint256) {\n    return balance();\n  }\n\n  function setForcedSlippage(uint256 _forcedSlippage) external {\n    forcedSlippage = _forcedSlippage;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/IERC20Minimal.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IERC20Minimal\n/// @author Alchemix Finance\ninterface IERC20Minimal {\n    /// @notice An event which is emitted when tokens are transferred between two parties.\n    ///\n    /// @param owner     The owner of the tokens from which the tokens were transferred.\n    /// @param recipient The recipient of the tokens to which the tokens were transferred.\n    /// @param amount    The amount of tokens which were transferred.\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\n\n    /// @notice An event which is emitted when an approval is made.\n    ///\n    /// @param owner   The address which made the approval.\n    /// @param spender The address which is allowed to transfer tokens on behalf of `owner`.\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @notice Gets the current total supply of tokens.\n    ///\n    /// @return The total supply.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Gets the balance of tokens that an account holds.\n    ///\n    /// @param account The account address.\n    ///\n    /// @return The balance of the account.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Gets the allowance that an owner has allotted for a spender.\n    ///\n    /// @param owner   The owner address.\n    /// @param spender The spender address.\n    ///\n    /// @return The number of tokens that `spender` is allowed to transfer on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\n    ///\n    /// @notice Emits a {Transfer} event.\n    ///\n    /// @param recipient The address which will receive the tokens.\n    /// @param amount    The amount of tokens to transfer.\n    ///\n    /// @return If the transfer was successful.\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Approves `spender` to transfer `amount` tokens on behalf of `msg.sender`.\n    ///\n    /// @notice Emits a {Approval} event.\n    ///\n    /// @param spender The address which is allowed to transfer tokens on behalf of `msg.sender`.\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\n    ///\n    /// @return If the approval was successful.\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `owner` to `recipient` using an approval that `owner` gave to `msg.sender`.\n    ///\n    /// @notice Emits a {Approval} event.\n    /// @notice Emits a {Transfer} event.\n    ///\n    /// @param owner     The address to transfer tokens from.\n    /// @param recipient The address that will receive the tokens.\n    /// @param amount    The amount of tokens to transfer.\n    ///\n    /// @return If the transfer was successful.\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\n}"
    },
    "submodules/v2-foundry/src/test/mocks/TestFlashBorrower.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../../interfaces/IERC3156FlashLender.sol\";\nimport \"../../interfaces/IERC3156FlashBorrower.sol\";\nimport \"../../interfaces/IERC20Minimal.sol\";\n\ncontract TestFlashBorrower {\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n  constructor() {}\n\n  function takeLoan(\n    address flashLender,\n    address token,\n    uint256 amount\n  ) external {\n    uint256 fee = IERC3156FlashLender(flashLender).flashFee(flashLender, amount);\n    IERC20Minimal(token).approve(flashLender, amount + fee);\n    IERC3156FlashLender(flashLender).flashLoan(IERC3156FlashBorrower(address(this)), token, amount, bytes(\"\"));\n  }\n\n  function onFlashLoan(\n    address from,\n    address token,\n    uint256 amount,\n    uint256 fee,\n    bytes calldata data\n  ) external returns (bytes32) {\n    return CALLBACK_SUCCESS;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/IERC3156FlashLender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./IERC3156FlashBorrower.sol\";\n\n/// @title IERC3156FlashLender\n///\n/// @dev Interface of the ERC3156 FlashLender, as defined by [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156).\ninterface IERC3156FlashLender {\n  /// @notice The amount of currency available to be lent out.\n  ///\n  /// @param token The loan currency.\n  ///\n  /// @return amount The amount of `token` that can be borrowed.\n  function maxFlashLoan(address token) external view returns (uint256 amount);\n\n  /// @notice The fee to be charged for a given loan.\n  ///\n  /// @param token The loan currency.\n  /// @param amount The amount of tokens lent.\n  ///\n  /// @return fee The amount of token to be charged for the loan, on top of the returned principal.\n  function flashFee(address token, uint256 amount) external view returns (uint256 fee);\n\n  /// @notice Initiate a flash loan.\n  ///\n  /// @param receiver The receiver of the tokens in the loan and the receiver of the callback.\n  /// @param token    The loan currency.\n  /// @param amount   The amount of tokens lent.\n  /// @param data     Arbitrary data structure, intended to contain user-defined parameters.\n  ///\n  /// @return success If the flash loan was successful.\n  function flashLoan(\n    IERC3156FlashBorrower receiver,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool success);\n}"
    },
    "submodules/v2-foundry/src/interfaces/IERC3156FlashBorrower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\n/// @title IERC3156FlashBorrower\n///\n/// @dev Interface of the ERC3156 FlashBorrower, as defined by [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156).\ninterface IERC3156FlashBorrower {\n  /// @notice Receive a flash loan.\n  ///\n  /// @param initiator The initiator of the loan.\n  /// @param token     The loan currency.\n  /// @param amount    The amount of tokens lent.\n  /// @param fee       The additional amount of tokens to repay.\n  /// @param data      Arbitrary data structure, intended to contain user-defined parameters.\n  ///\n  /// @return magic The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n  function onFlashLoan(\n    address initiator,\n    address token,\n    uint256 amount,\n    uint256 fee,\n    bytes calldata data\n  ) external returns (bytes32 magic);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/yearn/IYearnVaultV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"../../IERC20Minimal.sol\";\nimport \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/// @title  IYearnVaultV2\n/// @author Yearn Finance\ninterface IYearnVaultV2 is IERC20Metadata {\n  struct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n    bool enforceChangeLimit;\n    uint256 profitLimitRatio;\n    uint256 lossLimitRatio;\n    address customCheck;\n  }\n\n  function apiVersion() external pure returns (string memory);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata signature\n  ) external returns (bool);\n\n  // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n  function deposit() external returns (uint256);\n\n  function deposit(uint256 amount) external returns (uint256);\n\n  function deposit(uint256 amount, address recipient) external returns (uint256);\n\n  // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n  function withdraw() external returns (uint256);\n\n  function withdraw(uint256 maxShares) external returns (uint256);\n\n  function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n  function withdraw(\n    uint256 maxShares,\n    address recipient,\n    uint256 maxLoss\n  ) external returns (uint256);\n\n  function token() external view returns (address);\n\n  function strategies(address _strategy) external view returns (StrategyParams memory);\n\n  function pricePerShare() external view returns (uint256);\n\n  function totalAssets() external view returns (uint256);\n\n  function depositLimit() external view returns (uint256);\n\n  function maxAvailableShares() external view returns (uint256);\n\n  /// @notice View how much the Vault would increase this Strategy's borrow limit, based on its present performance\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\n  function creditAvailable() external view returns (uint256);\n\n  /// @notice View how much the Vault would like to pull back from the Strategy, based on its present performance\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\n  function debtOutstanding() external view returns (uint256);\n\n  /// @notice View how much the Vault expect this Strategy to return at the current block, based on its present\n  ///         performance (since its last report). Can be used to determine expectedReturn in your Strategy.\n  function expectedReturn() external view returns (uint256);\n\n  /// @notice This is the main contact point where the Strategy interacts with the Vault. It is critical that this call\n  ///         is handled as intended by the Strategy. Therefore, this function will be called by BaseStrategy to make\n  ///         sure the integration is correct.\n  function report(\n    uint256 _gain,\n    uint256 _loss,\n    uint256 _debtPayment\n  ) external returns (uint256);\n\n  /// @notice This function should only be used in the scenario where the Strategy is being retired but no migration of\n  ///         the positions are possible, or in the extreme scenario that the Strategy needs to be put into\n  ///         \"Emergency Exit\" mode in order for it to exit as quickly as possible. The latter scenario could be for any\n  ///         reason that is considered \"critical\" that the Strategy exits its position as fast as possible, such as a\n  ///         sudden change in market conditions leading to losses, or an imminent failure in an external dependency.\n  function revokeStrategy() external;\n\n  /// @notice View the governance address of the Vault to assert privileged functions can only be called by governance.\n  ///         The Strategy serves the Vault, so it is subject to governance defined by the Vault.\n  function governance() external view returns (address);\n\n  /// @notice View the management address of the Vault to assert privileged functions can only be called by management.\n  ///         The Strategy serves the Vault, so it is subject to management defined by the Vault.\n  function management() external view returns (address);\n\n  /// @notice View the guardian address of the Vault to assert privileged functions can only be called by guardian. The\n  ///         Strategy serves the Vault, so it is subject to guardian defined by the Vault.\n  function guardian() external view returns (address);\n}\n"
    },
    "submodules/v2-foundry/src/adapters/yearn/YearnTokenAdapter.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport {IllegalState} from \"../../base/Errors.sol\";\n\nimport \"../../interfaces/ITokenAdapter.sol\";\nimport \"../../interfaces/external/yearn/IYearnVaultV2.sol\";\n\nimport \"../../libraries/TokenUtils.sol\";\n\n/// @title  YearnTokenAdapter\n/// @author Alchemix Finance\ncontract YearnTokenAdapter is ITokenAdapter {\n    uint256 private constant MAXIMUM_SLIPPAGE = 10000;\n    string public constant override version = \"2.1.0\";\n\n    address public immutable override token;\n    address public immutable override underlyingToken;\n\n    constructor(address _token, address _underlyingToken) {\n        token = _token;\n        underlyingToken = _underlyingToken;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view override returns (uint256) {\n        return IYearnVaultV2(token).pricePerShare();\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        TokenUtils.safeApprove(underlyingToken, token, 0);\n        TokenUtils.safeApprove(underlyingToken, token, amount);\n\n        return IYearnVaultV2(token).deposit(amount, recipient);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        uint256 balanceBefore = TokenUtils.safeBalanceOf(token, address(this));\n\n        uint256 amountWithdrawn = IYearnVaultV2(token).withdraw(amount, recipient, MAXIMUM_SLIPPAGE);\n\n        uint256 balanceAfter = TokenUtils.safeBalanceOf(token, address(this));\n\n        // If the Yearn vault did not burn all of the shares then revert. This is critical in mathematical operations\n        // performed by the system because the system always expects that all of the tokens were unwrapped. In Yearn,\n        // this sometimes does not happen in cases where strategies cannot withdraw all of the requested tokens (an\n        // example strategy where this can occur is with Compound and AAVE where funds may not be accessible because\n        // they were lent out).\n        if (balanceBefore - balanceAfter != amount) {\n            revert IllegalState();\n        }\n\n        return amountWithdrawn;\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IStakingPools.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.11;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Mintable} from \"./IERC20Mintable.sol\";\n\ninterface IStakingPools {\n    function acceptGovernance() external;\n    function claim(uint256 _poolId) external;\n    function claimExact(uint256 _poolId, uint256 _claimAmount) external;\n    function createPool(IERC20 _token) external returns (uint256);\n    function deposit(uint256 _poolId, uint256 _depositAmount) external;\n    function exit(uint256 _poolId) external;\n    function getPoolRewardRate(uint256 _poolId) view external returns (uint256);\n    function getPoolRewardWeight(uint256 _poolId) view external returns (uint256);\n    function getPoolToken(uint256 _poolId) view external returns (address);\n    function getPoolTotalDeposited(uint256 _poolId) view external returns (uint256);\n    function getStakeTotalDeposited(address _account, uint256 _poolId) view external returns (uint256);\n    function getStakeTotalUnclaimed(address _account, uint256 _poolId) view external returns (uint256);\n    function governance() view external returns (address);\n    function pendingGovernance() view external returns (address);\n    function poolCount() view external returns (uint256);\n    function reward() view external returns (IERC20Mintable);\n    function rewardRate() view external returns (uint256);\n    function setPendingGovernance(address _pendingGovernance) external;\n    function setRewardRate(uint256 _rewardRate) external;\n    function setRewardWeights(uint256[] memory _rewardWeights) external;\n    function tokenPoolIds(IERC20 _token) view external returns (uint256);\n    function totalRewardWeight() view external returns (uint256);\n    function withdraw(uint256 _poolId, uint256 _withdrawAmount) external;\n}"
    },
    "submodules/v2-foundry/src/StakingPools.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.11;\n\nimport {Ownable} from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\";\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Mintable} from \"./interfaces/IERC20Mintable.sol\";\nimport {IStakingPools} from \"./interfaces/IStakingPools.sol\";\n\nimport {FixedPointMath} from \"./libraries/FixedPointMath.sol\";\nimport {Pool} from \"./libraries/pools/Pool.sol\";\nimport {Stake} from \"./libraries/pools/Stake.sol\";\nimport {StakingPools} from \"./StakingPools.sol\";\n/// @title StakingPools\n//    ___    __        __                _               ___                              __         _ \n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\  ____ ___   ___ ___   ___  / /_  ___  (_)\n//  / __ | / / / __/ / _ \\/ -_) /  ' \\ / /  \\ \\ /      / ___/ / __// -_) (_-</ -_) / _ \\/ __/ (_-< _   \n// /_/ |_|/_/  \\__/ /_//_/\\__/ /_/_/_//_/  /_\\_\\      /_/    /_/   \\__/ /___/\\__/ /_//_/\\__/ /___/(_)  \n//  \n//      _______..___________.     ___       __  ___  __  .__   __.   _______    .______     ______     ______    __           _______.\n//     /       ||           |    /   \\     |  |/  / |  | |  \\ |  |  /  _____|   |   _  \\   /  __  \\   /  __  \\  |  |         /       |\n//    |   (----``---|  |----`   /  ^  \\    |  '  /  |  | |   \\|  | |  |  __     |  |_)  | |  |  |  | |  |  |  | |  |        |   (----`\n//     \\   \\        |  |       /  /_\\  \\   |    <   |  | |  . `  | |  | |_ |    |   ___/  |  |  |  | |  |  |  | |  |         \\   \\    \n// .----)   |       |  |      /  _____  \\  |  .  \\  |  | |  |\\   | |  |__| |    |  |      |  `--'  | |  `--'  | |  `----..----)   |   \n// |_______/        |__|     /__/     \\__\\ |__|\\__\\ |__| |__| \\__|  \\______|    | _|       \\______/   \\______/  |_______||_______/                                                                                                                                \n///\n/// @dev A contract which allows users to stake to farm tokens.\n///\n/// This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this\n/// repository: https://github.com/sushiswap/sushiswap.\ncontract StakingPools is IStakingPools, ReentrancyGuard {\n  using FixedPointMath for FixedPointMath.Number;\n  using Pool for Pool.Data;\n  using Pool for Pool.List;\n  using SafeERC20 for IERC20;\n  using Stake for Stake.Data;\n\n  event PendingGovernanceUpdated(\n    address pendingGovernance\n  );\n\n  event GovernanceUpdated(\n    address governance\n  );\n\n  event RewardRateUpdated(\n    uint256 rewardRate\n  );\n\n  event PoolRewardWeightUpdated(\n    uint256 indexed poolId,\n    uint256 rewardWeight\n  );\n\n  event PoolCreated(\n    uint256 indexed poolId,\n    IERC20 indexed token\n  );\n\n  event TokensDeposited(\n    address indexed user,\n    uint256 indexed poolId,\n    uint256 amount\n  );\n\n  event TokensWithdrawn(\n    address indexed user,\n    uint256 indexed poolId,\n    uint256 amount\n  );\n\n  event TokensClaimed(\n    address indexed user,\n    uint256 indexed poolId,\n    uint256 amount\n  );\n\n  /// @dev The token which will be minted as a reward for staking.\n  IERC20Mintable public reward;\n\n  /// @dev The address of the account which currently has administrative capabilities over this contract.\n  address public governance;\n\n  address public pendingGovernance;\n\n  /// @dev Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\n  /// will return an identifier of zero.\n  mapping(IERC20 => uint256) public tokenPoolIds;\n\n  /// @dev The context shared between the pools.\n  Pool.Context private _ctx;\n\n  /// @dev A list of all of the pools.\n  Pool.List private _pools;\n\n  /// @dev A mapping of all of the user stakes mapped first by pool and then by address.\n  mapping(address => mapping(uint256 => Stake.Data)) private _stakes;\n\n  constructor(\n    IERC20Mintable _reward,\n    address _governance\n  ) {\n    require(_governance != address(0), \"StakingPools: governance address cannot be 0x0\");\n\n    reward = _reward;\n    governance = _governance;\n  }\n\n  /// @dev A modifier which reverts when the caller is not the governance.\n  modifier onlyGovernance() {\n    require(msg.sender == governance, \"StakingPools: only governance\");\n    _;\n  }\n\n  /// @dev Sets the governance.\n  ///\n  /// This function can only called by the current governance.\n  ///\n  /// @param _pendingGovernance the new pending governance.\n  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\n    require(_pendingGovernance != address(0), \"StakingPools: pending governance address cannot be 0x0\");\n    pendingGovernance = _pendingGovernance;\n\n    emit PendingGovernanceUpdated(_pendingGovernance);\n  }\n\n  function acceptGovernance() external {\n    require(msg.sender == pendingGovernance, \"StakingPools: only pending governance\");\n\n    address _pendingGovernance = pendingGovernance;\n    governance = _pendingGovernance;\n\n    emit GovernanceUpdated(_pendingGovernance);\n  }\n\n  /// @dev Sets the distribution reward rate.\n  ///\n  /// This will update all of the pools.\n  ///\n  /// @param _rewardRate The number of tokens to distribute per second.\n  function setRewardRate(uint256 _rewardRate) external onlyGovernance {\n    _updatePools();\n\n    _ctx.rewardRate = _rewardRate;\n\n    emit RewardRateUpdated(_rewardRate);\n  }\n\n  /// @dev Creates a new pool.\n  ///\n  /// The created pool will need to have its reward weight initialized before it begins generating rewards.\n  ///\n  /// @param _token The token the pool will accept for staking.\n  ///\n  /// @return _poolId identifier for the newly created pool.\n  function createPool(IERC20 _token) external onlyGovernance returns (uint256) {\n    require(tokenPoolIds[_token] == 0, \"StakingPools: token already has a pool\");\n\n    uint256 _poolId = _pools.length();\n\n    _pools.push(Pool.Data({\n      token: _token,\n      totalDeposited: 0,\n      rewardWeight: 0,\n      accumulatedRewardWeight: FixedPointMath.Number(0),\n      lastUpdatedBlock: block.number\n    }));\n\n    tokenPoolIds[_token] = _poolId + 1;\n\n    emit PoolCreated(_poolId, _token);\n\n    return _poolId;\n  }\n\n  /// @dev Sets the reward weights of all of the pools.\n  ///\n  /// @param _rewardWeights The reward weights of all of the pools.\n  function setRewardWeights(uint256[] calldata _rewardWeights) external onlyGovernance {\n    require(_rewardWeights.length == _pools.length(), \"StakingPools: weights length mismatch\");\n\n    _updatePools();\n\n    uint256 _totalRewardWeight = _ctx.totalRewardWeight;\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n      Pool.Data storage _pool = _pools.get(_poolId);\n\n      uint256 _currentRewardWeight = _pool.rewardWeight;\n      if (_currentRewardWeight == _rewardWeights[_poolId]) {\n        continue;\n      }\n\n      _totalRewardWeight = _totalRewardWeight - _currentRewardWeight + _rewardWeights[_poolId];\n      _pool.rewardWeight = _rewardWeights[_poolId];\n\n      emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\n    }\n\n    _ctx.totalRewardWeight = _totalRewardWeight;\n  }\n\n  /// @dev Stakes tokens into a pool.\n  ///\n  /// @param _poolId        the pool to deposit tokens into.\n  /// @param _depositAmount the amount of tokens to deposit.\n  function deposit(uint256 _poolId, uint256 _depositAmount) external nonReentrant {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    _pool.update(_ctx);\n\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n    _stake.update(_pool, _ctx);\n\n    _deposit(_poolId, _depositAmount);\n  }\n\n  /// @dev Withdraws staked tokens from a pool.\n  ///\n  /// @param _poolId          The pool to withdraw staked tokens from.\n  /// @param _withdrawAmount  The number of tokens to withdraw.\n  function withdraw(uint256 _poolId, uint256 _withdrawAmount) external nonReentrant {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    _pool.update(_ctx);\n\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n    _stake.update(_pool, _ctx);\n    \n    _withdraw(_poolId, _withdrawAmount);\n  }\n\n  /// @dev Claims all rewarded tokens from a pool.\n  ///\n  /// @param _poolId The pool to claim rewards from.\n  ///\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n  function claim(uint256 _poolId) external nonReentrant {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    _pool.update(_ctx);\n\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n    _stake.update(_pool, _ctx);\n\n    _claim(_poolId);\n  }\n\n  /// @dev Claims a subset of rewarded tokens from a pool.\n  ///\n  /// @param _poolId The pool to claim rewards from.\n  /// @param _claimAmount The amount of tokens to claim.\n  ///\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n  function claimExact(uint256 _poolId, uint256 _claimAmount) external nonReentrant {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    _pool.update(_ctx);\n\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n    _stake.update(_pool, _ctx);\n\n    _claimExact(_poolId, _claimAmount);\n  }\n\n  /// @dev Claims all rewards from a pool and then withdraws all staked tokens.\n  ///\n  /// @param _poolId the pool to exit from.\n  function exit(uint256 _poolId) external nonReentrant {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    _pool.update(_ctx);\n\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n    _stake.update(_pool, _ctx);\n\n    _claim(_poolId);\n    _withdraw(_poolId, _stake.totalDeposited);\n  }\n\n  /// @dev Gets the rate at which tokens are minted to stakers for all pools.\n  ///\n  /// @return the reward rate.\n  function rewardRate() external view returns (uint256) {\n    return _ctx.rewardRate;\n  }\n\n  /// @dev Gets the total reward weight between all the pools.\n  ///\n  /// @return the total reward weight.\n  function totalRewardWeight() external view returns (uint256) {\n    return _ctx.totalRewardWeight;\n  }\n\n  /// @dev Gets the number of pools that exist.\n  ///\n  /// @return the pool count.\n  function poolCount() external view returns (uint256) {\n    return _pools.length();\n  }\n\n  /// @dev Gets the token a pool accepts.\n  ///\n  /// @param _poolId the identifier of the pool.\n  ///\n  /// @return _address the address of the token.\n  function getPoolToken(uint256 _poolId) external view returns (address) {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    return address(_pool.token);\n  }\n\n  /// @dev Gets the total amount of funds staked in a pool.\n  ///\n  /// @param _poolId the identifier of the pool.\n  ///\n  /// @return the total amount of staked or deposited tokens.\n  function getPoolTotalDeposited(uint256 _poolId) external view returns (uint256) {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    return _pool.totalDeposited;\n  }\n\n  /// @dev Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\n  ///\n  /// @param _poolId the identifier of the pool.\n  ///\n  /// @return the pool reward weight.\n  function getPoolRewardWeight(uint256 _poolId) external view returns (uint256) {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    return _pool.rewardWeight;\n  }\n\n  /// @dev Gets the amount of tokens per block being distributed to stakers for a pool.\n  ///\n  /// @param _poolId the identifier of the pool.\n  ///\n  /// @return the pool reward rate.\n  function getPoolRewardRate(uint256 _poolId) external view returns (uint256) {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    return _pool.getRewardRate(_ctx);\n  }\n\n  /// @dev Gets the number of tokens a user has staked into a pool.\n  ///\n  /// @param _account The account to query.\n  /// @param _poolId  the identifier of the pool.\n  ///\n  /// @return the amount of deposited tokens.\n  function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256) {\n    Stake.Data storage _stake = _stakes[_account][_poolId];\n    return _stake.totalDeposited;\n  }\n\n  /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\n  ///\n  /// @param _account The account to get the unclaimed balance of.\n  /// @param _poolId  The pool to check for unclaimed rewards.\n  ///\n  /// @return the amount of unclaimed reward tokens a user has in a pool.\n  function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256) {\n    Stake.Data storage _stake = _stakes[_account][_poolId];\n    return _stake.getUpdatedTotalUnclaimed(_pools.get(_poolId), _ctx);\n  }\n\n  /// @dev Updates all of the pools.\n  function _updatePools() internal {\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n      Pool.Data storage _pool = _pools.get(_poolId);\n      _pool.update(_ctx);\n    }\n  }\n\n  /// @dev Stakes tokens into a pool.\n  ///\n  /// The pool and stake MUST be updated before calling this function.\n  ///\n  /// @param _poolId        the pool to deposit tokens into.\n  /// @param _depositAmount the amount of tokens to deposit.\n  function _deposit(uint256 _poolId, uint256 _depositAmount) internal {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n\n    _pool.totalDeposited = _pool.totalDeposited + _depositAmount;\n    _stake.totalDeposited = _stake.totalDeposited + _depositAmount;\n\n    _pool.token.safeTransferFrom(msg.sender, address(this), _depositAmount);\n\n    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\n  }\n\n  /// @dev Withdraws staked tokens from a pool.\n  ///\n  /// The pool and stake MUST be updated before calling this function.\n  ///\n  /// @param _poolId          The pool to withdraw staked tokens from.\n  /// @param _withdrawAmount  The number of tokens to withdraw.\n  function _withdraw(uint256 _poolId, uint256 _withdrawAmount) internal {\n    Pool.Data storage _pool = _pools.get(_poolId);\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n\n    _pool.totalDeposited = _pool.totalDeposited - _withdrawAmount;\n    _stake.totalDeposited = _stake.totalDeposited - _withdrawAmount;\n\n    _pool.token.safeTransfer(msg.sender, _withdrawAmount);\n\n    emit TokensWithdrawn(msg.sender, _poolId, _withdrawAmount);\n  }\n\n  /// @dev Claims all rewarded tokens from a pool.\n  ///\n  /// The pool and stake MUST be updated before calling this function.\n  ///\n  /// @param _poolId The pool to claim rewards from.\n  ///\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n  function _claim(uint256 _poolId) internal {\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n\n    uint256 _claimAmount = _stake.totalUnclaimed;\n    _stake.totalUnclaimed = 0;\n\n    reward.mint(msg.sender, _claimAmount);\n\n    emit TokensClaimed(msg.sender, _poolId, _claimAmount);\n  }\n\n  /// @dev Claims a subset of rewarded tokens from a pool.\n  ///\n  /// The pool and stake MUST be updated before calling this function.\n  ///\n  /// @param _poolId The pool to claim rewards from.\n  /// @param _claimAmount The amount of tokens to claim.\n  ///\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n  function _claimExact(uint256 _poolId, uint256 _claimAmount) internal {\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n\n    // Will revert if this becomes a negative number\n    _stake.totalUnclaimed -= _claimAmount;\n\n    reward.mint(msg.sender, _claimAmount);\n\n    emit TokensClaimed(msg.sender, _poolId, _claimAmount);\n  }\n}"
    },
    "submodules/v2-foundry/src/libraries/pools/Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.11;\n\nimport {SafeERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {FixedPointMath} from \"../FixedPointMath.sol\";\n\n/// @title Pool\n///\n/// @dev A library which provides the Pool data struct and associated functions.\nlibrary Pool {\n  using FixedPointMath for FixedPointMath.Number;\n  using Pool for Pool.Data;\n  using Pool for Pool.List;\n\n  struct Context {\n    uint256 rewardRate;\n    uint256 totalRewardWeight;\n  }\n\n  struct Data {\n    IERC20 token;\n    uint256 totalDeposited;\n    uint256 rewardWeight;\n    FixedPointMath.Number accumulatedRewardWeight;\n    uint256 lastUpdatedBlock;\n  }\n\n  struct List {\n    Data[] elements;\n  }\n\n  /// @dev Updates the pool.\n  ///\n  /// @param _ctx the pool context.\n  function update(Data storage _data, Context storage _ctx) internal {\n    _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\n    _data.lastUpdatedBlock = block.number;\n  }\n\n  /// @dev Gets the rate at which the pool will distribute rewards to stakers.\n  ///\n  /// @param _ctx the pool context.\n  ///\n  /// @return the reward rate of the pool in tokens per block.\n  function getRewardRate(Data storage _data, Context storage _ctx)\n    internal view\n    returns (uint256)\n  {\n    return _ctx.rewardRate * _data.rewardWeight / _ctx.totalRewardWeight;\n  }\n\n  /// @dev Gets the accumulated reward weight of a pool.\n  ///\n  /// @param _ctx the pool context.\n  ///\n  /// @return the accumulated reward weight.\n  function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\n    internal view\n    returns (FixedPointMath.Number memory)\n  {\n    if (_data.totalDeposited == 0) {\n      return _data.accumulatedRewardWeight;\n    }\n\n    uint256 _elapsedTime = block.number - _data.lastUpdatedBlock;\n    if (_elapsedTime == 0) {\n      return _data.accumulatedRewardWeight;\n    }\n\n    uint256 _rewardRate = _data.getRewardRate(_ctx);\n    uint256 _distributeAmount = _rewardRate * _elapsedTime;\n\n    if (_distributeAmount == 0) {\n      return _data.accumulatedRewardWeight;\n    }\n\n    FixedPointMath.Number memory _rewardWeight = FixedPointMath.encode(_distributeAmount).div(_data.totalDeposited);\n    return _data.accumulatedRewardWeight.add(_rewardWeight);\n  }\n\n  /// @dev Adds an element to the list.\n  ///\n  /// @param _element the element to add.\n  function push(List storage _self, Data memory _element) internal {\n    _self.elements.push(_element);\n  }\n\n  /// @dev Gets an element from the list.\n  ///\n  /// @param _index the index in the list.\n  ///\n  /// @return the element at the specified index.\n  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\n    return _self.elements[_index];\n  }\n\n  /// @dev Gets the last element in the list.\n  ///\n  /// This function will revert if there are no elements in the list.\n  ///ck\n  /// @return the last element in the list.\n  function last(List storage _self) internal view returns (Data storage) {\n    return _self.elements[_self.lastIndex()];\n  }\n\n  /// @dev Gets the index of the last element in the list.\n  ///\n  /// This function will revert if there are no elements in the list.\n  ///\n  /// @return the index of the last element.\n  function lastIndex(List storage _self) internal view returns (uint256) {\n    return _self.length() - 1;\n  }\n\n  /// @dev Gets the number of elements in the list.\n  ///\n  /// @return the number of elements.\n  function length(List storage _self) internal view returns (uint256) {\n    return _self.elements.length;\n  }\n}"
    },
    "submodules/v2-foundry/src/libraries/pools/Stake.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.11;\n\nimport {SafeERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {FixedPointMath} from \"../FixedPointMath.sol\";\nimport {Pool} from \"./Pool.sol\";\n\n/// @title Stake\n///\n/// @dev A library which provides the Stake data struct and associated functions.\nlibrary Stake {\n  using FixedPointMath for FixedPointMath.Number;\n  using Pool for Pool.Data;\n  using Stake for Stake.Data;\n\n  struct Data {\n    uint256 totalDeposited;\n    uint256 totalUnclaimed;\n    FixedPointMath.Number lastAccumulatedWeight;\n  }\n\n  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\n    _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\n    _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\n  }\n\n  function getUpdatedTotalUnclaimed(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\n    internal view\n    returns (uint256)\n  {\n    FixedPointMath.Number memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\n    FixedPointMath.Number memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\n\n    if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\n      return _self.totalUnclaimed;\n    }\n\n    uint256 _distributedAmount = _currentAccumulatedWeight\n      .sub(_lastAccumulatedWeight)\n      .mul(_self.totalDeposited)\n      .truncate();\n\n    return _self.totalUnclaimed + _distributedAmount;\n  }\n}"
    },
    "submodules/v2-foundry/src/test/mocks/TransmuterMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport \"../../../lib/openzeppelin-contracts/contracts/utils/Context.sol\";\nimport \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\nimport {ReentrancyGuard} from \"../../../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\";\nimport {ITransmuterBuffer} from \"../../interfaces/transmuter/ITransmuterBuffer.sol\";\n\ncontract TransmuterMock is Context, ReentrancyGuard {\n  using SafeERC20 for IERC20Upgradeable;\n\n  address public constant ZERO_ADDRESS = address(0);\n  uint256 public TRANSMUTATION_PERIOD;\n\n  address public alToken;\n  address public underlyingToken;\n\n  uint256 public totalExchanged;\n\n  address public collateralSource;\n\n  /// @dev alchemist addresses whitelisted\n  mapping(address => bool) public whiteList;\n\n  /// @dev The address of the account which currently has administrative capabilities over this contract.\n  address public governance;\n\n  event Distribution(address origin, address underlying, uint256 amount);\n\n  event WhitelistSet(address whitelisted, bool state);\n\n  constructor(\n    address _alToken,\n    address _underlyingToken,\n    address _collateralSource\n  ) {\n    governance = msg.sender;\n    alToken = _alToken;\n    underlyingToken = _underlyingToken;\n    collateralSource = _collateralSource;\n    TRANSMUTATION_PERIOD = 50;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    require(whiteList[msg.sender], \"Transmuter: !whitelisted\");\n    _;\n  }\n\n  /// @dev Checks that the current message sender or caller is the governance address.\n  ///\n  ///\n  modifier onlyGov() {\n    require(msg.sender == governance, \"Transmuter: !governance\");\n    _;\n  }\n\n  /// @dev Sets the whitelist\n  ///\n  /// This function reverts if the caller is not governance\n  ///\n  /// @param _toWhitelist the account to mint underlyingTokens to.\n  /// @param _state the whitelist state.\n  function setWhitelist(address _toWhitelist, bool _state) external onlyGov {\n    whiteList[_toWhitelist] = _state;\n    emit WhitelistSet(_toWhitelist, _state);\n  }\n\n  function exchange(uint256 amount) external {\n    totalExchanged += amount;\n  }\n\n  function claim(\n    uint256 amount,\n    address recipient\n  ) external {\n    ITransmuterBuffer(collateralSource).withdraw(underlyingToken, amount, recipient);\n  }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "submodules/v2-foundry/src/bridging/connext/AlchemixConnextGateway.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {AccessControlUpgradeable} from \"../../../lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\";\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\";\nimport {OwnableUpgradeable} from \"../../../lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\n\nimport {ICrossChainToken} from \"../../interfaces/ICrossChainToken.sol\";\nimport {IConnext} from \"../../interfaces/external/connext/IConnext.sol\";\nimport {IXReceiver} from \"../../interfaces/external/connext/IXReceiver.sol\";\n\nimport \"../../libraries/TokenUtils.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./../../base/Errors.sol\";\n\nstruct InitializationParams {\n  address connext;\n}\n\n/**\n * @title AlchemixConnextGateway\n */\ncontract AlchemixConnextGateway is IXReceiver, AccessControlUpgradeable, OwnableUpgradeable {\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping(address => bool) public whitelisted;\n\n  // The Connext contract on this domain\n  address public connext;\n\n  // The next tokens mapped to their respective alAssets. \n  mapping (address => address) public assets;\n\n  // @notice Emitted when tokens are bridged to layer 2\n  event TokensReceived(bytes32 transferId, address originSender, uint32 origin, address token, address receiver, uint256 amount);\n\n  constructor() initializer {}\n\n  function initialize(InitializationParams memory params) public initializer {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n\n    __Context_init_unchained();\n    __Ownable_init_unchained();\n\n    connext = params.connext;\n  }\n\n  /// @dev A modifier which checks that the caller has the admin role.\n  modifier onlyAdmin() {\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n  /** @notice A modifier for authenticated calls.\n   * This is an important security consideration. msg.sender must be the connext contract.\n   */\n  modifier onlySource() {\n    require(\n        msg.sender == connext,\n      \"Expected original caller to be Connext contract\"\n    );\n    _;\n  }\n  \n  function registerAsset(address nextAsset, address alAsset) external onlyAdmin {\n    assets[nextAsset] = alAsset;\n  }\n\n  function bridgeAssets (\n    address _target,\n    address _asset,\n    uint256 _amount,\n    uint32 _destinationDomain,\n    uint256 _relayerFee,\n    bytes calldata _callData\n  ) external payable returns (bytes32) {\n    TokenUtils.safeTransferFrom(assets[_asset], _target, address(this), _amount);\n    ICrossChainToken(assets[_asset]).exchangeCanonicalForOld(_asset, _amount);\n\n    TokenUtils.safeApprove(_asset, connext, _amount);\n    return IConnext(connext).xcall{value: _relayerFee}(\n      _destinationDomain, // _destination\n      _target,            // _to\n      _asset,             // _asset\n      msg.sender,         // _delegate\n      _amount,            // _amount\n      10000,              // _slippage\n      _callData           // _callData\n    );\n  }\n\n  /** @notice Authenticated receiver function.\n    * @param _callData Calldata containing the new greeting.\n    */\n  function xReceive(\n    bytes32 _transferId,\n    uint256 _amount,\n    address _asset,\n    address _originSender,\n    uint32 _origin,\n    bytes memory _callData\n  ) external onlySource() returns (bytes memory) {\n    TokenUtils.safeApprove(_asset, assets[_asset], _amount);\n\n    try ICrossChainToken(assets[_asset]).exchangeOldForCanonical(_asset, _amount) {\n      TokenUtils.safeTransfer(assets[_asset], abi.decode(_callData, (address)), _amount);\n\n      emit TokensReceived(_transferId, _originSender, _origin, assets[_asset], abi.decode(_callData, (address)), _amount);\n    } catch {\n      TokenUtils.safeTransfer(_asset, abi.decode(_callData, (address)), _amount);\n      \n      emit TokensReceived(_transferId, _originSender, _origin, _asset, abi.decode(_callData, (address)), _amount);\n    }    \n  }\n}"
    },
    "submodules/v2-foundry/src/interfaces/ICrossChainToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @title  ICrossChainToken\n/// @author Alchemix Finance\ninterface ICrossChainToken is IERC20 {\n  /// @notice Gets the total amount of minted tokens for an account.\n  ///\n  /// @param account The address of the account.\n  ///\n  /// @return The total minted.\n  function hasMinted(address account) external view returns (uint256);\n\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\n  ///\n  /// This reverts if the `msg.sender` is not whitelisted.\n  ///\n  /// @param amount The amount to lower the minted amount by.\n  function lowerHasMinted(uint256 amount) external;\n\n  /// @notice Sets the mint allowance for a given account'\n  ///\n  /// This reverts if the `msg.sender` is not admin\n  ///\n  /// @param toSetCeiling The account whos allowance to update\n  /// @param ceiling      The amount of tokens allowed to mint\n  function setCeiling(address toSetCeiling, uint256 ceiling) external;\n\n  /// @notice Updates the state of an address in the whitelist map\n  ///\n  /// This reverts if msg.sender is not admin\n  ///\n  /// @param toWhitelist the address whos state is being updated\n  /// @param state the boolean state of the whitelist\n  function setWhitelist(address toWhitelist, bool state) external;\n\n  function mint(address recipient, uint256 amount) external;\n\n  function burn(uint256 amount) external;\n\n  function burnFrom(address account, uint256 amount) external;\n\n  function exchangeOldForCanonical(address bridgeTokenAddress, uint256 tokenAmount) external returns (uint256 canonicalTokensOut);\n\n  function exchangeCanonicalForOld(address bridgeTokenAddress, uint256 tokenAmount) external returns (uint256 bridgeTokensOut);\n\n  function toggleExchanges() external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/connext/IConnext.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \"../../../libraries/connext/LibConnextStorage.sol\";\nimport {TokenId} from \"../../../libraries/connext/TokenId.sol\";\n\ninterface IConnext {\n\n  // ============ BRIDGE ==============\n\n  function xcall(\n    uint32 _destination,\n    address _to,\n    address _asset,\n    address _delegate,\n    uint256 _amount,\n    uint256 _slippage,\n    bytes calldata _callData\n  ) external payable returns (bytes32);\n\n  function xcallIntoLocal(\n    uint32 _destination,\n    address _to,\n    address _asset,\n    address _delegate,\n    uint256 _amount,\n    uint256 _slippage,\n    bytes calldata _callData\n  ) external payable returns (bytes32);\n\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\n\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\n\n  function forceReceiveLocal(TransferInfo calldata _params) external;\n\n  function bumpTransfer(bytes32 _transferId) external payable;\n\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\n\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\n\n  function remote(uint32 _domain) external view returns (address);\n\n  function domain() external view returns (uint256);\n\n  function nonce() external view returns (uint256);\n\n  function approvedSequencers(address _sequencer) external view returns (bool);\n\n  function xAppConnectionManager() external view returns (address);\n\n  // ============ ROUTERS ==============\n\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\n\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\n\n  function getRouterApproval(address _router) external view returns (bool);\n\n  function getRouterRecipient(address _router) external view returns (address);\n\n  function getRouterOwner(address _router) external view returns (address);\n\n  function getProposedRouterOwner(address _router) external view returns (address);\n\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\n\n  function maxRoutersPerTransfer() external view returns (uint256);\n\n  function routerBalances(address _router, address _asset) external view returns (uint256);\n\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\n\n  function initializeRouter(address _owner, address _recipient) external;\n\n  function setRouterRecipient(address _router, address _recipient) external;\n\n  function proposeRouterOwner(address _router, address _proposed) external;\n\n  function acceptProposedRouterOwner(address _router) external;\n\n  function addRouterLiquidityFor(\n    uint256 _amount,\n    address _local,\n    address _router\n  ) external payable;\n\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\n\n  function removeRouterLiquidityFor(\n    TokenId memory _canonical,\n    uint256 _amount,\n    address payable _to,\n    address _router\n  ) external;\n\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/connext/IXReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IXReceiver {\n  function xReceive(\n    bytes32 _transferId,\n    uint256 _amount,\n    address _asset,\n    address _originSender,\n    uint32 _origin,\n    bytes memory _callData\n  ) external returns (bytes memory);\n}"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "submodules/v2-foundry/src/libraries/connext/LibConnextStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n/**\n * @notice Enum representing status of destination transfer\n * @dev Status is only assigned on the destination domain, will always be \"none\" for the\n * origin domains\n * @return uint - Index of value in enum\n */\nenum DestinationTransferStatus {\n  None, // 0\n  Reconciled, // 1\n  Executed, // 2\n  Completed // 3 - executed + reconciled\n}\n\n/**\n * @notice These are the parameters that will remain constant between the\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\n * @property to - The account that receives funds, in the event of a crosschain call,\n * will receive funds if the call fails.\n *\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\n * @param to - The address you are sending funds (and potentially data) to\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\n * a user takes 1% slippage, this is expressed as 1_000)\n * @param originSender - The msg.sender of the xcall\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\n */\nstruct TransferInfo {\n  uint32 originDomain;\n  uint32 destinationDomain;\n  uint32 canonicalDomain;\n  address to;\n  address delegate;\n  bool receiveLocal;\n  bytes callData;\n  uint256 slippage;\n  address originSender;\n  uint256 bridgedAmt;\n  uint256 normalizedIn;\n  uint256 nonce;\n  bytes32 canonicalId;\n}\n\n/**\n * @notice\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\n * @param routers - The routers who you are sending the funds on behalf of.\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\n * for the signed transfer ID.\n * @param sequencer - The sequencer who assigned the router path to this transfer.\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\n * for the path that was signed.\n */\nstruct ExecuteArgs {\n  TransferInfo params;\n  address[] routers;\n  bytes[] routerSignatures;\n  address sequencer;\n  bytes sequencerSignature;\n}\n"
    },
    "submodules/v2-foundry/src/libraries/connext/TokenId.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.13;\n\n// ============= Structs =============\n\n// Tokens are identified by a TokenId:\n// domain - 4 byte chain ID of the chain from which the token originates\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\nstruct TokenId {\n  uint32 domain;\n  bytes32 id;\n}"
    },
    "submodules/v2-foundry/src/test/ConnextGateway.t.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {console} from \"../../lib/forge-std/src/console.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {ICrossChainToken} from \"../interfaces/ICrossChainToken.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\nimport {Hevm} from \"./utils/Hevm.sol\";\n \nimport {AlchemixConnextGateway} from \"../bridging/connext/AlchemixConnextGateway.sol\";\n\nimport \"../libraries/TokenUtils.sol\";\n\n\ncontract ConnextGateway is DSTestPlus {\n\n    AlchemixConnextGateway proxy;\n    AlchemixConnextGateway gateway;\n    function setUp() public {\n        proxy = new AlchemixConnextGateway();\n        bytes memory params = abi.encodeWithSelector(AlchemixConnextGateway.initialize.selector, 0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA);\n        TransparentUpgradeableProxy proxyBuffer = new TransparentUpgradeableProxy(address(proxy), address(address(0xbeef)), params);\n        gateway = AlchemixConnextGateway(address(proxyBuffer));\n\n        gateway.registerAsset(0x49000f5e208349D2fA678263418e21365208E498, 0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A);\n        deal(0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A, address(this), 10e18);\n        deal(0x49000f5e208349D2fA678263418e21365208E498, address(gateway), 100e18);\n\n    }\n\n    function testBridge() external {\n        TokenUtils.safeApprove(0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A, address(gateway), 100e18);\n        gateway.bridgeAssets(address(this), 0x49000f5e208349D2fA678263418e21365208E498, 1e18, 6648936, 0, bytes(\"\"));\n    }\n\n    function testReceive() external {\n        hevm.prank(0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA);\n        gateway.xReceive(bytes32(\"0\"), 1e18, 0x49000f5e208349D2fA678263418e21365208E498, 0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA, 0, abi.encode(address(this)));\n        assertEq(11e18, IERC20(0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A).balanceOf(address(this)));\n    }\n\n        function testReceiveNext() external {\n        hevm.prank(0xC224bf25Dcc99236F00843c7D8C4194abE8AA94a);\n        ICrossChainToken(0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A).toggleExchanges();\n        hevm.prank(0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA);\n        gateway.xReceive(bytes32(\"0\"), 1e18, 0x49000f5e208349D2fA678263418e21365208E498, 0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA, 0, abi.encode(address(this)));\n        assertEq(1e18, IERC20(0x49000f5e208349D2fA678263418e21365208E498).balanceOf(address(this)));\n    }\n}"
    },
    "submodules/v2-foundry/src/test/TransmuterConduit.t.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/DSTestPlus.sol\";\nimport \"../TransmuterConduit.sol\";\nimport \"./mocks/TransmuterMock.sol\";\nimport \"./mocks/ERC20MockDecimals.sol\";\nimport \"./mocks/TransmuterBufferMock.sol\";\nimport \"./utils/Hevm.sol\";\nimport \"../../lib/forge-std/src/console.sol\";\n\ncontract TransmuterConduitTest is DSTestPlus {\n    ERC20MockDecimals token;\n    TransmuterConduit transmuterConduit;\n    TransmuterBufferMock transmuterBuffer;\n    TransmuterMock transmuter;\n\n    address transmuterSource = 0x000000000000000000000000000000000000dEaD;\n\n    function setUp() public {\n        ERC20MockDecimals alToken = new ERC20MockDecimals(\"TestAlToken\", \"alTEST\", 18);\n        token = new ERC20MockDecimals(\"TestToken\", \"TEST\", 18);\n        transmuterBuffer = new TransmuterBufferMock();\n        transmuter = new TransmuterMock(address(alToken), address(token), address(transmuterBuffer));\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n        address[] memory transmuters = new address[](1);\n        transmuters[0] = address(transmuter);\n        transmuterBuffer.initialize(tokens, transmuters);\n        transmuterConduit = new TransmuterConduit(address(token), transmuterSource, address(transmuterBuffer));\n        token.mint(transmuterSource, 100*10e18);\n    }\n\n    function testDistribute() public {\n        uint256 amount = 10*10e18;\n        hevm.startPrank(transmuterSource);\n        token.approve(address(transmuterConduit), amount);\n        transmuterConduit.distribute(transmuterSource, amount);\n        uint256 endingBal = token.balanceOf(address(transmuterBuffer));\n        assertEq(endingBal, amount);\n    }\n\n    function testFailDistributeNoApproval() public {\n        uint256 amount = 10*10e18;\n        hevm.startPrank(transmuterSource);\n        transmuterConduit.distribute(transmuterSource, amount);\n    }\n\n    function testFailDistrubteUnauthorized() public {\n        address badSource = 0x0000000000000000000000000000000000000Bad;\n        uint256 amount = 10*10e18;\n        hevm.startPrank(badSource);\n        token.approve(address(transmuterConduit), amount);\n        transmuterConduit.distribute(transmuterSource, amount);\n    }\n}"
    },
    "submodules/v2-foundry/src/TransmuterConduit.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"./interfaces/ITransmuterV1.sol\";\nimport \"./interfaces/IERC20TokenReceiver.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./base/ErrorMessages.sol\";\n\ncontract TransmuterConduit {\n    using SafeERC20 for IERC20;\n\n    /// @notice The address of the underlying token that is being transmuted.\n    address public token;\n\n    /// @notice The address of the transmuter to pull funds from.\n    address public sourceTransmuter;\n\n    /// @notice The address of the transmuter to send funds to;.\n    address public sinkTransmuter;\n\n    constructor(address _token, address _source, address _sink) {\n        token = _token;\n        sourceTransmuter = _source;\n        sinkTransmuter = _sink;\n    }\n\n    modifier onlySource() {\n        if (msg.sender != sourceTransmuter) {\n            revert Unauthorized(\"TransmuterConduit\");\n        }\n        _;\n    }\n\n    function distribute(address origin, uint256 amount) external onlySource() {\n        IERC20(token).safeTransferFrom(origin, sinkTransmuter, amount);\n        IERC20TokenReceiver(sinkTransmuter).onERC20Received(token, amount);\n    }\n}"
    },
    "submodules/v2-foundry/src/test/mocks/ERC20MockDecimals.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {ERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20MockDecimals is ERC20 {\n    uint8 private _decimals;\n\n    constructor(string memory name, string memory symbol, uint8 mockDecimals) ERC20(name, symbol) {\n        _decimals = mockDecimals;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function burn(address owner, uint256 amount) external {\n        _burn(owner, amount);\n    }\n\n    function mint(address receiver, uint256 amount) external {\n        _mint(receiver, amount);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TransmuterBufferMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\nimport { IERC20 } from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ITransmuterV2 } from \"../../interfaces/transmuter/ITransmuterV2.sol\";\nimport \"../../interfaces/IERC20TokenReceiver.sol\";\n\ncontract TransmuterBufferMock is IERC20TokenReceiver{\n  using SafeERC20 for IERC20;\n\n  mapping(address => address) public transmuters;\n  mapping(address => bool) public underlyingTokens;\n\n  constructor() {}\n\n  function initialize(address[] calldata _underlyingTokens, address[] calldata _transmuters) external {\n    for (uint256 i = 0; i < _underlyingTokens.length; ++i) {\n      underlyingTokens[_underlyingTokens[i]] = true;\n      transmuters[_underlyingTokens[i]] = _transmuters[i];\n    }\n  }\n\n  function exchange(address underlyingToken, uint256 amount) external {\n    IERC20(underlyingToken).safeTransferFrom(msg.sender, address(this), amount);\n    ITransmuterV2(transmuters[underlyingToken]).exchange(amount);\n  }\n\n  function withdraw(\n    address underlyingToken,\n    uint256 amount,\n    address recipient\n  ) external {\n    IERC20(underlyingToken).safeTransfer(recipient, amount);\n  }\n\n  function onERC20Received(address underlyingToken, uint256 amount) external override {\n    require(underlyingTokens[underlyingToken]);\n  }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/ITransmuterV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.5.0;\n\ninterface ITransmuterV1 {\n  function distribute(address origin, uint256 amount) external;\n\n  function migrateFunds(address migrateTo) external;\n\n  function setPause(bool val) external;\n}"
    },
    "submodules/v2-foundry/src/test/ThreePoolAssetManager.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {console} from \"../../lib/forge-std/src/console.sol\";\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\nimport {ThreePoolAssetManagerUser} from \"./utils/users/ThreePoolAssetManagerUser.sol\";\n\nimport {\n    ThreePoolAssetManager,\n    ThreePoolAsset,\n    MetaPoolAsset,\n    SLIPPAGE_PRECISION,\n    CURVE_PRECISION,\n    InitializationParams as ManagerInitializationParams\n} from \"../ThreePoolAssetManager.sol\";\n\nimport {ITransmuterBuffer} from \"../interfaces/transmuter/ITransmuterBuffer.sol\";\nimport {IERC20TokenReceiver} from \"../interfaces/IERC20TokenReceiver.sol\";\nimport {IConvexBooster} from \"../interfaces/external/convex/IConvexBooster.sol\";\nimport {IConvexRewards} from \"../interfaces/external/convex/IConvexRewards.sol\";\nimport {IConvexToken} from \"../interfaces/external/convex/IConvexToken.sol\";\nimport {IStableMetaPool} from \"../interfaces/external/curve/IStableMetaPool.sol\";\nimport {IStableSwap3Pool} from \"../interfaces/external/curve/IStableSwap3Pool.sol\";\n\ncontract ThreePoolAssetManagerTest is DSTestPlus {\n    ITransmuterBuffer constant transmuterBuffer = ITransmuterBuffer(0x1EEd2DbeB9fc23Ab483F447F38F289cA15f79Bac);\n    address constant transmuterBufferAdmin = address(0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9);\n    IERC20 constant crv = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\n    IStableSwap3Pool constant threePool = IStableSwap3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n    IStableMetaPool constant metaPool =  IStableMetaPool(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c);\n    IConvexToken constant cvx = IConvexToken(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n    IConvexBooster constant convexBooster = IConvexBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    IConvexRewards constant convexRewards = IConvexRewards(0x02E2151D4F351881017ABdF2DD2b51150841d5B3);\n\n    ThreePoolAssetManager manager;\n    IERC20 dai;\n    IERC20 usdc;\n    IERC20 usdt;\n    IERC20 alUSD;\n    IERC20 threePoolToken;\n\n    function setUp() external {\n        manager = new ThreePoolAssetManager(ManagerInitializationParams({\n            admin:             address(this),\n            operator:          address(this),\n            rewardReceiver:    address(0xbeef),\n            transmuterBuffer:  address(transmuterBuffer),\n            curveToken:        crv,\n            threePool:         threePool,\n            metaPool:          metaPool,\n            threePoolSlippage: SLIPPAGE_PRECISION - 30, // 30 bps, 0.3%\n            metaPoolSlippage:  SLIPPAGE_PRECISION - 30, // 30 bps, 0.3%\n            convexToken:       cvx,\n            convexBooster:     convexBooster,\n            convexRewards:     convexRewards,\n            convexPoolId:      36\n        }));\n\n        dai            = manager.getTokenForThreePoolAsset(ThreePoolAsset.DAI);\n        usdc           = manager.getTokenForThreePoolAsset(ThreePoolAsset.USDC);\n        usdt           = manager.getTokenForThreePoolAsset(ThreePoolAsset.USDT);\n        alUSD          = manager.getTokenForMetaPoolAsset(MetaPoolAsset.ALUSD);\n        threePoolToken = manager.getTokenForMetaPoolAsset(MetaPoolAsset.THREE_POOL);\n    }\n\n    function testCalculateRebalanceAlUSD() external {\n        deal(address(alUSD), address(manager), type(uint96).max);\n        deal(address(metaPool), address(manager), type(uint96).max);\n\n        (uint256 delta, bool add) = manager.calculateRebalance(\n            MetaPoolAsset.ALUSD,\n            ThreePoolAsset.DAI,\n            1.0e18\n        );\n\n        if (add) {\n            manager.mintMetaPoolTokens(MetaPoolAsset.ALUSD, delta);\n        } else {\n            uint256[2] memory amounts;\n            amounts[uint256(MetaPoolAsset.ALUSD)] = delta;\n\n            uint256 burnAmount = metaPool.calc_token_amount(amounts, false);\n            manager.burnMetaPoolTokens(MetaPoolAsset.ALUSD, burnAmount);\n        }\n\n        assertApproxEq(1.0e18, manager.exchangeRate(ThreePoolAsset.DAI), 0.0001e18);\n    }\n\n    function testCalculateRebalance3Pool() external {\n        deal(address(threePoolToken), address(manager), type(uint96).max);\n        deal(address(metaPool), address(manager), type(uint96).max);\n\n        (uint256 delta, bool add) = manager.calculateRebalance(\n            MetaPoolAsset.THREE_POOL,\n            ThreePoolAsset.DAI,\n            1.0e18\n        );\n\n        if (add) {\n            manager.mintMetaPoolTokens(MetaPoolAsset.THREE_POOL, delta);\n        } else {\n            uint256[2] memory amounts;\n            amounts[uint256(MetaPoolAsset.THREE_POOL)] = delta;\n\n            uint256 burnAmount = metaPool.calc_token_amount(amounts, false);\n            manager.burnMetaPoolTokens(MetaPoolAsset.THREE_POOL, burnAmount);\n        }\n\n        assertApproxEq(1.0e18, manager.exchangeRate(ThreePoolAsset.DAI), 0.0001e18);\n    }\n\n    function testSetPendingAdmin() external {\n        manager.setPendingAdmin(address(0xdead));\n        assertEq(manager.pendingAdmin(), address(0xdead));\n    }\n\n    function testFailSetPendingAdminSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setPendingAdmin(address(0xbeef));\n    }\n\n    function testAcceptAdmin() external {\n        ThreePoolAssetManagerUser pendingAdmin = new ThreePoolAssetManagerUser(manager);\n\n        manager.setPendingAdmin(address(pendingAdmin));\n        pendingAdmin.acceptAdmin();\n\n        assertEq(manager.pendingAdmin(), address(0));\n        assertEq(manager.admin(), address(pendingAdmin));\n    }\n\n    function testFailAcceptTimelockNotPendingAdmin() external {\n        ThreePoolAssetManagerUser pendingAdmin = new ThreePoolAssetManagerUser(manager);\n\n        manager.setPendingAdmin(address(pendingAdmin));\n\n        hevm.prank(address(0xdead));\n        manager.acceptAdmin();\n    }\n\n    function testFailAcceptAdminPendingAdminUnset() external {\n        manager.acceptAdmin();\n    }\n\n    function testSetRewardReceiver() external {\n        manager.setRewardReceiver(address(0xdead));\n        assertEq(manager.rewardReceiver(), address(0xdead));\n    }\n\n    function testFailSetRewardReceiverSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setRewardReceiver(address(0xbeef));\n    }\n\n    function testSetTransmuterBuffer() external {\n        manager.setTransmuterBuffer(address(0xdead));\n        assertEq(manager.transmuterBuffer(), address(0xdead));\n    }\n\n    function testFailSetTransmuterBufferSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setTransmuterBuffer(address(0xbeef));\n    }\n\n    function testSetThreePoolSlippage() external {\n        manager.setThreePoolSlippage(1e4);\n        assertEq(manager.threePoolSlippage(), 1e4);\n    }\n\n    function testSetThreePoolSlippage(uint256 value) external {\n        value = bound(value, 0, SLIPPAGE_PRECISION);\n        manager.setThreePoolSlippage(value);\n\n        assertEq(manager.threePoolSlippage(), value);\n    }\n\n    function testFailSetThreePoolSlippageSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setThreePoolSlippage(1e4);\n    }\n\n    function testSetMetaPoolSlippage() external {\n        manager.setMetaPoolSlippage(1e4);\n        assertEq(manager.metaPoolSlippage(), 1e4);\n    }\n\n    function testSetMetaPoolSlippage(uint256 value) external {\n        value = bound(value, 0, SLIPPAGE_PRECISION);\n        manager.setMetaPoolSlippage(value);\n\n        assertEq(manager.metaPoolSlippage(), value);\n    }\n\n    function testFailSetMetaPoolSlippageSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setMetaPoolSlippage(1e4);\n    }\n\n    function testMintThreePoolTokensMultipleAssets() external {\n        deal(address(dai), address(manager), 1e18);\n        deal(address(usdc), address(manager), 1e6);\n\n        uint256[3] memory amounts;\n        amounts[uint256(ThreePoolAsset.DAI)]  = 1e18;\n        amounts[uint256(ThreePoolAsset.USDC)] = 1e6;\n\n        uint256 expectedOutput = 2e18 * CURVE_PRECISION / threePool.get_virtual_price();\n        uint256 minted         = manager.mintThreePoolTokens(amounts);\n\n        assertEq(dai.balanceOf(address(manager)), 0);\n        assertEq(usdc.balanceOf(address(manager)), 0);\n        assertEq(threePoolToken.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintThreePoolTokensMultipleAssetSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n\n        uint256[3] memory amounts;\n        manager.mintThreePoolTokens(amounts);\n    }\n\n    function testMintThreePoolTokensWithDAI() external {\n        deal(address(dai), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / threePool.get_virtual_price();\n        uint256 minted         = manager.mintThreePoolTokens(ThreePoolAsset.DAI, 1e18);\n\n        assertEq(dai.balanceOf(address(manager)), 0);\n        assertEq(threePoolToken.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintThreePoolTokensWithUSDC() external {\n        deal(address(usdc), address(manager), 1e6);\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / threePool.get_virtual_price();\n        uint256 minted         = manager.mintThreePoolTokens(ThreePoolAsset.USDC, 1e6);\n\n        assertEq(usdc.balanceOf(address(manager)), 0);\n        assertEq(threePoolToken.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintThreePoolTokensWithUSDT() external {\n        deal(address(usdt), address(manager), 1e6);\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / threePool.get_virtual_price();\n        uint256 minted         = manager.mintThreePoolTokens(ThreePoolAsset.USDT, 1e6);\n\n        assertEq(usdt.balanceOf(address(manager)), 0);\n        assertEq(threePoolToken.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintThreePoolTokensSingleAssetSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.mintThreePoolTokens(ThreePoolAsset.DAI, 0);\n    }\n\n    function testBurnThreePoolTokensIntoDAI() external {\n        deal(address(threePoolToken), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * threePool.get_virtual_price() / CURVE_PRECISION;\n        uint256 withdrawn      = manager.burnThreePoolTokens(ThreePoolAsset.DAI, 1e18);\n\n        assertEq(threePoolToken.balanceOf(address(manager)), 0);\n        assertEq(dai.balanceOf(address(manager)), withdrawn);\n        assertGt(withdrawn, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testBurnThreePoolTokensIntoUSDC() external {\n        deal(address(threePoolToken), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e6 * threePool.get_virtual_price() / CURVE_PRECISION;\n        uint256 withdrawn      = manager.burnThreePoolTokens(ThreePoolAsset.USDC, 1e18);\n\n        assertEq(threePoolToken.balanceOf(address(manager)), 0);\n        assertEq(usdc.balanceOf(address(manager)), withdrawn);\n        assertGt(withdrawn, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testBurnThreePoolTokensIntoUSDT() external {\n        deal(address(threePoolToken), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e6 * threePool.get_virtual_price() / CURVE_PRECISION;\n        uint256 withdrawn      = manager.burnThreePoolTokens(ThreePoolAsset.USDT, 1e18);\n\n        assertEq(threePoolToken.balanceOf(address(manager)), 0);\n        assertEq(usdt.balanceOf(address(manager)), withdrawn);\n        assertGt(withdrawn, expectedOutput * manager.threePoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testBurnThreePoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.burnThreePoolTokens(ThreePoolAsset.DAI, 0);\n    }\n\n    function testMintMetaPoolTokensMultipleAssets() external {\n        deal(address(alUSD), address(manager), 1e18);\n        deal(address(threePoolToken), address(manager), 1e18);\n\n        uint256[2] memory amounts;\n        amounts[uint256(MetaPoolAsset.ALUSD)]      = 1e18;\n        amounts[uint256(MetaPoolAsset.THREE_POOL)] = 1e18;\n\n        uint256 expectedOutput = 2e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(amounts);\n\n        assertEq(threePoolToken.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensMultipleAssetsSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n\n        uint256[2] memory amounts;\n        manager.mintMetaPoolTokens(amounts);\n    }\n\n    function testMintMetaPoolTokensSingleAsset() external {\n        deal(address(threePoolToken), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(MetaPoolAsset.THREE_POOL, 1e18);\n\n        assertEq(threePoolToken.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensSingleAssetSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.mintMetaPoolTokens(MetaPoolAsset.THREE_POOL, 0);\n    }\n\n    function testBurnMetaPoolTokens() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * metaPool.get_virtual_price() / CURVE_PRECISION;\n        uint256 withdrawn      = manager.burnMetaPoolTokens(MetaPoolAsset.ALUSD, 1e18);\n\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(alUSD.balanceOf(address(manager)), withdrawn);\n        assertGt(withdrawn, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testBurnMetaPoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.burnMetaPoolTokens(MetaPoolAsset.ALUSD, 0);\n    }\n\n    function testDepositMetaPoolTokens() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        assertTrue(manager.depositMetaPoolTokens(1e18));\n        assertEq(convexRewards.balanceOf(address(manager)), 1e18);\n    }\n\n    function testDepositMetaPoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.depositMetaPoolTokens(0);\n    }\n\n    function testWithdrawMetaPoolTokens() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        manager.depositMetaPoolTokens(1e18);\n\n        assertTrue(manager.withdrawMetaPoolTokens(1e18));\n\n        assertEq(convexRewards.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), 1e18);\n    }\n\n    function testWithdrawMetaPoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.withdrawMetaPoolTokens(0);\n    }\n\n    function testClaimRewards() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        manager.depositMetaPoolTokens(1e18);\n\n        hevm.warp(block.timestamp + 86400);\n\n        (uint256 earnedCurve, uint256 earnedConvex) = manager.claimableRewards();\n\n        assertTrue(manager.claimRewards());\n        assertEq(crv.balanceOf(manager.rewardReceiver()), earnedCurve);\n        assertEq(cvx.balanceOf(manager.rewardReceiver()), earnedConvex);\n    }\n\n    function testClaimRewardsSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.claimRewards();\n    }\n\n    function testFlushMultipleAssets() external {\n        deal(address(dai), address(manager), 1e18);\n\n        uint256[3] memory amounts;\n        amounts[uint256(ThreePoolAsset.DAI)] = 1e18;\n\n        uint256 minted = manager.flush(amounts);\n\n        assertEq(dai.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), minted);\n    }\n\n    function testFlushMultipleAssetsSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.flush(ThreePoolAsset.DAI, 1e18);\n    }\n\n    function testFlushSingleAsset() external {\n        deal(address(dai), address(manager), 1e18);\n\n        manager.setThreePoolSlippage(0);\n        manager.setMetaPoolSlippage(0);\n\n        uint256 minted = manager.flush(ThreePoolAsset.DAI, 1e18);\n\n        assertEq(dai.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), minted);\n    }\n\n    function testFlushSingleAssetSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.flush(ThreePoolAsset.DAI, 1e18);\n    }\n\n    function testRecall() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        manager.depositMetaPoolTokens(1e18);\n\n        manager.setThreePoolSlippage(0);\n        manager.setMetaPoolSlippage(0);\n\n        uint256 withdrawn = manager.recall(ThreePoolAsset.DAI, 1e18);\n\n        assertEq(dai.balanceOf(address(manager)), withdrawn);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), 0);\n    }\n\n    function testRecallSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.recall(ThreePoolAsset.DAI, 1e18);\n    }\n\n    function testReclaimThreePoolAsset() external {\n        deal(address(dai), address(manager), 1e18);\n\n        hevm.prank(transmuterBufferAdmin);\n        transmuterBuffer.setSource(address(manager), true);\n\n        hevm.expectCall(\n            manager.transmuterBuffer(),\n            abi.encodeWithSelector(\n                IERC20TokenReceiver.onERC20Received.selector,\n                address(dai),\n                1e18\n            )\n        );\n\n        manager.reclaimThreePoolAsset(ThreePoolAsset.DAI, 1e18);\n    }\n\n    function testFailReclaimThreePoolAssetSenderNotAdmin() external {\n        deal(address(dai), address(manager), 1e18);\n\n        hevm.prank(address(0xdead));\n        manager.reclaimThreePoolAsset(ThreePoolAsset.DAI, 1e18);\n    }\n\n    function testSweep() external {\n        deal(address(dai), address(manager), 1e18);\n\n        manager.sweep(address(dai), 1e18);\n\n        assertEq(dai.balanceOf(address(manager)), 0e18);\n        assertEq(dai.balanceOf(manager.admin()), 1e18);\n    }\n\n    function testFailSweepSenderNotAdmin() external {\n        deal(address(dai), address(manager), 1e18);\n\n        hevm.prank(address(0xdead));\n        manager.sweep(address(dai), 1e18);\n    }\n}\n\ncontract MockTransmuterBuffer is IERC20TokenReceiver {\n    function onERC20Received(address token, uint256 amount) external { }\n}"
    },
    "submodules/v2-foundry/src/test/utils/users/ThreePoolAssetManagerUser.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {ThreePoolAssetManager} from \"../../../ThreePoolAssetManager.sol\";\n\ncontract ThreePoolAssetManagerUser {\n    ThreePoolAssetManager internal manager;\n\n    constructor(ThreePoolAssetManager _manager) { manager = _manager; }\n\n    function acceptAdmin() external {\n        manager.acceptAdmin();\n    }\n}"
    },
    "submodules/v2-foundry/src/ThreePoolAssetManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/ErrorMessages.sol\";\nimport {Multicall} from \"./base/Multicall.sol\";\nimport {MutexLock} from \"./base/MutexLock.sol\";\n\nimport {IERC20TokenReceiver} from \"./interfaces/IERC20TokenReceiver.sol\";\nimport {IConvexBooster} from \"./interfaces/external/convex/IConvexBooster.sol\";\nimport {IConvexRewards} from \"./interfaces/external/convex/IConvexRewards.sol\";\nimport {IConvexToken} from \"./interfaces/external/convex/IConvexToken.sol\";\n\nimport {\n    IStableMetaPool,\n    N_COINS as NUM_META_COINS\n} from \"./interfaces/external/curve/IStableMetaPool.sol\";\n\nimport {\n    IStableSwap3Pool,\n    N_COINS as NUM_STABLE_COINS\n} from \"./interfaces/external/curve/IStableSwap3Pool.sol\";\n\nimport {SafeERC20} from \"./libraries/SafeERC20.sol\";\n\n/// @notice A struct used to define initialization parameters. This is not included\n///         in the contract to prevent naming collisions.\nstruct InitializationParams {\n    address admin;\n    address operator;\n    address rewardReceiver;\n    address transmuterBuffer;\n    IERC20 curveToken;\n    IStableSwap3Pool threePool;\n    IStableMetaPool metaPool;\n    uint256 threePoolSlippage;\n    uint256 metaPoolSlippage;\n    IConvexToken convexToken;\n    IConvexBooster convexBooster;\n    IConvexRewards convexRewards;\n    uint256 convexPoolId;\n}\n\n/// @dev The amount of precision that slippage parameters have.\nuint256 constant SLIPPAGE_PRECISION = 1e4;\n\n/// @dev The amount of precision that curve pools use for price calculations.\nuint256 constant CURVE_PRECISION = 1e18;\n\n/// @notice Enumerations for 3pool assets.\n///\n/// @dev Do not change the order of these fields.\nenum ThreePoolAsset {\n    DAI, USDC, USDT\n}\n\n/// @notice Enumerations for meta pool assets.\n///\n/// @dev Do not change the order of these fields.\nenum MetaPoolAsset {\n    ALUSD, THREE_POOL\n}\n\n/// @title  ThreePoolAssetManager\n/// @author Alchemix Finance\ncontract ThreePoolAssetManager is Multicall, MutexLock, IERC20TokenReceiver {\n    /// @notice Emitted when the admin is updated.\n    ///\n    /// @param admin The admin.\n    event AdminUpdated(address admin);\n\n    /// @notice Emitted when the pending admin is updated.\n    ///\n    /// @param pendingAdmin The pending admin.\n    event PendingAdminUpdated(address pendingAdmin);\n\n    /// @notice Emitted when the operator is updated.\n    ///\n    /// @param operator The operator.\n    event OperatorUpdated(address operator);\n\n    /// @notice Emitted when the reward receiver is updated.\n    ///\n    /// @param rewardReceiver The reward receiver.\n    event RewardReceiverUpdated(address rewardReceiver);\n\n    /// @notice Emitted when the transmuter buffer is updated.\n    ///\n    /// @param transmuterBuffer The transmuter buffer.\n    event TransmuterBufferUpdated(address transmuterBuffer);\n\n    /// @notice Emitted when the 3pool slippage is updated.\n    ///\n    /// @param threePoolSlippage The 3pool slippage.\n    event ThreePoolSlippageUpdated(uint256 threePoolSlippage);\n\n    /// @notice Emitted when the meta pool slippage is updated.\n    ///\n    /// @param metaPoolSlippage The meta pool slippage.\n    event MetaPoolSlippageUpdated(uint256 metaPoolSlippage);\n\n    /// @notice Emitted when 3pool tokens are minted.\n    ///\n    /// @param amounts               The amounts of each 3pool asset used to mint liquidity.\n    /// @param mintedThreePoolTokens The amount of 3pool tokens minted.\n    event MintThreePoolTokens(uint256[NUM_STABLE_COINS] amounts, uint256 mintedThreePoolTokens);\n\n    /// @notice Emitted when 3pool tokens are minted.\n    ///\n    /// @param asset                 The 3pool asset used to mint 3pool tokens.\n    /// @param amount                The amount of the asset used to mint 3pool tokens.\n    /// @param mintedThreePoolTokens The amount of 3pool tokens minted.\n    event MintThreePoolTokens(ThreePoolAsset asset, uint256 amount, uint256 mintedThreePoolTokens);\n\n    /// @notice Emitted when 3pool tokens are burned.\n    ///\n    /// @param asset     The 3pool asset that was received.\n    /// @param amount    The amount of 3pool tokens that were burned.\n    /// @param withdrawn The amount of the 3pool asset that was withdrawn.\n    event BurnThreePoolTokens(ThreePoolAsset asset, uint256 amount, uint256 withdrawn);\n\n    /// @notice Emitted when meta pool tokens are minted.\n    ///\n    /// @param amounts               The amounts of each meta pool asset used to mint liquidity.\n    /// @param mintedThreePoolTokens The amount of meta pool tokens minted.\n    event MintMetaPoolTokens(uint256[NUM_META_COINS] amounts, uint256 mintedThreePoolTokens);\n\n    /// @notice Emitted when meta tokens are minted.\n    ///\n    /// @param asset  The asset used to mint meta pool tokens.\n    /// @param amount The amount of the asset used to mint meta pool tokens.\n    /// @param minted The amount of meta pool tokens minted.\n    event MintMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 minted);\n\n    /// @notice Emitted when meta pool tokens are burned.\n    ///\n    /// @param asset     The meta pool asset that was received.\n    /// @param amount    The amount of meta pool tokens that were burned.\n    /// @param withdrawn The amount of the asset that was withdrawn.\n    event BurnMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 withdrawn);\n\n    /// @notice Emitted when meta pool tokens are deposited into convex.\n    ///\n    /// @param amount  The amount of meta pool tokens that were deposited.\n    /// @param success If the operation was successful.\n    event DepositMetaPoolTokens(uint256 amount, bool success);\n\n    /// @notice Emitted when meta pool tokens are withdrawn from convex.\n    ///\n    /// @param amount  The amount of meta pool tokens that were withdrawn.\n    /// @param success If the operation was successful.\n    event WithdrawMetaPoolTokens(uint256 amount, bool success);\n\n    /// @notice Emitted when convex rewards are claimed.\n    ///\n    /// @param success      If the operation was successful.\n    /// @param amountCurve  The amount of curve tokens sent to the reward recipient.\n    /// @param amountConvex The amount of convex tokens sent to the reward recipient.\n    event ClaimRewards(bool success, uint256 amountCurve, uint256 amountConvex);\n\n    /// @notice Emitted when 3pool assets are sent to the transmuter buffer.\n    ///\n    /// @param asset  The 3pool asset that was reclaimed.\n    /// @param amount The amount of the asset that was reclaimed.\n    event ReclaimThreePoolAsset(ThreePoolAsset asset, uint256 amount);\n\n    /// @notice The admin.\n    address public admin;\n\n    /// @notice The current pending admin.\n    address public pendingAdmin;\n\n    /// @notice The operator.\n    address public operator;\n\n    // @notice The reward receiver.\n    address public rewardReceiver;\n\n    /// @notice The transmuter buffer.\n    address public transmuterBuffer;\n\n    /// @notice The curve token.\n    IERC20 public immutable curveToken;\n\n    /// @notice The 3pool contract.\n    IStableSwap3Pool public immutable threePool;\n\n    /// @notice The meta pool contract.\n    IStableMetaPool public immutable metaPool;\n\n    /// @notice The amount of slippage that will be tolerated when depositing and withdrawing assets\n    ///         from the stable swap pool. In units of basis points.\n    uint256 public threePoolSlippage;\n\n    /// @notice The amount of slippage that will be tolerated when depositing and withdrawing assets\n    ///         from the meta pool. In units of basis points.\n    uint256 public metaPoolSlippage;\n\n    /// @notice The convex token.\n    IConvexToken public immutable convexToken;\n\n    /// @notice The convex booster contract.\n    IConvexBooster public immutable convexBooster;\n\n    /// @notice The convex rewards contract.\n    IConvexRewards public immutable convexRewards;\n\n    /// @notice The convex pool identifier.\n    uint256 public immutable convexPoolId;\n\n    /// @dev A cache of the tokens that the stable swap pool supports.\n    IERC20[NUM_STABLE_COINS] private _threePoolAssetCache;\n\n    /// @dev A cache of the tokens that the meta pool supports.\n    IERC20[NUM_META_COINS] private _metaPoolAssetCache;\n\n    /// @dev A modifier which reverts if the message sender is not the admin.\n    modifier onlyAdmin() {\n        if (msg.sender != admin) {\n            revert Unauthorized(\"Not admin\");\n        }\n        _;\n    }\n\n    /// @dev A modifier which reverts if the message sender is not the operator.\n    modifier onlyOperator() {\n        if (msg.sender != operator) {\n            revert Unauthorized(\"Not operator\");\n        }\n        _;\n    }\n\n    constructor(InitializationParams memory params) {\n        admin             = params.admin;\n        operator          = params.operator;\n        rewardReceiver    = params.rewardReceiver;\n        transmuterBuffer  = params.transmuterBuffer;\n        curveToken        = params.curveToken;\n        threePool         = params.threePool;\n        metaPool          = params.metaPool;\n        threePoolSlippage = params.threePoolSlippage;\n        metaPoolSlippage  = params.metaPoolSlippage;\n        convexToken       = params.convexToken;\n        convexBooster     = params.convexBooster;\n        convexRewards     = params.convexRewards;\n        convexPoolId      = params.convexPoolId;\n\n        for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\n            _threePoolAssetCache[i] = params.threePool.coins(i);\n        }\n\n        for (uint256 i = 0; i < NUM_META_COINS; i++) {\n            _metaPoolAssetCache[i] = params.metaPool.coins(i);\n        }\n\n        emit AdminUpdated(admin);\n        emit OperatorUpdated(operator);\n        emit RewardReceiverUpdated(rewardReceiver);\n        emit TransmuterBufferUpdated(transmuterBuffer);\n        emit ThreePoolSlippageUpdated(threePoolSlippage);\n        emit MetaPoolSlippageUpdated(metaPoolSlippage);\n    }\n\n    /// @notice Gets the amount of meta pool tokens that this contract has in reserves.\n    ///\n    /// @return The reserves.\n    function metaPoolReserves() external view returns (uint256) {\n        return metaPool.balanceOf(address(this));\n    }\n\n    /// @notice Gets the amount of a 3pool asset that this contract has in reserves.\n    ///\n    /// @param asset The 3pool asset.\n    ///\n    /// @return The reserves.\n    function threePoolAssetReserves(ThreePoolAsset asset) external view returns (uint256) {\n        IERC20 token = getTokenForThreePoolAsset(asset);\n        return token.balanceOf(address(this));\n    }\n\n    /// @notice Gets the amount of a meta pool asset that this contract has in reserves.\n    ///\n    /// @param asset The meta pool asset.\n    ///\n    /// @return The reserves.\n    function metaPoolAssetReserves(MetaPoolAsset asset) external view returns (uint256) {\n        IERC20 token = getTokenForMetaPoolAsset(asset);\n        return token.balanceOf(address(this));\n    }\n\n    /// @notice Gets the amount of a 3pool asset that one alUSD is worth.\n    ///\n    /// @param asset The 3pool asset.\n    ///\n    /// @return The amount of the underying.\n    function exchangeRate(ThreePoolAsset asset) public view returns (uint256) {\n        IERC20 alUSD = getTokenForMetaPoolAsset(MetaPoolAsset.ALUSD);\n\n        uint256[NUM_META_COINS] memory metaBalances = metaPool.get_balances();\n        uint256 amountThreePool = metaPool.get_dy(\n            int128(uint128(uint256(MetaPoolAsset.ALUSD))),\n            int128(uint128(uint256(MetaPoolAsset.THREE_POOL))),\n            10**SafeERC20.expectDecimals(address(alUSD)),\n            metaBalances\n        );\n\n        return threePool.calc_withdraw_one_coin(amountThreePool, int128(uint128(uint256(asset))));\n    }\n\n    /// @dev Struct used to declare local variables for the calculate rebalance function.\n    struct CalculateRebalanceLocalVars {\n        uint256 minimum;\n        uint256 maximum;\n        uint256 minimumDistance;\n        uint256 minimizedBalance;\n        uint256 startingBalance;\n    }\n\n    /// @notice Calculates how much alUSD or 3pool needs to be added or removed from the metapool\n    ///         to reach a target exchange rate for a specified 3pool asset.\n    ///\n    /// @param rebalanceAsset      The meta pool asset to use to rebalance the pool.\n    /// @param targetExchangeAsset The 3pool asset to balance the price relative to.\n    /// @param targetExchangeRate  The target exchange rate.\n    ///\n    /// @return delta The amount of alUSD or 3pool that needs to be added or removed from the pool.\n    /// @return add   If the alUSD or 3pool needs to be removed or added.\n    function calculateRebalance(\n        MetaPoolAsset rebalanceAsset,\n        ThreePoolAsset targetExchangeAsset,\n        uint256 targetExchangeRate\n    ) public view returns (uint256 delta, bool add) {\n        uint256 decimals;\n        {\n            IERC20 alUSD = getTokenForMetaPoolAsset(MetaPoolAsset.ALUSD);\n            decimals     = SafeERC20.expectDecimals(address(alUSD));\n        }\n\n        uint256[NUM_META_COINS] memory startingBalances = metaPool.get_balances();\n        uint256[NUM_META_COINS] memory currentBalances  = [startingBalances[0], startingBalances[1]];\n\n        CalculateRebalanceLocalVars memory v;\n        v.minimum          = 0;\n        v.maximum          = type(uint96).max;\n        v.minimumDistance  = type(uint256).max;\n        v.minimizedBalance = type(uint256).max;\n        v.startingBalance  = startingBalances[uint256(rebalanceAsset)];\n\n        uint256 previousBalance;\n\n        for (uint256 i = 0; i < 256; i++) {\n            uint256 examineBalance;\n            if ((examineBalance = (v.maximum + v.minimum) / 2) == previousBalance) break;\n\n            currentBalances[uint256(rebalanceAsset)] = examineBalance;\n\n            uint256 amountThreePool = metaPool.get_dy(\n                int128(uint128(uint256(MetaPoolAsset.ALUSD))),\n                int128(uint128(uint256(MetaPoolAsset.THREE_POOL))),\n                10**decimals,\n                currentBalances\n            );\n\n            uint256 exchangeRate = threePool.calc_withdraw_one_coin(\n                amountThreePool,\n                int128(uint128(uint256(targetExchangeAsset)))\n            );\n\n            uint256 distance = abs(exchangeRate, targetExchangeRate);\n\n            if (distance < v.minimumDistance) {\n                v.minimumDistance  = distance;\n                v.minimizedBalance = examineBalance;\n            } else if(distance == v.minimumDistance) {\n                uint256 examineDelta = abs(examineBalance, v.startingBalance);\n                uint256 currentDelta = abs(v.minimizedBalance, v.startingBalance);\n                v.minimizedBalance = currentDelta > examineDelta ? examineBalance : v.minimizedBalance;\n            }\n\n            if (exchangeRate > targetExchangeRate) {\n                if (rebalanceAsset == MetaPoolAsset.ALUSD) {\n                    v.minimum = examineBalance;\n                } else {\n                    v.maximum = examineBalance;\n                }\n            } else {\n                if (rebalanceAsset == MetaPoolAsset.ALUSD) {\n                    v.maximum = examineBalance;\n                } else {\n                    v.minimum = examineBalance;\n                }\n            }\n\n            previousBalance = examineBalance;\n        }\n\n        return v.minimizedBalance > v.startingBalance\n            ? (v.minimizedBalance - v.startingBalance, true)\n            : (v.startingBalance - v.minimizedBalance, false);\n    }\n\n    /// @notice Gets the amount of curve tokens and convex tokens that can be claimed.\n    ///\n    /// @return amountCurve  The amount of curve tokens available.\n    /// @return amountConvex The amount of convex tokens available.\n    function claimableRewards() public view returns (uint256 amountCurve, uint256 amountConvex) {\n        amountCurve  = convexRewards.earned(address(this));\n        amountConvex = _getEarnedConvex(amountCurve);\n    }\n\n    /// @notice Gets the ERC20 token associated with a 3pool asset.\n    ///\n    /// @param asset The asset to get the token for.\n    ///\n    /// @return The token.\n    function getTokenForThreePoolAsset(ThreePoolAsset asset) public view returns (IERC20) {\n        uint256 index = uint256(asset);\n        if (index >= NUM_STABLE_COINS) {\n            revert IllegalArgument(\"Asset index out of bounds\");\n        }\n        return _threePoolAssetCache[index];\n    }\n\n    /// @notice Gets the ERC20 token associated with a meta pool asset.\n    ///\n    /// @param asset The asset to get the token for.\n    ///\n    /// @return The token.\n    function getTokenForMetaPoolAsset(MetaPoolAsset asset) public view returns (IERC20) {\n        uint256 index = uint256(asset);\n        if (index >= NUM_META_COINS) {\n            revert IllegalArgument(\"Asset index out of bounds\");\n        }\n        return _metaPoolAssetCache[index];\n    }\n\n    /// @notice Begins the 2-step process of setting the administrator.\n    ///\n    /// The caller must be the admin. Setting the pending timelock to the zero address will stop\n    /// the process of setting a new timelock.\n    ///\n    /// @param value The value to set the pending timelock to.\n    function setPendingAdmin(address value) external onlyAdmin {\n        pendingAdmin = value;\n        emit PendingAdminUpdated(value);\n    }\n\n    /// @notice Completes the 2-step process of setting the administrator.\n    ///\n    /// The pending admin must be set and the caller must be the pending admin. After this function\n    /// is successfully executed, the admin will be set to the pending admin and the pending admin\n    /// will be reset.\n    function acceptAdmin() external {\n        if (pendingAdmin == address(0)) {\n            revert IllegalState(\"Pending admin unset\");\n        }\n\n        if (pendingAdmin != msg.sender) {\n            revert Unauthorized(\"Not pending admin\");\n        }\n\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n\n        emit AdminUpdated(admin);\n        emit PendingAdminUpdated(address(0));\n    }\n\n    /// @notice Sets the operator.\n    ///\n    /// The caller must be the admin.\n    ///\n    /// @param value The value to set the admin to.\n    function setOperator(address value) external onlyAdmin {\n        operator = value;\n        emit OperatorUpdated(value);\n    }\n\n    /// @notice Sets the reward receiver.\n    ///\n    /// @param value The value to set the reward receiver to.\n    function setRewardReceiver(address value) external onlyAdmin {\n        rewardReceiver = value;\n        emit RewardReceiverUpdated(value);\n    }\n\n    /// @notice Sets the transmuter buffer.\n    ///\n    /// @param value The value to set the transmuter buffer to.\n    function setTransmuterBuffer(address value) external onlyAdmin {\n        transmuterBuffer = value;\n        emit TransmuterBufferUpdated(value);\n    }\n\n    /// @notice Sets the slippage that will be tolerated when depositing and withdrawing 3pool\n    ///         assets. The slippage has a resolution of 6 decimals.\n    ///\n    /// The operator is allowed to set the slippage because it is a volatile parameter that may need\n    /// fine adjustment in a short time window.\n    ///\n    /// @param value The value to set the slippage to.\n    function setThreePoolSlippage(uint256 value) external onlyOperator {\n        if (value > SLIPPAGE_PRECISION) {\n            revert IllegalArgument(\"Slippage not in range\");\n        }\n        threePoolSlippage = value;\n        emit ThreePoolSlippageUpdated(value);\n    }\n\n    /// @notice Sets the slippage that will be tolerated when depositing and withdrawing meta pool\n    ///         assets. The slippage has a resolution of 6 decimals.\n    ///\n    /// The operator is allowed to set the slippage because it is a volatile parameter that may need\n    /// fine adjustment in a short time window.\n    ///\n    /// @param value The value to set the slippage to.\n    function setMetaPoolSlippage(uint256 value) external onlyOperator {\n        if (value > SLIPPAGE_PRECISION) {\n            revert IllegalArgument(\"Slippage not in range\");\n        }\n        metaPoolSlippage = value;\n        emit MetaPoolSlippageUpdated(value);\n    }\n\n    /// @notice Mints 3pool tokens with a combination of assets.\n    ///\n    /// @param amounts The amounts of the assets to deposit.\n    ///\n    /// @return minted The number of 3pool tokens minted.\n    function mintThreePoolTokens(\n        uint256[NUM_STABLE_COINS] calldata amounts\n    ) external lock onlyOperator returns (uint256 minted) {\n        return _mintThreePoolTokens(amounts);\n    }\n\n    /// @notice Mints 3pool tokens with an asset.\n    ///\n    /// @param asset  The asset to deposit into the 3pool.\n    /// @param amount The amount of the asset to deposit.\n    ///\n    /// @return minted The number of 3pool tokens minted.\n    function mintThreePoolTokens(\n        ThreePoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256 minted) {\n        return _mintThreePoolTokens(asset, amount);\n    }\n\n    /// @notice Burns 3pool tokens to withdraw an asset.\n    ///\n    /// @param asset  The asset to withdraw.\n    /// @param amount The amount of 3pool tokens to burn.\n    ///\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\n    function burnThreePoolTokens(\n        ThreePoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256 withdrawn) {\n        return _burnThreePoolTokens(asset, amount);\n    }\n\n    /// @notice Mints meta pool tokens with a combination of assets.\n    ///\n    /// @param amounts The amounts of the assets to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function mintMetaPoolTokens(\n        uint256[NUM_META_COINS] calldata amounts\n    ) external lock onlyOperator returns (uint256 minted) {\n        return _mintMetaPoolTokens(amounts);\n    }\n\n    /// @notice Mints meta pool tokens with an asset.\n    ///\n    /// @param asset  The asset to deposit into the meta pool.\n    /// @param amount The amount of the asset to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function mintMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256 minted) {\n        return _mintMetaPoolTokens(asset, amount);\n    }\n\n    /// @notice Burns meta pool tokens to withdraw an asset.\n    ///\n    /// @param asset  The asset to withdraw.\n    /// @param amount The amount of meta pool tokens to burn.\n    ///\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\n    function burnMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256 withdrawn) {\n        return _burnMetaPoolTokens(asset, amount);\n    }\n\n    /// @notice Deposits and stakes meta pool tokens into convex.\n    ///\n    /// @param amount The amount of meta pool tokens to deposit.\n    ///\n    /// @return success If the tokens were successfully deposited.\n    function depositMetaPoolTokens(\n        uint256 amount\n    ) external lock onlyOperator returns (bool success) {\n        return _depositMetaPoolTokens(amount);\n    }\n\n    /// @notice Withdraws and unwraps meta pool tokens from convex.\n    ///\n    /// @param amount The amount of meta pool tokens to withdraw.\n    ///\n    /// @return success If the tokens were successfully withdrawn.\n    function withdrawMetaPoolTokens(\n        uint256 amount\n    ) external lock onlyOperator returns (bool success) {\n        return _withdrawMetaPoolTokens(amount);\n    }\n\n    /// @notice Claims convex, curve, and auxiliary rewards.\n    ///\n    /// @return success If the claim was successful.\n    function claimRewards() external lock onlyOperator returns (bool success) {\n        success = convexRewards.getReward();\n\n        uint256 curveBalance  = curveToken.balanceOf(address(this));\n        uint256 convexBalance = convexToken.balanceOf(address(this));\n\n        SafeERC20.safeTransfer(address(curveToken), rewardReceiver, curveBalance);\n        SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance);\n\n        emit ClaimRewards(success, curveBalance, convexBalance);\n    }\n\n    /// @notice Flushes three pool assets into convex by minting 3pool tokens from the assets,\n    ///         minting meta pool tokens using the 3pool tokens, and then depositing the meta pool\n    ///         tokens into convex.\n    ///\n    /// This function is provided for ease of use.\n    ///\n    /// @param amounts The amounts of the 3pool assets to flush.\n    ///\n    /// @return The amount of meta pool tokens deposited into convex.\n    function flush(\n        uint256[NUM_STABLE_COINS] calldata amounts\n    ) external lock onlyOperator returns (uint256) {\n        uint256 mintedThreePoolTokens = _mintThreePoolTokens(amounts);\n\n        uint256 mintedMetaPoolTokens = _mintMetaPoolTokens(\n            MetaPoolAsset.THREE_POOL,\n            mintedThreePoolTokens\n        );\n\n        if (!_depositMetaPoolTokens(mintedMetaPoolTokens)) {\n            revert IllegalState(\"Deposit into convex failed\");\n        }\n\n        return mintedMetaPoolTokens;\n    }\n\n    /// @notice Flushes a three pool asset into convex by minting 3pool tokens using the asset,\n    ///         minting meta pool tokens using the 3pool tokens, and then depositing the meta pool\n    ///         tokens into convex.\n    ///\n    /// This function is provided for ease of use.\n    ///\n    /// @param asset  The 3pool asset to flush.\n    /// @param amount The amount of the 3pool asset to flush.\n    ///\n    /// @return The amount of meta pool tokens deposited into convex.\n    function flush(\n        ThreePoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256) {\n        uint256 mintedThreePoolTokens = _mintThreePoolTokens(asset, amount);\n\n        uint256 mintedMetaPoolTokens = _mintMetaPoolTokens(\n            MetaPoolAsset.THREE_POOL,\n            mintedThreePoolTokens\n        );\n\n        if (!_depositMetaPoolTokens(mintedMetaPoolTokens)) {\n            revert IllegalState(\"Deposit into convex failed\");\n        }\n\n        return mintedMetaPoolTokens;\n    }\n\n    /// @notice Recalls a three pool asset into reserves by withdrawing meta pool tokens from\n    ///         convex, burning the meta pool tokens for 3pool tokens, and then burning the 3pool\n    ///         tokens for an asset.\n    ///\n    /// This function is provided for ease of use.\n    ///\n    /// @param asset  The 3pool asset to recall.\n    /// @param amount The amount of the meta pool tokens to withdraw from convex and burn.\n    ///\n    /// @return The amount of the 3pool asset recalled.\n    function recall(\n        ThreePoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256) {\n        if (!_withdrawMetaPoolTokens(amount)) {\n            revert IllegalState(\"Withdraw from convex failed\");\n        }\n        uint256 withdrawnThreePoolTokens = _burnMetaPoolTokens(MetaPoolAsset.THREE_POOL, amount);\n        return _burnThreePoolTokens(asset, withdrawnThreePoolTokens);\n    }\n\n    /// @notice Reclaims a three pool asset to the transmuter buffer.\n    ///\n    /// @param asset  The 3pool asset to reclaim.\n    /// @param amount The amount to reclaim.\n    function reclaimThreePoolAsset(ThreePoolAsset asset, uint256 amount) public lock onlyAdmin {\n        IERC20 token = getTokenForThreePoolAsset(asset);\n        SafeERC20.safeTransfer(address(token), transmuterBuffer, amount);\n\n        IERC20TokenReceiver(transmuterBuffer).onERC20Received(address(token), amount);\n\n        emit ReclaimThreePoolAsset(asset, amount);\n    }\n\n    /// @notice Sweeps a token out of the contract to the admin.\n    ///\n    /// @param token  The token to sweep.\n    /// @param amount The amount of the token to sweep.\n    function sweep(address token, uint256 amount) external lock onlyAdmin {\n        SafeERC20.safeTransfer(address(token), msg.sender, amount);\n    }\n\n    /// @inheritdoc IERC20TokenReceiver\n    ///\n    /// @dev This function is required in order to receive tokens from the conduit.\n    function onERC20Received(address token, uint256 value) external { /* noop */ }\n\n    /// @dev Gets the amount of convex that will be minted for an amount of curve tokens.\n    ///\n    /// @param amountCurve The amount of curve tokens.\n    ///\n    /// @return The amount of convex tokens.\n    function _getEarnedConvex(uint256 amountCurve) internal view returns (uint256) {\n        uint256 supply      = convexToken.totalSupply();\n        uint256 cliff       = supply / convexToken.reductionPerCliff();\n        uint256 totalCliffs = convexToken.totalCliffs();\n\n        if (cliff >= totalCliffs) return 0;\n\n        uint256 reduction = totalCliffs - cliff;\n        uint256 earned    = amountCurve * reduction / totalCliffs;\n\n        uint256 available = convexToken.maxSupply() - supply;\n        return earned > available ? available : earned;\n    }\n\n    /// @dev Mints 3pool tokens with a combination of assets.\n    ///\n    /// @param amounts The amounts of the assets to deposit.\n    ///\n    /// @return minted The number of 3pool tokens minted.\n    function _mintThreePoolTokens(\n        uint256[NUM_STABLE_COINS] calldata amounts\n    ) internal returns (uint256 minted) {\n        IERC20[NUM_STABLE_COINS] memory tokens = _threePoolAssetCache;\n\n        IERC20 threePoolToken = getTokenForMetaPoolAsset(MetaPoolAsset.THREE_POOL);\n\n        uint256 threePoolDecimals = SafeERC20.expectDecimals(address(threePoolToken));\n        uint256 normalizedTotal   = 0;\n\n        for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\n            if (amounts[i] == 0) continue;\n\n            uint256 tokenDecimals   = SafeERC20.expectDecimals(address(tokens[i]));\n            uint256 missingDecimals = threePoolDecimals - tokenDecimals;\n\n            normalizedTotal += amounts[i] * 10**missingDecimals;\n\n            // For assets like USDT, the approval must be first set to zero before updating it.\n            SafeERC20.safeApprove(address(tokens[i]), address(threePool), 0);\n            SafeERC20.safeApprove(address(tokens[i]), address(threePool), amounts[i]);\n        }\n\n        // Calculate what the normalized value of the tokens is.\n        uint256 expectedOutput = normalizedTotal * CURVE_PRECISION / threePool.get_virtual_price();\n\n        // Calculate the minimum amount of 3pool lp tokens that we are expecting out when\n        // adding liquidity for all of the assets. This value is based off the optimistic\n        // assumption that one of each token is approximately equal to one 3pool lp token.\n        uint256 minimumMintAmount = expectedOutput * threePoolSlippage / SLIPPAGE_PRECISION;\n\n        // Record the amount of 3pool lp tokens that we start with before adding liquidity\n        // so that we can determine how many we minted.\n        uint256 startingBalance = threePoolToken.balanceOf(address(this));\n\n        // Add the liquidity to the pool.\n        threePool.add_liquidity(amounts, minimumMintAmount);\n\n        // Calculate how many 3pool lp tokens were minted.\n        minted = threePoolToken.balanceOf(address(this)) - startingBalance;\n\n        emit MintThreePoolTokens(amounts, minted);\n    }\n\n    /// @dev Mints 3pool tokens with an asset.\n    ///\n    /// @param asset  The asset to deposit into the 3pool.\n    /// @param amount The amount of the asset to deposit.\n    ///\n    /// @return minted The number of 3pool tokens minted.\n    function _mintThreePoolTokens(\n        ThreePoolAsset asset,\n        uint256 amount\n    ) internal returns (uint256 minted) {\n        IERC20 token          = getTokenForThreePoolAsset(asset);\n        IERC20 threePoolToken = getTokenForMetaPoolAsset(MetaPoolAsset.THREE_POOL);\n\n        uint256 threePoolDecimals = SafeERC20.expectDecimals(address(threePoolToken));\n        uint256 missingDecimals   = threePoolDecimals - SafeERC20.expectDecimals(address(token));\n\n        uint256[NUM_STABLE_COINS] memory amounts;\n        amounts[uint256(asset)] = amount;\n\n        // Calculate the minimum amount of 3pool lp tokens that we are expecting out when\n        // adding single sided liquidity. This value is based off the optimistic assumption that\n        // one of each token is approximately equal to one 3pool lp token.\n        uint256 normalizedAmount  = amount * 10**missingDecimals;\n        uint256 expectedOutput    = normalizedAmount * CURVE_PRECISION / threePool.get_virtual_price();\n        uint256 minimumMintAmount = expectedOutput * threePoolSlippage / SLIPPAGE_PRECISION;\n\n        // Record the amount of 3pool lp tokens that we start with before adding liquidity\n        // so that we can determine how many we minted.\n        uint256 startingBalance = threePoolToken.balanceOf(address(this));\n\n        // For assets like USDT, the approval must be first set to zero before updating it.\n        SafeERC20.safeApprove(address(token), address(threePool), 0);\n        SafeERC20.safeApprove(address(token), address(threePool), amount);\n\n        // Add the liquidity to the pool.\n        threePool.add_liquidity(amounts, minimumMintAmount);\n\n        // Calculate how many 3pool lp tokens were minted.\n        minted = threePoolToken.balanceOf(address(this)) - startingBalance;\n\n        emit MintThreePoolTokens(asset, amount, minted);\n    }\n\n    /// @dev Burns 3pool tokens to withdraw an asset.\n    ///\n    /// @param asset  The asset to withdraw.\n    /// @param amount The amount of 3pool tokens to burn.\n    ///\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\n    function _burnThreePoolTokens(\n        ThreePoolAsset asset,\n        uint256 amount\n    ) internal returns (uint256 withdrawn) {\n        IERC20 token          = getTokenForThreePoolAsset(asset);\n        IERC20 threePoolToken = getTokenForMetaPoolAsset(MetaPoolAsset.THREE_POOL);\n\n        uint256 index = uint256(asset);\n\n        uint256 threePoolDecimals = SafeERC20.expectDecimals(address(threePoolToken));\n        uint256 missingDecimals   = threePoolDecimals - SafeERC20.expectDecimals(address(token));\n\n        // Calculate the minimum amount of underlying tokens that we are expecting out when\n        // removing single sided liquidity. This value is based off the optimistic assumption that\n        // one of each token is approximately equal to one 3pool lp token.\n        uint256 normalizedAmount = amount * threePoolSlippage / SLIPPAGE_PRECISION;\n        uint256 expectedOutput   = normalizedAmount * threePool.get_virtual_price() / CURVE_PRECISION;\n        uint256 minimumAmountOut = expectedOutput / 10**missingDecimals;\n\n        // Record the amount of underlying tokens that we start with before removing liquidity\n        // so that we can determine how many we withdrew from the pool.\n        uint256 startingBalance = token.balanceOf(address(this));\n\n        SafeERC20.safeApprove(address(threePoolToken), address(threePool), 0);\n        SafeERC20.safeApprove(address(threePoolToken), address(threePool), amount);\n\n        // Remove the liquidity from the pool.\n        threePool.remove_liquidity_one_coin(amount, int128(uint128(index)), minimumAmountOut);\n\n        // Calculate how many underlying tokens that were withdrawn.\n        withdrawn = token.balanceOf(address(this)) - startingBalance;\n\n        emit BurnThreePoolTokens(asset, amount, withdrawn);\n    }\n\n    /// @dev Mints meta pool tokens with a combination of assets.\n    ///\n    /// @param amounts The amounts of the assets to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function _mintMetaPoolTokens(\n        uint256[NUM_META_COINS] calldata amounts\n    ) internal returns (uint256 minted) {\n        IERC20[NUM_META_COINS] memory tokens = _metaPoolAssetCache;\n\n        uint256 total = 0;\n        for (uint256 i = 0; i < NUM_META_COINS; i++) {\n            if (amounts[i] == 0) continue;\n\n            total += amounts[i];\n\n            // For assets like USDT, the approval must be first set to zero before updating it.\n            SafeERC20.safeApprove(address(tokens[i]), address(metaPool), 0);\n            SafeERC20.safeApprove(address(tokens[i]), address(metaPool), amounts[i]);\n        }\n\n        // Calculate the minimum amount of 3pool lp tokens that we are expecting out when\n        // adding liquidity for all of the assets. This value is based off the optimistic\n        // assumption that one of each token is approximately equal to one 3pool lp token.\n        uint256 expectedOutput    = total * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minimumMintAmount = expectedOutput * metaPoolSlippage / SLIPPAGE_PRECISION;\n\n        // Add the liquidity to the pool.\n        minted = metaPool.add_liquidity(amounts, minimumMintAmount);\n\n        emit MintMetaPoolTokens(amounts, minted);\n    }\n\n    /// @dev Mints meta pool tokens with an asset.\n    ///\n    /// @param asset  The asset to deposit into the meta pool.\n    /// @param amount The amount of the asset to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function _mintMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) internal returns (uint256 minted) {\n        IERC20 token = getTokenForMetaPoolAsset(asset);\n\n        uint256[NUM_META_COINS] memory amounts;\n        amounts[uint256(asset)] = amount;\n\n        // Calculate the minimum amount of 3pool lp tokens that we are expecting out when\n        // adding single sided liquidity. This value is based off the optimistic assumption that\n        uint256 minimumMintAmount = amount * metaPoolSlippage / SLIPPAGE_PRECISION;\n\n        // For assets like USDT, the approval must be first set to zero before updating it.\n        SafeERC20.safeApprove(address(token), address(metaPool), 0);\n        SafeERC20.safeApprove(address(token), address(metaPool), amount);\n\n        // Add the liquidity to the pool.\n        minted = metaPool.add_liquidity(amounts, minimumMintAmount);\n\n        emit MintMetaPoolTokens(asset, amount, minted);\n    }\n\n    /// @dev Burns meta pool tokens to withdraw an asset.\n    ///\n    /// @param asset  The asset to withdraw.\n    /// @param amount The amount of meta pool tokens to burn.\n    ///\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\n    function _burnMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) internal returns (uint256 withdrawn) {\n        uint256 index = uint256(asset);\n\n        // Calculate the minimum amount of the meta pool asset that we are expecting out when\n        // removing single sided liquidity. This value is based off the optimistic assumption that\n        // one of each token is approximately equal to one meta pool lp token.\n        uint256 expectedOutput   = amount * metaPool.get_virtual_price() / CURVE_PRECISION;\n        uint256 minimumAmountOut = expectedOutput * metaPoolSlippage / SLIPPAGE_PRECISION;\n\n        // Remove the liquidity from the pool.\n        withdrawn = metaPool.remove_liquidity_one_coin(\n            amount,\n            int128(uint128(index)),\n            minimumAmountOut\n        );\n\n        emit BurnMetaPoolTokens(asset, amount, withdrawn);\n    }\n\n    /// @dev Deposits and stakes meta pool tokens into convex.\n    ///\n    /// @param amount The amount of meta pool tokens to deposit.\n    ///\n    /// @return success If the tokens were successfully deposited.\n    function _depositMetaPoolTokens(uint256 amount) internal returns (bool success) {\n        SafeERC20.safeApprove(address(metaPool), address(convexBooster), 0);\n        SafeERC20.safeApprove(address(metaPool), address(convexBooster), amount);\n\n        success = convexBooster.deposit(convexPoolId, amount, true /* always stake into rewards */);\n\n        emit DepositMetaPoolTokens(amount, success);\n    }\n\n    /// @dev Withdraws and unwraps meta pool tokens from convex.\n    ///\n    /// @param amount The amount of meta pool tokens to withdraw.\n    ///\n    /// @return success If the tokens were successfully withdrawn.\n    function _withdrawMetaPoolTokens(uint256 amount) internal returns (bool success) {\n        success = convexRewards.withdrawAndUnwrap(amount, false /* never claim */);\n        emit WithdrawMetaPoolTokens(amount, success);\n    }\n\n    /// @dev Claims convex, curve, and auxiliary rewards.\n    ///\n    /// @return success If the claim was successful.\n    function _claimRewards() internal returns (bool success) {\n        success = convexRewards.getReward();\n\n        uint256 curveBalance  = curveToken.balanceOf(address(this));\n        uint256 convexBalance = convexToken.balanceOf(address(this));\n\n        SafeERC20.safeTransfer(address(curveToken), rewardReceiver, curveBalance);\n        SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance);\n\n        emit ClaimRewards(success, curveBalance, convexBalance);\n    }\n\n    /// @dev Gets the minimum of two integers.\n    ///\n    /// @param x The first integer.\n    /// @param y The second integer.\n    ///\n    /// @return The minimum value.\n    function min(uint256 x , uint256 y) private pure returns (uint256) {\n        return x > y ? y : x;\n    }\n\n    /// @dev Gets the absolute value of the difference of two integers.\n    ///\n    /// @param x The first integer.\n    /// @param y The second integer.\n    ///\n    /// @return The absolute value.\n    function abs(uint256 x , uint256 y) private pure returns (uint256) {\n        return x > y ? x - y : y - x;\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/convex/IConvexBooster.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\ninterface IConvexBooster {\n    function deposit(uint256 pid, uint256 amount, bool stake) external returns (bool);\n    function withdraw(uint256 pid, uint256 amount) external returns (bool);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/convex/IConvexRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IConvexRewards {\n    function rewardToken() external view returns (IERC20);\n    function earned(address account) external view returns (uint256);\n    function extraRewards(uint256 index) external view returns (address);\n    function balanceOf(address account) external returns(uint256);\n    function withdraw(uint256 amount, bool claim) external returns (bool);\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\n    function getReward() external returns (bool);\n    function getReward(address recipient, bool claim) external returns (bool);\n    function stake(uint256 amount) external returns (bool);\n    function stakeFor(address account, uint256 amount) external returns (bool);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/convex/IConvexToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IConvexToken is IERC20 {\n    function maxSupply() external view returns (uint256);\n    function totalCliffs() external view returns (uint256);\n    function reductionPerCliff() external view returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/curve/IStableSwap3Pool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nuint256 constant N_COINS = 3;\n\ninterface IStableSwap3Pool {\n    function coins(uint256 index) external view returns (IERC20);\n\n    function A() external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function calc_token_amount(\n        uint256[N_COINS] calldata amounts,\n        bool deposit\n    ) external view returns (uint256 amount);\n\n    function add_liquidity(uint256[N_COINS] calldata amounts, uint256 minimumMintAmount) external;\n\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\n\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\n\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minimumDy) external;\n\n    function remove_liquidity(uint256 amount, uint256[N_COINS] calldata minimumAmounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[N_COINS] calldata amounts,\n        uint256 maximumBurnAmount\n    ) external;\n\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 tokenAmount,\n        int128 i,\n        uint256 minimumAmount\n    ) external;\n}"
    },
    "submodules/v2-foundry/src/test/utils/users/SafeERC20User.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {SafeERC20} from \"../../../libraries/SafeERC20.sol\";\n\ncontract SafeERC20User {\n    IERC20 public token;\n\n    constructor(IERC20 _token) {\n        token = _token;\n    }\n\n    function expectDecimals(address _token) external view returns (uint256) {\n        return SafeERC20.expectDecimals(_token);\n    }\n\n    function safeApprove(address spender, uint256 value) external {\n        SafeERC20.safeApprove(address(token), spender, value);\n    }\n\n    function safeTransfer(address receiver, uint256 amount) external {\n        SafeERC20.safeTransfer(address(token), receiver, amount);\n    }\n\n    function safeTransferFrom(\n        address owner,\n        address receiver,\n        uint256 amount\n    ) external {\n        SafeERC20.safeTransferFrom(address(token), owner, receiver, amount);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/WstETHAdapterV1.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {\n    WstETHAdapterV1,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/lido/WstETHAdapterV1.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IChainlinkOracle} from \"../interfaces/external/chainlink/IChainlinkOracle.sol\";\nimport {IWETH9} from \"../interfaces/external/IWETH9.sol\";\nimport {IStableSwap2Pool} from \"../interfaces/external/curve/IStableSwap2Pool.sol\";\nimport {IStETH} from \"../interfaces/external/lido/IStETH.sol\";\nimport {IWstETH} from \"../interfaces/external/lido/IWstETH.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\n\ncontract WstETHAdapterV1Test is DSTestPlus {\n    uint256 constant BPS = 10000;\n    address constant admin = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address constant whitelistETHAddress = 0xA3dfCcbad1333DC69997Da28C961FF8B2879e653;\n\n    IAlchemistV2 constant alchemist = IAlchemistV2(0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c);\n    IChainlinkOracle constant oracleStethUsd = IChainlinkOracle(0xCfE54B5cD566aB89272946F602D76Ea879CAb4a8);\n    IChainlinkOracle constant oracleEthUsd = IChainlinkOracle(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n    IStETH constant stETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\n    IWstETH constant wstETH = IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\n    IWETH9 constant weth = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    IStableSwap2Pool constant curvePool = IStableSwap2Pool(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022);\n\n    WstETHAdapterV1 adapter;\n\n    function setUp() external {\n        adapter = new WstETHAdapterV1(AdapterInitializationParams({\n            alchemist:       address(alchemist),\n            token:           address(wstETH),\n            parentToken:     address(stETH),\n            underlyingToken: address(weth),\n            curvePool:       address(curvePool),\n            oracleStethUsd:  address(oracleStethUsd),\n            oracleEthUsd:    address(oracleEthUsd),\n            ethPoolIndex:    0,\n            stEthPoolIndex:  1,\n            referral:        address(0)\n        }));\n\n        hevm.startPrank(admin);\n        alchemist.setTokenAdapter(address(wstETH), address(adapter));\n        IWhitelist(whitelistETHAddress).add(address(this));\n        alchemist.setMaximumExpectedValue(address(wstETH), 1000000000e18);\n        hevm.stopPrank();\n    }\n\n    function testRoundTrip() external {\n        deal(address(weth), address(this), 1e18);\n        \n        uint256 startingBalance = wstETH.balanceOf(address(alchemist));\n\n        SafeERC20.safeApprove(address(weth), address(alchemist), 1e18);\n        uint256 shares = alchemist.depositUnderlying(address(wstETH), 1e18, address(this), 0);\n\n        // Test that price function returns value within 0.1% of actual\n        uint256 underlyingValue = shares * adapter.price() / 10**SafeERC20.expectDecimals(address(wstETH));\n        assertGt(underlyingValue, 1e18 * 9990 / BPS);\n        \n        uint256 unwrapped = alchemist.withdrawUnderlying(address(wstETH), shares, address(this), shares * 9990 / 10000);\n\n        uint256 endBalance = wstETH.balanceOf(address(alchemist));\n        \n        assertEq(weth.balanceOf(address(this)), unwrapped);\n        assertEq(wstETH.balanceOf(address(this)), 0);\n        assertEq(wstETH.balanceOf(address(adapter)), 0);\n        assertApproxEq(endBalance - startingBalance, 0, 10);\n    }\n}"
    },
    "submodules/v2-foundry/src/adapters/lido/WstETHAdapterV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"../../base/ErrorMessages.sol\";\nimport {MutexLock} from \"../../base/MutexLock.sol\";\n\nimport {SafeERC20} from \"../../libraries/SafeERC20.sol\";\n\nimport {IChainlinkOracle} from \"../../interfaces/external/chainlink/IChainlinkOracle.sol\";\nimport {ITokenAdapter} from \"../../interfaces/ITokenAdapter.sol\";\nimport {IWETH9} from \"../../interfaces/external/IWETH9.sol\";\nimport {IStableSwap2Pool} from \"../../interfaces/external/curve/IStableSwap2Pool.sol\";\nimport {IStETH} from \"../../interfaces/external/lido/IStETH.sol\";\nimport {IWstETH} from \"../../interfaces/external/lido/IWstETH.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address token;\n    address parentToken;\n    address underlyingToken;\n    address curvePool;\n    address oracleStethUsd;\n    address oracleEthUsd;\n    uint256 ethPoolIndex;\n    uint256 stEthPoolIndex;\n    address referral;\n}\n\ncontract WstETHAdapterV1 is ITokenAdapter, MutexLock {\n    string public override version = \"1.1.0\";\n\n    address public immutable alchemist;\n    address public immutable override token;\n    address public immutable parentToken;\n    address public immutable override underlyingToken;\n    address public immutable curvePool;\n    address public immutable oracleStethUsd;\n    address public immutable oracleEthUsd;\n    uint256 public immutable ethPoolIndex;\n    uint256 public immutable stEthPoolIndex;\n    address public immutable referral;\n\n    constructor(InitializationParams memory params) {\n        alchemist       = params.alchemist;\n        token           = params.token;\n        parentToken     = params.parentToken;\n        underlyingToken = params.underlyingToken;\n        curvePool       = params.curvePool;\n        oracleStethUsd  = params.oracleStethUsd;\n        oracleEthUsd    = params.oracleEthUsd;\n        ethPoolIndex    = params.ethPoolIndex;\n        stEthPoolIndex  = params.stEthPoolIndex;\n        referral        = params.referral;\n\n        // Verify and make sure that the provided ETH matches the curve pool ETH.\n        if (\n            IStableSwap2Pool(params.curvePool).coins(params.ethPoolIndex) !=\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n        ) {\n            revert IllegalArgument(\"Curve pool ETH token mismatch\");\n        }\n\n        // Verify and make sure that the provided stETH matches the curve pool stETH.\n        if (\n            IStableSwap2Pool(params.curvePool).coins(params.stEthPoolIndex) !=\n            params.parentToken\n        ) {\n            revert IllegalArgument(\"Curve pool stETH token mismatch\");\n        }\n    }\n\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\n    modifier onlyAlchemist() {\n        if (msg.sender != alchemist) {\n            revert Unauthorized(\"Not alchemist\");\n        }\n        _;\n    }\n\n    receive() external payable {\n        if (msg.sender != underlyingToken && msg.sender != curvePool) {\n            revert Unauthorized(\"Payments only permitted from WETH or curve pool\");\n        }\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view returns (uint256) {\n        uint256 stethToEth = uint256(IChainlinkOracle(oracleStethUsd).latestAnswer()) * 1e18 / uint256(IChainlinkOracle(oracleEthUsd).latestAnswer());\n\n        // stETH is capped at 1 ETH\n        if (stethToEth > 1e18) stethToEth = 1e18;\n\n        return IWstETH(token).getStETHByWstETH(10**SafeERC20.expectDecimals(token)) * stethToEth / 1e18;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(\n        uint256 amount,\n        address recipient\n    ) external lock onlyAlchemist returns (uint256) {\n        // Transfer the tokens from the message sender.\n        SafeERC20.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n\n        // Unwrap the WETH into ETH.\n        IWETH9(underlyingToken).withdraw(amount);\n\n        // Wrap the ETH into stETH.\n        uint256 startingStEthBalance = IERC20(parentToken).balanceOf(address(this));\n\n        IStETH(parentToken).submit{value: amount}(referral);\n\n        uint256 mintedStEth = IERC20(parentToken).balanceOf(address(this)) - startingStEthBalance;\n\n        // Wrap the stETH into wstETH.\n        SafeERC20.safeApprove(parentToken, address(token), mintedStEth);\n        uint256 mintedWstEth = IWstETH(token).wrap(mintedStEth);\n\n        // Transfer the minted wstETH to the recipient.\n        SafeERC20.safeTransfer(token, recipient, mintedWstEth);\n\n        return mintedWstEth;\n    }\n\n    // @inheritdoc ITokenAdapter\n    function unwrap(\n        uint256 amount,\n        address recipient\n    ) external lock onlyAlchemist returns (uint256) {\n        // Transfer the tokens from the message sender.\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        // Unwrap the wstETH into stETH.\n        uint256 startingStEthBalance = IStETH(parentToken).balanceOf(address(this));\n        IWstETH(token).unwrap(amount);\n        uint256 endingStEthBalance = IStETH(parentToken).balanceOf(address(this));\n\n        // Approve the curve pool to transfer the tokens.\n        uint256 unwrappedStEth = endingStEthBalance - startingStEthBalance;\n        SafeERC20.safeApprove(parentToken, curvePool, unwrappedStEth);\n\n        // Exchange the stETH for ETH. We do not check the curve pool because it is an immutable\n        // contract and we expect that its output is reliable.\n        uint256 received = IStableSwap2Pool(curvePool).exchange(\n            int128(uint128(stEthPoolIndex)), // Why are we here, just to suffer?\n            int128(uint128(ethPoolIndex)),   //                       (╥﹏╥)\n            unwrappedStEth,\n            0                                // <- Slippage is handled upstream\n        );\n\n        // Wrap the ETH that we received from the exchange.\n        IWETH9(underlyingToken).deposit{value: received}();\n\n        // Transfer the tokens to the recipient.\n        SafeERC20.safeTransfer(underlyingToken, recipient, received);\n\n        return received;\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/chainlink/IChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >= 0.6.6;\n\ninterface IChainlinkOracle {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/curve/IStableSwap2Pool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nuint256 constant N_COINS = 2;\n\ninterface IStableSwap2Pool {\n    function coins(uint256 index) external view returns (address);\n\n    function A() external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function calc_token_amount(\n        uint256[N_COINS] calldata amounts,\n        bool deposit\n    ) external view returns (uint256 amount);\n\n    function add_liquidity(uint256[N_COINS] calldata amounts, uint256 minimumMintAmount) external;\n\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\n\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 minimumDy\n    ) external payable returns (uint256);\n\n    function remove_liquidity(uint256 amount, uint256[N_COINS] calldata minimumAmounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[N_COINS] calldata amounts,\n        uint256 maximumBurnAmount\n    ) external;\n\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 tokenAmount,\n        int128 i,\n        uint256 minimumAmount\n    ) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/lido/IStETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStETH is IERC20 {\n    function sharesOf(address account) external view returns (uint256);\n    function getPooledEthByShares(uint256 sharesAmount) external view returns (uint256);\n    function submit(address referral) external payable returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/lido/IWstETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWstETH is IERC20 {\n    function getWstETHByStETH(uint256 amount) external view returns (uint256);\n    function getStETHByWstETH(uint256 amount) external view returns (uint256);\n    function wrap(uint256 amount) external returns (uint256);\n    function unwrap(uint256 amount) external returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/test/VesperAdapterV1.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {AlchemistV2} from \"../AlchemistV2.sol\";\nimport {AlchemixHarvester} from \"../keepers/AlchemixHarvester.sol\";\nimport {HarvestResolver} from \"../keepers/HarvestResolver.sol\";\n\nimport {\n    RewardCollectorVesper,\n    InitializationParams as RewardcollectorParams\n} from \"../utils/RewardCollectorVesper.sol\";\n\nimport {UniswapEstimatedPrice} from \"../utils/UniswapEstimatedPrice.sol\";\n\nimport {\n    VesperAdapterV1,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/vesper/VesperAdapterV1.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport {IWETH9} from \"../interfaces/external/IWETH9.sol\";\nimport {IProxyAdmin} from \"../interfaces/external/IProxyAdmin.sol\";\nimport {ISwapRouter} from \"../interfaces/external/uniswap/ISwapRouter.sol\";\nimport {IUniswapV3Factory} from \"../interfaces/external/uniswap/IUniswapV3Factory.sol\";\nimport {IUniswapV3Pool} from \"../interfaces/external/uniswap/IUniswapV3Pool.sol\";\nimport {IVesperPool} from \"../interfaces/external/vesper/IVesperPool.sol\";\nimport {IVesperRewards} from \"../interfaces/external/vesper/IVesperRewards.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\nimport {TokenUtils} from \"../libraries/TokenUtils.sol\";\nimport {console} from \"../../lib/forge-std/src/console.sol\";\n\ncontract VesperAdapterV1Test is DSTestPlus {\n    uint256 constant BPS = 10000;\n    address constant ADMIN = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address constant alEthAddress = 0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6;\n    address constant alUsdAddress = 0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9;\n    address constant alchemistETHAddress = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;\n    address constant alchemistUSDAddress =0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address constant proxyAdminAddress = 0xE0fC5CB7665041CdA26969A2D1ceb5cD5046347d;\n    address constant uniSwapFactory = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\n    address constant uniswapRouter = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\n    address constant vaDAI = 0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee;\n    address constant vaUSDC = 0xa8b607Aa09B6A2E306F93e74c282Fb13f6A80452;\n    address constant vaETH = 0xd1C117319B3595fbc39b471AB1fd485629eb05F2;\n    address constant vspRewardToken = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\n    address constant vspRewardControllerETH = 0x51EEf73abf5d4AC5F41De131591ed82c27a7Be3D;\n    address constant vspRewardControllerDAI = 0x35864296944119F72AA1B468e13449222f3f0E67;\n    address constant whitelistETHAddress = 0xA3dfCcbad1333DC69997Da28C961FF8B2879e653;\n    address constant whitelistUSDAddress = 0x78537a6CeBa16f412E123a90472C6E0e9A8F1132;\n    IVesperPool constant vesperPool = IVesperPool(vaETH);\n    IWETH9 constant weth = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    IAlchemistV2 alchemistETH;\n    IAlchemistV2 alchemistUSD;\n    IProxyAdmin proxyAdmin = IProxyAdmin(proxyAdminAddress);\n    IWhitelist whitelistETH;\n    IWhitelist whitelistUSD;\n\n    AlchemixHarvester harvester;\n    HarvestResolver resolver;\n    AlchemistV2 newAlchemistV2;\n    RewardCollectorVesper rewardCollectorVesper;\n    RewardCollectorVesper rewardCollectorVesperUSD;\n    VesperAdapterV1 adapterETH;\n    VesperAdapterV1 adapterDAI;\n    VesperAdapterV1 adapterUSDC;\n\n    function setUp() external {\n        alchemistETH = IAlchemistV2(alchemistETHAddress);\n        alchemistUSD = IAlchemistV2(alchemistUSDAddress);\n        whitelistETH = IWhitelist(whitelistETHAddress);\n        whitelistUSD = IWhitelist(whitelistUSDAddress);\n\n        newAlchemistV2 = new AlchemistV2();\n\n        adapterETH = new VesperAdapterV1(AdapterInitializationParams({\n            alchemist:       alchemistETHAddress,\n            token:           address(vesperPool),\n            underlyingToken: address(weth)\n        }));\n\n        adapterDAI = new VesperAdapterV1(AdapterInitializationParams({\n            alchemist:       alchemistUSDAddress,\n            token:           vaDAI,\n            underlyingToken: DAI\n        }));\n\n        adapterUSDC = new VesperAdapterV1(AdapterInitializationParams({\n            alchemist:       alchemistUSDAddress,\n            token:           vaUSDC,\n            underlyingToken: USDC\n        }));\n\n        IAlchemistV2.YieldTokenConfig memory ytc = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(adapterETH),\n            maximumLoss: 1,\n            maximumExpectedValue: 10000000000000000 ether,\n            creditUnlockBlocks: 7200\n        });\n\n        IAlchemistV2.YieldTokenConfig memory ytcDAI = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(adapterDAI),\n            maximumLoss: 1,\n            maximumExpectedValue: 10000000000000000 ether,\n            creditUnlockBlocks: 7200\n        });\n\n        IAlchemistV2.YieldTokenConfig memory ytcUSDC = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(adapterUSDC),\n            maximumLoss: 1,\n            maximumExpectedValue: 10000000000000000 ether,\n            creditUnlockBlocks: 7200\n        });\n\n        RewardcollectorParams memory rewardCollectorParams = RewardcollectorParams({\n            alchemist:          alchemistETHAddress,\n            debtToken:          alEthAddress,\n            rewardToken:        vspRewardToken,\n            swapRouter:         uniswapRouter\n        });\n\n        RewardcollectorParams memory rewardCollectorParamsUSD = RewardcollectorParams({\n            alchemist:          alchemistUSDAddress,\n            debtToken:          alUsdAddress,\n            rewardToken:        vspRewardToken,\n            swapRouter:         uniswapRouter\n        });\n\n        rewardCollectorVesper = new RewardCollectorVesper(rewardCollectorParams);\n        rewardCollectorVesperUSD = new RewardCollectorVesper(rewardCollectorParamsUSD);\n\n        hevm.startPrank(ADMIN);\n        whitelistETH.add(address(this));\n        whitelistETH.add(address(rewardCollectorVesper));\n        whitelistUSD.add(address(this));\n        whitelistUSD.add(address(0xbeef));\n        whitelistUSD.add(address(rewardCollectorVesperUSD));\n        alchemistETH.addYieldToken(address(vesperPool), ytc);\n        alchemistETH.setYieldTokenEnabled(address(vesperPool), true);\n        alchemistUSD.addYieldToken(vaDAI, ytcDAI);\n        alchemistUSD.setYieldTokenEnabled(vaDAI, true);\n        alchemistUSD.addYieldToken(vaUSDC, ytcUSDC);\n        alchemistUSD.setYieldTokenEnabled(vaUSDC, true);\n        proxyAdmin.upgrade(alchemistETHAddress, address(newAlchemistV2));\n        proxyAdmin.upgrade(alchemistUSDAddress, address(newAlchemistV2));\n        alchemistETH.setKeeper(address(rewardCollectorVesper), true);\n        alchemistUSD.setKeeper(address(rewardCollectorVesperUSD), true);\n        hevm.stopPrank();\n\n        hevm.startPrank(address(rewardCollectorVesper));\n        TokenUtils.safeApprove(vspRewardToken, uniswapRouter, 2**256 - 1);\n        TokenUtils.safeApprove(alEthAddress, address(alchemistETH), 2**256 - 1);\n        TokenUtils.safeApprove(address(weth), 0xC4C319E2D4d66CcA4464C0c2B32c9Bd23ebe784e, 2**256 - 1);\n        hevm.stopPrank();\n\n        hevm.startPrank(address(rewardCollectorVesperUSD));\n        TokenUtils.safeApprove(vspRewardToken, uniswapRouter, 2**256 - 1);\n        TokenUtils.safeApprove(alUsdAddress, address(alchemistUSD), 2**256 - 1);\n        TokenUtils.safeApprove(DAI, 0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c, 2**256 - 1);\n        hevm.stopPrank();\n\n        resolver = new HarvestResolver();\n        harvester = new AlchemixHarvester(address(this), 100000e18, address(resolver));\n        resolver.setHarvester(address(harvester), true);\n        hevm.startPrank(ADMIN);\n        alchemistUSD.setKeeper(address(harvester), true);\n        alchemistETH.setKeeper(address(harvester), true);\n        hevm.stopPrank();\n\n        resolver.addHarvestJob(\n            true,\n            alchemistUSDAddress,\n            address(vspRewardToken),\n            vaDAI,\n            0,\n            0,\n            100\n        );\n\n        resolver.addHarvestJob(\n            true,\n            alchemistUSDAddress,\n            address(vspRewardToken),\n            vaUSDC,\n            0,\n            0,\n            100\n        );\n\n        resolver.addHarvestJob(\n            true,\n            alchemistETHAddress,\n            address(vspRewardToken),\n            vaETH,\n            0,\n            0,\n            100\n        );\n\n        harvester.addRewardCollector(vaDAI, address(rewardCollectorVesperUSD));\n        harvester.addRewardCollector(vaUSDC, address(rewardCollectorVesperUSD));\n        harvester.addRewardCollector(vaETH, address(rewardCollectorVesper));\n    }\n\n    function testRoundTripETH() external {\n        deal(address(weth), address(this), 1e18);\n\n        SafeERC20.safeApprove(address(weth), address(alchemistETH), 1e18);\n        uint256 shares = alchemistETH.depositUnderlying(address(vesperPool), 1e18, address(this), 0);\n\n        uint256 underlyingValue = shares * adapterETH.price() / 10**SafeERC20.expectDecimals(address(vesperPool));\n        assertGt(underlyingValue, 1e18 * 9900 / BPS);\n        \n        SafeERC20.safeApprove(adapterETH.token(), address(adapterETH), shares);\n        uint256 unwrapped = alchemistETH.withdrawUnderlying(address(vesperPool), shares, address(this), underlyingValue * 9900 / 10000);\n        \n        assertEq(weth.balanceOf(address(this)), unwrapped);\n        assertEq(vesperPool.balanceOf(address(this)), 0);\n        assertEq(vesperPool.balanceOf(address(adapterETH)), 0);\n    }\n\n    function testRoundTripUSDC() external {\n        deal(address(USDC), address(this), 100e6);\n\n        SafeERC20.safeApprove(USDC, address(alchemistUSD), 100e6);\n\n        uint256 shares = alchemistUSD.depositUnderlying(vaUSDC, 100e6, address(this), 0);\n\n        uint256 underlyingValue = shares * adapterUSDC.price() / 10**SafeERC20.expectDecimals(vaUSDC);\n        assertGt(underlyingValue, 100e6 * 9900 / BPS);\n        \n        SafeERC20.safeApprove(adapterUSDC.token(), address(adapterUSDC), shares);\n        uint256 unwrapped = alchemistUSD.withdrawUnderlying(vaUSDC, shares, address(this), underlyingValue * 9900 / 10000);   \n        assertGt(unwrapped, 100e6 * 9900 / 10000);\n    }\n\n    function testRoundTripFuzz(uint256 amount) external {\n        hevm.assume(\n            amount >= 10**SafeERC20.expectDecimals(address(weth)) && \n            amount < type(uint96).max\n        );\n        \n        deal(address(weth), address(this), amount);\n\n        SafeERC20.safeApprove(address(weth), address(alchemistETH), amount);\n        uint256 shares = alchemistETH.depositUnderlying(address(vesperPool), amount, address(this), 0);\n\n        uint256 underlyingValue = shares * adapterETH.price() / 10**SafeERC20.expectDecimals(address(vesperPool));\n        assertGt(underlyingValue, amount * 9900 / BPS);\n        \n        SafeERC20.safeApprove(adapterETH.token(), address(adapterETH), shares);\n        uint256 unwrapped = alchemistETH.withdrawUnderlying(address(vesperPool), shares, address(this), underlyingValue * 9900 / 10000);\n        \n        assertEq(weth.balanceOf(address(this)), unwrapped);\n        assertEq(vesperPool.balanceOf(address(this)), 0);\n        assertEq(vesperPool.balanceOf(address(adapterETH)), 0);\n    }\n\n    function testRewardsETH() external {\n        deal(address(weth), address(this), 100e18);\n\n        SafeERC20.safeApprove(address(weth), address(alchemistETH), 100e18);\n        alchemistETH.depositUnderlying(address(vesperPool), 100e18, address(this), 0);\n\n        alchemistETH.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistETH.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 10000000000);\n        hevm.roll(block.number + 10000000000);\n\n        (address[] memory tokensDAI, uint256[] memory amountsWETH) = IVesperRewards(0x51EEf73abf5d4AC5F41De131591ed82c27a7Be3D).claimable(address(alchemistETHAddress));\n\n        UniswapEstimatedPrice priceEstimator = new UniswapEstimatedPrice();\n\n        uint256 wethRewardsExchange = priceEstimator.getExpectedExchange(uniSwapFactory, vspRewardToken, address(weth), uint24(3000), address(0), uint24(0), amountsWETH[0]);\n\n        rewardCollectorVesper.claimAndDistributeRewards(address(vesperPool), wethRewardsExchange * 9900 / BPS);\n\n        (int256 debtAfter, ) = alchemistETH.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsETHFuzz(uint256 amount) external {\n        hevm.assume(\n            amount >= 10**SafeERC20.expectDecimals(address(weth)) && \n            amount < type(uint96).max\n        );\n\n        deal(address(weth), address(this), amount);\n\n        SafeERC20.safeApprove(address(weth), address(alchemistETH), amount);\n        alchemistETH.depositUnderlying(address(vesperPool), amount, address(this), 0);\n\n        (int256 debtBefore, ) = alchemistETH.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 10000000000);\n        hevm.roll(block.number + 10000000000);\n        \n        rewardCollectorVesper.claimAndDistributeRewards(address(vesperPool), 0);\n\n        (int256 debtAfter, ) = alchemistETH.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsDAI() external {\n        deal(address(DAI), address(this), 100e18);\n        deal(address(USDC), address(this), 100e18);\n\n        SafeERC20.safeApprove(DAI, address(alchemistUSD), 100e18);\n        alchemistUSD.depositUnderlying(vaDAI, 100e18, address(this), 0);\n\n        alchemistUSD.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 1000000);\n        hevm.roll(block.number + 1000000);\n        \n        (address[] memory tokensDAI, uint256[] memory amountsDAI) = IVesperRewards(0x35864296944119F72AA1B468e13449222f3f0E67).claimable(address(alchemistUSDAddress));\n\n        UniswapEstimatedPrice priceEstimator = new UniswapEstimatedPrice();\n\n        uint256 daiRewardsExchange = priceEstimator.getExpectedExchange(uniSwapFactory, vspRewardToken, address(weth), uint24(3000), DAI, uint24(3000), amountsDAI[0]);\n\n        rewardCollectorVesperUSD.claimAndDistributeRewards(vaDAI, daiRewardsExchange * 9900 / BPS);\n\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsUSDC() external {\n        deal(address(DAI), address(this), 100e18);\n        deal(address(USDC), address(this), 100e18);\n\n        SafeERC20.safeApprove(USDC, address(alchemistUSD), 100e18);\n        alchemistUSD.depositUnderlying(vaUSDC, 100e18, address(this), 0);\n\n        alchemistUSD.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 1000000);\n        hevm.roll(block.number + 1000000);\n        \n        rewardCollectorVesperUSD.claimAndDistributeRewards(vaUSDC, 0);\n\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsBothUSD() external {\n        deal(address(DAI), address(this), 100e18);\n        deal(address(USDC), address(this), 100e18);\n\n        SafeERC20.safeApprove(DAI, address(alchemistUSD), 100e18);\n        alchemistUSD.depositUnderlying(vaDAI, 100e18, address(this), 0);\n\n        SafeERC20.safeApprove(USDC, address(alchemistUSD), 100e18);\n        alchemistUSD.depositUnderlying(vaUSDC, 100e18, address(this), 0);\n\n        alchemistUSD.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 1000000);\n        hevm.roll(block.number + 1000000);\n        \n        rewardCollectorVesperUSD.claimAndDistributeRewards(vaDAI, 0);\n        rewardCollectorVesperUSD.claimAndDistributeRewards(vaUSDC, 0);\n\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsUSDFuzz(uint256 amountDAI, uint256 amountUSDC) external {\n        hevm.assume(\n            amountDAI >= 10**SafeERC20.expectDecimals(address(weth)) && \n            amountDAI < type(uint96).max\n        );\n\n        hevm.assume(\n            amountUSDC >= 10**SafeERC20.expectDecimals(address(USDC)) && \n            amountUSDC < type(uint96).max\n        );\n\n        deal(address(DAI), address(this), amountDAI);\n        deal(address(USDC), address(this), amountUSDC);\n\n        SafeERC20.safeApprove(DAI, address(alchemistUSD), amountDAI);\n        alchemistUSD.depositUnderlying(vaDAI, amountDAI, address(this), 0);\n\n        SafeERC20.safeApprove(USDC, address(alchemistUSD), amountUSDC);\n        alchemistUSD.depositUnderlying(vaUSDC, amountUSDC, address(this), 0);\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 1000000);\n        hevm.roll(block.number + 1000000);\n\n        rewardCollectorVesperUSD.claimAndDistributeRewards(vaDAI, 0);\n        rewardCollectorVesperUSD.claimAndDistributeRewards(vaUSDC, 0);\n\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsDAIWithHarvester() external {\n        deal(address(DAI), address(this), 10000000000e18);\n\n        SafeERC20.safeApprove(DAI, address(alchemistUSD), 20000000e18);\n        alchemistUSD.depositUnderlying(vaDAI, 10000000e18, address(this), 0);\n\n        alchemistUSD.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 30 days);\n        hevm.roll(block.number + 10000000);\n\n        deal(address(DAI), address(vaDAI), 10000000000e18);\n        \n        (bool canExec, bytes memory execPayload) = resolver.checker();\n        (address alch, address yield, uint256 minOut, uint256 expectedExchange) = abi.decode(extractCalldata(execPayload), (address, address, uint256, uint256));\n\n        if (canExec == true) {\n            harvester.harvest(alch, yield, minOut, expectedExchange);\n        }\n\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n\n    function testRewardsUSDCWithHarvester() external {\n        deal(address(USDC), address(this), 10000000000e18);\n\n        SafeERC20.safeApprove(USDC, address(alchemistUSD), 20000000e18);\n        alchemistUSD.depositUnderlying(vaUSDC, 10000000e18, address(this), 0);\n\n        alchemistUSD.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 30 days);\n        hevm.roll(block.number + 10000000);\n\n        deal(address(USDC), address(vaUSDC), 10000000000e18);\n        \n        (bool canExec, bytes memory execPayload) = resolver.checker();\n        (address alch, address yield, uint256 minOut, uint256 expectedExchange) = abi.decode(extractCalldata(execPayload), (address, address, uint256, uint256));\n\n        if (canExec == true) {\n            harvester.harvest(alch, yield, minOut, expectedExchange);\n        }\n\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardsETHWithHarvester() external {\n        deal(address(weth), address(this), 10000000000e18);\n\n        SafeERC20.safeApprove(address(weth), address(alchemistETH), 20000000e18);\n        alchemistETH.depositUnderlying(vaETH, 10000000e18, address(this), 0);\n\n        alchemistETH.mint(40e18, address(this));\n\n        (int256 debtBefore, ) = alchemistETH.accounts(address((this)));\n\n        hevm.warp(block.timestamp + 30 days);\n        hevm.roll(block.number + 10000000);\n\n        deal(address(weth), address(vaETH), 10000000000e18);\n        \n        (bool canExec, bytes memory execPayload) = resolver.checker();\n        (address alch, address yield, uint256 minOut, uint256 expectedExchange) = abi.decode(extractCalldata(execPayload), (address, address, uint256, uint256));\n\n        if (canExec == true) {\n            harvester.harvest(alch, yield, minOut, expectedExchange);\n        }\n\n        (int256 debtAfter, ) = alchemistETH.accounts(address((this)));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    // For decoding bytes that have selector header\n    function extractCalldata(bytes memory calldataWithSelector) internal pure returns (bytes memory) {\n        bytes memory calldataWithoutSelector;\n\n        require(calldataWithSelector.length >= 4);\n\n        assembly {\n            let totalLength := mload(calldataWithSelector)\n            let targetLength := sub(totalLength, 4)\n            calldataWithoutSelector := mload(0x40)\n            \n            mstore(calldataWithoutSelector, targetLength)\n\n            mstore(0x40, add(0x20, targetLength))\n\n            mstore(add(calldataWithoutSelector, 0x20), shl(0x20, mload(add(calldataWithSelector, 0x20))))\n\n            for { let i := 0x1C } lt(i, targetLength) { i := add(i, 0x20) } {\n                mstore(add(add(calldataWithoutSelector, 0x20), i), mload(add(add(calldataWithSelector, 0x20), add(i, 0x04))))\n            }\n        }\n\n        return calldataWithoutSelector;\n    }\n}"
    },
    "submodules/v2-foundry/src/keepers/AlchemixHarvester.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"./AlchemixGelatoKeeper.sol\";\nimport \"../interfaces/IAlchemistV2.sol\";\nimport \"../interfaces/keepers/IHarvestResolver.sol\";\nimport \"../interfaces/keepers/IAlchemixHarvester.sol\";\nimport \"../interfaces/IRewardCollector.sol\";\n\ncontract AlchemixHarvester is IAlchemixHarvester, AlchemixGelatoKeeper {\n  /// @notice The address of the resolver.\n  address public resolver;\n\n  /// @notice Mapping of yield tokens to reward collectors\n  mapping(address => address) public rewardCollectors;\n\n  constructor(\n    address _gelatoPoker,\n    uint256 _maxGasPrice,\n    address _resolver\n  ) AlchemixGelatoKeeper(_gelatoPoker, _maxGasPrice) {\n    resolver = _resolver;\n  }\n\n  function setResolver(address _resolver) external onlyOwner {\n    resolver = _resolver;\n  }\n\n  function addRewardCollector(address _yieldToken, address _rewardcollector) external onlyOwner {\n    rewardCollectors[_yieldToken] = _rewardcollector;\n  }\n\n  /// @notice Runs a the specified harvest job and donates optimism rewards.\n  ///\n  /// @param alchemist                The address of the target alchemist.\n  /// @param yieldToken               The address of the target yield token.\n  /// @param minimumAmountOut         The minimum amount of tokens expected to be harvested.\n  /// @param expectedRewardsExchange  The minimum VSP to debt tokens.\n  function harvest(\n    address alchemist,\n    address yieldToken,\n    uint256 minimumAmountOut,\n    uint256 expectedRewardsExchange\n  ) external override {\n    if (msg.sender != gelatoPoker) {\n      revert Unauthorized();\n    }\n    if (tx.gasprice > maxGasPrice) {\n      revert TheGasIsTooDamnHigh();\n    }\n    IAlchemistV2(alchemist).harvest(yieldToken, minimumAmountOut);\n\n    if (rewardCollectors[yieldToken] != address(0)) {\n      IRewardCollector(rewardCollectors[yieldToken]).claimAndDistributeRewards(yieldToken, expectedRewardsExchange);\n    }\n\n    IHarvestResolver(resolver).recordHarvest(yieldToken);\n  }\n}\n"
    },
    "submodules/v2-foundry/src/keepers/HarvestResolver.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport \"../interfaces/external/aave/IRewardsController.sol\";\nimport \"../interfaces/IRewardCollector.sol\";\nimport \"../interfaces/external/velodrome/IVelodromeSwapRouter.sol\";\nimport \"../interfaces/external/aave/IStaticAToken.sol\";\nimport \"../interfaces/keepers/IResolver.sol\";\nimport \"../interfaces/IAlchemistV2.sol\";\nimport \"../interfaces/keepers/IAlchemixHarvester.sol\";\nimport \"../interfaces/ITokenAdapter.sol\";\nimport \"../interfaces/external/vesper/IVesperRewards.sol\";\nimport \"../interfaces/external/chainlink/IChainlinkOracle.sol\";\nimport \"../utils/UniswapEstimatedPrice.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\";\nimport \"../libraries/SafeCast.sol\";\nimport \"../base/Errors.sol\";\n\ncontract HarvestResolver is IResolver, Ownable {\n  address constant alUsdOptimism = 0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A;\n  address constant alEthOptimism = 0x3E29D3A9316dAB217754d13b28646B76607c5f04;\n  address constant ethAlchemistAddress = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;\n  address constant usdAlchemistAddress = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n  address constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n  address constant opRewardsController = 0x929EC64c34a17401F460460D4B9390518E5B473e;\n  address constant opToUsdOracle = 0x0D276FC14719f9292D5C1eA2198673d1f4269246;\n  address constant ethToUsdOracle = 0x13e3Ee699D1909E989722E753853AE30b17e08c5;\n  address constant uniswapFactory = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\n  address constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address constant vaDAI = 0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee;\n  address constant vaUSDC = 0xa8b607Aa09B6A2E306F93e74c282Fb13f6A80452;\n  address constant vaETH = 0xd1C117319B3595fbc39b471AB1fd485629eb05F2;\n  address constant vesperRewardsDai = 0x35864296944119F72AA1B468e13449222f3f0E67;\n  address constant vesperRewardsUsdc = 0x2F59B0F98A08E733C66dFB42Bd8E366dC2cfedA6;\n  address constant vesperRewardsEth = 0x2F59B0F98A08E733C66dFB42Bd8E366dC2cfedA6;\n  address constant vspRewardToken = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\n\n  /// @notice Thrown when the yield token of a harvest job being added is disabled in the alchemist of the harvest job being added.\n  error YieldTokenDisabled();\n  /// @notice Thrown when attempting to remove a harvest job that does not currently exist.\n  error HarvestJobDoesNotExist();\n\n  /// @notice Emitted when details of a harvest job are set.\n  event SetHarvestJob(\n    bool active,\n    address alchemist,\n    address reward,\n    address yieldToken,\n    uint256 minimumHarvestAmount,\n    uint256 minimumDelay,\n    uint256 slippageBps\n  );\n  /// @notice Emitted when a harvester status is updated.\n  event SetHarvester(address harvester, bool status);\n\n  /// @notice Emitted when a harvest job is removed from the list.\n  event RemoveHarvestJob(address yieldToken);\n\n  /// @notice Emitted when a harvest is recorded.\n  event RecordHarvest(address yieldToken);\n\n  struct HarvestJob {\n    bool active;\n    address alchemist;\n    address reward;\n    address yieldToken;\n    uint256 lastHarvest;\n    uint256 minimumHarvestAmount;\n    uint256 minimumDelay;\n    uint256 slippageBps;\n  }\n\n  uint256 public constant SLIPPAGE_PRECISION = 10000;\n\n  /// @dev The list of yield tokens that define harvest jobs.\n  address[] public yieldTokens;\n\n  /// @dev yieldToken => HarvestJob.\n  mapping(address => HarvestJob) public harvestJobs;\n\n  /// @dev Whether or not the resolver is paused.\n  bool public paused;\n\n  /// @dev A mapping of the registered harvesters.\n  mapping(address => bool) public harvesters;\n\n  constructor() Ownable() {}\n\n  modifier onlyHarvester() {\n    if (!harvesters[msg.sender]) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @notice Enables or disables a harvester from calling protected harvester-only functions.\n  ///\n  /// @param harvester The address of the target harvester.\n  /// @param status The status to set for the target harvester.\n  function setHarvester(address harvester, bool status) external onlyOwner {\n    harvesters[harvester] = status;\n    emit SetHarvester(harvester, status);\n  }\n\n  /// @notice Pauses and un-pauses the resolver.\n  ///\n  /// @param pauseState The pause state to set.\n  function setPause(bool pauseState) external onlyOwner {\n    paused = pauseState;\n  }\n\n  /// @notice Remove tokens that were accidentally sent to the resolver.\n  ///\n  /// @param token The token to remove.\n  function recoverFunds(address token) external onlyOwner {\n    IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\n  }\n\n  /// @notice Sets the parameters of a harvest job and adds it to the list if needed.\n  ///\n  /// @param active               A flag for whether or not the harvest job is active.\n  /// @param alchemist            The address of the alchemist to be harvested.\n  /// @param reward               Address of the reward token. 0 for none.\n  /// @param yieldToken           The address of the yield token to be harvested.\n  /// @param minimumHarvestAmount The minimum amount of harvestable funds required in order to run the harvest job.\n  /// @param minimumDelay         The minimum delay (in seconds) needed between successive runs of the job.\n  function addHarvestJob(\n    bool active,\n    address alchemist,\n    address reward,\n    address yieldToken,\n    uint256 minimumHarvestAmount,\n    uint256 minimumDelay,\n    uint256 slippageBps\n  ) external onlyOwner {\n    IAlchemistV2.YieldTokenParams memory ytp = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n    if (!ytp.enabled) {\n      revert YieldTokenDisabled();\n    }\n\n    if (slippageBps > SLIPPAGE_PRECISION) {\n      revert IllegalArgument();\n    }\n\n    harvestJobs[yieldToken] = HarvestJob(\n      active,\n      alchemist,\n      reward,\n      yieldToken,\n      block.timestamp,\n      minimumHarvestAmount,\n      minimumDelay,\n      slippageBps\n    );\n\n    emit SetHarvestJob(active, alchemist, reward, yieldToken, minimumHarvestAmount, minimumDelay, slippageBps);\n\n    // Only add the yield token to the list if it doesnt exist yet.\n    for (uint256 i = 0; i < yieldTokens.length; i++) {\n      if (yieldTokens[i] == yieldToken) {\n        return;\n      }\n    }\n    yieldTokens.push(yieldToken);\n  }\n\n  /// @notice Sets if a harvest job is active.\n  ///\n  /// @param yieldToken   The address of the yield token to be harvested.\n  /// @param active       A flag for whether or not the harvest job is active.\n  function setActive(address yieldToken, bool active) external onlyOwner {\n    harvestJobs[yieldToken].active = active;\n  }\n\n  /// @notice Sets the alchemist of a harvest job.\n  ///\n  /// @param yieldToken   The address of the yield token to be harvested.\n  /// @param alchemist    The address of the alchemist to be harvested.\n  function setAlchemist(address yieldToken, address alchemist) external onlyOwner {\n    IAlchemistV2.YieldTokenParams memory ytp = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n    if (!ytp.enabled) {\n      revert YieldTokenDisabled();\n    }\n    harvestJobs[yieldToken].alchemist = alchemist;\n  }\n\n  /// @notice Sets the minimum harvest amount of a harvest job.\n  ///\n  /// @param yieldToken           The address of the yield token to be harvested.\n  /// @param minimumHarvestAmount The minimum amount of harvestable funds required in order to run the harvest job.\n  function setMinimumHarvestAmount(address yieldToken, uint256 minimumHarvestAmount) external onlyOwner {\n    harvestJobs[yieldToken].minimumHarvestAmount = minimumHarvestAmount;\n  }\n\n  /// @notice Sets the minimum delay of a harvest job.\n  ///\n  /// @param yieldToken   The address of the yield token to be harvested.\n  /// @param minimumDelay The minimum delay (in seconds) needed between successive runs of the job.\n  function setMinimumDelay(address yieldToken, uint256 minimumDelay) external onlyOwner {\n    harvestJobs[yieldToken].minimumDelay = minimumDelay;\n  }\n\n  /// @notice Sets the amount of slippage for a harvest job.\n  ///\n  /// @param yieldToken   The address of the yield token to be harvested.\n  /// @param slippageBps  The amount of slippage to accept during a harvest.\n  function setSlippageBps(address yieldToken, uint256 slippageBps) external onlyOwner {\n    harvestJobs[yieldToken].slippageBps = slippageBps;\n  }\n\n  /// @notice Removes a harvest job from the list of harvest jobs.\n  ///\n  /// @param yieldToken The address of the yield token to remove.\n  function removeHarvestJob(address yieldToken) external onlyOwner {\n    int256 idx = -1;\n    for (uint256 i = 0; i < yieldTokens.length; i++) {\n      if (yieldTokens[i] == yieldToken) {\n        idx = SafeCast.toInt256(i);\n      }\n    }\n    if (idx > -1) {\n      delete harvestJobs[yieldToken];\n      yieldTokens[SafeCast.toUint256(idx)] = yieldTokens[yieldTokens.length - 1];\n      yieldTokens.pop();\n      emit RemoveHarvestJob(yieldToken);\n    } else {\n      revert HarvestJobDoesNotExist();\n    }\n  }\n\n  /// @notice Check if there is a harvest that needs to be run.\n  ///\n  /// Returns FALSE if the resolver is paused.\n  /// Returns TRUE for the first harvest job that meets the following criteria:\n  ///     - the harvest job is active\n  ///     - `yieldToken` is enabled in the Alchemist\n  ///     - minimumDelay seconds have passed since the `yieldToken` was last harvested\n  ///     - the expected harvest amount is greater than minimumHarvestAmount\n  /// Returns FALSE if no harvest jobs meet the above criteria.\n  ///\n  /// @return canExec     If a harvest is needed\n  /// @return execPayload The payload to forward to the AlchemixHarvester\n  function checker() external view returns (bool canExec, bytes memory execPayload) {\n    if (paused) {\n      return (false, abi.encode(0));\n    }\n\n    for (uint256 i = 0; i < yieldTokens.length; i++) {\n      address yieldToken = yieldTokens[i];\n      HarvestJob memory h = harvestJobs[yieldToken];\n      if (h.active) {\n        IAlchemistV2.YieldTokenParams memory ytp = IAlchemistV2(h.alchemist).getYieldTokenParameters(yieldToken);\n\n        if (ytp.enabled) {\n          uint256 pps = ITokenAdapter(ytp.adapter).price();\n          uint256 currentValue = ((ytp.activeBalance + ytp.harvestableBalance) * pps) / 10**ytp.decimals;\n          if (\n            (block.timestamp >= h.lastHarvest + h.minimumDelay) &&\n            (currentValue > ytp.expectedValue + h.minimumHarvestAmount)\n          ) {\n            uint256 minimumAmountOut = currentValue - ytp.expectedValue;\n            minimumAmountOut = minimumAmountOut - (minimumAmountOut * h.slippageBps) / SLIPPAGE_PRECISION;\n\n            uint256 expectedExchange;\n\n            // If vault has rewards to be collected\n            if (h.reward == vspRewardToken) {\n              // alUSD route for vesper swap\n              if (h.alchemist == usdAlchemistAddress) {\n                if (h.yieldToken == vaDAI) {\n                  (address[] memory tokens, uint256[] memory amounts) = IVesperRewards(vesperRewardsDai).claimable(usdAlchemistAddress);\n                  expectedExchange = _getExpectedExchange(uniswapFactory, h.reward, wethAddress, uint24(3000), dai, uint24(3000), amounts[0]);\n                } else if (h.yieldToken == vaUSDC) {\n                  (address[] memory tokens, uint256[] memory amounts) = IVesperRewards(vesperRewardsUsdc).claimable(usdAlchemistAddress);\n                  expectedExchange = _getExpectedExchange(uniswapFactory, h.reward, wethAddress, uint24(3000), dai, uint24(3000), amounts[0]);\n                }\n              // alETH route for vesper swap\n              } else if (h.alchemist == ethAlchemistAddress) {\n                (address[] memory tokens, uint256[] memory amounts) = IVesperRewards(vesperRewardsEth).claimable(ethAlchemistAddress);\n                expectedExchange = _getExpectedExchange(uniswapFactory, h.reward, wethAddress, uint24(3000), address(0), uint24(0), amounts[0]);\n              }\n              return (\n                true,\n                abi.encodeWithSelector(IAlchemixHarvester.harvest.selector, h.alchemist, yieldToken, minimumAmountOut, expectedExchange * 9900 / 10000)\n              );\n            }\n\n            // If reward is not the address of a token then it is the address of a reward collector.\n            // We can assume that this is optimism and handle rewards accordingly.\n            if (h.reward != address(0)) {\n              address[] memory token = new address[](1);\n              token[0] = address(IStaticAToken(h.yieldToken).ATOKEN());\n              uint256 claimable = IRewardsController(opRewardsController).getUserRewards(token, yieldToken, IRewardCollector(h.reward).rewardToken());\n              // Find expected amount out before calling harvest\n              if (IRewardCollector(h.reward).debtToken() == alUsdOptimism) {\n                expectedExchange = claimable * uint(IChainlinkOracle(opToUsdOracle).latestAnswer()) / 1e8;\n              } else if (IRewardCollector(h.reward).debtToken() == alEthOptimism) {\n                expectedExchange = claimable * uint(IChainlinkOracle(opToUsdOracle).latestAnswer()) / uint(IChainlinkOracle(ethToUsdOracle).latestAnswer());\n              } else {\n                  revert IllegalState();\n              }\n              return (\n                true,\n                abi.encodeWithSelector(IAlchemixHarvester.harvest.selector, h.alchemist, yieldToken, minimumAmountOut, expectedExchange * 9900 / 10000)\n              );\n            // If reward equals the 0 address then we handle the harvest without rewards.\n            } else {\n              return (\n                true,\n                abi.encodeWithSelector(IAlchemixHarvester.harvest.selector, h.alchemist, yieldToken, minimumAmountOut, 0)\n              );\n            }\n          }\n        }\n      }\n    }\n    return (false, abi.encode(0));\n  }\n  \n  // Get expected exchange from reward token to debt token.\n  function _getExpectedExchange(address factory, address token0, address token1, uint24 fee0, address token2, uint24 fee1, uint256 amount) internal view returns (uint256) {\n      IUniswapV3Factory uniswapFactory = IUniswapV3Factory(factory);\n\n      IUniswapV3Pool pool = IUniswapV3Pool(uniswapFactory.getPool(token0, token1, fee0));\n      (uint160 sqrtPriceX96,,,,,,) =  pool.slot0();\n      uint256 price0 = uint(sqrtPriceX96) * (uint(sqrtPriceX96)) * (1e18) >> (96 * 2);\n\n      if (token2 == address(0)) return amount * price0 / 1e18;\n\n      pool = IUniswapV3Pool(uniswapFactory.getPool(token1, token2, fee1));\n      ( sqrtPriceX96,,,,,,) =  pool.slot0();\n      uint256 price1 = uint(sqrtPriceX96) * (uint(sqrtPriceX96)) * (1e18) >> (96 * 2);\n\n      return amount * price0 / price1;\n  }\n\n  function recordHarvest(address yieldToken) external onlyHarvester {\n    harvestJobs[yieldToken].lastHarvest = block.timestamp;\n    emit RecordHarvest(yieldToken);\n  }\n}\n"
    },
    "submodules/v2-foundry/src/utils/UniswapEstimatedPrice.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {IUniswapV3Factory} from \"../interfaces/external/uniswap/IUniswapV3Factory.sol\";\nimport {IUniswapV3Pool} from \"../interfaces/external/uniswap/IUniswapV3Pool.sol\";\n\n/// @title  UniswapEstimatedPrice\n/// @author Alchemix Finance\ncontract UniswapEstimatedPrice {\n    // Set `token2` == 0 address for only one swap\n    function getExpectedExchange(address factory, address token0, address token1, uint24 fee0, address token2, uint24 fee1, uint256 amount) external returns (uint256) {\n        IUniswapV3Factory uniswapFactory = IUniswapV3Factory(factory);\n\n        IUniswapV3Pool pool = IUniswapV3Pool(uniswapFactory.getPool(token0, token1, fee0));\n        (uint160 sqrtPriceX96,,,,,,) =  pool.slot0();\n        uint256 price0 = uint(sqrtPriceX96) * (uint(sqrtPriceX96)) * (1e18) >> (96 * 2);\n\n        if (token2 == address(0)) return amount * price0 / 1e18;\n\n        pool = IUniswapV3Pool(uniswapFactory.getPool(token1, token2, fee1));\n        ( sqrtPriceX96,,,,,,) =  pool.slot0();\n        uint256 price1 = uint(sqrtPriceX96) * (uint(sqrtPriceX96)) * (1e18) >> (96 * 2);\n\n        return amount * price0 / price1;\n    }\n}"
    },
    "submodules/v2-foundry/src/adapters/vesper/VesperAdapterV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {\n    IllegalArgument,\n    IllegalState,\n    Unauthorized,\n    UnsupportedOperation\n} from \"../../base/ErrorMessages.sol\";\n\nimport {MutexLock} from \"../../base/MutexLock.sol\";\n\nimport {SafeERC20} from \"../../libraries/SafeERC20.sol\";\n\nimport {ITokenAdapter} from \"../../interfaces/ITokenAdapter.sol\";\nimport {IWETH9} from \"../../interfaces/external/IWETH9.sol\";\nimport {IVesperPool} from \"../../interfaces/external/vesper/IVesperPool.sol\";\nimport {IVesperRewards} from \"../../interfaces/external/vesper/IVesperRewards.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address token;\n    address underlyingToken;\n}\n\ncontract VesperAdapterV1 is ITokenAdapter, MutexLock {\n\n    string public override version = \"1.0.0\";\n\n    address public immutable alchemist;\n    address public immutable override token;\n    address public immutable override underlyingToken;\n\n    constructor(InitializationParams memory params) {\n        alchemist       = params.alchemist;\n        token           = params.token;\n        underlyingToken = params.underlyingToken;\n    }\n\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\n    modifier onlyAlchemist() {\n        if (msg.sender != alchemist) {\n            revert Unauthorized(\"Not alchemist\");\n        }\n        _;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view returns (uint256) {\n        return IVesperPool(token).pricePerShare();\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(\n        uint256 amount,\n        address recipient\n    ) external onlyAlchemist returns (uint256) {\n        // Transfer the underlying tokens from the message sender.\n        SafeERC20.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        SafeERC20.safeApprove(underlyingToken, token, amount);\n\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n\n        // Vesper deposit does not accept a recipient argument and does not return mint amount\n        IVesperPool(token).deposit(amount);\n\n        uint256 balanceAfter = IERC20(token).balanceOf(address(this));\n\n        uint256 minted = balanceAfter - balanceBefore;\n\n        // We must transfer to recipient after and use IERC20.balanceOf() for amount\n        SafeERC20.safeTransfer(token, recipient, minted);\n\n        return minted;\n    }\n\n    // @inheritdoc ITokenAdapter\n    function unwrap(\n        uint256 amount,\n        address recipient\n    ) external lock onlyAlchemist returns (uint256) {\n        // Transfer the tokens from the message sender.\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        uint256 balanceBeforeUnderlying = IERC20(underlyingToken).balanceOf(address(this));\n        uint256 balanceBeforeYieldToken = IERC20(token).balanceOf(address(this));\n        \n        // Vesper withdraw does not accept a recipient argument and does not return withdrawn amount\n        IVesperPool(token).withdraw(amount);\n\n        uint256 balanceAfterUnderlying = IERC20(underlyingToken).balanceOf(address(this));\n        uint256 balanceAfterYieldToken = IERC20(token).balanceOf(address(this));\n\n        uint256 withdrawn = balanceAfterUnderlying - balanceBeforeUnderlying;\n\n        if (balanceBeforeYieldToken - balanceAfterYieldToken != amount) {\n            revert IllegalState(\"Not all shares were burned\");\n        }\n\n        // We must transfer to recipient after and use IERC20.balanceOf() for amount\n        SafeERC20.safeTransfer(underlyingToken, recipient, withdrawn);\n\n        return withdrawn;\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/IProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IProxyAdmin {\n  function getProxyImplementation(address proxy) external view returns (address);\n\n  function getProxyAdmin(address proxy) external view returns (address);\n\n  function changeProxyAdmin(address proxy, address newAdmin) external;\n\n  function upgrade(address proxy, address implementation) external;\n\n  function upgradeAndCall(\n    address proxy,\n    address implementation,\n    bytes memory data\n  ) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/uniswap/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/uniswap/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n// import './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\n// import './pool/IUniswapV3PoolDerivedState.sol';\n// import './pool/IUniswapV3PoolActions.sol';\n// import './pool/IUniswapV3PoolOwnerActions.sol';\n// import './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    // IUniswapV3PoolImmutables,\n    IUniswapV3PoolState\n    // IUniswapV3PoolDerivedState,\n    // IUniswapV3PoolActions,\n    // IUniswapV3PoolOwnerActions,\n    // IUniswapV3PoolEvents\n{\n\n}"
    },
    "submodules/v2-foundry/src/keepers/AlchemixGelatoKeeper.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport { Ownable } from \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\ncontract AlchemixGelatoKeeper is Ownable {\n  /// @notice Thrown when the gas price set on the tx is greater than the `maxGasPrice`.\n  error TheGasIsTooDamnHigh();\n  /// @notice Thrown when any address but the `gelatoPoker` attempts to call the upkeep function.\n  error Unauthorized();\n\n  /// @notice Emitted when the `gelatoPoker` address is updated.\n  ///\n  /// @param newPoker The new address of the `gelatoPoker`.\n  event SetPoker(address newPoker);\n\n  /// @notice Emitted when the `maxGasPrice` is updated.\n  ///\n  /// @param newMaxGasPrice The new maximum gas price.\n  event SetMaxGasPrice(uint256 newMaxGasPrice);\n\n  /// @notice The address of the whitelisted gelato contract.\n  address public gelatoPoker;\n  /// @notice The maximum gas price to be spent on any call from the gelato poker.\n  uint256 public maxGasPrice;\n\n  constructor(address _gelatoPoker, uint256 _maxGasPrice) Ownable() {\n    gelatoPoker = _gelatoPoker;\n    maxGasPrice = _maxGasPrice;\n  }\n\n  /// @notice Sets the address of the whitelisted gelato poker contract.\n  ///\n  /// @param newPoker The new address of the gelato poker.\n  function setPoker(address newPoker) external onlyOwner {\n    gelatoPoker = newPoker;\n    emit SetPoker(gelatoPoker);\n  }\n\n  /// @notice Sets the maximum gas price that can be used for an upkeep call.\n  ///\n  /// @param newGasPrice The new maximum gas price.\n  function setMaxGasPrice(uint256 newGasPrice) external onlyOwner {\n    maxGasPrice = newGasPrice;\n    emit SetMaxGasPrice(maxGasPrice);\n  }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/keepers/IHarvestResolver.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface IHarvestResolver {\n    function recordHarvest(address yieldToken) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/keepers/IAlchemixHarvester.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface IAlchemixHarvester {\n  function harvest(\n    address alchemist,\n    address yieldToken,\n    uint256 minimumAmountOut,\n    uint256 expectedExchange\n  ) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IRewardsController.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.8.10;\n\n/**\n * @title IRewardsController\n * @author Aave\n * @notice Defines the basic interface for a Rewards Controller.\n */\ninterface IRewardsController {\n\n  /**\n   * @dev Whitelists an address to claim the rewards on behalf of another address\n   * @param user The address of the user\n   * @param claimer The address of the claimer\n   */\n  function setClaimer(address user, address claimer) external;\n\n  /**\n   * @dev Get the price aggregator oracle address\n   * @param reward The address of the reward\n   * @return The price oracle of the reward\n   */\n  function getRewardOracle(address reward) external view returns (address);\n\n  /**\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n   * @param user The address of the user\n   * @return The claimer address\n   */\n  function getClaimer(address user) external view returns (address);\n\n  /**\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\n   * @param reward The address of the reward\n   * @return The address of the TransferStrategy contract\n   */\n  function getTransferStrategy(address reward) external view returns (address);\n\n  /**\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\n   * @param user The address of the user\n   * @param userBalance The user balance of the asset\n   * @param totalSupply The total supply of the asset\n   **/\n  function handleAction(\n    address user,\n    uint256 userBalance,\n    uint256 totalSupply\n  ) external;\n\n  /**\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\n   * @param assets List of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param to The address that will be receiving the rewards\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   **/\n  function claimRewards(\n    address[] calldata assets,\n    uint256 amount,\n    address to,\n    address reward\n  ) external returns (uint256);\n\n  /**\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\n   * @param assets List of incentivized assets to check eligible distributions\n   * @param user The address of the user\n   * @param reward The address of the reward token\n   * @return The rewards amount\n   **/\n  function getUserRewards(\n    address[] calldata assets,\n    address user,\n    address reward\n  ) external view returns (uint256);\n\n  /**\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\n   * caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param user The address to check and claim rewards\n   * @param to The address that will be receiving the rewards\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   **/\n  function claimRewardsOnBehalf(\n    address[] calldata assets,\n    uint256 amount,\n    address user,\n    address to,\n    address reward\n  ) external returns (uint256);\n\n  /**\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param amount The amount of rewards to claim\n   * @param reward The address of the reward token\n   * @return The amount of rewards claimed\n   **/\n  function claimRewardsToSelf(\n    address[] calldata assets,\n    uint256 amount,\n    address reward\n  ) external returns (uint256);\n\n  /**\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param to The address that will be receiving the rewards\n   * @return rewardsList List of addresses of the reward tokens\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardList\"\n   **/\n  function claimAllRewards(address[] calldata assets, address to)\n    external\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n  /**\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\n   * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @param user The address to check and claim rewards\n   * @param to The address that will be receiving the rewards\n   * @return rewardsList List of addresses of the reward tokens\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardsList\"\n   **/\n  function claimAllRewardsOnBehalf(\n    address[] calldata assets,\n    address user,\n    address to\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n  /**\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\n   * @param assets The list of assets to check eligible distributions before claiming rewards\n   * @return rewardsList List of addresses of the reward tokens\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardsList\"\n   **/\n  function claimAllRewardsToSelf(address[] calldata assets)\n    external\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n\n  /**\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\n   * @param user The address of the user\n   * @param reward The address of the reward token\n   * @return Unclaimed rewards, not including new distributions\n   **/\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/keepers/IResolver.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface IResolver {\n    function checker()\n        external\n        view\n        returns (bool canExec, bytes memory execPayload);\n}\n"
    },
    "submodules/v2-foundry/lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/uniswap/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}"
    },
    "submodules/v2-foundry/src/test/AaveV3TokenAdapter.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {AlchemixHarvester} from \"../keepers/AlchemixHarvester.sol\";\nimport {HarvestResolver} from \"../keepers/HarvestResolver.sol\";\n\nimport {\n    AAVETokenAdapter,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/aave/AAVETokenAdapter.sol\";\n\nimport {\n    RewardCollectorOptimism,\n    InitializationParams as RewardCollectorInitializationParams\n} from \"../utils/RewardCollectorOptimism.sol\";\n\nimport {AlchemicTokenV2} from \"../AlchemicTokenV2.sol\";\nimport {AlchemistV2} from \"../AlchemistV2.sol\";\nimport {StaticATokenV3} from \"../external/aave/StaticATokenV3.sol\";\nimport {TransmuterV2} from \"../TransmuterV2.sol\";\nimport {TransmuterBuffer} from \"../TransmuterBuffer.sol\";\nimport {Whitelist} from \"../utils/Whitelist.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemicToken} from \"../interfaces/IAlchemicToken.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport \"../interfaces/IERC20TokenReceiver.sol\";\nimport {ILendingPool} from \"../interfaces/external/aave/ILendingPool.sol\";\nimport {IRewardsController} from \"../interfaces/external/aave/IRewardsController.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\nimport {TokenUtils} from \"../libraries/TokenUtils.sol\";\nimport {console} from \"../../lib/forge-std/src/console.sol\";\n\ncontract AaveV3TokenAdapterTest is DSTestPlus, IERC20TokenReceiver {\n    // These are for mainnet change once deployed on optimism\n    // address constant alchemistAlUSD = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n    // address constant alchemistAlETH = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;\n    address constant alchemistAdmin = 0xC224bf25Dcc99236F00843c7D8C4194abE8AA94a;\n    // address constant alchemistAlUSDWhitelist = 0x78537a6CeBa16f412E123a90472C6E0e9A8F1132;\n    // address constant alchemistAlETHWhitelist = 0xA3dfCcbad1333DC69997Da28C961FF8B2879e653;\n    uint256 constant BPS = 10000;\n    address constant alUSD = 0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A;\n    address constant dai = 0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1; // Optimism DAI\n    address constant aOptDAI = 0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE;\n    address constant usdc = 0x7F5c764cBc14f9669B88837ca1490cCa17c31607;\n    address constant aOptUSDC = 0x625E7708f30cA75bfd92586e17077590C60eb4cD;\n    address constant usdt = 0x94b008aA00579c1307B0EF2c499aD98a8ce58e58;\n    address constant aOptUSDT = 0x6ab707Aca953eDAeFBc4fD23bA73294241490620;\n    address constant weth = 0x4200000000000000000000000000000000000006;\n    address constant aOptWETH = 0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8;\n    address constant rewardsController = 0x929EC64c34a17401F460460D4B9390518E5B473e;\n    address constant rewardToken = 0x4200000000000000000000000000000000000042;\n    address constant velodromeRouter = 0x9c12939390052919aF3155f41Bf4160Fd3666A6f;\n\n    AlchemistV2 alchemistUSD;\n    AlchemistV2 alchemistETH;\n    AlchemixHarvester harvester;\n    AAVETokenAdapter adapter;\n    HarvestResolver harvestResolver;\n    StaticATokenV3 staticAToken;\n    RewardCollectorOptimism rewardCollector;\n    TransmuterV2 transmuter;\n    TransmuterBuffer buffer;\n    ILendingPool lendingPool = ILendingPool(0x794a61358D6845594F94dc1DB02A252b5b4814aD);\n    Whitelist whitelist;\n\n    function setUp() external {\n        whitelist = new Whitelist();\n\n        // Set up buffer and transmuter\n        TransmuterBuffer transmuterBuffer = new TransmuterBuffer();\n        bytes memory bufferParams = abi.encodeWithSelector(TransmuterBuffer.initialize.selector, address(this), alUSD);\n\t\tTransparentUpgradeableProxy proxyBuffer = new TransparentUpgradeableProxy(address(transmuterBuffer), alchemistAdmin, bufferParams);\n\t\tbuffer = TransmuterBuffer(address(proxyBuffer));\n        transmuter = new TransmuterV2();\n        \n\t\tIAlchemistV2AdminActions.InitializationParams memory params = IAlchemistV2AdminActions.InitializationParams({\n\t\t\tadmin: address(this),\n\t\t\tdebtToken: alUSD,\n\t\t\ttransmuter: address(this),\n\t\t\tminimumCollateralization: 2 * 1e18,\n\t\t\tprotocolFee: 1000,\n\t\t\tprotocolFeeReceiver: address(this),\n\t\t\tmintingLimitMinimum: 1,\n\t\t\tmintingLimitMaximum: uint256(type(uint160).max),\n\t\t\tmintingLimitBlocks: 300,\n\t\t\twhitelist: address(whitelist)\n\t\t});\n\n        // Set up proxy to add params\n        AlchemistV2 alch = new AlchemistV2();\n        bytes memory alchemParams = abi.encodeWithSelector(AlchemistV2.initialize.selector, params);\n\t\tTransparentUpgradeableProxy proxyAlchemistUSD = new TransparentUpgradeableProxy(address(alch), alchemistAdmin, alchemParams);\n\t\talchemistUSD = AlchemistV2(address(proxyAlchemistUSD));\n        TransparentUpgradeableProxy proxyAlchemistETH = new TransparentUpgradeableProxy(address(alch), alchemistAdmin, alchemParams);\n\t\talchemistETH = AlchemistV2(address(proxyAlchemistETH));\n\n        RewardCollectorInitializationParams memory rewardCollectorParams = RewardCollectorInitializationParams({\n            alchemist:          address(alchemistUSD),\n            debtToken:          alUSD,\n            rewardToken:        rewardToken,\n            swapRouter:         velodromeRouter\n        });\n\n        rewardCollector = new RewardCollectorOptimism(rewardCollectorParams);\n\n        whitelist.add(address(this));\n        whitelist.add(address(rewardCollector));\n        hevm.startPrank(alchemistAdmin);\n        IAlchemicToken(alUSD).setWhitelist(address(this), true);\n        IAlchemicToken(alUSD).setWhitelist(address(rewardCollector), true);\n        IAlchemicToken(alUSD).setWhitelist(address(alchemistUSD), true);\n        hevm.stopPrank();\n\n        hevm.startPrank(address(rewardCollector));\n        TokenUtils.safeApprove(rewardToken, velodromeRouter, 2**256 - 1);\n        TokenUtils.safeApprove(alUSD, address(alchemistUSD), 2**256 - 1);\n        hevm.stopPrank();\n\n        staticAToken = new StaticATokenV3(\n            address(lendingPool),\n            rewardsController,\n            aOptDAI,\n            address(rewardCollector),\n            \"staticAaveOptimismDai\",\n            \"aOptDai\"\n        );\n\n        adapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:          address(this),\n            token:              address(staticAToken),\n            underlyingToken:    dai\n        }));\n\n        IAlchemistV2AdminActions.UnderlyingTokenConfig memory underlyingConfig = IAlchemistV2AdminActions.UnderlyingTokenConfig({\n\t\t\trepayLimitMinimum: 1,\n\t\t\trepayLimitMaximum: 1000,\n\t\t\trepayLimitBlocks: 10,\n\t\t\tliquidationLimitMinimum: 1,\n\t\t\tliquidationLimitMaximum: 1000,\n\t\t\tliquidationLimitBlocks: 7200\n\t\t});\n\n\t\talchemistUSD.addUnderlyingToken(dai, underlyingConfig);\n        alchemistUSD.setUnderlyingTokenEnabled(dai, true);\n        alchemistUSD.addUnderlyingToken(usdc, underlyingConfig);\n        alchemistUSD.setUnderlyingTokenEnabled(usdc, true);\n\t\talchemistUSD.addUnderlyingToken(usdt, underlyingConfig);\n        alchemistUSD.setUnderlyingTokenEnabled(usdt, true);\n        alchemistETH.addUnderlyingToken(weth, underlyingConfig);\n        alchemistETH.setUnderlyingTokenEnabled(weth, true);\n\n        hevm.label(0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE, \"aOptDAI\");\n        hevm.label(0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1, \"DAI\");\n        hevm.label(0x625E7708f30cA75bfd92586e17077590C60eb4cD, \"aOptUSDC\");\n        hevm.label(0x7F5c764cBc14f9669B88837ca1490cCa17c31607, \"USDC\");\n        hevm.label(0x6ab707Aca953eDAeFBc4fD23bA73294241490620, \"aOptUSDT\");\n        hevm.label(0x94b008aA00579c1307B0EF2c499aD98a8ce58e58, \"USDT\");\n        hevm.label(0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8, \"aOptWETH\");\n        hevm.label(0x4200000000000000000000000000000000000006, \"WETH\");\n    }\n\n    function testTokenDai() external {\n        runTokenTest(alchemistUSD, aOptDAI, dai, \"Static Aave Optimism DAI\", \"saOptDAI\", 1000 ether);\n    }\n\n    function testTokenUsdc() external {\n        runTokenTest(alchemistUSD, aOptUSDC, usdc, \"Static Aave Optimism USDC\", \"saUSDC\", 1000000000);\n    }\n\n    function testTokenUsdt() external {\n        runTokenTest(alchemistUSD, aOptUSDT, usdt, \"Static Aave Optimism USDT\", \"saUSDT\", 1000000000);\n    }\n\n    function testTokenWeth() external {\n        runTokenTest(alchemistETH, aOptWETH, weth, \"Static Aave Optimis WETH\", \"saWETH\", 1000 ether);\n    }\n\n    function runTokenTest(AlchemistV2 alchemist, address aToken, address underlyingToken, string memory name, string memory symbol, uint256 amount) internal {\n        StaticATokenV3 newStaticAToken = new StaticATokenV3(\n            address(lendingPool),\n            rewardsController,\n            aToken,\n            address(rewardCollector),\n            name,\n            symbol\n        );\n        AAVETokenAdapter newAdapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:          address(alchemist),\n            token:              address(newStaticAToken),\n            underlyingToken:    underlyingToken\n        }));\n        IAlchemistV2.YieldTokenConfig memory ytc = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(newAdapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000 ether,\n            creditUnlockBlocks: 7200\n        });\n\n        alchemist.addYieldToken(address(newStaticAToken), ytc);\n        alchemist.setYieldTokenEnabled(address(newStaticAToken), true);\n\n        deal(underlyingToken, address(this), amount);\n        uint256 startPrice = alchemist.getUnderlyingTokensPerShare(address(newStaticAToken));\n        TokenUtils.safeApprove(underlyingToken, address(alchemist), amount);\n        alchemist.depositUnderlying(address(newStaticAToken), amount, address(this), 0);\n        (uint256 startShares, ) = alchemist.positions(address(this), address(newStaticAToken));\n        uint256 expectedValue = startShares * startPrice / (10 ** newStaticAToken.decimals());\n        assertApproxEq(amount, expectedValue, 1000);\n\n        uint256 startBal = IERC20(underlyingToken).balanceOf(address(this));\n        assertEq(startBal, 0);\n\n        alchemist.withdrawUnderlying(address(newStaticAToken), startShares, address(this), 0);\n        (uint256 endShares, ) = alchemist.positions(address(this), address(newStaticAToken));\n        assertEq(endShares, 0);\n\n        uint256 endBal = IERC20(underlyingToken).balanceOf(address(this));\n        assertApproxEq(endBal, amount, 1);\n    }\n\n    function testRoundTrip() external {\n        uint256 depositAmount = 1e18;\n\n        deal(dai, address(this), depositAmount);\n\n        SafeERC20.safeApprove(dai, address(adapter), depositAmount);\n        uint256 wrapped = adapter.wrap(depositAmount, address(this));\n\n        uint256 underlyingValue = wrapped * adapter.price() / 10**SafeERC20.expectDecimals(address(staticAToken));\n        assertGe(depositAmount, underlyingValue);\n        \n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n        \n        assertEq(IERC20(dai).balanceOf(address(0xbeef)), unwrapped);\n        assertEq(staticAToken.balanceOf(address(this)), 0);\n        assertEq(staticAToken.balanceOf(address(adapter)), 0);\n    }\n\n    function testRoundTripFuzz(uint256 amount) external {\n        hevm.assume(\n            amount >= 10**SafeERC20.expectDecimals(dai) && \n            amount < 1000000000e18\n        );\n        \n        deal(dai, address(this), amount);\n\n        SafeERC20.safeApprove(dai, address(adapter), amount);\n        uint256 wrapped = adapter.wrap(amount, address(this));\n\n        uint256 underlyingValue = wrapped * adapter.price() / 10**SafeERC20.expectDecimals(address(staticAToken));\n        assertApproxEq(amount, underlyingValue, amount * 10000 / 1e18);\n        \n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n        \n        assertApproxEq(IERC20(dai).balanceOf(address(0xbeef)), unwrapped, 10000);\n        assertEq(staticAToken.balanceOf(address(this)), 0);\n        assertEq(staticAToken.balanceOf(address(adapter)), 0);\n    }\n\n    function testAppreciation() external {\n        deal(dai, address(this), 1000e18);\n\n        SafeERC20.safeApprove(dai, address(adapter), 1000e18);\n        uint256 wrapped = adapter.wrap(1000e18, address(this));\n        \n        hevm.roll(block.number + 10000000000);\n        hevm.warp(block.timestamp + 1000000000);\n\n        address[] memory assets = new address[](1);\n        assets[0] = aOptDAI;\n\n        assertGt(IRewardsController(rewardsController).getUserRewards(assets, address(staticAToken), rewardToken), 0);\n        \n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n        assertGt(unwrapped, 1000e18);\n    }\n\n    function testRewardCollector() external {\n        AAVETokenAdapter rewardCollectorAdapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:          address(alchemistUSD),\n            token:              address(staticAToken),\n            underlyingToken:    dai\n        }));\n\n        IAlchemistV2AdminActions.YieldTokenConfig memory yieldConfig = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(rewardCollectorAdapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000000 ether,\n            creditUnlockBlocks: 7200\n\t\t});\n\n        alchemistUSD.addYieldToken(address(staticAToken), yieldConfig);\n        alchemistUSD.setYieldTokenEnabled(address(staticAToken), true);\n\n        deal(dai, address(this), 1000000e18);\n        SafeERC20.safeApprove(dai, address(alchemistUSD), 1000000e18);\n        alchemistUSD.depositUnderlying(address(staticAToken), 1000000e18, address(this), 0);\n\n        alchemistUSD.mint(400000e18, address(this));\n\n        hevm.roll(block.number + 10000000);\n        hevm.warp(block.timestamp + 10000000);\n\n        // Keeper check balance of token\n        uint256 rewards = IRewardsController(rewardsController).getUserAccruedRewards(address(staticAToken), rewardToken);\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n\n        rewardCollector.claimAndDistributeRewards(address(staticAToken), rewards * 9999 / 10000);\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n\n        assertEq(IERC20(rewardToken).balanceOf(address(rewardCollector)), 0);\n        assertEq(IERC20(alUSD).balanceOf(address(rewardCollector)), 0);\n        assertEq(IERC20(usdc).balanceOf(address(rewardCollector)), 0);\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testRewardCollectorWithHarvester() external {\n        AAVETokenAdapter rewardCollectorAdapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:          address(alchemistUSD),\n            token:              address(staticAToken),\n            underlyingToken:    dai\n        }));\n\n        IAlchemistV2AdminActions.YieldTokenConfig memory yieldConfig = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(rewardCollectorAdapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000000 ether,\n            creditUnlockBlocks: 7200\n\t\t});\n\n        alchemistUSD.addYieldToken(address(staticAToken), yieldConfig);\n        alchemistUSD.setYieldTokenEnabled(address(staticAToken), true);\n\n        buffer.setSource(address(alchemistUSD), true);\n\n        // Keepers\n        harvestResolver = new HarvestResolver();\n        harvester = new AlchemixHarvester(address(this), 100000e18, address(harvestResolver));\n        harvestResolver.setHarvester(address(harvester), true);\n        harvestResolver.addHarvestJob(true, address(alchemistUSD), address(rewardCollector), address(staticAToken), 1000, 0, 0);\n        alchemistUSD.setKeeper(address(harvester), true);\n\n        harvester.addRewardCollector(address(staticAToken), address(rewardCollector));\n\n        deal(dai, address(this), 1000000e18);\n        SafeERC20.safeApprove(dai, address(alchemistUSD), 1000000e18);\n        alchemistUSD.depositUnderlying(address(staticAToken), 1000000e18, address(this), 0);\n\n        alchemistUSD.mint(400000e18, address(this));\n\n        hevm.roll(block.number + 10000000);\n        hevm.warp(block.timestamp + 10000000);\n\n        // Keeper check balance of token\n        (bool canExec, bytes memory execPayload) = harvestResolver.checker();\n\n        (address alch, address yield, uint256 minOut, uint256 expectedExchange) = abi.decode(extractCalldata(execPayload), (address, address, uint256, uint256));\n\n        (int256 debtBefore, ) = alchemistUSD.accounts(address((this)));\n        harvester.harvest(alch, yield, minOut, expectedExchange);\n        (int256 debtAfter, ) = alchemistUSD.accounts(address((this)));\n\n        assertEq(IERC20(rewardToken).balanceOf(address(rewardCollector)), 0);\n        assertEq(IERC20(alUSD).balanceOf(address(rewardCollector)), 0);\n        assertEq(IERC20(usdc).balanceOf(address(rewardCollector)), 0);\n        assertGt(debtBefore, debtAfter);\n    }\n\n    // For decoding bytes that have selector header\n    function extractCalldata(bytes memory calldataWithSelector) internal pure returns (bytes memory) {\n        bytes memory calldataWithoutSelector;\n\n        require(calldataWithSelector.length >= 4);\n\n        assembly {\n            let totalLength := mload(calldataWithSelector)\n            let targetLength := sub(totalLength, 4)\n            calldataWithoutSelector := mload(0x40)\n            \n            mstore(calldataWithoutSelector, targetLength)\n\n            mstore(0x40, add(0x20, targetLength))\n\n            mstore(add(calldataWithoutSelector, 0x20), shl(0x20, mload(add(calldataWithSelector, 0x20))))\n\n            for { let i := 0x1C } lt(i, targetLength) { i := add(i, 0x20) } {\n                mstore(add(add(calldataWithoutSelector, 0x20), i), mload(add(add(calldataWithSelector, 0x20), add(i, 0x04))))\n            }\n        }\n\n        return calldataWithoutSelector;\n    }\n\n    function onERC20Received(address token, uint256 value) external {\n        return;\n    }\n}"
    },
    "submodules/v2-foundry/src/external/aave/StaticATokenV3.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPool} from '../../interfaces/external/aave/ILendingPool.sol';\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IAToken} from '../../interfaces/external/aave/IAToken.sol';\nimport {IRewardsController} from '../../interfaces/external/aave/IRewardsController.sol';\nimport {ERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {WadRayMath} from './WadRayMath.sol';\nimport {TokenUtils} from \"../../libraries/TokenUtils.sol\";\n\nimport {Unauthorized, IllegalState, IllegalArgument} from \"../../base/Errors.sol\";\n\n/**\n * @title StaticAToken updated to work with alchemix rewardCollector\n * @dev Wrapper token that allows to deposit tokens on the Aave protocol and receive\n * a token which balance doesn't increase automatically, but uses an ever-increasing exchange rate\n * - Only supporting deposits and withdrawals\n * @author Aave\n **/\ncontract StaticATokenV3 is ERC20 {\n  using SafeERC20 for IERC20;\n  using WadRayMath for uint256;\n\n  struct SignatureParams {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  }\n\n  bytes public constant EIP712_REVISION = bytes('1');\n  bytes32 internal constant EIP712_DOMAIN =\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n  bytes32 public constant PERMIT_TYPEHASH =\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\n  bytes32 public constant METADEPOSIT_TYPEHASH =\n    keccak256(\n      'Deposit(address depositor,address recipient,uint256 value,uint16 referralCode,bool fromUnderlying,uint256 nonce,uint256 deadline)'\n    );\n  bytes32 public constant METAWITHDRAWAL_TYPEHASH =\n    keccak256(\n      'Withdraw(address owner,address recipient,uint256 staticAmount, uint256 dynamicAmount, bool toUnderlying, uint256 nonce,uint256 deadline)'\n    );\n\n  ILendingPool public immutable LENDING_POOL;\n  IRewardsController public immutable REWARDS_CONTROLLER;\n  IERC20 public immutable ATOKEN;\n  IERC20 public immutable ASSET;\n  address public admin;\n  address public pendingAdmin;\n  address public rewardCollector;\n\n  /// @dev owner => next valid nonce to submit with permit(), metaDeposit() and metaWithdraw()\n  /// We choose to have sequentiality on them for each user to avoid potentially dangerous/bad UX cases\n  mapping(address => uint256) public _nonces;\n\n  uint8 private _decimals;\n\n  constructor(\n    address lendingPool,\n    address rewardsController,\n    address aToken,\n    address _rewardCollector,\n    string memory wrappedTokenName,\n    string memory wrappedTokenSymbol\n  ) ERC20(wrappedTokenName, wrappedTokenSymbol) {\n    admin = msg.sender;\n    LENDING_POOL = ILendingPool(lendingPool);\n    REWARDS_CONTROLLER = IRewardsController(rewardsController);\n    ATOKEN = IERC20(aToken);\n    rewardCollector = _rewardCollector;\n\n    IERC20 underlyingAsset = IERC20(IAToken(aToken).UNDERLYING_ASSET_ADDRESS());\n    ASSET = underlyingAsset;\n    TokenUtils.safeApprove(address(underlyingAsset), address(lendingPool), type(uint256).max);\n    _decimals = IERC20Metadata(aToken).decimals();\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n\n  function claimRewards() public {\n    require(msg.sender == rewardCollector, 'Not rewardCollector');\n    address[] memory assets = new address[](1);\n    assets[0] = address(ATOKEN);\n    REWARDS_CONTROLLER.claimAllRewards(assets, msg.sender);\n  }\n\n  function setPendingAdmin(address newAdmin) external {\n    _onlyAdmin();\n    require(newAdmin != address(0), \"0 address\");\n    pendingAdmin = newAdmin;\n  }\n\n  function acceptAdmin() external {\n    require(msg.sender == pendingAdmin, \"must be pending admin\");\n    admin = pendingAdmin;\n  }\n\n  function setRewardCollector(address _rewardCollector) external {\n    _onlyAdmin();\n    rewardCollector = _rewardCollector;\n  }\n\n  /**\n   * @dev Deposits `ASSET` in the Aave protocol and mints static aTokens to msg.sender\n   * @param recipient The address that will receive the static aTokens\n   * @param amount The amount of underlying `ASSET` to deposit (e.g. deposit of 100 USDC)\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param fromUnderlying bool\n   * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\n   * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\n   * @return uint256 The amount of StaticAToken minted, static balance\n   **/\n  function deposit(\n    address recipient,\n    uint256 amount,\n    uint16 referralCode,\n    bool fromUnderlying\n  ) external returns (uint256) {\n    return _deposit(msg.sender, recipient, amount, referralCode, fromUnderlying);\n  }\n\n  /**\n   * @dev Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\n   * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\n   * @param amount The amount to withdraw, in static balance of StaticAToken\n   * @param toUnderlying bool\n   * - `true` for the recipient to get underlying tokens (e.g. USDC)\n   * - `false` for the recipient to get aTokens (e.g. aUSDC)\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\n   **/\n  function withdraw(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256) {\n    return _withdraw(msg.sender, recipient, amount, 0, toUnderlying);\n  }\n\n  /**\n   * @dev Burns `amount` of static aToken, with recipient receiving the corresponding amount of `ASSET`\n   * @param recipient The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\n   * @param amount The amount to withdraw, in dynamic balance of aToken/underlying asset\n   * @param toUnderlying bool\n   * - `true` for the recipient to get underlying tokens (e.g. USDC)\n   * - `false` for the recipient to get aTokens (e.g. aUSDC)\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\n   **/\n  function withdrawDynamicAmount(\n    address recipient,\n    uint256 amount,\n    bool toUnderlying\n  ) external returns (uint256, uint256) {\n    return _withdraw(msg.sender, recipient, 0, amount, toUnderlying);\n  }\n\n  /**\n   * @dev Implements the permit function as for\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner The owner of the funds\n   * @param spender The spender\n   * @param value The amount\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param v Signature param\n   * @param s Signature param\n   * @param r Signature param\n   * @param chainId Passing the chainId in order to be fork-compatible\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s,\n    uint256 chainId\n  ) external {\n    require(owner != address(0), 'INVALID_OWNER');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          getDomainSeparator(chainId),\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n        )\n      );\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\n    _nonces[owner] = currentValidNonce + 1;\n    _approve(owner, spender, value);\n  }\n\n  /**\n   * @dev Allows to deposit on Aave via meta-transaction\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param depositor Address from which the funds to deposit are going to be pulled\n   * @param recipient Address that will receive the staticATokens, in the average case, same as the `depositor`\n   * @param value The amount to deposit\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param fromUnderlying bool\n   * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\n   * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param sigParams Signature params: v,r,s\n   * @param chainId Passing the chainId in order to be fork-compatible\n   * @return uint256 The amount of StaticAToken minted, static balance\n   */\n  function metaDeposit(\n    address depositor,\n    address recipient,\n    uint256 value,\n    uint16 referralCode,\n    bool fromUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256) {\n    require(depositor != address(0), 'INVALID_DEPOSITOR');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[depositor];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          getDomainSeparator(chainId),\n          keccak256(\n            abi.encode(\n              METADEPOSIT_TYPEHASH,\n              depositor,\n              recipient,\n              value,\n              referralCode,\n              fromUnderlying,\n              currentValidNonce,\n              deadline\n            )\n          )\n        )\n      );\n    require(\n      depositor == ecrecover(digest, sigParams.v, sigParams.r, sigParams.s),\n      'INVALID_SIGNATURE'\n    );\n    _nonces[depositor] = currentValidNonce + 1;\n    return _deposit(depositor, recipient, value, referralCode, fromUnderlying);\n  }\n\n  /**\n   * @dev Allows to withdraw from Aave via meta-transaction\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner Address owning the staticATokens\n   * @param recipient Address that will receive the underlying withdrawn from Aave\n   * @param staticAmount The amount of staticAToken to withdraw. If > 0, `dynamicAmount` needs to be 0\n   * @param dynamicAmount The amount of underlying/aToken to withdraw. If > 0, `staticAmount` needs to be 0\n   * @param toUnderlying bool\n   * - `true` for the recipient to get underlying tokens (e.g. USDC)\n   * - `false` for the recipient to get aTokens (e.g. aUSDC)\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param sigParams Signature params: v,r,s\n   * @param chainId Passing the chainId in order to be fork-compatible\n   * @return amountToBurn: StaticATokens burnt, static balance\n   * @return amountToWithdraw: underlying/aToken send to `recipient`, dynamic balance\n   */\n  function metaWithdraw(\n    address owner,\n    address recipient,\n    uint256 staticAmount,\n    uint256 dynamicAmount,\n    bool toUnderlying,\n    uint256 deadline,\n    SignatureParams calldata sigParams,\n    uint256 chainId\n  ) external returns (uint256, uint256) {\n    require(owner != address(0), 'INVALID_DEPOSITOR');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest =\n      keccak256(\n        abi.encodePacked(\n          '\\x19\\x01',\n          getDomainSeparator(chainId),\n          keccak256(\n            abi.encode(\n              METAWITHDRAWAL_TYPEHASH,\n              owner,\n              recipient,\n              staticAmount,\n              dynamicAmount,\n              toUnderlying,\n              currentValidNonce,\n              deadline\n            )\n          )\n        )\n      );\n    require(owner == ecrecover(digest, sigParams.v, sigParams.r, sigParams.s), 'INVALID_SIGNATURE');\n    _nonces[owner] = currentValidNonce + 1;\n    return _withdraw(owner, recipient, staticAmount, dynamicAmount, toUnderlying);\n  }\n\n  /**\n   * @dev Utility method to get the current aToken balance of an user, from his staticAToken balance\n   * @param account The address of the user\n   * @return uint256 The aToken balance\n   **/\n  function dynamicBalanceOf(address account) external view returns (uint256) {\n    return staticToDynamicAmount(balanceOf(account));\n  }\n\n  /**\n   * @dev Converts a static amount (scaled balance on aToken) to the aToken/underlying value,\n   * using the current liquidity index on Aave\n   * @param amount The amount to convert from\n   * @return uint256 The dynamic amount\n   **/\n  function staticToDynamicAmount(uint256 amount) public view returns (uint256) {\n    return amount.rayMul(rate());\n  }\n\n  /**\n   * @dev Converts an aToken or underlying amount to the what it is denominated on the aToken as\n   * scaled balance, function of the principal and the liquidity index\n   * @param amount The amount to convert from\n   * @return uint256 The static (scaled) amount\n   **/\n  function dynamicToStaticAmount(uint256 amount) public view returns (uint256) {\n    return amount.rayDiv(rate());\n  }\n\n  /**\n   * @dev Returns the Aave liquidity index of the underlying aToken, denominated rate here\n   * as it can be considered as an ever-increasing exchange rate\n   * @return bytes32 The domain separator\n   **/\n  function rate() public view returns (uint256) {\n    return LENDING_POOL.getReserveNormalizedIncome(address(ASSET));\n  }\n\n  /**\n   * @dev Function to return a dynamic domain separator, in order to be compatible with forks changing chainId\n   * @param chainId The chain id\n   * @return bytes32 The domain separator\n   **/\n  function getDomainSeparator(uint256 chainId) public view returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          EIP712_DOMAIN,\n          keccak256(bytes(name())),\n          keccak256(EIP712_REVISION),\n          chainId,\n          address(this)\n        )\n      );\n  }\n\n  /// @dev Checks that the `msg.sender` is the administrator.\n  ///\n  /// @dev `msg.sender` must be the administrator or this call will revert with an {Unauthorized} error.\n  function _onlyAdmin() internal view {\n      if (msg.sender != admin) {\n          revert Unauthorized();\n      }\n  }\n\n  function _deposit(\n    address depositor,\n    address recipient,\n    uint256 amount,\n    uint16 referralCode,\n    bool fromUnderlying\n  ) internal returns (uint256) {\n    require(recipient != address(0), 'INVALID_RECIPIENT');\n\n    if (fromUnderlying) {\n      ASSET.safeTransferFrom(depositor, address(this), amount);\n      LENDING_POOL.deposit(address(ASSET), amount, address(this), referralCode);\n    } else {\n      ATOKEN.safeTransferFrom(depositor, address(this), amount);\n    }\n\n    uint256 amountToMint = dynamicToStaticAmount(amount);\n    _mint(recipient, amountToMint);\n    return amountToMint;\n  }\n\n  function _withdraw(\n    address owner,\n    address recipient,\n    uint256 staticAmount,\n    uint256 dynamicAmount,\n    bool toUnderlying\n  ) internal returns (uint256, uint256) {\n    require(recipient != address(0), 'INVALID_RECIPIENT');\n    require(staticAmount == 0 || dynamicAmount == 0, 'ONLY_ONE_AMOUNT_FORMAT_ALLOWED');\n\n    uint256 userBalance = balanceOf(owner);\n\n    uint256 amountToWithdraw;\n    uint256 amountToBurn;\n\n    uint256 currentRate = rate();\n    if (staticAmount > 0) {\n      amountToBurn = (staticAmount > userBalance) ? userBalance : staticAmount;\n      amountToWithdraw = (staticAmount > userBalance)\n        ? _staticToDynamicAmount(userBalance, currentRate)\n        : _staticToDynamicAmount(staticAmount, currentRate);\n    } else {\n      uint256 dynamicUserBalance = _staticToDynamicAmount(userBalance, currentRate);\n      amountToWithdraw = (dynamicAmount > dynamicUserBalance) ? dynamicUserBalance : dynamicAmount;\n      amountToBurn = _dynamicToStaticAmount(amountToWithdraw, currentRate);\n    }\n\n    _burn(owner, amountToBurn);\n\n    if (toUnderlying) {\n      LENDING_POOL.withdraw(address(ASSET), amountToWithdraw, recipient);\n    } else {\n      ATOKEN.safeTransfer(recipient, amountToWithdraw);\n    }\n\n    return (amountToBurn, amountToWithdraw);\n  }\n\n  function _dynamicToStaticAmount(uint256 amount, uint256 rate) internal pure returns (uint256) {\n    return amount.rayDiv(rate);\n  }\n\n  function _staticToDynamicAmount(uint256 amount, uint256 rate) internal pure returns (uint256) {\n    return amount.rayMul(rate);\n  }\n}"
    },
    "submodules/v2-foundry/src/adapters/V1/TransferAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {Unauthorized, IllegalState, IllegalArgument} from \"../../base/ErrorMessages.sol\";\n\nimport {IAlchemicToken} from \"../../interfaces/IAlchemicToken.sol\";\nimport {IAlchemistV2} from \"../../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV1} from \"../../interfaces/IAlchemistV1.sol\";\nimport {IDetailedERC20} from \"../../interfaces/IDetailedERC20.sol\";\nimport {IVaultAdapter} from \"../../interfaces/IVaultAdapter.sol\";\n\nimport {SafeCast} from \"../../libraries/SafeCast.sol\";\nimport {SafeERC20} from \"../../libraries/SafeERC20.sol\";\nimport {ITransferAdapter} from \"../../interfaces/ITransferAdapter.sol\";\n\n/// @title TransferAdapter\n///\n/// @dev A vault adapter implementation which migrates users to version 2\ncontract TransferAdapter is IVaultAdapter {\n  string public constant version = \"1.1.0\";\n  /// @dev The address which has admin control over this contract.\n  address public admin;\n\n  /// @dev The address that will have admin control over this contract.\n  address public pendingAdmin;\n\n    /// @dev The address of the debt token.\n  address public debtToken;\n\n  /// @dev The underlyingToken address.\n  address public underlyingToken;\n\n  /// @dev The yieldToken address.\n  address public yieldToken;\n\n  /// @dev The alchemistV1.\n  IAlchemistV1 public alchemistV1;\n\n  /// @dev The alchemistV2.\n  IAlchemistV2 public alchemistV2;\n\n  /// @dev The map of users who have/haven't migrated.\n  mapping(address => bool) private _hasMigrated;\n\n  /// @dev The array of users who have migrated.\n  address[] public migratedUsers;\n\n  /// @dev The address of the previous transfer adapter.\n  address public transferAdapter;\n\n  constructor(\n    address _admin, \n    address _debtToken, \n    address _underlyingToken, \n    address _yieldToken, \n    address _alchemistV1, \n    address _alchemistV2,\n    address _transferAdapter\n  ) {\n    admin = _admin;\n    _debtToken = debtToken;\n    underlyingToken = _underlyingToken;\n    yieldToken = _yieldToken;\n    alchemistV1 = IAlchemistV1(_alchemistV1);\n    alchemistV2 = IAlchemistV2(_alchemistV2);\n    transferAdapter = _transferAdapter;\n  }\n\n  /// @dev A modifier which reverts if the caller is not the alchemist.\n  modifier onlyAlchemist() {\n    require(address(alchemistV1) == msg.sender, \"TransferAdapter: only alchemist\");\n    _;\n  }\n\n  /// @dev A modifier which reverts if the caller is not the admin.\n  modifier onlyAdmin() {\n    require(admin == msg.sender, \"TransferAdapter: only admin\");\n    _;\n  }\n\n  function setPendingAdmin(address _pendingAdmin) external onlyAdmin {\n    pendingAdmin = _pendingAdmin;\n  }\n\n  function acceptAdmin() external {\n    require(pendingAdmin == msg.sender, \"TransferAdapter: only pending admin\");\n    admin = pendingAdmin;\n  }\n\n  /// @dev Gets the token that the vault accepts.\n  ///\n  /// @return the accepted token.\n  function token() external view override returns (IDetailedERC20) {\n    return IDetailedERC20(underlyingToken);\n  }\n\n  /// @dev Gets the total value of the assets that the adapter holds.\n  ///\n  /// @return the total assets.\n  function totalValue() external view override returns (uint256) {\n    return 0;\n  }\n\n  /// @dev Deposits tokens into the vault.\n  ///\n  /// @param _amount the amount of tokens to deposit into the vault.\n  function deposit(uint256 _amount) external override {\n    // Accept tokens from alchemist\n  }\n\n  /// @dev Withdraws tokens from the vault to the recipient.\n  ///\n  /// This function reverts if the caller is not the admin.\n  /// This function reverts if the user has already migrated.\n  ///\n  /// @param _recipient the account to withdraw the tokes to.\n  /// @param _amount    the amount of tokens to withdraw.\n  function withdraw(address _recipient, uint256 _amount) external override onlyAlchemist {\n    if(tx.origin == admin) {\n      SafeERC20.safeTransfer(underlyingToken, address(alchemistV1), IERC20(underlyingToken).balanceOf(address(this)));\n    } else {\n      if(_amount != 1) {\n        revert IllegalArgument(\"TransferAdapter: Amount must be 1\");\n      }\n      _migrate(tx.origin, _recipient);\n    }\n  }\n\n  function forceMigrate(address account) public onlyAdmin {\n    _migrate(account, account);\n  }\n\n  function _migrate(address account, address recipient) internal {\n    if(hasMigrated(account)) {\n      revert IllegalState(\"User has already migrated\");\n    }\n    \n    uint256 deposited = alchemistV1.getCdpTotalDeposited(account);\n    uint256 debt = alchemistV1.getCdpTotalDebt(account);\n    \n    _hasMigrated[account] = true;\n    migratedUsers.push(account);\n\n    SafeERC20.safeApprove(underlyingToken, address(alchemistV2), deposited);\n    alchemistV2.depositUnderlying(yieldToken, deposited, recipient, 0);\n\n    // Due to a rounding error, users with 2:1 collateralization ratio will be considered undercollateralized.\n    // 1000000 wei is deducted from the users debt to correct this.\n    if(debt > 0){\n      if(deposited / debt == 2){\n        alchemistV2.transferDebtV1(recipient, SafeCast.toInt256(debt) - 1000000);\n      } else {\n        alchemistV2.transferDebtV1(recipient, SafeCast.toInt256(debt));\n      }\n    }\n  }\n\n  function hasMigrated(address acct) public view returns (bool) {\n    return _hasMigrated[acct] || ITransferAdapter(transferAdapter).hasMigrated(acct);\n  }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IAlchemistV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.5.0;\n\nimport {IVaultAdapter} from \"./IVaultAdapter.sol\";\n\ninterface IAlchemistV1 {\n    function deposit(uint256 _amount) external;\n    function migrate(IVaultAdapter _adapter) external;\n    function mint(uint256 _amount) external;\n    function setEmergencyExit(bool _emergencyExit) external;\n    function flush() external returns (uint256);\n    function getCdpTotalDeposited(address _account) external view returns (uint256);\n    function getCdpTotalDebt(address _account) external view returns (uint256);\n    function getVaultTotalDeposited(uint256 _vaultId) external view returns (uint256);\n    function recall(uint256 _vaultId, uint256 _amount) external returns (uint256, uint256);\n    function recallAll(uint256 _vaultId) external returns (uint256, uint256);\n    function withdraw(uint256 _amount) external returns (uint256, uint256);\n    function setTransmuter(address _transmuter) external;\n    function liquidate(uint256 _amount) external returns (uint256, uint256);\n    function harvest(uint256 _vaultId) external returns (uint256, uint256);\n    function repay(uint256 _parentAmount, uint256 _childAmount) external;\n    function vaultCount() external returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/IDetailedERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.12;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDetailedERC20 is IERC20 {\n  function name() external returns (string memory);\n  function symbol() external returns (string memory);\n  function decimals() external returns (uint8);\n}"
    },
    "submodules/v2-foundry/src/interfaces/IVaultAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.12;\n\nimport \"./IDetailedERC20.sol\";\n\n/// Interface for all Vault Adapter implementations.\ninterface IVaultAdapter {\n\n  /// @dev Gets the token that the adapter accepts.\n  function token() external view returns (IDetailedERC20);\n\n  /// @dev The total value of the assets deposited into the vault.\n  function totalValue() external view returns (uint256);\n\n  /// @dev Deposits funds into the vault.\n  ///\n  /// @param _amount  the amount of funds to deposit.\n  function deposit(uint256 _amount) external;\n\n  /// @dev Attempts to withdraw funds from the wrapped vault.\n  ///\n  /// The amount withdrawn to the recipient may be less than the amount requested.\n  ///\n  /// @param _recipient the recipient of the funds.\n  /// @param _amount    the amount of funds to withdraw.\n  function withdraw(address _recipient, uint256 _amount) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/ITransferAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.12;\n\ninterface ITransferAdapter {\n    function hasMigrated(address acct) external view returns (bool);\n}"
    },
    "submodules/v2-foundry/src/test/V2Migration.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {AlchemistV2} from \"../AlchemistV2.sol\";\nimport {PausableTransmuterConduit} from \"../PausableTransmuterConduit.sol\";\nimport {TransferAdapter} from \"../adapters/V1/TransferAdapter.sol\";\n\nimport {IAlchemicToken} from \"../interfaces/IAlchemicToken.sol\";\nimport {IAlchemistV1} from \"../interfaces/IAlchemistV1.sol\";\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IProxyAdmin} from \"../interfaces/external/IProxyAdmin.sol\";\nimport {ITransmuterV1} from \"../interfaces/ITransmuterV1.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {FixedPointMath} from \"../libraries/FixedPointMath.sol\";\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\n\nimport {console} from \"../../lib/forge-std/src/console.sol\";\n\ncontract V2MigrationTest is DSTestPlus {\n    uint256 constant BPS = 10000;\n    uint256 constant scalar = 10**18;\n    address constant alchemistV1USDAddress = 0xc21D353FF4ee73C572425697f4F5aaD2109fe35b;\n    address constant alchemistV2USDAddress = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n    address constant alUSD = 0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9;\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address constant governance = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address constant proxyAdminAddress = 0xE0fC5CB7665041CdA26969A2D1ceb5cD5046347d;\n    address constant transmuterV1Address = 0x9735F7d3Ea56b454b24fFD74C58E9bD85cfaD31B;\n    address constant treasury = 0x8392F6669292fA56123F71949B52d883aE57e225;\n    address constant whitelistV2Address = 0x78537a6CeBa16f412E123a90472C6E0e9A8F1132;\n    address constant yvDAI = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95;\n    address constant prevAdapter = 0x72A7cb4d5daB8E9Ba23f30DBE8E72Bc854a9945A;\n\n    IAlchemicToken alchemicToken = IAlchemicToken(alUSD);\n    IAlchemistV1 alchemistV1USD = IAlchemistV1(alchemistV1USDAddress);\n    IAlchemistV2 alchemistV2USD = IAlchemistV2(alchemistV2USDAddress);\n    IProxyAdmin proxyAdmin = IProxyAdmin(proxyAdminAddress);\n    IWhitelist whitelistV2 = IWhitelist(whitelistV2Address);\n\n    AlchemistV2 newAlchemistV2; \n    PausableTransmuterConduit pausableTransmuterConduit;\n    TransferAdapter transferAdapter;\n\n    function setUp() external {\n        newAlchemistV2 = new AlchemistV2();\n        pausableTransmuterConduit = new PausableTransmuterConduit(governance, DAI, alchemistV1USDAddress, transmuterV1Address);\n        transferAdapter = new TransferAdapter(governance, alUSD, DAI, yvDAI, alchemistV1USDAddress, alchemistV2USDAddress, prevAdapter);\n\n        // Allow adapter to deposit underlying tokens into V2\n        // & Set adapter address in the alchemist V2\n        // & Upgrade alchemist V2 to new version with debt transfer\n        // & Swap to new transmuter conduit for V1\n        // & Update maximum value for yvDAI deposit\n        hevm.startPrank(governance);\n        proxyAdmin.upgrade(alchemistV2USDAddress, address(newAlchemistV2));\n        whitelistV2.add(address(transferAdapter));\n        alchemistV2USD.setTransferAdapterAddress(address(transferAdapter));\n        alchemistV1USD.setTransmuter(address(pausableTransmuterConduit));\n        alchemistV2USD.setMaximumExpectedValue(yvDAI, 4000000000000000000000000000);\n        hevm.stopPrank();\n\n        // Start a position in V1 as 0xbeef and go into debt\n        deal(DAI, address(0xbeef), 200e18);\n        hevm.startPrank(address(0xbeef), address(0xbeef));\n        SafeERC20.safeApprove(DAI, alchemistV1USDAddress, 100e18);\n        alchemistV1USD.deposit(100e18);\n        alchemistV1USD.mint(10e18);\n        hevm.stopPrank();\n    }\n\n    function testMigrateSingleUserFunds() external {\n        // V1 debt before migration\n        uint256 originalDebt = alchemistV1USD.getCdpTotalDebt(address(0xbeef));\n\n        // Pull funds from current vault and flush to the transfer adapter\n        hevm.startPrank(governance);\n        (uint256 withdrawnAmount, ) = alchemistV1USD.recallAll(1);\n        alchemistV1USD.migrate(transferAdapter);\n        uint256 flushed = alchemistV1USD.flush();\n        hevm.stopPrank();\n        // Contract may have previous balance so check if flushed is greater than or equal to withdrawn amount\n        assertGt(flushed, withdrawnAmount - 1);\n\n        // Pause the transmuter\n        hevm.prank(governance);\n        pausableTransmuterConduit.pauseTransmuter(true);\n        // Stop V1 from minting more alUSD\n        hevm.prank(treasury);\n        alchemicToken.setWhitelist(alchemistV1USDAddress, false);\n        // Pause the alchemist.\n        hevm.prank(governance);\n        alchemistV1USD.setEmergencyExit(true);\n        // Test that only withdraw works after these steps.\n        hevm.startPrank(address(0xbeef), address(0xbeef));\n        expectIllegalStateError(\"Transmuter is currently paused!\");\n        alchemistV1USD.liquidate(1);\n        expectIllegalStateError(\"Transmuter is currently paused!\");\n        alchemistV1USD.harvest(1);\n        SafeERC20.safeApprove(DAI, alchemistV1USDAddress, 10e18);\n        expectIllegalStateError(\"Transmuter is currently paused!\");\n        alchemistV1USD.repay(10e18,10e18);\n        hevm.expectRevert(\"AlUSD: Alchemist is not whitelisted\");\n        alchemistV1USD.mint(5e18);\n        hevm.expectRevert(\"emergency pause enabled\");\n        alchemistV1USD.deposit(5e18);\n        hevm.stopPrank();\n\n        // Roll chain ahead\n        hevm.roll(block.number + 10);\n\n        // User withdraws \n        hevm.startPrank(address(0xbeef), address(0xbeef));\n        // Withdraw too much and expect revert\n        hevm.expectRevert(abi.encodeWithSignature(\"IllegalArgument(string)\", \"TransferAdapter: Amount must be 1\"));\n        alchemistV1USD.withdraw(10);\n        // Withdraw correctly using 1\n        alchemistV1USD.withdraw(1);\n        // Withdraw again should revert\n        hevm.expectRevert(abi.encodeWithSignature(\"IllegalState(string)\", \"User has already migrated\"));\n        alchemistV1USD.withdraw(1);\n        hevm.stopPrank();\n\n        // Debts must be the same as debt in V1\n        (int256 V2Debt, ) = alchemistV2USD.accounts(address(0xbeef));\n        assertEq(int256(originalDebt), V2Debt);\n        // Verify underlying value of position in V2\n        (uint256 shares, uint256 weight) = alchemistV2USD.positions(address(0xbeef), yvDAI);\n        uint256 underlyingValue = shares * alchemistV2USD.getUnderlyingTokensPerShare(yvDAI) / scalar;\n        assertApproxEq(underlyingValue, 100e18, 100e18 * 10 / BPS);\n    }\n\n    // function testMigrateAllUserFunds() external {\n    //     // Pull funds from current vault and flush to the transfer adapter\n    //     hevm.startPrank(governance);\n    //     (uint256 withdrawnAmount, ) = alchemistV1USD.recallAll(1);\n    //     alchemistV1USD.migrate(transferAdapter);\n    //     uint256 flushed = alchemistV1USD.flush();\n    //     hevm.stopPrank();\n    //     // Contract may have previous balance so check if flushed is greater than or equal to withdrawn amount\n    //     assertGt(flushed, withdrawnAmount - 1);\n\n    //     // Pause the transmuter\n    //     hevm.prank(governance);\n    //     pausableTransmuterConduit.pauseTransmuter(true);\n    //     // Stop V1 from minting more alUSD\n    //     hevm.prank(treasury);\n    //     alchemicToken.setWhitelist(alchemistV1USDAddress, false);\n    //     // Pause the alchemist.\n    //     hevm.prank(governance);\n    //     alchemistV1USD.setEmergencyExit(true);\n    //     hevm.stopPrank();\n\n    //     // Roll chain ahead\n    //     hevm.roll(block.number + 10);\n\n    //     // List of addresses from V1\n    //     V1AddressList V1List = new V1AddressList();\n    //     address[2992] memory addresses = V1List.getAddresses();\n\n    //     // Loop until all addresses have migrated\n    //     for (uint i = 0; i < addresses.length; i++) {\n    //         // Original debt/position from V1\n    //         uint256 V1Debt = alchemistV1USD.getCdpTotalDebt(addresses[i]);\n    //         uint256 V1Deposited = alchemistV1USD.getCdpTotalDeposited(addresses[i]);\n    //         // Orignal debt/position from V2 which is used to calculate the difference\n    //         // This accounts for users migrating already having positions in V2\n    //         (int256 V2DebtBefore, ) = alchemistV2USD.accounts(addresses[i]);\n    //         (uint256 V2SharesBefore, ) = alchemistV2USD.positions(addresses[i], yvDAI);\n\n    //         // Users with less than 10 wei can possibly cause undercollateralized error\n    //         if(V1Deposited < 10) {\n    //             continue;\n    //         }\n\n    //         // User withdraws \n    //         hevm.prank(addresses[i], addresses[i]);\n    //         alchemistV1USD.withdraw(1);\n    //         (int256 V2DebtAfter, ) = alchemistV2USD.accounts(addresses[i]);\n\n    //         int256 debtIncrease = V2DebtAfter - V2DebtBefore;\n\n    //         // Users with 2:1 collaterlization ratio have debt reduced by 1000000 wei\n    //         if(V1Debt > 0 && V1Deposited / V1Debt == 2) {\n    //             assertEq(int256(V1Debt) - 1000000, debtIncrease);\n    //         } else {\n    //             assertEq(int256(V1Debt), debtIncrease);\n    //         }\n\n    //         // Verify underlying value of position in V2 within 0.1% of original\n    //         (uint256 V2SharesAfter, ) = alchemistV2USD.positions(addresses[i], yvDAI);\n    //         uint256 sharesDiff = V2SharesAfter - V2SharesBefore;\n    //         uint256 underlyingValue = (sharesDiff * alchemistV2USD.getUnderlyingTokensPerShare(yvDAI) / scalar);\n    //         assertApproxEq(underlyingValue, V1Deposited, V1Deposited * 10 / BPS);\n    //     }\n    // }\n\n    function testForceMigrateSingleUserFunds() external {\n        // V1 debt before migration\n        uint256 originalDebt = alchemistV1USD.getCdpTotalDebt(address(0xbeef));\n\n        // Pull funds from current vault and flush to the transfer adapter\n        hevm.startPrank(governance);\n        (uint256 withdrawnAmount, ) = alchemistV1USD.recallAll(1);\n        alchemistV1USD.migrate(transferAdapter);\n        uint256 flushed = alchemistV1USD.flush();\n        hevm.stopPrank();\n        // Contract may have previous balance so check if flushed is greater than or equal to withdrawn amount\n        assertGt(flushed, withdrawnAmount - 1);\n\n        // Pause the transmuter\n        hevm.prank(governance);\n        pausableTransmuterConduit.pauseTransmuter(true);\n        // Stop V1 from minting more alUSD\n        hevm.prank(treasury);\n        alchemicToken.setWhitelist(alchemistV1USDAddress, false);\n        // Pause the alchemist.\n        hevm.prank(governance);\n        alchemistV1USD.setEmergencyExit(true);\n\n        // Roll chain ahead\n        hevm.roll(block.number + 10);\n\n        hevm.expectRevert(\"TransferAdapter: only admin\");\n        transferAdapter.forceMigrate(address(0xbeef));\n\n        // force migrate with admin\n        hevm.startPrank(0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9, 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9);\n        transferAdapter.forceMigrate(address(0xbeef));\n        hevm.stopPrank();\n\n        // Debts must be the same as debt in V1\n        (int256 V2Debt, ) = alchemistV2USD.accounts(address(0xbeef));\n        assertEq(int256(originalDebt), V2Debt);\n        // Verify underlying value of position in V2\n        (uint256 shares, uint256 weight) = alchemistV2USD.positions(address(0xbeef), yvDAI);\n        uint256 underlyingValue = shares * alchemistV2USD.getUnderlyingTokensPerShare(yvDAI) / scalar;\n        assertApproxEq(underlyingValue, 100e18, 100e18 * 1 / BPS);\n    }\n\n    function testAdminRecallFunds() external {\n        // Pull funds from current vault and flush to the transfer adapter\n        hevm.startPrank(governance);\n        (uint256 withdrawnAmount, ) = alchemistV1USD.recallAll(1);\n        alchemistV1USD.migrate(transferAdapter);\n        uint256 flushed = alchemistV1USD.flush();\n        hevm.stopPrank();\n\n        // Pause the transmuter\n        hevm.prank(governance);\n        pausableTransmuterConduit.pauseTransmuter(true);\n        // Stop V1 from minting more alUSD\n        hevm.prank(treasury);\n        alchemicToken.setWhitelist(alchemistV1USDAddress, false);\n        // Pause the alchemist.\n        hevm.prank(governance);\n        alchemistV1USD.setEmergencyExit(true);\n\n        // Roll chain ahead\n        hevm.roll(block.number + 10);\n\n        // force migrate with admin\n        hevm.startPrank(0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9, 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9);\n        transferAdapter.forceMigrate(address(0xbeef));\n        hevm.stopPrank();\n\n        hevm.startPrank(governance, governance);\n        uint256 taBalBeforeRecall = IERC20(DAI).balanceOf(address(transferAdapter));\n        uint256 alchBalBeforeRecall = IERC20(DAI).balanceOf(address(alchemistV1USD));\n        alchemistV1USD.recallAll(2);\n        uint256 alchBalAfterRecall = IERC20(DAI).balanceOf(address(alchemistV1USD));\n\n        assertEq(alchBalBeforeRecall, 0);\n        assertEq(taBalBeforeRecall, alchBalAfterRecall);\n    }\n}"
    },
    "submodules/v2-foundry/src/PausableTransmuterConduit.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"./interfaces/ITransmuterV1.sol\";\nimport \"./interfaces/IERC20TokenReceiver.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./base/ErrorMessages.sol\";\n\ncontract PausableTransmuterConduit {\n    using SafeERC20 for IERC20;\n\n    /// @notice The admin.\n    address public admin;\n\n    /// @notice The address of the underlying token that is being transmuted.\n    address public token;\n\n    /// @notice The address of the transmuter to pull funds from.\n    address public sourceTransmuter;\n\n    /// @notice The address of the transmuter to send funds to.\n    address public sinkTransmuter;\n\n    /// @notice Whether or not transmuter is paused.\n    bool private _paused;\n\n    constructor(address _admin, address _token, address _source, address _sink) {\n        admin = _admin;\n        token = _token;\n        sourceTransmuter = _source;\n        sinkTransmuter = _sink;\n    }\n\n    modifier onlyAdmin() {\n        if (msg.sender != admin) {\n            revert Unauthorized(\"TransmuterConduit\");\n        }\n        _;\n    }\n\n    modifier onlySource() {\n        if (msg.sender != sourceTransmuter) {\n            revert Unauthorized(\"TransmuterConduit\");\n        }\n        _;\n    }\n\n    function distribute(address origin, uint256 amount) external onlySource() {\n        if (_paused) {\n            revert IllegalState(\"Transmuter is currently paused!\");\n        }\n        \n        IERC20(token).safeTransferFrom(origin, sinkTransmuter, amount);\n        IERC20TokenReceiver(sinkTransmuter).onERC20Received(token, amount);\n    }\n\n    function pauseTransmuter(bool paused) external onlyAdmin() {\n        _paused = paused;\n    }\n}"
    },
    "submodules/v2-foundry/src/NextAlchemicToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {AccessControlUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\";\nimport {ERC20PermitUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/Errors.sol\";\n\nimport {IERC3156FlashLender} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\";\nimport {IERC3156FlashBorrower} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\";\n\nimport {IAlchemicToken} from \"./interfaces/IAlchemicToken.sol\";\n\nimport \"./libraries/TokenUtils.sol\";\n\nstruct InitializationParams {\n  string name;\n  string symbol;\n}\n\n/// @title  NextAlchemicToken\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for connext bridge token versions of al assets.\ncontract NextAlchemicToken is ERC20PermitUpgradeable, AccessControlUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping(address => bool) public whitelisted;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping(address => bool) public paused;\n\n  constructor() initializer {}\n\n  /// @notice An event which is emitted when a minter is paused from minting.\n  ///\n  /// @param minter The address of the minter which was paused.\n  /// @param state  A flag indicating if the alchemist is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice An event which is emitted when a minter is updated in the whitelist.\n  /// \n  /// @param minter   The address of the minter.\n  /// @param state    Whether or not the minter is actively able to mint.\n  event WhitelistSet(address minter, bool state);\n\n  function initialize(InitializationParams memory params) public initializer {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n\n    __Context_init_unchained();\n    __Ownable_init_unchained();\n    __ERC20_init_unchained(params.name, params.symbol);\n    __ERC20Permit_init_unchained(params.name);\n    __ReentrancyGuard_init_unchained();\n  }\n\n  /// @dev A modifier which checks that the caller has the admin role.\n  modifier onlyAdmin() {\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks that the caller has the sentinel role.\n  modifier onlySentinel() {\n    if(!hasRole(SENTINEL_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    if(!whitelisted[msg.sender]) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @notice Mints tokens to `a recipient.`\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    if (paused[msg.sender]) {\n      revert IllegalState();\n    }\n\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whitelisted[minter] = state;\n\n    emit WhitelistSet(minter, state);\n  }\n\n  /// @notice Pauses `minter` from minting tokens.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to set as paused or unpaused.\n  /// @param state  A flag indicating if the minter should be paused or unpaused.\n  function pauseMinter(address minter, bool state) external onlySentinel {\n    paused[minter] = state;\n    emit Paused(minter, state);\n  }\n\n  /// @notice Burns `amount` tokens from `account`.\n  ///\n  /// @param amount  The amount of tokens to be burned.\n  /// @param account The address to burn from.\n  function burn(address account, uint256 amount) external {\n    if (msg.sender != account) {\n      uint256 newAllowance = allowance(account, msg.sender) - amount;\n      _approve(account, msg.sender, newAllowance);\n    }\n    \n    _burn(account, amount);\n  }\n}"
    },
    "submodules/v2-foundry/src/AlchemicTokenV2Base.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {AccessControlUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\";\nimport {ERC20Upgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/Errors.sol\";\n\nimport {IERC3156FlashLender} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\";\nimport {IERC3156FlashBorrower} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\";\n\n/// @title  AlchemicTokenV2\n/// @author Alchemix Finance\n///\n/// @notice This is the contract for version two alchemic tokens.\n/// @notice Initially, the contract deployer is given both the admin and minter role. This allows them to pre-mine\n///         tokens, transfer admin to a timelock contract, and lastly, grant the staking pools the minter role. After\n///         this is done, the deployer must revoke their admin role and minter role.\ncontract AlchemicTokenV2Base is ERC20Upgradeable, AccessControlUpgradeable, IERC3156FlashLender, ReentrancyGuardUpgradeable {\n  /// @notice The identifier of the role which maintains other roles.\n  bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n  /// @notice The identifier of the role which allows accounts to mint tokens.\n  bytes32 public constant SENTINEL_ROLE = keccak256(\"SENTINEL\");\n\n  /// @notice The expected return value from a flash mint receiver\n  bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n  /// @notice The maximum number of basis points needed to represent 100%.\n  uint256 public constant BPS = 10_000;\n\n  /// @notice A set of addresses which are whitelisted for minting new tokens.\n  mapping(address => bool) public whitelisted;\n\n  /// @notice A set of addresses which are paused from minting new tokens.\n  mapping(address => bool) public paused;\n\n  /// @notice Fee for flash minting\n  uint256 public flashMintFee;\n\n  /// @notice Max flash mint amount\n  uint256 public maxFlashLoanAmount;\n\n  /// @notice An event which is emitted when a minter is paused from minting.\n  ///\n  /// @param minter The address of the minter which was paused.\n  /// @param state  A flag indicating if the alchemist is paused or unpaused.\n  event Paused(address minter, bool state);\n\n  /// @notice An event which is emitted when the flash mint fee is updated.\n  ///\n  /// @param fee The new flash mint fee.\n  event SetFlashMintFee(uint256 fee);\n\n  /// @notice An event which is emitted when the max flash loan is updated.\n  ///\n  /// @param maxFlashLoan The new max flash loan.\n  event SetMaxFlashLoan(uint256 maxFlashLoan);\n\n  function __AlchemicTokenV2Base_init() internal {\n    _setupRole(ADMIN_ROLE, msg.sender);\n    _setupRole(SENTINEL_ROLE, msg.sender);\n    _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n  }\n\n  /// @dev A modifier which checks that the caller has the admin role.\n  modifier onlyAdmin() {\n    if (!hasRole(ADMIN_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks that the caller has the sentinel role.\n  modifier onlySentinel() {\n    if(!hasRole(SENTINEL_ROLE, msg.sender)) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @dev A modifier which checks if whitelisted for minting.\n  modifier onlyWhitelisted() {\n    if(!whitelisted[msg.sender]) {\n      revert Unauthorized();\n    }\n    _;\n  }\n\n  /// @notice Sets the flash minting fee.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param newFee The new flash mint fee.\n  function setFlashFee(uint256 newFee) external onlyAdmin {\n    if (newFee >= BPS) {\n      revert IllegalArgument();\n    }\n    flashMintFee = newFee;\n    emit SetFlashMintFee(flashMintFee);\n  }\n\n  /// @notice Mints tokens to `a recipient.`\n  ///\n  /// @notice This function reverts if `msg.sender` is not whitelisted.\n  /// @notice This function reverts if `msg.sender` is paused.\n  ///\n  /// @param recipient The address to mint the tokens to.\n  /// @param amount    The amount of tokens to mint.\n  function mint(address recipient, uint256 amount) external onlyWhitelisted {\n    if (paused[msg.sender]) {\n      revert IllegalState();\n    }\n\n    _mint(recipient, amount);\n  }\n\n  /// @notice Sets `minter` as whitelisted to mint.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param minter The account to permit to mint.\n  /// @param state  A flag indicating if the minter should be able to mint.\n  function setWhitelist(address minter, bool state) external onlyAdmin {\n    whitelisted[minter] = state;\n  }\n\n  /// @notice Sets `sentinel` as a sentinel.\n  ///\n  /// @notice This function reverts if `msg.sender` is not an admin.\n  ///\n  /// @param sentinel The address to set as a sentinel.\n  function setSentinel(address sentinel) external onlyAdmin {\n    _setupRole(SENTINEL_ROLE, sentinel);\n  }\n\n  /// @notice Pauses `minter` from minting tokens.\n  ///\n  /// @notice This function reverts if `msg.sender` is not a sentinel.\n  ///\n  /// @param minter The address to set as paused or unpaused.\n  /// @param state  A flag indicating if the minter should be paused or unpaused.\n  function pauseMinter(address minter, bool state) external onlySentinel {\n    paused[minter] = state;\n    emit Paused(minter, state);\n  }\n\n  /// @notice Burns `amount` tokens from `msg.sender`.\n  ///\n  /// @param amount The amount of tokens to be burned.\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n\n  /// @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n  ///\n  /// @param account The address the burn tokens from.\n  /// @param amount  The amount of tokens to burn.\n  function burnFrom(address account, uint256 amount) external {\n    uint256 newAllowance = allowance(account, msg.sender) - amount;\n\n    _approve(account, msg.sender, newAllowance);\n    _burn(account, amount);\n  }\n\n  /// @notice Adjusts the maximum flashloan amount.\n  ///\n  /// @param _maxFlashLoanAmount The maximum flashloan amount.\n  function setMaxFlashLoan(uint256 _maxFlashLoanAmount) external onlyAdmin {\n    maxFlashLoanAmount = _maxFlashLoanAmount;\n    emit SetMaxFlashLoan(_maxFlashLoanAmount);\n  }\n\n  /// @notice Gets the maximum amount to be flash loaned of a token.\n  ///\n  /// @param token The address of the token.\n  ///\n  /// @return The maximum amount of `token` that can be flashed loaned.\n  function maxFlashLoan(address token) public view override returns (uint256) {\n    if (token != address(this)) {\n      return 0;\n    }\n    return maxFlashLoanAmount;\n  }\n\n  /// @notice Gets the flash loan fee of `amount` of `token`.\n  ///\n  /// @param token  The address of the token.`\n  /// @param amount The amount of `token` to flash mint.\n  ///\n  /// @return The flash loan fee.\n  function flashFee(address token, uint256 amount) public view override returns (uint256) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n    return amount * flashMintFee / BPS;\n  }\n\n  /// @notice Performs a flash mint (called flash loan to confirm with ERC3156 standard).\n  ///\n  /// @param receiver The address which will receive the flash minted tokens.\n  /// @param token    The address of the token to flash mint.\n  /// @param amount   How much to flash mint.\n  /// @param data     ABI encoded data to pass to the receiver.\n  ///\n  /// @return If the flash loan was successful.\n  function flashLoan(\n    IERC3156FlashBorrower receiver,\n    address token,\n    uint256 amount,\n    bytes calldata data\n  ) external override nonReentrant returns (bool) {\n    if (token != address(this)) {\n      revert IllegalArgument();\n    }\n\n    if (amount > maxFlashLoan(token)) {\n      revert IllegalArgument();\n    }\n\n    uint256 fee = flashFee(token, amount);\n\n    _mint(address(receiver), amount);\n\n    if (receiver.onFlashLoan(msg.sender, token, amount, fee, data) != CALLBACK_SUCCESS) {\n      revert IllegalState();\n    }\n\n    _burn(address(receiver), amount + fee); // Will throw error if not enough to burn\n\n    return true;\n  }\n}\n"
    },
    "submodules/v2-foundry/src/CrossChainCanonicalAlchemicTokenV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {CrossChainCanonicalBase} from \"./CrossChainCanonicalBase.sol\";\nimport {AlchemicTokenV2Base} from \"./AlchemicTokenV2Base.sol\";\n\ncontract CrossChainCanonicalAlchemicTokenV2 is CrossChainCanonicalBase, AlchemicTokenV2Base {\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() initializer {}\n\n  function initialize(\n      string memory name, \n      string memory symbol, \n      address[] memory _bridgeTokens,\n      uint256[] memory _mintCeilings\n  ) public initializer {\n    __CrossChainCanonicalBase_init(\n      name,\n      symbol,\n      msg.sender,\n      _bridgeTokens,\n      _mintCeilings\n    );\n    __AlchemicTokenV2Base_init();\n  }\n}\n"
    },
    "submodules/v2-foundry/src/CrossChainCanonicalBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {ERC20PermitUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"../lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/ErrorMessages.sol\";\n\nimport {TokenUtils} from \"./libraries/TokenUtils.sol\";\n\ncontract CrossChainCanonicalBase is ERC20PermitUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\n\n    // Constants for various precisions\n    uint256 private constant FEE_PRECISION = 1e6; // Okay to use constant declarations since compiler does not reserve a storage slot\n\n    /* ========== STATE VARIABLES ========== */\n\n    // Swap fee numerators, denominator of FEE_PRECISION\n    mapping(address => uint256[2]) public swapFees;\n    mapping(address => bool) public feeExempt;\n\n    // Acceptable old tokens\n    address[] public bridgeTokensArray; // Used for external UIs\n\n    // Administrative booleans\n    bool public exchangesPaused; // Pause old token exchanges in case of an emergency\n    mapping(address => bool) public bridgeTokenEnabled;\n\n    /// @notice The amount that each bridge is permitted to mint.\n    mapping(address => uint256) public mintCeiling;\n\n    /// @notice The amount of tokens that each bridge has already minted.\n    mapping(address => uint256) public totalMinted;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier validBridgeToken(address tokenAddress) {\n        if (!bridgeTokenEnabled[tokenAddress]) {\n            revert IllegalState(\"Bridge token not enabled\");\n        }\n        _;\n    }\n\n    /* ========== INITIALIZER ========== */\n\n    function __CrossChainCanonicalBase_init(\n        string memory _name,\n        string memory _symbol,\n        address _creatorAddress,\n        address[] memory _bridgeTokens,\n        uint256[] memory _mintCeilings\n    ) internal {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __EIP712_init_unchained(_name, \"1\");\n        __ERC20_init_unchained(_name, _symbol);\n        __ERC20Permit_init_unchained(_name);\n        __ReentrancyGuard_init_unchained(); // Note: this is called here but not in AlchemicTokenV2Base. Careful if inheriting that without this\n        _transferOwnership(_creatorAddress);\n\n        // Initialize the starting old tokens\n        for (uint256 i = 0; i < _bridgeTokens.length; ++i){\n            // Add to the array\n            bridgeTokensArray.push(_bridgeTokens[i]);\n\n            // Set a small swap fee initially of 0.04%\n            swapFees[_bridgeTokens[i]] = [400, 400];\n\n            // Make sure swapping is on\n            bridgeTokenEnabled[_bridgeTokens[i]] = true;\n\n            // Set mint ceiling for each bridge\n            mintCeiling[_bridgeTokens[i]] = _mintCeilings[i];\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    // Helpful for UIs\n    function allBridgeTokens() external view returns (address[] memory) {\n        return bridgeTokensArray;\n    }\n\n    function _isFeeExempt(address targetAddress) internal view returns (bool) {\n        return feeExempt[targetAddress];\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Exchange old tokens for these canonical tokens\n    function exchangeOldForCanonical(address bridgeTokenAddress, uint256 tokenAmount) external nonReentrant validBridgeToken(bridgeTokenAddress) returns (uint256 canonicalTokensOut) {\n        if (exchangesPaused) {\n            revert IllegalState(\"Exchanges paused\");\n        }\n\n        if (!bridgeTokenEnabled[bridgeTokenAddress]) {\n            revert IllegalState(\"Bridge token not enabled\");\n        }\n\n        // Check mint caps and adjust mint count\n        uint256 total = tokenAmount + totalMinted[bridgeTokenAddress];\n        if (total > mintCeiling[bridgeTokenAddress]) {\n            revert IllegalState(\"Exceeds mint ceiling\");\n        }\n        totalMinted[bridgeTokenAddress] = total;\n\n        // Pull in the old tokens\n        TokenUtils.safeTransferFrom(bridgeTokenAddress, msg.sender, address(this), tokenAmount);\n\n        // Handle the fee, if applicable\n        canonicalTokensOut = tokenAmount;\n        if (!_isFeeExempt(msg.sender)) {\n            canonicalTokensOut -= ((canonicalTokensOut * swapFees[bridgeTokenAddress][0]) / FEE_PRECISION);\n        }\n\n        // Mint canonical tokens and give it to the sender\n        super._mint(msg.sender, canonicalTokensOut);\n    }\n\n    // Exchange canonical tokens for old tokens\n    function exchangeCanonicalForOld(address bridgeTokenAddress, uint256 tokenAmount) external nonReentrant validBridgeToken(bridgeTokenAddress) returns (uint256 bridgeTokensOut) {\n        if (exchangesPaused) {\n            revert IllegalState(\"Exchanges paused\");\n        }\n\n        if (!bridgeTokenEnabled[bridgeTokenAddress]) {\n            revert IllegalState(\"Bridge token not enabled\");\n        }\n\n        // Burn the canonical tokens\n        super._burn(msg.sender, tokenAmount);\n\n        // Handle the fee, if applicable\n        bridgeTokensOut = tokenAmount;\n        if (!_isFeeExempt(msg.sender)) {\n            bridgeTokensOut -= ((bridgeTokensOut * swapFees[bridgeTokenAddress][1]) / FEE_PRECISION);\n        }\n\n        // Update mint count\n        totalMinted[bridgeTokenAddress] -= tokenAmount;\n\n        // Give old tokens to the sender\n        TokenUtils.safeTransfer(bridgeTokenAddress, msg.sender, bridgeTokensOut);\n    }\n\n    function fixOwnership() external {\n        if (msg.sender != address(0x6b291CF19370A14bbb4491B01091e1E29335e605)) {\n            revert Unauthorized(\"Not Multisig\");\n        }\n\n        if (owner() != address(this)) {\n            revert IllegalState(\"Owner must be this contract\");\n        }\n\n        _transferOwnership(0x6b291CF19370A14bbb4491B01091e1E29335e605);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS, BUT CUSTODIAN CAN CALL TOO ========== */\n\n    function toggleExchanges() external onlyOwner {\n        exchangesPaused = !exchangesPaused;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function addBridgeToken(address bridgeTokenAddress) external onlyOwner {\n        // Make sure the token is not already present\n        for (uint256 i = 0; i < bridgeTokensArray.length; ++i){ \n            if (bridgeTokensArray[i] == bridgeTokenAddress) {\n                revert IllegalState(\"Token already added\");\n            }\n        }\n\n        // Add the old token\n        bridgeTokensArray.push(bridgeTokenAddress);\n\n        // Turn swapping on\n        bridgeTokenEnabled[bridgeTokenAddress] = true;\n\n        emit BridgeTokenAdded(bridgeTokenAddress);\n    }\n\n    function setBridgeToken(address bridgeTokenAddress, bool enabled) external onlyOwner {\n        // Toggle swapping\n        bridgeTokenEnabled[bridgeTokenAddress] = enabled;\n\n        emit BridgeTokenSet(bridgeTokenAddress, enabled);\n    }\n\n    function setSwapFees(address bridgeTokenAddress, uint256 _bridgeToCanonical, uint256 _canonicalToOld) external onlyOwner {\n        if(_bridgeToCanonical >= FEE_PRECISION || _canonicalToOld >= FEE_PRECISION) {\n            revert IllegalArgument(\"Invalid swap fees\");\n        }\n        swapFees[bridgeTokenAddress] = [_bridgeToCanonical, _canonicalToOld];\n\n        emit SwapFeeSet(bridgeTokenAddress, _bridgeToCanonical, _canonicalToOld);\n    }\n\n    /// @notice Sets the maximum amount of tokens that `minter` is allowed to mint.\n    ///\n    /// @notice This function reverts if `msg.sender` is not an admin.\n    ///\n    /// @param minter  The address of the minter.\n    /// @param maximum The maximum amount of tokens that the minter is allowed to mint.\n    function setCeiling(address minter, uint256 maximum) external onlyOwner {\n        mintCeiling[minter] = maximum;\n    }\n\n    function toggleFeesForAddress(address targetAddress) external onlyOwner {\n        feeExempt[targetAddress] = !feeExempt[targetAddress];\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        if (tokenAddress == address(this)) {\n            revert IllegalArgument(\"Illegal token passed\");\n        }\n\n        if (bridgeTokenEnabled[tokenAddress]) {\n            revert IllegalState(\"Bridge token not enabled\");\n        }\n\n        TokenUtils.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event BridgeTokenAdded(address indexed bridgeTokenAddress);\n    event BridgeTokenSet(address indexed bridgeTokenAddress, bool state);\n    event SwapFeeSet(address indexed bridgeTokenAddress, uint256 bridgeToCanonical, uint256 canonicalToOld);\n}"
    },
    "submodules/v2-foundry/src/CrossChainCanonicalGALCX.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.11;\n\nimport {CrossChainCanonicalBase} from \"./CrossChainCanonicalBase.sol\";\n\ncontract CrossChainCanonicalGALCX is CrossChainCanonicalBase {\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() initializer {}\n\n  function initialize(\n      string memory name, \n      string memory symbol, \n      address[] memory _bridgeTokens,\n      uint256[] memory _mintCeilings\n  ) external initializer {\n    __CrossChainCanonicalBase_init(\n      name,\n      symbol,\n      msg.sender,\n      _bridgeTokens,\n      _mintCeilings\n    );\n  }\n}"
    },
    "submodules/v2-foundry/src/test/MigrationToolETH.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {AlchemistV2} from \"../AlchemistV2.sol\";\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\n\nimport {StaticAToken} from \"../external/aave/StaticAToken.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {\n    AAVETokenAdapter,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/aave/AAVETokenAdapter.sol\";\n\nimport {\n    MigrationTool,\n    InitializationParams as MigrationInitializationParams\n} from \"../migration/MigrationTool.sol\";\n\nimport {IAlchemicToken} from \"../interfaces/IAlchemicToken.sol\";\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport {ILendingPool} from \"../interfaces/external/aave/ILendingPool.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\ncontract MigrationToolTestETH is DSTestPlus {\n    address constant admin = 0x8392F6669292fA56123F71949B52d883aE57e225;\n    address constant alchemistETH = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;\n    address constant alETH = 0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6;\n    address constant aWETH = 0x030bA81f1c18d280636F32af80b9AAd02Cf0854e;\n    address constant invalidYieldToken = 0x23D3D0f1c697247d5e0a9efB37d8b0ED0C464f7f;\n    address constant owner = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address constant rETH = 0xae78736Cd615f374D3085123A210448E74Fc6393;\n    address constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address constant whitelistETH = 0xA3dfCcbad1333DC69997Da28C961FF8B2879e653;\n    address constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address constant yvETH = 0xa258C4606Ca8206D8aA700cE2143D7db854D168c;\n    uint256 constant BPS = 10000;\n    uint256 constant MAX_INT = 2**256 - 1;\n\n    AlchemistV2 newAlchemistV2;\n    StaticAToken staticAToken;\n\n    IAlchemicToken AlETH;\n    IAlchemistV2 AlchemistETH;\n    ILendingPool lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n    IWhitelist WhitelistETH;\n\n    MigrationTool migrationToolETH;\n\n    function setUp() external {\n        MigrationInitializationParams memory migrationParams = MigrationInitializationParams(alchemistETH, new address[](1));\n        migrationParams.collateralAddresses[0] = (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n        migrationToolETH = new MigrationTool(migrationParams);\n\n        AlETH = IAlchemicToken(alETH);\n\n        AlchemistETH = IAlchemistV2(alchemistETH);\n\n        WhitelistETH = IWhitelist(whitelistETH);\n\n        // Set contract permissions and ceiling for atokens\n        hevm.startPrank(admin);\n        AlETH.setWhitelist(address(migrationToolETH), true);\n        AlETH.setCeiling(address(migrationToolETH), MAX_INT);\n        hevm.stopPrank();\n\n        // Set user and contract whitelist permission\n        // Update deposit limits\n        hevm.startPrank(owner);\n        WhitelistETH.add(address(this));\n        WhitelistETH.add(address(0xbeef));\n        WhitelistETH.add(address(migrationToolETH));\n        AlchemistETH.setMaximumExpectedValue(wstETH, 200000000000000000000000);\n        AlchemistETH.setMaximumExpectedValue(yvETH, 200000000000000000000000);\n        hevm.stopPrank();\n\n        addAdapter(alchemistETH, aWETH, wETH, \"aaWETH\", \"staticAaveWETH\");\n    }\n\n    function testUnsupportedVaults() external {\n        expectIllegalArgumentError(\"Yield token is not supported\");\n        migrationToolETH.migrateVaults(invalidYieldToken, rETH, 100e18, 90e18, 0);\n        \n        expectIllegalArgumentError(\"Yield token is not supported\");\n        migrationToolETH.migrateVaults(rETH , invalidYieldToken, 100e18, 90e18, 0);\n    }\n\n    function testMigrationSameVault() external {\n        expectIllegalArgumentError(\"Yield tokens cannot be the same\");\n        migrationToolETH.migrateVaults(rETH, rETH, 100e18, 99e18, 0);\n\n        expectIllegalArgumentError(\"Yield tokens cannot be the same\");\n        migrationToolETH.migrateVaults(wstETH, wstETH, 100e18, 90e18, 0);\n    }\n\n    function testMigrationDifferentVaultMaximumShares() external {\n        deal(wETH, address(this), 10e18);\n\n        // Create new position\n        SafeERC20.safeApprove(wETH, alchemistETH, 10e18);\n        AlchemistETH.depositUnderlying(yvETH, 10e18, address(this), 0);\n        (uint256 shares, ) = AlchemistETH.positions(address(this), yvETH);\n\n        // Debt conversion in this case only divides by 1 so I left it out.\n        uint256 underlyingValue = shares * AlchemistETH.getUnderlyingTokensPerShare(yvETH)  / 10**18;\n        AlchemistETH.mint(underlyingValue/2, address(this));\n\n        // Debt after original mint\n        (int256 firstPositionDebt, ) = AlchemistETH.accounts(address(this));\n\n        // Approve the migration tool to withdraw and mint on behalf of the user\n        AlchemistETH.approveWithdraw(address(migrationToolETH), yvETH, shares);\n        AlchemistETH.approveMint(address(migrationToolETH), underlyingValue);\n\n        // Verify new position underlying value is within 0.01% of original\n        uint256 newShares = migrationToolETH.migrateVaults(yvETH, wstETH, shares, 0, 0);\n        uint256 newUnderlyingValue = newShares * AlchemistETH.getUnderlyingTokensPerShare(wstETH) / 10**18;\n        assertGt(newUnderlyingValue, underlyingValue * 9999 / BPS);\n\n        // Verify debts are the same\n        (int256 secondPositionDebt, ) = AlchemistETH.accounts(address(this));\n        assertEq(secondPositionDebt, firstPositionDebt);\n\n        // Verify new position\n        (uint256 sharesConfirmed, ) = AlchemistETH.positions(address(this), wstETH);\n        assertEq(newShares, sharesConfirmed);\n\n        // Verify old position is gone\n        (sharesConfirmed, ) = AlchemistETH.positions(address(this), yvETH);\n        assertEq(0, sharesConfirmed);\n    }\n\n    function testMigrationDifferentVaultPartialShares() external {\n        deal(wETH, address(this), 10e18);\n        \n        // Create new position\n        SafeERC20.safeApprove(wETH, alchemistETH, 10e18);\n        AlchemistETH.depositUnderlying(yvETH, 10e18, address(this), 0);\n        (uint256 shares, ) = AlchemistETH.positions(address(this), yvETH);\n\n        // Debt conversion in this case only divides by 1 so I left it out.\n        uint256 underlyingValue = shares * AlchemistETH.getUnderlyingTokensPerShare(yvETH)  / 10**18;\n        AlchemistETH.mint(underlyingValue / 2, address(this));\n\n        // Debt after original mint\n        (int256 firstPositionDebt, ) = AlchemistETH.accounts(address(this));\n\n        // Approve the migration tool to withdraw and mint on behalf of the user\n        AlchemistETH.approveWithdraw(address(migrationToolETH), yvETH, shares);\n        AlchemistETH.approveMint(address(migrationToolETH), underlyingValue);\n\n        // Verify new position underlying value is within 0.1% of original\n        (uint256 oldShares, ) = AlchemistETH.positions(address(this), yvETH);\n        uint256 newShares = migrationToolETH.migrateVaults(yvETH, wstETH, shares / 2, 0, 0);\n        uint256 newUnderlyingValue = (newShares + oldShares) * AlchemistETH.getUnderlyingTokensPerShare(wstETH) / 10**18;\n        assertGt(newUnderlyingValue, underlyingValue * 9999 / BPS);\n\n        // Verify debts are the same\n        (int256 secondPositionDebt, ) = AlchemistETH.accounts(address(this));\n        assertEq(secondPositionDebt, firstPositionDebt);\n\n        // Verify new position\n        (uint256 sharesConfirmed, ) = AlchemistETH.positions(address(this), wstETH);\n        assertEq(newShares, sharesConfirmed);\n\n        // Verify old position\n        (sharesConfirmed, ) = AlchemistETH.positions(address(this), yvETH);\n        assertApproxEq(shares / 2, sharesConfirmed, 1);\n    }\n\n    function testMigrationDifferentVaultMaximumSharesAAVE() external {\n        deal(wETH, address(this), 10e18);\n\n        // Create new position\n        SafeERC20.safeApprove(wETH, alchemistETH, 10e18);\n        AlchemistETH.depositUnderlying(yvETH, 10e18, address(this), 0);\n        (uint256 shares, ) = AlchemistETH.positions(address(this), yvETH);\n\n        // Debt conversion in this case only divides by 1 so I left it out.\n        uint256 underlyingValue = shares * AlchemistETH.getUnderlyingTokensPerShare(yvETH)  / 10**18;\n        AlchemistETH.mint(underlyingValue/2, address(this));\n\n        // Debt after original mint\n        (int256 firstPositionDebt, ) = AlchemistETH.accounts(address(this));\n\n        // Approve the migration tool to withdraw and mint on behalf of the user\n        AlchemistETH.approveWithdraw(address(migrationToolETH), yvETH, shares);\n        AlchemistETH.approveMint(address(migrationToolETH), underlyingValue);\n\n        // Verify new position underlying value is within 0.01% of original\n        uint256 newShares = migrationToolETH.migrateVaults(yvETH, address(staticAToken), shares, 0, 0);\n        uint256 newUnderlyingValue = newShares * AlchemistETH.getUnderlyingTokensPerShare(address(staticAToken)) / 10**18;\n        assertGt(newUnderlyingValue, underlyingValue * 9999 / BPS);\n\n        // Verify debts are the same\n        (int256 secondPositionDebt, ) = AlchemistETH.accounts(address(this));\n        assertEq(secondPositionDebt, firstPositionDebt);\n\n        // Verify new position\n        (uint256 sharesConfirmed, ) = AlchemistETH.positions(address(this), address(staticAToken));\n        assertEq(newShares, sharesConfirmed);\n\n        // Verify old position is gone\n        (sharesConfirmed, ) = AlchemistETH.positions(address(this), yvETH);\n        assertEq(0, sharesConfirmed);\n    }\n\n    function addAdapter(address alchemist, address aToken, address underlyingToken, string memory symbol, string memory name) public {\n        staticAToken = new StaticAToken(\n            lendingPool,\n            aToken,\n            name,\n            symbol\n        );\n\n        AAVETokenAdapter newAdapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:       alchemist,\n            token:           address(staticAToken),\n            underlyingToken: underlyingToken\n        }));\n\n        IAlchemistV2.YieldTokenConfig memory ytc = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(newAdapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000 ether,\n            creditUnlockBlocks: 7200\n        });\n\n        hevm.startPrank(owner);\n        IAlchemistV2(alchemist).addYieldToken(address(staticAToken), ytc);\n        IAlchemistV2(alchemist).setYieldTokenEnabled(address(staticAToken), true);\n        hevm.stopPrank();\n    }\n\n}"
    },
    "submodules/v2-foundry/src/test/ATokenGateway.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {\n    AAVETokenAdapter,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/aave/AAVETokenAdapter.sol\";\n\nimport {StaticAToken} from \"../external/aave/StaticAToken.sol\";\nimport {ILendingPool} from \"../interfaces/external/aave/ILendingPool.sol\";\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport {Whitelist} from \"../utils/Whitelist.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\nimport {IATokenGateway} from \"../interfaces/IATokenGateway.sol\";\nimport {ATokenGateway} from \"../adapters/aave/ATokenGateway.sol\";\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\nimport {console} from \"../../lib/forge-std/src/console.sol\";\n\ncontract ATokenGatewayTest is DSTestPlus {\n    uint256 constant BPS = 10000;\n    address constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // ETH mainnet DAI\n    address constant aToken = 0x028171bCA77440897B824Ca71D1c56caC55b68A3;\n    ILendingPool lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n    string wrappedTokenName = \"staticAaveDai\";\n    string wrappedTokenSymbol = \"saDAI\";\n    StaticAToken staticAToken;\n    AAVETokenAdapter adapter;\n    IATokenGateway gateway;\n    IWhitelist whitelist;\n    address alchemist = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n    address alchemistAdmin = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address alchemistWhitelist = 0x78537a6CeBa16f412E123a90472C6E0e9A8F1132;\n\n    function setUp() external {\n        staticAToken = new StaticAToken(\n            lendingPool,\n            aToken,\n            wrappedTokenName,\n            wrappedTokenSymbol\n        );\n        adapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:       alchemist,\n            token:           address(staticAToken),\n            underlyingToken: address(dai)\n        }));\n        IAlchemistV2.YieldTokenConfig memory ytc = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(adapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000 ether,\n            creditUnlockBlocks: 7200\n        });\n        \n        whitelist = new Whitelist();\n        gateway = new ATokenGateway(address(whitelist), alchemist);\n        whitelist.add(address(this));\n\n        hevm.startPrank(alchemistAdmin);\n        IAlchemistV2(alchemist).addYieldToken(address(staticAToken), ytc);\n        IAlchemistV2(alchemist).setYieldTokenEnabled(address(staticAToken), true);\n        IWhitelist(alchemistWhitelist).add(address(gateway));\n        IWhitelist(alchemistWhitelist).add(address(this));\n        hevm.stopPrank();\n\n    }\n\n    function testDepositWithdraw() external {\n        uint256 amount = 1000 ether;\n        deal(dai, address(this), amount);\n        IERC20(dai).approve(address(lendingPool), amount);\n        lendingPool.deposit(dai, amount, address(this), 0);\n        uint256 startBal = IERC20(aToken).balanceOf(address(this));\n        IERC20(aToken).approve(address(gateway), startBal);\n        uint256 price = IAlchemistV2(alchemist).getUnderlyingTokensPerShare(address(staticAToken));\n        uint256 sharesIssued = gateway.deposit(address(staticAToken), startBal, address(this));\n        uint256 expectedValue = sharesIssued * price / 1e18;\n        assertApproxEq(amount, expectedValue, 10000);\n\n        uint256 midBal = IERC20(aToken).balanceOf(address(this));\n        assertEq(midBal, 0);\n\n        IAlchemistV2(alchemist).approveWithdraw(address(gateway), address(staticAToken), sharesIssued);\n        uint256 amountWithdrawn = gateway.withdraw(address(staticAToken), sharesIssued, address(this));\n        (uint256 endShares, ) = IAlchemistV2(alchemist).positions(address(this), address(staticAToken));\n        assertEq(endShares, 0);\n\n        uint256 endBal = IERC20(aToken).balanceOf(address(this));\n        assertEq(endBal, amount);\n        assertEq(amountWithdrawn, endBal);\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IATokenGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\ninterface IATokenGateway {\n    /// @dev Returns the address of the whitelist used by the IATokenGateway\n    ///\n    /// @return The address of the whitelist.\n    function whitelist() external returns (address);\n\n    /// @dev Returns the address of the alchemist used by the IATokenGateway\n    ///\n    /// @return The address of the alchemist.\n    function alchemist() external returns (address);\n\n    /// @dev Wraps aTokens in a StaticAToken wrapper a deposits the resulting tokens into the Alchemist.\n    ///\n    /// @param yieldToken       The address of the static aToken wrapper.\n    /// @param amount           The amount of aTokens to wrap.\n    /// @param recipient        The account in the `alchemist` that will recieve the resulting static aTokens. \n    /// @return sharesIssued    The amount of shares issued in the `alchemist` to the account owned by `recipient`.\n    function deposit(address yieldToken, uint256 amount, address recipient) external returns (uint256 sharesIssued);\n\n    /// @dev Withdraws StaticATokens from the Alchemist and unwraps them into aTokens.\n    ///\n    /// @param yieldToken       The address of the static aToken wrapper.\n    /// @param shares           The amount of shares to withdraw from the `alchemist`.\n    /// @param recipient        The account that will receive the resulting aTokens. \n    /// @return amountWithdrawn The amount of aTokens withdrawn to `recipient`.\n    function withdraw(address yieldToken, uint256 shares, address recipient) external returns (uint256 amountWithdrawn);\n}"
    },
    "submodules/v2-foundry/src/adapters/aave/ATokenGateway.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.13;\n\nimport {Ownable} from \"../../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"../..//base/ErrorMessages.sol\";\nimport \"../../interfaces/IAlchemistV2.sol\";\nimport \"../../interfaces/IATokenGateway.sol\";\nimport \"../../interfaces/IWhitelist.sol\";\nimport \"../../interfaces/external/aave/IStaticAToken.sol\";\nimport \"../../libraries/TokenUtils.sol\";\n\n/// @title  ATokenGateway\n/// @author Alchemix Finance\ncontract ATokenGateway is IATokenGateway, Ownable {\n    /// @notice The version.\n    string public constant version = \"1.0.1\";\n\n    /// @notice The address of the whitelist contract.\n    address public override whitelist;\n\n    /// @notice The address of the alchemist.\n    address public override alchemist;\n\n    constructor(address _whitelist, address _alchemist) {\n        whitelist = _whitelist;\n        alchemist = _alchemist;\n    }\n\n    /// @inheritdoc IATokenGateway\n    function deposit(\n        address yieldToken,\n        uint256 amount,\n        address recipient\n    ) external override returns (uint256 sharesIssued) {\n        _onlyWhitelisted();\n        address aToken = address(IStaticAToken(yieldToken).ATOKEN());\n        TokenUtils.safeTransferFrom(aToken, msg.sender, address(this), amount);\n        TokenUtils.safeApprove(aToken, yieldToken, amount);\n        // 0 - referral code (deprecated).\n        // false - \"from underlying\", we are depositing the aToken, not the underlying token.\n        uint256 staticATokensReceived = IStaticAToken(yieldToken).deposit(address(this), amount, 0, false);\n        TokenUtils.safeApprove(yieldToken, alchemist, staticATokensReceived);\n        return IAlchemistV2(alchemist).deposit(yieldToken, staticATokensReceived, recipient);\n    }\n\n    /// @inheritdoc IATokenGateway\n    function withdraw(\n        address yieldToken,\n        uint256 shares,\n        address recipient\n    ) external override returns (uint256) {\n        _onlyWhitelisted();\n        uint256 staticATokensWithdrawn = IAlchemistV2(alchemist).withdrawFrom(msg.sender, yieldToken, shares, address(this));\n        // false - \"from underlying\", we are depositing the aToken, not the underlying token.\n        (uint256 amountBurnt, uint256 amountWithdrawn) = IStaticAToken(yieldToken).withdraw(recipient, staticATokensWithdrawn, false);\n        if (amountBurnt != staticATokensWithdrawn) {\n            revert IllegalState(\"not enough burnt\");\n        }\n        return amountWithdrawn;\n    }\n\n    /// @dev Checks the whitelist for msg.sender.\n    ///\n    /// Reverts if msg.sender is not in the whitelist.\n    function _onlyWhitelisted() internal view {\n        // Check if the message sender is an EOA. In the future, this potentially may break. It is important that functions\n        // which rely on the whitelist not be explicitly vulnerable in the situation where this no longer holds true.\n        if (tx.origin == msg.sender) {\n            return;\n        }\n\n        // Only check the whitelist for calls from contracts.\n        if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n            revert Unauthorized(\"Not whitelisted\");\n        }\n    }\n}"
    },
    "submodules/v2-foundry/src/test/AAVETokenAdapter.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {\n    AAVETokenAdapter,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/aave/AAVETokenAdapter.sol\";\n\nimport {StaticAToken} from \"../external/aave/StaticAToken.sol\";\nimport {ILendingPool} from \"../interfaces/external/aave/ILendingPool.sol\";\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\nimport {TokenUtils} from \"../libraries/TokenUtils.sol\";\n\ncontract AAVETokenAdapterTest is DSTestPlus {\n    uint256 constant BPS = 10000;\n    address constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // ETH mainnet DAI\n    ILendingPool lendingPool = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n    address aDai = 0x028171bCA77440897B824Ca71D1c56caC55b68A3;\n    string wrappedTokenName = \"staticAaveDai\";\n    string wrappedTokenSymbol = \"saDAI\";\n    StaticAToken staticAToken;\n    AAVETokenAdapter adapter;\n    address alchemistAlUSD = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd;\n    address alchemistAlETH = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;\n    address alchemistAdmin = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address alchemistAlUSDWhitelist = 0x78537a6CeBa16f412E123a90472C6E0e9A8F1132;\n    address alchemistAlETHWhitelist = 0xA3dfCcbad1333DC69997Da28C961FF8B2879e653;\n\n    function setUp() external {\n        staticAToken = new StaticAToken(\n            lendingPool,\n            aDai,\n            wrappedTokenName,\n            wrappedTokenSymbol\n        );\n        adapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:       address(this),\n            token:           address(staticAToken),\n            underlyingToken: address(dai)\n        }));\n        hevm.startPrank(alchemistAdmin);\n        IWhitelist(alchemistAlUSDWhitelist).add(address(this));\n        IWhitelist(alchemistAlETHWhitelist).add(address(this));\n        hevm.stopPrank();\n\n        hevm.label(0x028171bCA77440897B824Ca71D1c56caC55b68A3, \"aDAI\");\n        hevm.label(0x6B175474E89094C44Da98b954EedeAC495271d0F, \"DAI\");\n        hevm.label(0xBcca60bB61934080951369a648Fb03DF4F96263C, \"aUSDC\");\n        hevm.label(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, \"USDC\");\n        hevm.label(0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811, \"aUSDT\");\n        hevm.label(0xdAC17F958D2ee523a2206206994597C13D831ec7, \"USDT\");\n        hevm.label(0x030bA81f1c18d280636F32af80b9AAd02Cf0854e, \"aWETH\");\n        hevm.label(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, \"WETH\");\n    }\n\n    function testTokenDai() external {\n        runTokenTest(alchemistAlUSD, 0x028171bCA77440897B824Ca71D1c56caC55b68A3, 0x6B175474E89094C44Da98b954EedeAC495271d0F, \"Static Aave DAI\", \"saDAI\", 1000 ether);\n    }\n\n    function testTokenUsdc() external {\n        runTokenTest(alchemistAlUSD, 0xBcca60bB61934080951369a648Fb03DF4F96263C, 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, \"Static Aave USDC\", \"saUSDC\", 1000000000);\n    }\n\n    function testTokenUsdt() external {\n        runTokenTest(alchemistAlUSD, 0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811, 0xdAC17F958D2ee523a2206206994597C13D831ec7, \"Static Aave USDT\", \"saUSDT\", 1000000000);\n    }\n\n    function testTokenWeth() external {\n        runTokenTest(alchemistAlETH, 0x030bA81f1c18d280636F32af80b9AAd02Cf0854e, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, \"Static Aave WETH\", \"saWETH\", 1000 ether);\n    }\n\n    function runTokenTest(address alchemist, address aToken, address underlyingToken, string memory name, string memory symbol, uint256 amount) internal {\n        StaticAToken newStaticAToken = new StaticAToken(\n            lendingPool,\n            aToken,\n            name,\n            symbol\n        );\n        AAVETokenAdapter newAdapter = new AAVETokenAdapter(AdapterInitializationParams({\n            alchemist:       alchemist,\n            token:           address(newStaticAToken),\n            underlyingToken: underlyingToken\n        }));\n        IAlchemistV2.YieldTokenConfig memory ytc = IAlchemistV2AdminActions.YieldTokenConfig({\n            adapter: address(newAdapter),\n            maximumLoss: 1,\n            maximumExpectedValue: 1000000 ether,\n            creditUnlockBlocks: 7200\n        });\n        hevm.startPrank(alchemistAdmin);\n        IAlchemistV2(alchemist).addYieldToken(address(newStaticAToken), ytc);\n        IAlchemistV2(alchemist).setYieldTokenEnabled(address(newStaticAToken), true);\n        hevm.stopPrank();\n\n        deal(underlyingToken, address(this), amount);\n        uint256 startPrice = IAlchemistV2(alchemist).getUnderlyingTokensPerShare(address(newStaticAToken));\n        TokenUtils.safeApprove(underlyingToken, alchemist, amount);\n        IAlchemistV2(alchemist).depositUnderlying(address(newStaticAToken), amount, address(this), 0);\n        (uint256 startShares, ) = IAlchemistV2(alchemist).positions(address(this), address(newStaticAToken));\n        uint256 expectedValue = startShares * startPrice / (10 ** newStaticAToken.decimals());\n        assertApproxEq(amount, expectedValue, 1000);\n\n        uint256 startBal = IERC20(underlyingToken).balanceOf(address(this));\n        assertEq(startBal, 0);\n\n        IAlchemistV2(alchemist).withdrawUnderlying(address(newStaticAToken), startShares, address(this), 0);\n        (uint256 endShares, ) = IAlchemistV2(alchemist).positions(address(this), address(newStaticAToken));\n        assertEq(endShares, 0);\n\n        uint256 endBal = IERC20(underlyingToken).balanceOf(address(this));\n        assertApproxEq(endBal, amount, 1);\n    }\n\n    function testRoundTrip() external {\n        uint256 depositAmount = 1e18;\n\n        deal(dai, address(this), depositAmount);\n\n        SafeERC20.safeApprove(dai, address(adapter), depositAmount);\n        uint256 wrapped = adapter.wrap(depositAmount, address(this));\n\n        uint256 underlyingValue = wrapped * adapter.price() / 10**SafeERC20.expectDecimals(address(staticAToken));\n        assertGe(depositAmount, underlyingValue);\n        \n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n        \n        assertEq(IERC20(dai).balanceOf(address(0xbeef)), unwrapped);\n        assertEq(staticAToken.balanceOf(address(this)), 0);\n        assertEq(staticAToken.balanceOf(address(adapter)), 0);\n    }\n\n    function testRoundTripFuzz(uint256 amount) external {\n        hevm.assume(\n            amount >= 10**SafeERC20.expectDecimals(dai) && \n            amount < type(uint96).max\n        );\n        \n        deal(dai, address(this), amount);\n\n        SafeERC20.safeApprove(dai, address(adapter), amount);\n        uint256 wrapped = adapter.wrap(amount, address(this));\n\n        uint256 underlyingValue = wrapped * adapter.price() / 10**SafeERC20.expectDecimals(address(staticAToken));\n        assertApproxEq(amount, underlyingValue, amount * 10000 / 1e18);\n        \n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n        \n        assertApproxEq(IERC20(dai).balanceOf(address(0xbeef)), unwrapped, 10000);\n        assertEq(staticAToken.balanceOf(address(this)), 0);\n        assertEq(staticAToken.balanceOf(address(adapter)), 0);\n    }\n\n    function testAppreciation() external {\n        deal(dai, address(this), 1e18);\n\n        SafeERC20.safeApprove(dai, address(adapter), 1e18);\n        uint256 wrapped = adapter.wrap(1e18, address(this));\n        \n        hevm.roll(block.number + 1000);\n        hevm.warp(block.timestamp + 100000);\n\n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n        assertGt(unwrapped, 1e18);\n    }\n}"
    },
    "submodules/v2-foundry/src/test/RETHAdapterV1.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\nimport \"../../lib/forge-std/src/console.sol\";\n\nimport {\n    RETHAdapterV1,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/rocket/RETHAdapterV1.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IAlchemistV2AdminActions} from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport {IWETH9} from \"../interfaces/external/IWETH9.sol\";\nimport {IRETH} from \"../interfaces/external/rocket/IRETH.sol\";\nimport {IRocketStorage} from \"../interfaces/external/rocket/IRocketStorage.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {RocketPool} from \"../libraries/RocketPool.sol\";\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\n\ncontract RocketStakedEthereumAdapterV1Test is DSTestPlus {\n    address constant admin = 0x8392F6669292fA56123F71949B52d883aE57e225;\n    address constant alchemistETH = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c;\n    address constant alETH = 0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6;\n    address constant owner = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n    address constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address constant whitelistETH = 0xA3dfCcbad1333DC69997Da28C961FF8B2879e653;\n    uint256 constant BPS = 10000;\n    uint256 constant MAX_INT = 2**256 - 1;\n\n    IWETH9 constant weth = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    IRocketStorage constant rocketStorage = IRocketStorage(0x1d8f8f00cfa6758d7bE78336684788Fb0ee0Fa46);\n\n    IRETH rETH;\n    RETHAdapterV1 adapter;\n\n    function setUp() external {\n        rETH = RocketPool.getRETH(rocketStorage);\n\n        adapter = new RETHAdapterV1(AdapterInitializationParams({\n            alchemist:       alchemistETH,\n            token:           address(rETH),\n            underlyingToken: address(weth)\n        }));\n\n        hevm.startPrank(owner);\n        IWhitelist(whitelistETH).add(address(adapter));\n        IWhitelist(whitelistETH).add(address(this));\n        IAlchemistV2(alchemistETH).setMaximumExpectedValue(address(rETH), 10000000000000 ether);\n        IAlchemistV2(alchemistETH).setTokenAdapter(address(rETH), address(adapter));\n        hevm.stopPrank();\n    }\n\n    function testPrice() external {\n        uint256 decimals = SafeERC20.expectDecimals(address(rETH));\n        assertEq(adapter.price(), rETH.getEthValue(10**decimals));\n    }\n\n    function testWrap() external {\n        deal(address(weth), address(this), 1e18);\n\n        SafeERC20.safeApprove(address(weth), address(adapter), 1e18);\n\n        expectUnsupportedOperationError(\"Wrapping is not supported\");\n        hevm.prank(alchemistETH);\n        adapter.wrap(1e18, address(0xbeef));\n    }\n\n    function testWithdrawUnderlying() external {\n        deal(address(rETH), address(this), 1e18);\n\n        uint256 expectedEth = rETH.getEthValue(1e18);\n\n        // Deposit into position\n        SafeERC20.safeApprove(address(rETH), alchemistETH, 1e18);\n        uint256 shares = IAlchemistV2(alchemistETH).deposit(address(rETH), 1e18, address(this));\n\n        // Withdraw and unwrap\n        uint256 unwrapped = IAlchemistV2(alchemistETH).withdrawUnderlying(address(rETH), shares, address(this), 0);\n\n        assertEq(rETH.allowance(address(this), address(adapter)), 0);\n        assertEq(weth.balanceOf(address(this)), unwrapped);\n        assertApproxEq(weth.balanceOf(address(this)), expectedEth, expectedEth * 970 / 1000);\n    }\n\n    function testWithdrawUnderlyingViaBurn() external {\n        deal(address(rETH), address(this), 1e18);\n\n        uint256 expectedEth = rETH.getEthValue(1e18);\n        hevm.deal(address(rETH), expectedEth);\n        uint256 beforeCollateral = rETH.getTotalCollateral();\n        assertEq(beforeCollateral, expectedEth);\n\n        // Deposit into position\n        SafeERC20.safeApprove(address(rETH), alchemistETH, 1e18);\n        uint256 shares = IAlchemistV2(alchemistETH).deposit(address(rETH), 1e18, address(this));\n\n        // Withdraw and unwrap\n        uint256 unwrapped = IAlchemistV2(alchemistETH).withdrawUnderlying(address(rETH), shares, address(this), 0);\n\n        uint256 afterCollateral = rETH.getTotalCollateral();\n        assertApproxEq(afterCollateral, 0, 10);\n\n        // assertEq(rETH.allowance(address(this), address(adapter)), 0);\n        assertEq(weth.balanceOf(address(this)), unwrapped);\n        assertApproxEq(weth.balanceOf(address(this)), expectedEth, expectedEth * 970 / 1000);\n    }\n\n    function testHarvest() external {\n        deal(address(rETH), address(this), 1e18);\n\n        uint256 expectedEth = rETH.getEthValue(1e18);\n\n        // New position\n        SafeERC20.safeApprove(address(rETH), alchemistETH, 1e18);\n        uint256 shares = IAlchemistV2(alchemistETH).deposit(address(rETH), 1e18, address(this));\n        (int256 debtBefore, ) = IAlchemistV2(alchemistETH).accounts(address(this));\n\n        // Roll ahead then harvest\n        hevm.roll(block.number + 100000);\n        hevm.prank(owner);\n        IAlchemistV2(alchemistETH).harvest(address(rETH), 0);\n\n        // Roll ahead one block then check credited amount\n        hevm.roll(block.number + 1);\n        (int256 debtAfter, ) = IAlchemistV2(alchemistETH).accounts(address(this));\n        assertGt(debtBefore, debtAfter);\n    }\n\n    function testLiquidate() external {\n        deal(address(rETH), address(this), 1e18);\n\n        uint256 expectedEth = rETH.getEthValue(1e18);\n\n        SafeERC20.safeApprove(address(rETH), alchemistETH, 1e18);\n        uint256 shares = IAlchemistV2(alchemistETH).deposit(address(rETH), 1e18, address(this));\n        uint256 pps = IAlchemistV2(alchemistETH).getUnderlyingTokensPerShare(address(rETH));\n        uint256 mintAmt = shares * pps / 1e18 / 4;\n        IAlchemistV2(alchemistETH).mint(mintAmt, address(this));\n\n        (int256 debtBefore, ) = IAlchemistV2(alchemistETH).accounts(address(this));\n\n        uint256 sharesLiquidated = IAlchemistV2(alchemistETH).liquidate(address(rETH), shares / 4, mintAmt * 97 / 100);\n\n        (int256 debtAfter, ) = IAlchemistV2(alchemistETH).accounts(address(this));\n\n        (uint256 sharesLeft, ) =  IAlchemistV2(alchemistETH).positions(address(this), address(rETH));\n\n        assertApproxEq(0, uint256(debtAfter), mintAmt - mintAmt * 97 / 100);\n        assertEq(shares - sharesLiquidated, sharesLeft);\n    }\n\n    function testLiquidateViaBurn() external {\n        deal(address(rETH), address(this), 1e18);\n\n        uint256 expectedEth = rETH.getEthValue(1e18);\n        hevm.deal(address(rETH), expectedEth);\n        SafeERC20.safeApprove(address(rETH), alchemistETH, 1e18);\n        uint256 shares = IAlchemistV2(alchemistETH).deposit(address(rETH), 1e18, address(this));\n        uint256 pps = IAlchemistV2(alchemistETH).getUnderlyingTokensPerShare(address(rETH));\n        uint256 mintAmt = shares * pps / 1e18 / 4;\n        IAlchemistV2(alchemistETH).mint(mintAmt, address(this));\n\n        (int256 debtBefore, ) = IAlchemistV2(alchemistETH).accounts(address(this));\n\n        uint256 sharesLiquidated = IAlchemistV2(alchemistETH).liquidate(address(rETH), shares / 4, 0);\n\n        (int256 debtAfter, ) = IAlchemistV2(alchemistETH).accounts(address(this));\n\n        (uint256 sharesLeft, ) =  IAlchemistV2(alchemistETH).positions(address(this), address(rETH));\n\n        assertApproxEq(0, uint256(debtAfter), 10);\n        assertEq(shares - sharesLiquidated, sharesLeft);\n    }\n}"
    },
    "submodules/v2-foundry/src/adapters/rocket/RETHAdapterV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {\n    IllegalArgument,\n    IllegalState,\n    Unauthorized,\n    UnsupportedOperation\n} from \"../../base/ErrorMessages.sol\";\n\nimport {MutexLock} from \"../../base/MutexLock.sol\";\n\nimport {SafeERC20} from \"../../libraries/SafeERC20.sol\";\nimport {RocketPool} from \"../../libraries/RocketPool.sol\";\n\nimport {ITokenAdapter} from \"../../interfaces/ITokenAdapter.sol\";\nimport {IWETH9} from \"../../interfaces/external/IWETH9.sol\";\nimport {IRETH} from \"../../interfaces/external/rocket/IRETH.sol\";\nimport {IRocketStorage} from \"../../interfaces/external/rocket/IRocketStorage.sol\";\nimport {ISwapRouter} from \"../../interfaces/external/uniswap/ISwapRouter.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address token;\n    address underlyingToken;\n}\n\ncontract RETHAdapterV1 is ITokenAdapter, MutexLock {\n    using RocketPool for IRocketStorage;\n\n    address constant uniswapRouterV3 = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n\n    string public override version = \"1.1.0\";\n\n    address public immutable alchemist;\n    address public immutable override token;\n    address public immutable override underlyingToken;\n\n    constructor(InitializationParams memory params) {\n        alchemist       = params.alchemist;\n        token           = params.token;\n        underlyingToken = params.underlyingToken;\n    }\n\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\n    modifier onlyAlchemist() {\n        if (msg.sender != alchemist) {\n            revert Unauthorized(\"Not alchemist\");\n        }\n        _;\n    }\n\n    receive() external payable {\n        if (msg.sender != underlyingToken && msg.sender != token) {\n            revert Unauthorized(\"Payments only permitted from WETH or rETH\");\n        }\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view returns (uint256) {\n        return IRETH(token).getEthValue(10**SafeERC20.expectDecimals(token));\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(\n        uint256 amount,\n        address recipient\n    ) external onlyAlchemist returns (uint256) {\n        amount; recipient; // Silence, compiler!\n\n        // NOTE: Wrapping is currently unsupported because the Rocket Pool requires that all\n        //       addresses that mint rETH to wait approximately 24 hours before transferring\n        //       tokens. In the future when the minting restriction is removed, an adapter\n        //       that supports this operation will be written.\n        //\n        //       We had considered exchanging ETH for rETH here, however, the liquidity on the\n        //       majority of the pools is too limited. Also, the landscape of those pools are very\n        //       likely to change in the coming months. We recommend that users exchange for\n        //       rETH on a pool of their liking or mint rETH and then deposit it at a later time.\n        revert UnsupportedOperation(\"Wrapping is not supported\");\n    }\n\n    // @inheritdoc ITokenAdapter\n    function unwrap(\n        uint256 amount,\n        address recipient\n    ) external lock onlyAlchemist returns (uint256) {\n        // Transfer the rETH from the message sender.\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        uint256 receivedEth = 0;\n\n        uint256 ethValue = IRETH(token).getEthValue(amount);\n        if (IRETH(token).getTotalCollateral() >= ethValue) {\n            // Burn the rETH to receive ETH.\n            uint256 startingEthBalance = address(this).balance;\n            IRETH(token).burn(amount);\n            receivedEth = address(this).balance - startingEthBalance;\n\n            // Wrap the ETH that we received from the burn.\n            IWETH9(underlyingToken).deposit{value: receivedEth}();\n        } else {\n            // Set up and execute uniswap exchange\n            SafeERC20.safeApprove(token, uniswapRouterV3, amount);\n            ISwapRouter.ExactInputSingleParams memory params =\n                ISwapRouter.ExactInputSingleParams({\n                    tokenIn: token,\n                    tokenOut: underlyingToken,\n                    fee: 3000,\n                    recipient: address(this),\n                    deadline: block.timestamp,\n                    amountIn: amount,\n                    amountOutMinimum: 0,\n                    sqrtPriceLimitX96: 0\n                });\n\n            receivedEth = ISwapRouter(uniswapRouterV3).exactInputSingle(params);\n        }\n\n        // Transfer the tokens to the recipient.\n        SafeERC20.safeTransfer(underlyingToken, recipient, receivedEth);\n\n        return receivedEth;\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/rocket/IRETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IERC20Metadata} from \"../../IERC20Metadata.sol\";\n\ninterface IRETH is IERC20, IERC20Metadata {\n    function getEthValue(uint256 amount) external view returns (uint256);\n    function getRethValue(uint256 amount) external view returns (uint256);\n    function getExchangeRate() external view returns (uint256);\n    function getTotalCollateral() external view returns (uint256);\n    function getCollateralRate() external view returns (uint256);\n    function depositExcess() external payable;\n    function depositExcessCollateral() external;\n    function mint(uint256 amount, address receiver) external;\n    function burn(uint256 amount) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/rocket/IRocketStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.5.0;\n\ninterface IRocketStorage {\n    function getDeployedStatus() external view returns (bool);\n    function getGuardian() external view returns(address);\n    function setGuardian(address value) external;\n    function confirmGuardian() external;\n\n    function getAddress(bytes32 key) external view returns (address);\n    function getUint(bytes32 key) external view returns (uint);\n    function getString(bytes32 key) external view returns (string memory);\n    function getBytes(bytes32 key) external view returns (bytes memory);\n    function getBool(bytes32 key) external view returns (bool);\n    function getInt(bytes32 key) external view returns (int);\n    function getBytes32(bytes32 key) external view returns (bytes32);\n\n    function setAddress(bytes32 key, address value) external;\n    function setUint(bytes32 key, uint value) external;\n    function setString(bytes32 key, string calldata value) external;\n    function setBytes(bytes32 key, bytes calldata value) external;\n    function setBool(bytes32 key, bool value) external;\n    function setInt(bytes32 key, int value) external;\n    function setBytes32(bytes32 key, bytes32 value) external;\n\n    function deleteAddress(bytes32 key) external;\n    function deleteUint(bytes32 key) external;\n    function deleteString(bytes32 key) external;\n    function deleteBytes(bytes32 key) external;\n    function deleteBool(bytes32 key) external;\n    function deleteInt(bytes32 key) external;\n    function deleteBytes32(bytes32 key) external;\n\n    function addUint(bytes32 key, uint256 amount) external;\n    function subUint(bytes32 key, uint256 amount) external;\n\n    function getNodeWithdrawalAddress(address nodeAddress) external view returns (address);\n    function getNodePendingWithdrawalAddress(address nodeAddress) external view returns (address);\n    function setWithdrawalAddress(address nodeAddress, address newWithdrawalAddress, bool confirm) external;\n    function confirmWithdrawalAddress(address nodeAddress) external;\n}"
    },
    "submodules/v2-foundry/src/libraries/RocketPool.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport {IRETH} from \"../interfaces/external/rocket/IRETH.sol\";\nimport {IRocketStorage} from \"../interfaces/external/rocket/IRocketStorage.sol\";\n\nlibrary RocketPool {\n    /// @dev Gets the current rETH contract.\n    ///\n    /// @param self The rocket storage contract to read from.\n    ///\n    /// @return The current rETH contract.\n    function getRETH(IRocketStorage self) internal view returns (IRETH) {\n        return IRETH(self.getAddress(\n            keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRETH\"))\n        ));\n    }\n}"
    },
    "submodules/v2-foundry/src/mocks/AlchemistV2Mock.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport { IAlchemistV2AdminActions } from \"../interfaces/alchemist/IAlchemistV2AdminActions.sol\";\nimport { IAlchemistV2State } from \"../interfaces/alchemist/IAlchemistV2State.sol\";\nimport { IERC20 } from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Ownable } from \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\";\nimport { ITokenAdapter } from \"../interfaces/ITokenAdapter.sol\";\nimport { YieldTokenMock } from \"./YieldTokenMock.sol\";\n\ncontract AlchemistV2Mock {\n  using SafeERC20 for IERC20;\n\n  bool public pause;\n  address public rewards;\n\n  mapping(address => IAlchemistV2State.YieldTokenParams) internal yieldTokens;\n\n  constructor(address _rewards) {\n    rewards = _rewards;\n  }\n\n  function setYieldTokenParameters(address yieldToken, IAlchemistV2AdminActions.YieldTokenConfig calldata config) external {\n    yieldTokens[yieldToken] = IAlchemistV2State.YieldTokenParams({\n      decimals: YieldTokenMock(yieldToken).decimals(),\n      underlyingToken: address(YieldTokenMock(yieldToken).underlying()),\n      adapter: config.adapter,\n      maximumLoss: config.maximumLoss,\n      maximumExpectedValue: config.maximumExpectedValue,\n      creditUnlockRate: config.creditUnlockBlocks,\n      activeBalance: 0,\n      harvestableBalance: 0,\n      totalShares: 0,\n      expectedValue: 0,\n      accruedWeight: 0,\n      pendingCredit: 0,\n      distributedCredit: 0,\n      lastDistributionBlock: block.number,\n      enabled: true\n    });\n  }\n\n  function setEnabledYieldToken(address yieldToken, bool flag) external {\n    yieldTokens[yieldToken].enabled = flag;\n  }\n\n  function deposit(address yieldToken, uint256 _amount) external {\n    IAlchemistV2State.YieldTokenParams storage yToken = yieldTokens[yieldToken];\n    yToken.activeBalance += _amount;\n    yToken.expectedValue = (ITokenAdapter(yToken.adapter).price() * yToken.activeBalance) / 10**yToken.decimals;\n    yieldTokens[yieldToken] = yToken;\n    IERC20(yieldToken).safeTransferFrom(msg.sender, address(this), _amount);\n  }\n\n  function harvest(address yieldToken, uint256 minimumAmountOut) external {\n    IAlchemistV2State.YieldTokenParams storage yToken = yieldTokens[yieldToken];\n    uint256 currentValue = (ITokenAdapter(yToken.adapter).price() * yToken.activeBalance) / 10**yToken.decimals;\n    if (currentValue > yToken.expectedValue) {\n      YieldTokenMock(yieldToken).redeem(currentValue - yToken.expectedValue);\n      uint256 redeemed = ((currentValue - yToken.expectedValue) * 10**yToken.decimals) /\n        ITokenAdapter(yToken.adapter).price();\n      yToken.activeBalance -= redeemed;\n    }\n  }\n\n  function getYieldTokenParameters(address yieldToken)\n    external\n    view\n    returns (IAlchemistV2State.YieldTokenParams memory yieldTokenParams)\n  {\n    return yieldTokens[yieldToken];\n  }\n}\n"
    },
    "submodules/v2-foundry/src/mocks/YieldTokenMock.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport {ERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\";\n\ncontract YieldTokenMock is ERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    IERC20 public underlying;\n    uint256 public totalDeposited;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        IERC20 _underlying\n    ) ERC20(name, symbol) {\n        underlying = _underlying;\n    }\n\n    function totalValue() public view returns (uint256) {\n        return underlying.balanceOf(address(this));\n    }\n\n    function deposit(uint256 _amount) external {\n        underlying.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 shares = 0;\n        if (totalSupply() > 0) {\n            shares = (_amount * totalSupply()) / totalValue();\n        } else {\n            shares = _amount;\n        }\n        _mint(msg.sender, shares);\n    }\n\n    function redeem(uint256 _amount) external {\n        _burn(msg.sender, (_amount * 10**decimals()) / price());\n        underlying.safeTransfer(msg.sender, _amount);\n    }\n\n    function price() public view returns (uint256) {\n        if (totalSupply() == 0) {\n            return 0;\n        }\n        return (totalValue() * 10**decimals()) / totalSupply();\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/InvariantsTests.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport { Invariants } from \"./utils/Invariants.sol\";\nimport \"../interfaces/alchemist/IAlchemistV2State.sol\";\n\ncontract TestInvariants is Invariants {\n\tfunction setUp() public {}\n\n\t/*\n\t * Test that the invariants are preserved by the deposit function\n\t *\n\t * Values defined as uint96 to restrict the range that the inputs can be\n\t * fuzzed over: inputs close to 2^128 can cause arithmetic overflows\n\t */\n\tfunction testInvariantsOnDeposit(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Assign yield tokens to a user\n\t\tassignToUser(userList[0], fakeUnderlyingToken, amount);\n\t\tassignYieldTokenToUser(userList[0], fakeYieldToken, amount);\n\n\t\t// Deposit yield tokens\n\t\talchemist.deposit(fakeYieldToken, amount, userList[0]);\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the depositUnderlying function\n\t */\n\tfunction testInvariantsOnDepositUnderlying(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Assign yield tokens to a user\n\t\tassignToUser(userList[0], fakeUnderlyingToken, amount);\n\n\t\t// Deposit underlying tokens\n\t\talchemist.depositUnderlying(fakeYieldToken, amount, userList[0], minimumAmountOut(amount, fakeYieldToken));\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the withdraw function\n\t */\n\tfunction testInvariantsOnWithdraw(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure first user has enough collateral to withdraw\n\t\tcheats.assume(amount <= overCollateralList[0]);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\t// Calculate how many shares to withdraw\n\t\t(uint256 totalShares, ) = alchemist.positions(userList[0], fakeYieldToken);\n\t\tuint256 totalBalance = calculateBalance(debtList[0], overCollateralList[0], fakeUnderlyingToken);\n\t\tuint256 sharesToWithdraw = (totalShares * amount) / totalBalance;\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Withdraw yield token\n\t\talchemist.withdraw(fakeYieldToken, sharesToWithdraw, recipient);\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the withdrawUnderlying function\n\t */\n\tfunction testInvariantsOnWithdrawUnderlying(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure first user has enough collateral to withdraw\n\t\tcheats.assume(amount <= overCollateralList[0]);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\t// Calculate how many shares to withdraw\n\t\t(uint256 totalShares, ) = alchemist.positions(userList[0], fakeYieldToken);\n\t\tuint256 totalBalance = calculateBalance(debtList[0], overCollateralList[0], fakeUnderlyingToken);\n\t\tuint256 sharesToWithdraw = (totalShares * amount) / totalBalance;\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Withdraw underlying token\n\t\talchemist.withdrawUnderlying(\n\t\t\tfakeYieldToken,\n\t\t\tsharesToWithdraw,\n\t\t\trecipient,\n\t\t\tminimumAmountOut(amount, fakeYieldToken)\n\t\t);\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the withdrawFrom function\n\t */\n\tfunction testInvariantsOnWithdrawFrom(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure first user has enough collateral to withdraw\n\t\tcheats.assume(amount <= overCollateralList[0]);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\t// Calculate how many shares to withdraw\n\t\t(uint256 totalShares, ) = alchemist.positions(userList[0], fakeYieldToken);\n\t\tuint256 totalBalance = calculateBalance(debtList[0], overCollateralList[0], fakeUnderlyingToken);\n\t\tuint256 sharesToWithdraw = (totalShares * amount) / totalBalance;\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Approve a different account to withdraw\n\t\talchemist.approveWithdraw(userList[1], fakeYieldToken, sharesToWithdraw);\n\n\t\tcheats.stopPrank();\n\n\t\t// Switch to approved account\n\t\tcheats.startPrank(userList[1], userList[1]);\n\n\t\t// Withdraw yield from an owner's account\n\t\talchemist.withdrawFrom(userList[0], fakeYieldToken, sharesToWithdraw, recipient);\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the withdrawUnderlyingFrom function\n\t */\n\tfunction testInvariantsOnWithdrawUnderlyingFrom(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure first user has enough collateral to withdraw\n\t\tcheats.assume(amount <= overCollateralList[0]);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\t// Calculate how many shares to withdraw\n\t\t(uint256 totalShares, ) = alchemist.positions(userList[0], fakeYieldToken);\n\t\tuint256 totalBalance = calculateBalance(debtList[0], overCollateralList[0], fakeUnderlyingToken);\n\t\tuint256 sharesToWithdraw = (totalShares * amount) / totalBalance;\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Approve a different account to withdraw\n\t\talchemist.approveWithdraw(userList[1], fakeYieldToken, sharesToWithdraw);\n\n\t\tcheats.stopPrank();\n\n\t\t// Switch to approved account\n\t\tcheats.startPrank(userList[1], userList[1]);\n\n\t\t// Withdraw underlying token from an owner's account\n\t\talchemist.withdrawUnderlyingFrom(\n\t\t\tuserList[0],\n\t\t\tfakeYieldToken,\n\t\t\tsharesToWithdraw,\n\t\t\trecipient,\n\t\t\tminimumAmountOut(amount, fakeYieldToken)\n\t\t);\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the mint function\n\t */\n\tfunction testInvariantsOnMint(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure first user has enough collateral to mint\n\t\tcheats.assume(amount <= (overCollateralList[0] / 2));\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Mint debt from an account\n\t\talchemist.mint(amount, userList[0]);\n\t\tminted += amount;\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the mintFrom function\n\t */\n\tfunction testInvariantsOnMintFrom(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure first user has enough collateral to mint\n\t\tcheats.assume(amount <= (overCollateralList[0] / 2));\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Approve a different account to mint debt\n\t\talchemist.approveMint(userList[1], amount);\n\n\t\tcheats.stopPrank();\n\n\t\t// Switch to an account to mint from\n\t\tcheats.startPrank(userList[1], userList[1]);\n\n\t\t// Mint debt from an owner's account\n\t\talchemist.mintFrom(userList[0], amount, userList[1]);\n\t\tminted += amount;\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the repay function\n\t */\n\tfunction testInvariantsOnRepay(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure account has debt to repay\n\t\tcheats.assume(debtList[0] > 0);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\tuint256 repayAmount = setRepayAmount(userList[0], fakeUnderlyingToken, amount);\n\n\t\talchemist.repay(fakeUnderlyingToken, repayAmount, userList[0]);\n\n\t\t// Maximum amount that can be repaid is the account's total debt\n\t\tsentToTransmuter += ((repayAmount > debtList[0]) ? debtList[0] : repayAmount);\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the burn function\n\t */\n\tfunction testInvariantsOnBurn(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure account has debt to burn\n\t\tcheats.assume(debtList[0] > amount);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\t// Burn debt tokens\n\t\talToken.approve(address(alchemist), amount);\n\t\talchemist.burn(amount, userList[0]);\n\t\tburned += amount;\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n\n\t/*\n\t * Test that the invariants are preserved by the liquidate function\n\t */\n\tfunction testInvariantsOnLiquidate(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure account has debt to liquidate\n\t\tcheats.assume(debtList[0] > 0);\n\n\t\t// Check that invariants hold before interaction\n\t\tinvariantA1Range(userList, fakeYieldToken, minted, burned, sentToTransmuter);\n\t\tinvariantA2(userList, fakeYieldToken);\n\t\tinvariantA3(userList, fakeYieldToken);\n\t\tinvariantA7(userList, fakeYieldToken);\n\t\tinvariantA8(userList, fakeYieldToken, fakeUnderlyingToken);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\tuint256 liquidationAmount = setLiquidationAmount(fakeUnderlyingToken, amount);\n\n\t\talchemist.liquidate(fakeYieldToken, liquidationAmount, minimumAmountOut(liquidationAmount, fakeYieldToken));\n\t\tsentToTransmuter += liquidationAmount;\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tinvariantA1Range(userList, fakeYieldToken, minted, burned, sentToTransmuter);\n\t\tinvariantA2(userList, fakeYieldToken);\n\t\tinvariantA3(userList, fakeYieldToken);\n\t\tinvariantA7(userList, fakeYieldToken);\n\t\tinvariantA8(userList, fakeYieldToken, fakeUnderlyingToken);\n\t}\n\n\tfunction testInvariantsOnDonate(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure amount is a meaningful size to donate\n\t\tcheats.assume(amount > 1e18);\n\t\tcheats.assume(debtList[0] > amount);\n\n\t\t// Check that invariants hold before interaction\n\t\tinvariantA1Range(userList, fakeYieldToken, minted, burned, sentToTransmuter);\n\t\tinvariantA2(userList, fakeYieldToken);\n\t\tinvariantA3(userList, fakeYieldToken);\n\t\tinvariantA7(userList, fakeYieldToken);\n\t\tinvariantA8(userList, fakeYieldToken, fakeUnderlyingToken);\n\n\t\tcheats.startPrank(userList[0], userList[0]);\n\n\t\talToken.approve(address(alchemist), amount);\n\t\talchemist.donate(fakeYieldToken, amount);\n\t\tburned += amount;\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tinvariantA1Range(userList, fakeYieldToken, minted, burned, sentToTransmuter);\n\t\tinvariantA2(userList, fakeYieldToken);\n\t\tinvariantA3(userList, fakeYieldToken);\n\t\tinvariantA7(userList, fakeYieldToken);\n\t\tinvariantA8(userList, fakeYieldToken, fakeUnderlyingToken);\n\t}\n\n\tfunction testInvariantsOnHarvest(\n\t\taddress caller,\n\t\taddress proxyOwner,\n\t\taddress[] calldata userList,\n\t\tuint96[] calldata debtList,\n\t\tuint96[] calldata overCollateralList,\n\t\tuint96 amount,\n\t\taddress recipient\n\t) public {\n\t\t// Initialize the test\n\t\tsetupTest(caller, proxyOwner, userList, debtList, overCollateralList, amount, recipient);\n\n\t\t// Ensure amount is a meaningful size to harvest\n\t\tcheats.assume(amount > 1e18);\n\n\t\t// Check that invariants hold before interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\n\t\tcheats.startPrank(alOwner, alOwner);\n\n\t\tassignToUser(alOwner, fakeUnderlyingToken, amount);\n\t\tsetHarvestableBalance(amount);\n\t\talchemist.harvest(fakeYieldToken, minimumAmountOut(amount, fakeYieldToken));\n\n\t\tcheats.stopPrank();\n\n\t\t// Check that invariants hold after interaction\n\t\tcheckAllInvariants(userList, fakeYieldToken, fakeUnderlyingToken, minted, burned, sentToTransmuter);\n\t}\n}\n"
    },
    "submodules/v2-foundry/src/test/Autoleverage.t.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {console} from \"../../lib/forge-std/src/console.sol\";\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IAlchemistV2} from \"../interfaces/IAlchemistV2.sol\";\nimport {IWhitelist} from \"../interfaces/IWhitelist.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\nimport {Hevm} from \"./utils/Hevm.sol\";\nimport {AutoleverageCurveMetapool} from \"../AutoleverageCurveMetapool.sol\";\nimport {AutoleverageCurveFactoryethpool} from \"../AutoleverageCurveFactoryethpool.sol\";\nimport {AutoleverageBase} from \"../AutoleverageBase.sol\";\n\ncontract AutoleverageTest is DSTestPlus {\n\n    AutoleverageCurveMetapool immutable metapoolHelper = new AutoleverageCurveMetapool();\n    AutoleverageCurveFactoryethpool immutable factoryethpoolHelper = new AutoleverageCurveFactoryethpool();\n    address constant daiWhale = 0xE78388b4CE79068e89Bf8aA7f218eF6b9AB0e9d0;\n    address constant wethWhale = 0xE78388b4CE79068e89Bf8aA7f218eF6b9AB0e9d0;\n    IERC20 constant dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    IERC20 constant weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address constant devMultisig = 0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9;\n\n\n    function setUp() public {\n        hevm.label(address(metapoolHelper), \"helper\");\n        hevm.label(address(factoryethpoolHelper), \"helper\");\n        hevm.label(daiWhale, \"whale\");\n        hevm.label(address(dai), \"dai\");\n        hevm.label(address(weth), \"weth\");\n        hevm.label(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9, \"lendingPool\");\n        hevm.label(0xA3dfCcbad1333DC69997Da28C961FF8B2879e653, \"alethWhitelist\");\n        hevm.label(0x78537a6CeBa16f412E123a90472C6E0e9A8F1132, \"alusdWhitelist\");\n        hevm.label(0xf547b87Cd37607bDdAbAFd9bF1EA4587a0F4aCFb, \"alchemistAlusdImpl\");\n        hevm.label(devMultisig, \"devMultisig\");\n    }\n\n\n    function testFlashLoanMetapool() public {\n        address metapool = 0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c; // alUSD-3CRV metapool\n        int128 metapoolI = 0; // alUSD index\n        int128 metapoolJ = 1; // DAI index\n        address alchemist = 0x5C6374a2ac4EBC38DeA0Fc1F8716e5Ea1AdD94dd; // Alchemist alUSD\n        address yieldToken = 0xdA816459F1AB5631232FE5e97a05BBBb94970c95; // yvDAI\n        uint256 collateralInitial = 1_000_000 ether; // will error out if we hit mint caps\n        uint256 collateralTotal = 1_990_000 ether;\n        uint256 slippageMultiplier = 10050; // out of 10000\n        uint256 targetDebt = (collateralTotal - collateralInitial) * slippageMultiplier / 10000;\n        assertGt(collateralTotal/2, targetDebt, \"targetDebt would exceed LTV\");\n        address recipient = daiWhale;\n\n        hevm.label(alchemist, \"alchemist\");\n        hevm.label(yieldToken, \"yieldToken\");\n\n        hevm.startPrank(devMultisig, devMultisig);\n\n        // Boost deposit and mint caps so we don't hit\n        IAlchemistV2.YieldTokenParams memory prevYieldTokenParams = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        uint256 maximumExpectedValue = prevYieldTokenParams.maximumExpectedValue;\n        IAlchemistV2(alchemist).setMaximumExpectedValue(yieldToken, maximumExpectedValue + collateralTotal);\n\n        // Add metapoolHelper contract to whitelist\n        address whitelist = IAlchemistV2(alchemist).whitelist();\n        IWhitelist(whitelist).add(address(metapoolHelper));\n\n        // Impersonate the EOA whale\n        hevm.stopPrank();\n        hevm.startPrank(daiWhale, daiWhale);\n        dai.approve(address(metapoolHelper), collateralInitial);\n        IAlchemistV2(alchemist).approveMint(address(metapoolHelper), type(uint256).max);\n        \n        metapoolHelper.autoleverage(\n            metapool,\n            metapoolI,\n            metapoolJ,\n            alchemist,\n            yieldToken,\n            collateralInitial,\n            collateralTotal,\n            targetDebt\n        );\n\n        // Calculate collateral and ensure gte target\n        (uint256 shares, ) = IAlchemistV2(alchemist).positions(recipient, yieldToken);\n\n        IAlchemistV2.YieldTokenParams memory yieldTokenParams = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        uint256 collateralValue = yieldTokenParams.expectedValue * shares / yieldTokenParams.totalShares;\n        assertGe(collateralValue, collateralTotal, \"Collateral doesn't meet or exceed target\");\n\n        // Calculate debt and ensure it matches the target\n        (int256 iDebt, ) = IAlchemistV2(alchemist).accounts(recipient);\n        require(iDebt > 0, \"Debt should be positive\"); // Can't do ds-test assertGt here because int128 instead of uint256\n        uint256 debt = uint256(iDebt);\n        assertEq(debt, targetDebt, \"Debt doesn't match target\");\n    }\n\n    function testFlashLoanFactoryethpoolFromWeth() public {\n        address factorypool = 0xC4C319E2D4d66CcA4464C0c2B32c9Bd23ebe784e; // alETH-ETH factoryethpool\n        int128 factorypoolI = 1; // alETH index\n        int128 factorypoolJ = 0; // ETH index\n        address alchemist = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c; // Alchemist alETH\n        address yieldToken = 0xa258C4606Ca8206D8aA700cE2143D7db854D168c; // yvWETH\n        uint256 collateralInitial = 100 ether;\n        uint256 collateralTotal = 150 ether;\n        uint256 slippageMultiplier = 10100; // out of 10000\n        uint256 targetDebt = (collateralTotal - collateralInitial) * slippageMultiplier / 10000;\n        address recipient = daiWhale;\n\n        hevm.startPrank(devMultisig, devMultisig);\n\n        // Boost deposit and mint caps so we don't hit\n        IAlchemistV2.YieldTokenParams memory prevYieldTokenParams = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        uint256 maximumExpectedValue = prevYieldTokenParams.maximumExpectedValue;\n        IAlchemistV2(alchemist).setMaximumExpectedValue(yieldToken, maximumExpectedValue + collateralTotal);\n\n        // Add factoryethpoolHelper contract to whitelist\n        address whitelist = IAlchemistV2(alchemist).whitelist();\n        IWhitelist(whitelist).add(address(factoryethpoolHelper));\n\n\n        // Impersonate the EOA whale\n        hevm.stopPrank();\n        hevm.startPrank(daiWhale, daiWhale);\n        weth.approve(address(factoryethpoolHelper), collateralInitial);\n        IAlchemistV2(alchemist).approveMint(address(factoryethpoolHelper), type(uint256).max);\n        \n        factoryethpoolHelper.autoleverage(\n            factorypool,\n            factorypoolI,\n            factorypoolJ,\n            alchemist,\n            yieldToken,\n            collateralInitial,\n            collateralTotal,\n            targetDebt\n        );\n\n        // Calculate collateral and ensure gte target\n        (uint256 shares, ) = IAlchemistV2(alchemist).positions(recipient, yieldToken);\n\n        IAlchemistV2.YieldTokenParams memory yieldTokenParams = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        uint256 collateralValue = yieldTokenParams.expectedValue * shares / yieldTokenParams.totalShares;\n        assertGe(collateralValue, collateralTotal, \"Collateral doesn't meet or exceed target\");\n\n        // Calculate debt and ensure it matches the target\n        (int256 iDebt, ) = IAlchemistV2(alchemist).accounts(recipient);\n        require(iDebt > 0, \"Debt should be positive\");\n        uint256 debt = uint256(iDebt);\n        assertEq(debt, targetDebt, \"Debt doesn't match target\");\n    }\n\n    function testFlashLoanFactoryethpoolFromEth() public {\n        address factorypool = 0xC4C319E2D4d66CcA4464C0c2B32c9Bd23ebe784e; // alETH-ETH factoryethpool\n        int128 factorypoolI = 1; // alETH index\n        int128 factorypoolJ = 0; // ETH index\n        address alchemist = 0x062Bf725dC4cDF947aa79Ca2aaCCD4F385b13b5c; // Alchemist alETH\n        address yieldToken = 0xa258C4606Ca8206D8aA700cE2143D7db854D168c; // yvWETH\n        uint256 collateralInitial = 100 ether;\n        uint256 collateralTotal = 150 ether;\n        uint256 slippageMultiplier = 10100; // out of 10000\n        uint256 targetDebt = (collateralTotal - collateralInitial) * slippageMultiplier / 10000;\n        address recipient = daiWhale;\n\n        hevm.startPrank(devMultisig, devMultisig);\n\n        // Boost deposit and mint caps so we don't hit\n        IAlchemistV2.YieldTokenParams memory prevYieldTokenParams = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        uint256 maximumExpectedValue = prevYieldTokenParams.maximumExpectedValue;\n        IAlchemistV2(alchemist).setMaximumExpectedValue(yieldToken, maximumExpectedValue + collateralTotal);\n\n        // Add factoryethpoolHelper contract to whitelist\n        address whitelist = IAlchemistV2(alchemist).whitelist();\n        IWhitelist(whitelist).add(address(factoryethpoolHelper));\n\n        // Impersonate the EOA whale\n        hevm.stopPrank();\n        hevm.startPrank(daiWhale, daiWhale);\n        // No weth approval here\n        IAlchemistV2(alchemist).approveMint(address(factoryethpoolHelper), type(uint256).max);\n        \n        factoryethpoolHelper.autoleverage{value: collateralInitial}(\n            factorypool,\n            factorypoolI,\n            factorypoolJ,\n            alchemist,\n            yieldToken,\n            collateralInitial,\n            collateralTotal,\n            targetDebt\n        );\n\n        // Calculate collateral and ensure gte target\n        (uint256 shares, ) = IAlchemistV2(alchemist).positions(recipient, yieldToken);\n\n        IAlchemistV2.YieldTokenParams memory yieldTokenParams = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        uint256 collateralValue = yieldTokenParams.expectedValue * shares / yieldTokenParams.totalShares;\n        assertGe(collateralValue, collateralTotal, \"Collateral doesn't meet or exceed target\");\n\n        // Calculate debt and ensure it matches the target\n        (int256 iDebt, ) = IAlchemistV2(alchemist).accounts(recipient);\n        require(iDebt > 0, \"Debt should be positive\");\n        uint256 debt = uint256(iDebt);\n        assertEq(debt, targetDebt, \"Debt doesn't match target\");\n    }\n\n}"
    },
    "submodules/v2-foundry/src/AutoleverageCurveMetapool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {ICurveMetapool} from \"./interfaces/ICurveMetapool.sol\";\n\nimport {AutoleverageBase} from \"./AutoleverageBase.sol\";\n\n/// @title A zapper for leveraged deposits into the Alchemist\ncontract AutoleverageCurveMetapool is AutoleverageBase {\n\n    /// @inheritdoc AutoleverageBase\n    function _transferTokensToSelf(address underlyingToken, uint256 collateralInitial) internal override {\n        if (msg.value > 0) revert IllegalArgument(\"msg.value should be 0\");\n        IERC20(underlyingToken).transferFrom(msg.sender, address(this), collateralInitial);\n    }\n\n    /// @inheritdoc AutoleverageBase\n    function _maybeConvertCurveOutput(uint256 amountOut) internal override {}\n\n    /// @inheritdoc AutoleverageBase\n    function _curveSwap(address poolAddress, address debtToken, int128 i, int128 j, uint256 minAmountOut) internal override returns (uint256 amountOut) {\n        // Curve swap\n        uint256 debtTokenBalance = IERC20(debtToken).balanceOf(address(this));\n        approve(debtToken, poolAddress);\n        return ICurveMetapool(poolAddress).exchange_underlying(\n            i,\n            j,\n            debtTokenBalance,\n            minAmountOut\n        );\n    }\n}"
    },
    "submodules/v2-foundry/src/AutoleverageCurveFactoryethpool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {ICurveFactoryethpool} from \"./interfaces/ICurveFactoryethpool.sol\";\nimport {IWETH9} from \"./interfaces/external/IWETH9.sol\";\n\nimport {AutoleverageBase} from \"./AutoleverageBase.sol\";\n\n/// @title A zapper for leveraged deposits into the Alchemist\ncontract AutoleverageCurveFactoryethpool is AutoleverageBase {\n\n    address public constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    \n    /// @notice Used to receive ETH from factory pool swaps\n    receive() external payable {}\n\n    /// @inheritdoc AutoleverageBase\n    function _transferTokensToSelf(address underlyingToken, uint256 collateralInitial) internal override {\n        // Convert eth to weth if received eth, otherwise transfer weth\n        if (msg.value > 0) {\n            if (msg.value != collateralInitial) revert IllegalArgument(\"msg.value doesn't match collateralInitial\");\n            IWETH9(wethAddress).deposit{value: msg.value}();\n        } else {\n            IERC20(underlyingToken).transferFrom(msg.sender, address(this), collateralInitial);\n        }\n    }\n\n    /// @inheritdoc AutoleverageBase\n    function _maybeConvertCurveOutput(uint256 amountOut) internal override {\n        // Convert ETH output from Curve into WETH\n        IWETH9(wethAddress).deposit{value: amountOut}();\n    }\n\n    /// @inheritdoc AutoleverageBase\n    function _curveSwap(address poolAddress, address debtToken, int128 i, int128 j, uint256 minAmountOut) internal override returns (uint256 amountOut) {\n        // Curve swap\n        uint256 debtTokenBalance = IERC20(debtToken).balanceOf(address(this));\n        approve(debtToken, poolAddress);\n        return ICurveFactoryethpool(poolAddress).exchange(\n            i,\n            j,\n            debtTokenBalance,\n            minAmountOut\n        );\n    }\n\n}"
    },
    "submodules/v2-foundry/src/AutoleverageBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IAlchemistV2} from \"./interfaces/IAlchemistV2.sol\";\nimport {IAaveFlashLoanReceiver} from \"./interfaces/IAaveFlashLoanReceiver.sol\";\nimport {IAaveLendingPool} from \"./interfaces/IAaveLendingPool.sol\";\nimport {IWhitelist} from \"./interfaces/IWhitelist.sol\";\n\n/// @title A zapper for leveraged deposits into the Alchemist\nabstract contract AutoleverageBase is IAaveFlashLoanReceiver {\n\n    IWhitelist constant whitelist = IWhitelist(0xA3dfCcbad1333DC69997Da28C961FF8B2879e653);\n    IAaveLendingPool constant flashLender = IAaveLendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n\n    struct Details {\n        address pool;\n        int128 poolInputIndex;\n        int128 poolOutputIndex;\n        address alchemist;\n        address yieldToken;\n        address recipient;\n        uint256 targetDebt;\n    }\n\n    /// @notice When the msg.sender is not whitelisted\n    error Unauthorized(address sender);\n\n    /// @notice When we're passed invalid parameters\n    error IllegalArgument(string reason);\n    \n    /// @notice When the yieldToken has no underlyingToken in the alchemist\n    error UnsupportedYieldToken(address yieldToken);\n\n    /// @notice When the collateral is insufficient to mint targetDebt\n    error MintFailure();\n\n    /// @notice When the helper contract ends up with too few or too many tokens\n    error InexactTokens(uint256 currentBalance, uint256 repayAmount);\n\n    /// @notice Either convert received eth to weth, or transfer ERC20 from the msg.sender to this contract\n    /// @param underlyingToken The ERC20 desired to transfer\n    /// @param collateralInitial The amount of tokens taken from the user\n    function _transferTokensToSelf(address underlyingToken, uint256 collateralInitial) internal virtual;\n\n    /// @notice Convert received eth to weth, or do nothing\n    /// @param amountOut The amount received from the curve swap\n    function _maybeConvertCurveOutput(uint256 amountOut) internal virtual;\n\n    /// @notice Swap on curve using the supplied params\n    /// @param poolAddress Curve pool address\n    /// @param debtToken The alAsset debt token address\n    /// @param i Curve swap param\n    /// @param j Curve swap param\n    /// @param minAmountOut Minimum amount received from swap\n    /// @return amountOut The actual amount received from swap\n    function _curveSwap(address poolAddress, address debtToken, int128 i, int128 j, uint256 minAmountOut) internal virtual returns (uint256 amountOut);\n\n    /// @notice Approve a contract to spend tokens\n    function approve(address token, address spender) internal {\n        IERC20(token).approve(spender, type(uint256).max);\n    }\n\n    /// @notice Transfer tokens from msg.sender here, then call flashloan which calls callback\n    /// @dev Must have targetDebt > collateralTotal - collateralInitial, otherwise flashloan payback will fail\n    /// @param pool The address of the curve pool to swap on\n    /// @param poolInputIndex The `i` param for the curve swap\n    /// @param poolOutputIndex The `j` param for the curve swap\n    /// @param alchemist The alchemist to deposit and mint from\n    /// @param yieldToken The yieldToken to convert deposits into\n    /// @param collateralInitial The amount of tokens that will be taken from the user\n    /// @param collateralTotal The amount of tokens that will be deposited as collateral for the user\n    /// @param targetDebt The amount of debt that the user will incur\n    function autoleverage(\n        address pool,\n        int128 poolInputIndex,\n        int128 poolOutputIndex,\n        address alchemist,\n        address yieldToken,\n        uint256 collateralInitial,\n        uint256 collateralTotal,\n        uint256 targetDebt\n    ) external payable {\n        // Gate on EOA or whitelisted\n        if (!(tx.origin == msg.sender || whitelist.isWhitelisted(msg.sender))) revert Unauthorized(msg.sender);\n\n        // Get underlying token from alchemist\n        address underlyingToken = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken).underlyingToken;\n        if (underlyingToken == address(0)) revert UnsupportedYieldToken(yieldToken);\n\n        _transferTokensToSelf(underlyingToken, collateralInitial);\n\n        // Take out flashloan\n        address[] memory assets = new address[](1);\n        assets[0] = underlyingToken;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = collateralTotal - collateralInitial;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n\n        bytes memory params = abi.encode(Details({\n            pool: pool,\n            poolInputIndex: poolInputIndex,\n            poolOutputIndex: poolOutputIndex,\n            alchemist: alchemist,\n            yieldToken: yieldToken,\n            recipient: msg.sender,\n            targetDebt: targetDebt\n        }));\n\n        flashLender.flashLoan(\n            address(this),\n            assets,\n            amounts,\n            modes,\n            address(0), // onBehalfOf, not used here\n            params, // params, passed to callback func to decode as struct\n            0 // referralCode\n        );\n    }\n\n    /// @notice Flashloan callback receiver, will be called by IAaveLendingPool.flashloan()\n    /// @dev Never call this function directly\n    /// @param assets An array of length 1, pointing to the ERC20 received in the flashloan\n    /// @param amounts An array of length 1, with the ERC20 amount received in the flashloan\n    /// @param premiums An array of length 1, with the flashloan fee. We will pay back amounts[0] + premiums[0] to the flashloan provider\n    /// @param initiator Points to who initiated the flashloan\n    /// @param params ABI-encoded `Details` struct containing many details about desired functionality\n    /// @return success Always true unless reverts, required by Aave flashloan\n    function executeOperation(\n        address[] calldata assets,\n        uint[] calldata amounts,\n        uint[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        // Only called by flashLender\n        if (msg.sender != address(flashLender)) revert Unauthorized(msg.sender);\n        if (initiator != address(this)) revert IllegalArgument(\"flashloan initiator must be self\");\n        Details memory details = abi.decode(params, (Details));\n        uint256 repayAmount = amounts[0] + premiums[0];\n\n        uint256 collateralBalance = IERC20(assets[0]).balanceOf(address(this));\n\n        // Deposit into recipient's account\n        approve(assets[0], details.alchemist);\n        IAlchemistV2(details.alchemist).depositUnderlying(details.yieldToken, collateralBalance, details.recipient, 0);\n\n        // Mint from recipient's account\n        try IAlchemistV2(details.alchemist).mintFrom(details.recipient, details.targetDebt, address(this)) {\n\n        } catch {\n            revert MintFailure();\n        }\n\n        {\n            address debtToken = IAlchemistV2(details.alchemist).debtToken();\n            uint256 amountOut = _curveSwap(\n                details.pool, \n                debtToken, \n                details.poolInputIndex, \n                details.poolOutputIndex, \n                repayAmount\n            );\n\n            _maybeConvertCurveOutput(amountOut);\n\n\n            // Deposit excess assets into the alchemist on behalf of the user\n            uint256 excessCollateral = amountOut - repayAmount;\n            if (excessCollateral > 0) {\n                IAlchemistV2(details.alchemist).depositUnderlying(details.yieldToken, excessCollateral, details.recipient, 0);\n            }\n        }\n\n        // Approve the LendingPool contract allowance to *pull* the owed amount\n        approve(assets[0], address(flashLender));\n        uint256 balance = IERC20(assets[0]).balanceOf(address(this));\n        if (balance != repayAmount) {\n            revert InexactTokens(balance, repayAmount);\n        }\n\n        return true;\n    }\n\n}"
    },
    "submodules/v2-foundry/src/interfaces/ICurveMetapool.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface ICurveMetapool {\n    /// @notice Perform an exchange between two underlying coins\n    /// @dev Index values can be found via the `underlying_coins` public getter method\n    /// @param i Index value for the underlying coin to send\n    /// @param j Index valie of the underlying coin to recieve\n    /// @param dx Amount of `i` being exchanged\n    /// @param min_dy Minimum amount of `j` to receive\n    /// @return Actual amount of `j` received\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n}\n\n// interface ICurve {\n//     function coins(uint256 i) external view returns (address);\n//     function get_virtual_price() external view returns (uint256);\n//     function calc_token_amount(uint256[] memory amounts, bool deposit) external view returns (uint256);\n//     function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n//     function fee() external view returns (uint256);\n//     function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n//     function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n//     function add_liquidity(uint256[] memory amounts, uint256 min_mint_amount) external;\n//     function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\n// }"
    },
    "submodules/v2-foundry/src/interfaces/IAaveFlashLoanReceiver.sol": {
      "content": "pragma solidity ^0.8.13;\n\n/**\n * @title IFlashLoanReceiver interface\n * @notice Interface for the Aave fee IFlashLoanReceiver.\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IAaveFlashLoanReceiver {\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}"
    },
    "submodules/v2-foundry/src/interfaces/IAaveLendingPool.sol": {
      "content": "pragma solidity ^0.8.13;\n\nlibrary DataTypes {\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    //tokens addresses\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint8 id;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: Reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60-63: reserved\n    //bit 64-79: reserve factor\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    uint256 data;\n  }\n\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\n}\n\ninterface IAaveLendingPool {\n\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\n\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n}"
    },
    "submodules/v2-foundry/src/test/EthAssetManager.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {console} from \"../../lib/forge-std/src/console.sol\";\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\nimport {EthAssetManagerUser} from \"./utils/users/EthAssetManagerUser.sol\";\n\nimport {\n    EthAssetManager,\n    MetaPoolAsset,\n    SLIPPAGE_PRECISION,\n    CURVE_PRECISION,\n    InitializationParams as ManagerInitializationParams\n} from \"../EthAssetManager.sol\";\n\nimport {ITransmuterBuffer} from \"../interfaces/transmuter/ITransmuterBuffer.sol\";\nimport {IERC20TokenReceiver} from \"../interfaces/IERC20TokenReceiver.sol\";\nimport {IWETH9} from \"../interfaces/external/IWETH9.sol\";\nimport {IConvexBooster} from \"../interfaces/external/convex/IConvexBooster.sol\";\nimport {IConvexRewards} from \"../interfaces/external/convex/IConvexRewards.sol\";\nimport {IConvexToken} from \"../interfaces/external/convex/IConvexToken.sol\";\nimport {IEthStableMetaPool} from \"../interfaces/external/curve/IEthStableMetaPool.sol\";\n\ncontract EthAssetManagerTest is DSTestPlus {\n    ITransmuterBuffer constant transmuterBuffer = ITransmuterBuffer(0xbc2FB245594a68c927C930FBE2d00680A8C90B9e);\n    address constant transmuterBufferAdmin = address(0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9);\n    IERC20 constant crv = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\n    IEthStableMetaPool constant metaPool = IEthStableMetaPool(0xC4C319E2D4d66CcA4464C0c2B32c9Bd23ebe784e);\n    IConvexToken constant cvx = IConvexToken(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n    IConvexBooster constant convexBooster = IConvexBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n    IConvexRewards constant convexRewards = IConvexRewards(0x48Bc302d8295FeA1f8c3e7F57D4dDC9981FEE410);\n    IWETH9 constant weth = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    EthAssetManager manager;\n    IERC20 alETH;\n\n    function setUp() external {\n        manager = new EthAssetManager(ManagerInitializationParams({\n            admin:             address(this),\n            operator:          address(this),\n            rewardReceiver:    address(0xbeef),\n            transmuterBuffer:  address(transmuterBuffer),\n            weth:              weth,\n            curveToken:        crv,\n            metaPool:          metaPool,\n            metaPoolSlippage:  SLIPPAGE_PRECISION - 30, // 30 bps, 0.3%\n            convexToken:       cvx,\n            convexBooster:     convexBooster,\n            convexRewards:     convexRewards,\n            convexPoolId:      49\n        }));\n\n        alETH = manager.getTokenForMetaPoolAsset(MetaPoolAsset.ALETH);\n    }\n\n    receive() external payable {}\n\n    function testSetPendingAdmin() external {\n        manager.setPendingAdmin(address(0xdead));\n        assertEq(manager.pendingAdmin(), address(0xdead));\n    }\n\n    function testFailSetPendingAdminSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setPendingAdmin(address(0xbeef));\n    }\n\n    function testAcceptAdmin() external {\n        EthAssetManagerUser pendingAdmin = new EthAssetManagerUser(manager);\n\n        manager.setPendingAdmin(address(pendingAdmin));\n        pendingAdmin.acceptAdmin();\n\n        assertEq(manager.pendingAdmin(), address(0));\n        assertEq(manager.admin(), address(pendingAdmin));\n    }\n\n    function testFailAcceptAdminNotPendingAdmin() external {\n        EthAssetManagerUser pendingAdmin = new EthAssetManagerUser(manager);\n\n        manager.setPendingAdmin(address(pendingAdmin));\n\n        hevm.prank(address(0xdead));\n        manager.acceptAdmin();\n    }\n\n    function testFailAcceptAdminPendingAdminUnset() external {\n        manager.acceptAdmin();\n    }\n\n    function testSetRewardReceiver() external {\n        manager.setRewardReceiver(address(0xdead));\n        assertEq(manager.rewardReceiver(), address(0xdead));\n    }\n\n    function testFailSetRewardReceiverSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setRewardReceiver(address(0xbeef));\n    }\n\n    function testSetTransmuterBuffer() external {\n        manager.setTransmuterBuffer(address(0xdead));\n        assertEq(manager.transmuterBuffer(), address(0xdead));\n    }\n\n    function testFailSetTransmuterBufferSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setTransmuterBuffer(address(0xbeef));\n    }\n\n    function testSetMetaPoolSlippage() external {\n        manager.setMetaPoolSlippage(1e4);\n        assertEq(manager.metaPoolSlippage(), 1e4);\n    }\n\n    function testSetMetaPoolSlippage(uint256 value) external {\n        value = bound(value, 0, SLIPPAGE_PRECISION);\n        manager.setMetaPoolSlippage(value);\n\n        assertEq(manager.metaPoolSlippage(), value);\n    }\n\n    function testFailSetMetaPoolSlippageSenderNotAdmin() external {\n        hevm.prank(address(0xdead));\n        manager.setMetaPoolSlippage(1e4);\n    }\n\n    function testMintMetaPoolTokensMultipleAssets() external {\n        deal(address(weth), address(manager), 1e18);\n        deal(address(alETH), address(manager), 1e18);\n\n        uint256[2] memory amounts;\n        amounts[uint256(MetaPoolAsset.ETH)]   = 1e18;\n        amounts[uint256(MetaPoolAsset.ALETH)] = 1e18;\n\n        uint256 expectedOutput = 2e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(amounts);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(weth.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensMultipleAssetsETH() external {\n        hevm.deal(address(manager), 1e18);\n\n        uint256[2] memory amounts;\n        amounts[uint256(MetaPoolAsset.ETH)] = 1e18;\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(amounts);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensMultipleAssetsWETH() external {\n        deal(address(weth), address(manager), 1e18);\n\n        uint256[2] memory amounts;\n        amounts[uint256(MetaPoolAsset.ETH)] = 1e18;\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(amounts);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensMultipleAssetsSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n\n        uint256[2] memory amounts;\n        manager.mintMetaPoolTokens(amounts);\n    }\n\n    function testMintMetaPoolTokensWETH() external {\n        deal(address(weth), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(MetaPoolAsset.ETH, 1e18);\n\n        assertEq(weth.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensETH() external {\n        hevm.deal(address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minted         = manager.mintMetaPoolTokens(MetaPoolAsset.ETH, 1e18);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(metaPool.balanceOf(address(manager)), minted);\n        assertGt(minted, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testMintMetaPoolTokensSingleAssetSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.mintMetaPoolTokens(MetaPoolAsset.ETH, 0);\n    }\n\n    function testBurnMetaPoolTokens() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        uint256 expectedOutput = 1e18 * metaPool.get_virtual_price() / CURVE_PRECISION;\n        uint256 withdrawn      = manager.burnMetaPoolTokens(MetaPoolAsset.ALETH, 1e18);\n\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(alETH.balanceOf(address(manager)), withdrawn);\n        assertGt(withdrawn, expectedOutput * manager.metaPoolSlippage() / SLIPPAGE_PRECISION);\n    }\n\n    function testBurnMetaPoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.burnMetaPoolTokens(MetaPoolAsset.ETH, 0);\n    }\n\n    function testDepositMetaPoolTokens() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        assertTrue(manager.depositMetaPoolTokens(1e18));\n        assertEq(convexRewards.balanceOf(address(manager)), 1e18);\n    }\n\n    function testDepositMetaPoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.depositMetaPoolTokens(0);\n    }\n\n    function testWithdrawMetaPoolTokens() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        manager.depositMetaPoolTokens(1e18);\n\n        assertTrue(manager.withdrawMetaPoolTokens(1e18));\n\n        assertEq(convexRewards.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), 1e18);\n    }\n\n    function testWithdrawMetaPoolTokensSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.withdrawMetaPoolTokens(0);\n    }\n\n    function testClaimRewards() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        manager.depositMetaPoolTokens(1e18);\n\n        hevm.warp(block.timestamp + 86400);\n\n        (uint256 earnedCurve, uint256 earnedConvex) = manager.claimableRewards();\n\n        assertTrue(manager.claimRewards());\n        assertEq(crv.balanceOf(manager.rewardReceiver()), earnedCurve);\n        assertEq(cvx.balanceOf(manager.rewardReceiver()), earnedConvex);\n    }\n\n    function testClaimRewardsSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.claimRewards();\n    }\n\n    function testFlushMultipleAssets() external {\n        hevm.deal(address(manager), 1e18);\n\n        deal(address(weth), address(manager), 1e18);\n        deal(address(alETH), address(manager), 1e18);\n\n        uint256[2] memory amounts;\n        amounts[uint256(MetaPoolAsset.ETH)]   = 2e18;\n        amounts[uint256(MetaPoolAsset.ALETH)] = 1e18;\n\n        uint256 minted = manager.flush(amounts);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(weth.balanceOf(address(manager)), 0);\n        assertEq(alETH.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), minted);\n    }\n\n    function testFlushMultipleAssetsSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.flush(MetaPoolAsset.ETH, 1e18);\n    }\n\n    function testFlushETH() external {\n        hevm.deal(address(manager), 1e18);\n\n        manager.setMetaPoolSlippage(0);\n\n        uint256 minted = manager.flush(MetaPoolAsset.ETH, 1e18);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), minted);\n    }\n\n    function testFlushWETH() external {\n        deal(address(weth), address(manager), 1e18);\n\n        manager.setMetaPoolSlippage(0);\n\n        uint256 minted = manager.flush(MetaPoolAsset.ETH, 1e18);\n\n        assertEq(weth.balanceOf(address(manager)), 0);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), minted);\n    }\n\n    function testFlushSingleAssetSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.flush(MetaPoolAsset.ETH, 1e18);\n    }\n\n    function testRecall() external {\n        deal(address(metaPool), address(manager), 1e18);\n\n        manager.depositMetaPoolTokens(1e18);\n\n        manager.setMetaPoolSlippage(0);\n\n        uint256 withdrawn = manager.recall(1e18);\n\n        assertEq(address(manager).balance, withdrawn);\n        assertEq(metaPool.balanceOf(address(manager)), 0);\n        assertEq(convexRewards.balanceOf(address(manager)), 0);\n    }\n\n    function testRecallSenderNotOperator() external {\n        hevm.prank(address(0xdead));\n        expectUnauthorizedError(\"Not operator\");\n        manager.recall(1e18);\n    }\n\n    function testReclaimETH() external {\n        hevm.deal(address(manager), 1e18);\n        deal(address(weth), address(manager), 1e18);\n\n        hevm.prank(transmuterBufferAdmin);\n        transmuterBuffer.setSource(address(manager), true);\n\n        hevm.expectCall(\n            manager.transmuterBuffer(),\n            abi.encodeWithSelector(\n                IERC20TokenReceiver.onERC20Received.selector,\n                address(weth),\n                2e18\n            )\n        );\n\n        manager.reclaimEth(2e18);\n    }\n\n    function testFailReclaimETHSenderNotAdmin() external {\n        deal(address(weth), address(manager), 1e18);\n\n        hevm.prank(address(0xdead));\n        manager.reclaimEth(1e18);\n    }\n\n    function testSweepToken() external {\n        deal(address(weth), address(manager), 1e18);\n\n        manager.sweepToken(address(weth), 1e18);\n\n        assertEq(weth.balanceOf(address(manager)), 0e18);\n        assertEq(weth.balanceOf(manager.admin()), 1e18);\n    }\n\n    function testFailSweepTokenSenderNotAdmin() external {\n        deal(address(weth), address(manager), 1e18);\n\n        hevm.prank(address(0xdead));\n        manager.sweepToken(address(weth), 1e18);\n    }\n\n    function testSweepETH() external {\n        EthAssetManagerUser admin = new EthAssetManagerUser(manager);\n\n        manager.setPendingAdmin(address(admin));\n        admin.acceptAdmin();\n\n        hevm.deal(address(manager), 1e18);\n\n        hevm.prank(address(admin));\n        manager.sweepEth(1e18);\n\n        assertEq(address(manager).balance, 0);\n        assertEq(address(admin).balance, 1e18);\n    }\n\n    function testFailSweepSenderNotAdmin() external {\n        hevm.deal(address(manager), 1e18);\n\n        hevm.prank(address(0xdead));\n        manager.sweepEth(1e18);\n    }\n}"
    },
    "submodules/v2-foundry/src/test/utils/users/EthAssetManagerUser.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {EthAssetManager} from \"../../../EthAssetManager.sol\";\n\ncontract EthAssetManagerUser {\n    EthAssetManager internal manager;\n\n    constructor(EthAssetManager _manager) { manager = _manager; }\n\n    receive() external payable {}\n\n    function acceptAdmin() external {\n        manager.acceptAdmin();\n    }\n}"
    },
    "submodules/v2-foundry/src/EthAssetManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IllegalArgument, IllegalState, Unauthorized} from \"./base/ErrorMessages.sol\";\nimport {Multicall} from \"./base/Multicall.sol\";\nimport {MutexLock} from \"./base/MutexLock.sol\";\n\nimport {IERC20TokenReceiver} from \"./interfaces/IERC20TokenReceiver.sol\";\nimport {IWETH9} from \"./interfaces/external/IWETH9.sol\";\nimport {IConvexBooster} from \"./interfaces/external/convex/IConvexBooster.sol\";\nimport {IConvexRewards} from \"./interfaces/external/convex/IConvexRewards.sol\";\nimport {IConvexToken} from \"./interfaces/external/convex/IConvexToken.sol\";\n\nimport {\n    IEthStableMetaPool,\n    N_COINS as NUM_META_COINS\n} from \"./interfaces/external/curve/IEthStableMetaPool.sol\";\n\nimport {SafeERC20} from \"./libraries/SafeERC20.sol\";\n\n/// @notice A struct used to define initialization parameters. This is not included\n///         in the contract to prevent naming collisions.\nstruct InitializationParams {\n    address admin;\n    address operator;\n    address rewardReceiver;\n    address transmuterBuffer;\n    IWETH9 weth;\n    IERC20 curveToken;\n    IEthStableMetaPool metaPool;\n    uint256 metaPoolSlippage;\n    IConvexToken convexToken;\n    IConvexBooster convexBooster;\n    IConvexRewards convexRewards;\n    uint256 convexPoolId;\n}\n\n/// @dev The amount of precision that slippage parameters have.\nuint256 constant SLIPPAGE_PRECISION = 1e4;\n\n/// @dev The amount of precision that curve pools use for price calculations.\nuint256 constant CURVE_PRECISION = 1e18;\n\n/// @notice Enumerations for meta pool assets.\n///\n/// @dev Do not change the order of these fields.\nenum MetaPoolAsset {\n    ETH, ALETH\n}\n\n/// @title  EthAssetManager\n/// @author Alchemix Finance\ncontract EthAssetManager is Multicall, MutexLock, IERC20TokenReceiver {\n    /// @notice Emitted when the admin is updated.\n    ///\n    /// @param admin The admin.\n    event AdminUpdated(address admin);\n\n    /// @notice Emitted when the pending admin is updated.\n    ///\n    /// @param pendingAdmin The pending admin.\n    event PendingAdminUpdated(address pendingAdmin);\n\n    /// @notice Emitted when the operator is updated.\n    ///\n    /// @param operator The operator.\n    event OperatorUpdated(address operator);\n\n    /// @notice Emitted when the reward receiver is updated.\n    ///\n    /// @param rewardReceiver The reward receiver.\n    event RewardReceiverUpdated(address rewardReceiver);\n\n    /// @notice Emitted when the transmuter buffer is updated.\n    ///\n    /// @param transmuterBuffer The transmuter buffer.\n    event TransmuterBufferUpdated(address transmuterBuffer);\n\n    /// @notice Emitted when the meta pool slippage is updated.\n    ///\n    /// @param metaPoolSlippage The meta pool slippage.\n    event MetaPoolSlippageUpdated(uint256 metaPoolSlippage);\n\n    /// @notice Emitted when meta pool tokens are minted.\n    ///\n    /// @param amounts               The amounts of each meta pool asset used to mint liquidity.\n    /// @param mintedThreePoolTokens The amount of meta pool tokens minted.\n    event MintMetaPoolTokens(uint256[NUM_META_COINS] amounts, uint256 mintedThreePoolTokens);\n\n    /// @notice Emitted when meta tokens are minted.\n    ///\n    /// @param asset  The asset used to mint meta pool tokens.\n    /// @param amount The amount of the asset used to mint meta pool tokens.\n    /// @param minted The amount of meta pool tokens minted.\n    event MintMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 minted);\n\n    /// @notice Emitted when meta pool tokens are burned.\n    ///\n    /// @param asset     The meta pool asset that was received.\n    /// @param amount    The amount of meta pool tokens that were burned.\n    /// @param withdrawn The amount of the asset that was withdrawn.\n    event BurnMetaPoolTokens(MetaPoolAsset asset, uint256 amount, uint256 withdrawn);\n\n    /// @notice Emitted when meta pool tokens are deposited into convex.\n    ///\n    /// @param amount  The amount of meta pool tokens that were deposited.\n    /// @param success If the operation was successful.\n    event DepositMetaPoolTokens(uint256 amount, bool success);\n\n    /// @notice Emitted when meta pool tokens are withdrawn from convex.\n    ///\n    /// @param amount  The amount of meta pool tokens that were withdrawn.\n    /// @param success If the operation was successful.\n    event WithdrawMetaPoolTokens(uint256 amount, bool success);\n\n    /// @notice Emitted when convex rewards are claimed.\n    ///\n    /// @param success      If the operation was successful.\n    /// @param amountCurve  The amount of curve tokens sent to the reward recipient.\n    /// @param amountConvex The amount of convex tokens sent to the reward recipient.\n    event ClaimRewards(bool success, uint256 amountCurve, uint256 amountConvex);\n\n    /// @notice Emitted when ethereum is sent to the transmuter buffer.\n    ///\n    /// @param amount The amount of ethereum that was reclaimed.\n    event ReclaimEth(uint256 amount);\n\n    /// @notice Emitted when a token is swept to the admin.\n    ///\n    /// @param token  The token that was swept.\n    /// @param amount The amount of the token that was swept.\n    event SweepToken(address token, uint256 amount);\n\n    /// @notice Emitted when ethereum is swept to the admin.\n    ///\n    /// @param amount The amount of the token that was swept.\n    event SweepEth(uint256 amount);\n\n    /// @notice The admin.\n    address public admin;\n\n    /// @notice The current pending admin.\n    address public pendingAdmin;\n\n    /// @notice The operator.\n    address public operator;\n\n    // @notice The reward receiver.\n    address public rewardReceiver;\n\n    /// @notice The transmuter buffer.\n    address public transmuterBuffer;\n\n    /// @notice The wrapped ethereum token.\n    IWETH9 public weth;\n\n    /// @notice The curve token.\n    IERC20 public immutable curveToken;\n\n    /// @notice The meta pool contract.\n    IEthStableMetaPool public immutable metaPool;\n\n    /// @notice The amount of slippage that will be tolerated when depositing and withdrawing assets\n    ///         from the meta pool. In units of basis points.\n    uint256 public metaPoolSlippage;\n\n    /// @notice The convex token.\n    IConvexToken public immutable convexToken;\n\n    /// @notice The convex booster contract.\n    IConvexBooster public immutable convexBooster;\n\n    /// @notice The convex rewards contract.\n    IConvexRewards public immutable convexRewards;\n\n    /// @notice The convex pool identifier.\n    uint256 public immutable convexPoolId;\n\n    /// @dev A cache of the tokens that the meta pool supports.\n    IERC20[NUM_META_COINS] private _metaPoolAssetCache;\n\n    /// @dev A modifier which reverts if the message sender is not the admin.\n    modifier onlyAdmin() {\n        if (msg.sender != admin) {\n            revert Unauthorized(\"Not admin\");\n        }\n        _;\n    }\n\n    /// @dev A modifier which reverts if the message sender is not the operator.\n    modifier onlyOperator() {\n        if (msg.sender != operator) {\n            revert Unauthorized(\"Not operator\");\n        }\n        _;\n    }\n\n    constructor(InitializationParams memory params) {\n        admin            = params.admin;\n        operator         = params.operator;\n        rewardReceiver   = params.rewardReceiver;\n        transmuterBuffer = params.transmuterBuffer;\n        weth             = params.weth;\n        curveToken       = params.curveToken;\n        metaPool         = params.metaPool;\n        metaPoolSlippage = params.metaPoolSlippage;\n        convexToken      = params.convexToken;\n        convexBooster    = params.convexBooster;\n        convexRewards    = params.convexRewards;\n        convexPoolId     = params.convexPoolId;\n\n        for (uint256 i = 0; i < NUM_META_COINS; i++) {\n            _metaPoolAssetCache[i] = params.metaPool.coins(i);\n            if (_metaPoolAssetCache[i] == IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n                _metaPoolAssetCache[i] = weth;\n            }\n        }\n\n        emit AdminUpdated(admin);\n        emit OperatorUpdated(operator);\n        emit RewardReceiverUpdated(rewardReceiver);\n        emit TransmuterBufferUpdated(transmuterBuffer);\n        emit MetaPoolSlippageUpdated(metaPoolSlippage);\n    }\n\n    receive() external payable { }\n\n    /// @notice Gets the amount of meta pool tokens that this contract has in reserves.\n    ///\n    /// @return The reserves.\n    function metaPoolReserves() external view returns (uint256) {\n        return metaPool.balanceOf(address(this));\n    }\n\n    /// @notice Gets the amount of a meta pool asset that this contract has in reserves.\n    ///\n    /// @param asset The meta pool asset.\n    ///\n    /// @return The reserves.\n    function metaPoolAssetReserves(MetaPoolAsset asset) external view returns (uint256) {\n        IERC20 token = getTokenForMetaPoolAsset(asset);\n        if (asset == MetaPoolAsset.ETH) {\n            return address(this).balance + token.balanceOf(address(this));\n        }\n        return token.balanceOf(address(this));\n    }\n\n    /// @notice Gets the amount of ethereum that one alETH is worth.\n    ///\n    /// @return The amount of the underlying token.\n    function exchangeRate() public view returns (uint256) {\n        IERC20 alETH = getTokenForMetaPoolAsset(MetaPoolAsset.ALETH);\n\n        uint256[NUM_META_COINS] memory metaBalances = metaPool.get_balances();\n        return metaPool.get_dy(\n            int128(uint128(uint256(MetaPoolAsset.ALETH))),\n            int128(uint128(uint256(MetaPoolAsset.ETH))),\n            10**SafeERC20.expectDecimals(address(alETH)),\n            metaBalances\n        );\n    }\n\n    /// @notice Gets the amount of curve tokens and convex tokens that can be claimed.\n    ///\n    /// @return amountCurve  The amount of curve tokens available.\n    /// @return amountConvex The amount of convex tokens available.\n    function claimableRewards() public view returns (uint256 amountCurve, uint256 amountConvex) {\n        amountCurve  = convexRewards.earned(address(this));\n        amountConvex = _getEarnedConvex(amountCurve);\n    }\n\n    /// @notice Gets the ERC20 token associated with a meta pool asset.\n    ///\n    /// @param asset The asset to get the token for.\n    ///\n    /// @return The token.\n    function getTokenForMetaPoolAsset(MetaPoolAsset asset) public view returns (IERC20) {\n        uint256 index = uint256(asset);\n        if (index >= NUM_META_COINS) {\n            revert IllegalArgument(\"Asset index out of bounds\");\n        }\n        return _metaPoolAssetCache[index];\n    }\n\n    /// @notice Begins the 2-step process of setting the administrator.\n    ///\n    /// The caller must be the admin. Setting the pending timelock to the zero address will stop\n    /// the process of setting a new timelock.\n    ///\n    /// @param value The value to set the pending timelock to.\n    function setPendingAdmin(address value) external onlyAdmin {\n        pendingAdmin = value;\n        emit PendingAdminUpdated(value);\n    }\n\n    /// @notice Completes the 2-step process of setting the administrator.\n    ///\n    /// The pending admin must be set and the caller must be the pending admin. After this function\n    /// is successfully executed, the admin will be set to the pending admin and the pending admin\n    /// will be reset.\n    function acceptAdmin() external {\n        if (pendingAdmin == address(0)) {\n            revert IllegalState(\"Pending admin unset\");\n        }\n\n        if (pendingAdmin != msg.sender) {\n            revert Unauthorized(\"Not pending admin\");\n        }\n\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n\n        emit AdminUpdated(admin);\n        emit PendingAdminUpdated(address(0));\n    }\n\n    /// @notice Sets the operator.\n    ///\n    /// The caller must be the admin.\n    ///\n    /// @param value The value to set the admin to.\n    function setOperator(address value) external onlyAdmin {\n        operator = value;\n        emit OperatorUpdated(value);\n    }\n\n    /// @notice Sets the reward receiver.\n    ///\n    /// @param value The value to set the reward receiver to.\n    function setRewardReceiver(address value) external onlyAdmin {\n        rewardReceiver = value;\n        emit RewardReceiverUpdated(value);\n    }\n\n    /// @notice Sets the transmuter buffer.\n    ///\n    /// @param value The value to set the transmuter buffer to.\n    function setTransmuterBuffer(address value) external onlyAdmin {\n        transmuterBuffer = value;\n        emit TransmuterBufferUpdated(value);\n    }\n\n    /// @notice Sets the slippage that will be tolerated when depositing and withdrawing meta pool\n    ///         assets. The slippage has a resolution of 6 decimals.\n    ///\n    /// The operator is allowed to set the slippage because it is a volatile parameter that may need\n    /// fine adjustment in a short time window.\n    ///\n    /// @param value The value to set the slippage to.\n    function setMetaPoolSlippage(uint256 value) external onlyOperator {\n        if (value > SLIPPAGE_PRECISION) {\n            revert IllegalArgument(\"Slippage not in range\");\n        }\n        metaPoolSlippage = value;\n        emit MetaPoolSlippageUpdated(value);\n    }\n\n    /// @notice Mints meta pool tokens with a combination of assets.\n    ///\n    /// @param amounts The amounts of the assets to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function mintMetaPoolTokens(\n        uint256[NUM_META_COINS] calldata amounts\n    ) external lock onlyOperator returns (uint256 minted) {\n        return _mintMetaPoolTokens(amounts);\n    }\n\n    /// @notice Mints meta pool tokens with an asset.\n    ///\n    /// @param asset  The asset to deposit into the meta pool.\n    /// @param amount The amount of the asset to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function mintMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256 minted) {\n        return _mintMetaPoolTokens(asset, amount);\n    }\n\n    /// @notice Burns meta pool tokens to withdraw an asset.\n    ///\n    /// @param asset  The asset to withdraw.\n    /// @param amount The amount of meta pool tokens to burn.\n    ///\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\n    function burnMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256 withdrawn) {\n        return _burnMetaPoolTokens(asset, amount);\n    }\n\n    /// @notice Deposits and stakes meta pool tokens into convex.\n    ///\n    /// @param amount The amount of meta pool tokens to deposit.\n    ///\n    /// @return success If the tokens were successfully deposited.\n    function depositMetaPoolTokens(\n        uint256 amount\n    ) external lock onlyOperator returns (bool success) {\n        return _depositMetaPoolTokens(amount);\n    }\n\n    /// @notice Withdraws and unwraps meta pool tokens from convex.\n    ///\n    /// @param amount The amount of meta pool tokens to withdraw.\n    ///\n    /// @return success If the tokens were successfully withdrawn.\n    function withdrawMetaPoolTokens(\n        uint256 amount\n    ) external lock onlyOperator returns (bool success) {\n        return _withdrawMetaPoolTokens(amount);\n    }\n\n    /// @notice Claims convex, curve, and auxiliary rewards.\n    ///\n    /// @return success If the claim was successful.\n    function claimRewards() external lock onlyOperator returns (bool success) {\n        success = convexRewards.getReward();\n\n        uint256 curveBalance  = curveToken.balanceOf(address(this));\n        uint256 convexBalance = convexToken.balanceOf(address(this));\n\n        SafeERC20.safeTransfer(address(curveToken), rewardReceiver, curveBalance);\n        SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance);\n\n        emit ClaimRewards(success, curveBalance, convexBalance);\n    }\n\n    /// @notice Flushes meta pool assets into convex by minting meta pool tokens using the assets,\n    ///         and then depositing the meta pool tokens into convex.\n    ///\n    /// This function is provided for ease of use.\n    ///\n    /// @param amounts The amounts of the meta pool assets to flush.\n    ///\n    /// @return The amount of meta pool tokens deposited into convex.\n    function flush(\n        uint256[NUM_META_COINS] calldata amounts\n    ) external lock onlyOperator returns (uint256) {\n        uint256 mintedMetaPoolTokens = _mintMetaPoolTokens(amounts);\n\n        if (!_depositMetaPoolTokens(mintedMetaPoolTokens)) {\n            revert IllegalState(\"Deposit into convex failed\");\n        }\n\n        return mintedMetaPoolTokens;\n    }\n\n    /// @notice Flushes a meta pool asset into convex by minting meta pool tokens using the asset,\n    ///         and then depositing the meta pool tokens into convex.\n    ///\n    /// This function is provided for ease of use.\n    ///\n    /// @param asset  The meta pool asset to flush.\n    /// @param amount The amount of the meta pool asset to flush.\n    ///\n    /// @return The amount of meta pool tokens deposited into convex.\n    function flush(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) external lock onlyOperator returns (uint256) {\n        uint256 mintedMetaPoolTokens = _mintMetaPoolTokens(asset, amount);\n\n        if (!_depositMetaPoolTokens(mintedMetaPoolTokens)) {\n            revert IllegalState(\"Deposit into convex failed\");\n        }\n\n        return mintedMetaPoolTokens;\n    }\n\n    /// @notice Recalls ethereum into reserves by withdrawing meta pool tokens from convex and\n    ///         burning the meta pool tokens for ethereum.\n    ///\n    /// This function is provided for ease of use.\n    ///\n    /// @param amount The amount of the meta pool tokens to withdraw from convex and burn.\n    ///\n    /// @return The amount of ethereum recalled.\n    function recall(uint256 amount) external lock onlyOperator returns (uint256) {\n        if (!_withdrawMetaPoolTokens(amount)) {\n            revert IllegalState(\"Withdraw from convex failed\");\n        }\n        return _burnMetaPoolTokens(MetaPoolAsset.ETH, amount);\n    }\n\n    /// @notice Reclaims a three pool asset to the transmuter buffer.\n    ///\n    /// @param amount The amount of ethereum to reclaim.\n    function reclaimEth(uint256 amount) public lock onlyAdmin {\n        uint256 balance;\n        if (amount > (balance = weth.balanceOf(address(this)))) weth.deposit{value: amount - balance}();\n\n        SafeERC20.safeTransfer(address(weth), transmuterBuffer, amount);\n\n        IERC20TokenReceiver(transmuterBuffer).onERC20Received(address(weth), amount);\n\n        emit ReclaimEth(amount);\n    }\n\n    /// @notice Sweeps a token out of the contract to the admin.\n    ///\n    /// @param token  The token to sweep.\n    /// @param amount The amount of the token to sweep.\n    function sweepToken(address token, uint256 amount) external lock onlyAdmin {\n        SafeERC20.safeTransfer(address(token), msg.sender, amount);\n        emit SweepToken(token, amount);\n    }\n\n    /// @notice Sweeps ethereum out of the contract to the admin.\n    ///\n    /// @param amount The amount of ethereum to sweep.\n    ///\n    /// @return result The result from the call to transfer ethereum.\n    function sweepEth(\n        uint256 amount\n    ) external lock onlyAdmin returns (bytes memory result) {\n        (bool success, bytes memory result) = admin.call{value: amount}(new bytes(0));\n        if (!success) {\n            revert IllegalState(\"Transfer failed\");\n        }\n\n        emit SweepEth(amount);\n\n        return result;\n    }\n\n    /// @inheritdoc IERC20TokenReceiver\n    ///\n    /// @dev This function is required in order to receive tokens from the conduit.\n    function onERC20Received(address token, uint256 value) external { /* noop */ }\n\n    /// @dev Gets the amount of convex that will be minted for an amount of curve tokens.\n    ///\n    /// @param amountCurve The amount of curve tokens.\n    ///\n    /// @return The amount of convex tokens.\n    function _getEarnedConvex(uint256 amountCurve) internal view returns (uint256) {\n        uint256 supply      = convexToken.totalSupply();\n        uint256 cliff       = supply / convexToken.reductionPerCliff();\n        uint256 totalCliffs = convexToken.totalCliffs();\n\n        if (cliff >= totalCliffs) return 0;\n\n        uint256 reduction = totalCliffs - cliff;\n        uint256 earned    = amountCurve * reduction / totalCliffs;\n\n        uint256 available = convexToken.maxSupply() - supply;\n        return earned > available ? available : earned;\n    }\n\n    /// @dev Mints meta pool tokens with a combination of assets.\n    ///\n    /// @param amounts The amounts of the assets to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function _mintMetaPoolTokens(\n        uint256[NUM_META_COINS] calldata amounts\n    ) internal returns (uint256 minted) {\n        IERC20[NUM_META_COINS] memory tokens = _metaPoolAssetCache;\n\n        uint256 total = 0;\n        for (uint256 i = 0; i < NUM_META_COINS; i++) {\n            // Skip over approving WETH since we are directly swapping ETH.\n            if (i == uint256(MetaPoolAsset.ETH)) continue;\n\n            if (amounts[i] == 0) continue;\n\n            total += amounts[i];\n\n            // For assets like USDT, the approval must be first set to zero before updating it.\n            SafeERC20.safeApprove(address(tokens[i]), address(metaPool), 0);\n            SafeERC20.safeApprove(address(tokens[i]), address(metaPool), amounts[i]);\n        }\n\n        // Calculate the minimum amount of meta pool tokens that we are expecting out when\n        // adding liquidity for all of the assets. This value is based off the optimistic\n        // assumption that one of each token is approximately equal to one meta pool token.\n        uint256 expectedOutput    = total * CURVE_PRECISION / metaPool.get_virtual_price();\n        uint256 minimumMintAmount = expectedOutput * metaPoolSlippage / SLIPPAGE_PRECISION;\n\n        uint256 value = amounts[uint256(MetaPoolAsset.ETH)];\n\n        // Ensure that the contract has the amount of ethereum required.\n        if (value > address(this).balance) weth.withdraw(value - address(this).balance);\n\n        // Add the liquidity to the pool.\n        minted = metaPool.add_liquidity{value: value}(amounts, minimumMintAmount);\n\n        emit MintMetaPoolTokens(amounts, minted);\n    }\n\n    /// @dev Mints meta pool tokens with an asset.\n    ///\n    /// @param asset  The asset to deposit into the meta pool.\n    /// @param amount The amount of the asset to deposit.\n    ///\n    /// @return minted The number of meta pool tokens minted.\n    function _mintMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) internal returns (uint256 minted) {\n        uint256[NUM_META_COINS] memory amounts;\n        amounts[uint256(asset)] = amount;\n\n        // Calculate the minimum amount of meta pool tokens that we are expecting out when\n        // adding liquidity for all of the assets. This value is based off the optimistic\n        // assumption that one of each token is approximately equal to one meta pool token.\n        uint256 minimumMintAmount = amount * metaPoolSlippage / SLIPPAGE_PRECISION;\n\n        // Set an approval if not working with ethereum.\n        if (asset != MetaPoolAsset.ETH) {\n            IERC20 token = getTokenForMetaPoolAsset(asset);\n\n            // For assets like USDT, the approval must be first set to zero before updating it.\n            SafeERC20.safeApprove(address(token), address(metaPool), 0);\n            SafeERC20.safeApprove(address(token), address(metaPool), amount);\n        }\n\n        uint256 value = asset == MetaPoolAsset.ETH\n            ? amounts[uint256(MetaPoolAsset.ETH)]\n            : 0;\n\n        // Ensure that the contract has the amount of ethereum required.\n        if (value > address(this).balance) weth.withdraw(value - address(this).balance);\n\n        // Add the liquidity to the pool.\n        minted = metaPool.add_liquidity{value: value}(amounts, minimumMintAmount);\n\n        emit MintMetaPoolTokens(asset, amount, minted);\n    }\n\n    /// @dev Burns meta pool tokens to withdraw an asset.\n    ///\n    /// @param asset  The asset to withdraw.\n    /// @param amount The amount of meta pool tokens to burn.\n    ///\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\n    function _burnMetaPoolTokens(\n        MetaPoolAsset asset,\n        uint256 amount\n    ) internal returns (uint256 withdrawn) {\n        uint256 index = uint256(asset);\n\n        // Calculate the minimum amount of the meta pool asset that we are expecting out when\n        // removing single sided liquidity. This value is based off the optimistic assumption that\n        // one of each token is approximately equal to one meta pool lp token.\n        uint256 expectedOutput   = amount * metaPool.get_virtual_price() / CURVE_PRECISION;\n        uint256 minimumAmountOut = expectedOutput * metaPoolSlippage / SLIPPAGE_PRECISION;\n\n        // Remove the liquidity from the pool.\n        withdrawn = metaPool.remove_liquidity_one_coin(\n            amount,\n            int128(uint128(index)),\n            minimumAmountOut\n        );\n\n        emit BurnMetaPoolTokens(asset, amount, withdrawn);\n    }\n\n    /// @dev Deposits and stakes meta pool tokens into convex.\n    ///\n    /// @param amount The amount of meta pool tokens to deposit.\n    ///\n    /// @return success If the tokens were successfully deposited.\n    function _depositMetaPoolTokens(uint256 amount) internal returns (bool success) {\n        SafeERC20.safeApprove(address(metaPool), address(convexBooster), 0);\n        SafeERC20.safeApprove(address(metaPool), address(convexBooster), amount);\n\n        success = convexBooster.deposit(convexPoolId, amount, true /* always stake into rewards */);\n\n        emit DepositMetaPoolTokens(amount, success);\n    }\n\n    /// @dev Withdraws and unwraps meta pool tokens from convex.\n    ///\n    /// @param amount The amount of meta pool tokens to withdraw.\n    ///\n    /// @return success If the tokens were successfully withdrawn.\n    function _withdrawMetaPoolTokens(uint256 amount) internal returns (bool success) {\n        success = convexRewards.withdrawAndUnwrap(amount, false /* never claim */);\n        emit WithdrawMetaPoolTokens(amount, success);\n    }\n\n    /// @dev Claims convex, curve, and auxiliary rewards.\n    ///\n    /// @return success If the claim was successful.\n    function _claimRewards() internal returns (bool success) {\n        success = convexRewards.getReward();\n\n        uint256 curveBalance  = curveToken.balanceOf(address(this));\n        uint256 convexBalance = convexToken.balanceOf(address(this));\n\n        SafeERC20.safeTransfer(address(curveToken), rewardReceiver, curveBalance);\n        SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance);\n\n        emit ClaimRewards(success, curveBalance, convexBalance);\n    }\n\n    /// @dev Gets the minimum of two integers.\n    ///\n    /// @param x The first integer.\n    /// @param y The second integer.\n    ///\n    /// @return The minimum value.\n    function min(uint256 x , uint256 y) private pure returns (uint256) {\n        return x > y ? y : x;\n    }\n\n    /// @dev Gets the absolute value of the difference of two integers.\n    ///\n    /// @param x The first integer.\n    /// @param y The second integer.\n    ///\n    /// @return The absolute value.\n    function abs(uint256 x , uint256 y) private pure returns (uint256) {\n        return x > y ? x - y : y - x;\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/curve/IEthStableMetaPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nuint256 constant N_COINS = 2;\n\ninterface IEthStableMetaPool is IERC20 {\n    function get_balances() external view returns (uint256[N_COINS] memory);\n\n    function coins(uint256 index) external view returns (IERC20);\n\n    function A() external view returns (uint256);\n    \n    function fee() external view returns (uint256);\n    \n    function totalSupply() external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function calc_token_amount(\n        uint256[N_COINS] calldata amounts,\n        bool deposit\n    ) external view returns (uint256 amount);\n\n    function add_liquidity(\n        uint256[N_COINS] calldata amounts,\n        uint256 minimumMintAmount\n    ) external payable returns (uint256 minted);\n\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256[N_COINS] calldata balances\n    ) external view returns (uint256 dy);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 minimumDy\n    ) external payable returns (uint256);\n\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minimumDy, address receiver) external returns (uint256);\n\n    function remove_liquidity(uint256 amount, uint256[N_COINS] calldata minimumAmounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[N_COINS] calldata amounts,\n        uint256 maximumBurnAmount\n    ) external returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 tokenAmount,\n        int128 i,\n        uint256 minimumAmount\n    ) external returns (uint256);\n\n    function get_price_cumulative_last() external view returns (uint256[N_COINS] calldata);\n\n    function block_timestamp_last() external view returns (uint256);\n\n    function get_twap_balances(\n        uint256[N_COINS] calldata firstBalances,\n        uint256[N_COINS] calldata lastBalances,\n        uint256 timeElapsed\n    ) external view returns (uint256[N_COINS] calldata);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256[N_COINS] calldata balances\n    ) external view returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/scripts/rebalancer/AlEthPool.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport { IERC20 } from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport { DSTestPlus } from \"../../test/utils/DSTestPlus.sol\";\n\nimport { IEthStableMetaPool } from \"../../interfaces/external/curve/IEthStableMetaPool.sol\";\nimport { IERC20TokenReceiver } from \"../../interfaces/IERC20TokenReceiver.sol\";\nimport { IConvexRewards } from \"../../interfaces/external/convex/IConvexRewards.sol\";\nimport { EthAssetManager } from \"../../EthAssetManager.sol\";\n\ncontract AlEthPoolTest is DSTestPlus {\n\tIEthStableMetaPool constant metaPool = IEthStableMetaPool(0xC4C319E2D4d66CcA4464C0c2B32c9Bd23ebe784e);\n\tEthAssetManager elixir = EthAssetManager(payable(0xe761bf731A06fE8259FeE05897B2687D56933110));\n\tIConvexRewards convex = IConvexRewards(0x48Bc302d8295FeA1f8c3e7F57D4dDC9981FEE410);\n\tIERC20 alETH = IERC20(0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6);\n\tIERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\tint128 ethAsset = 0;\n\tint128 alEthAsset = 1;\n\tuint256 baseDx = 100000;\n\tuint256 minAmount = 0;\n\tuint256 targetDy;\n\tuint256 totalSupply;\n\tuint256 poolAlEthRatio;\n\tuint256 poolEthRatio;\n\tuint256[2] metaPoolBalances;\n\tuint256 elixirPoolTokenBalance;\n\tuint256 elixirAlEthAccountBalance;\n\tuint256 elixirEthAccountBalance;\n\tuint256 elixirWethAccountBalance;\n\tuint256 elixirEthPoolBalance;\n\tuint256 elixirAlEthPoolBalance;\n\n\tfunction setUp() public {\n\t\t// SET DESIRED VALUE FOR DY HERE (exchange rate of aleth/eth)\n\t\ttargetDy = 99111;\n\n\t\ttotalSupply = metaPool.totalSupply();\n\t\tmetaPoolBalances = metaPool.get_balances();\n\t\tpoolAlEthRatio = (metaPoolBalances[1] * 10000) / totalSupply;\n\t\tpoolEthRatio = (metaPoolBalances[0] * 10000) / totalSupply;\n\n\t\tuint256 convexBalance = convex.balanceOf(address(elixir));\n\t\taddress operator = elixir.operator();\n\n\t\t// Withdraw pool tokens from convex\n\t\thevm.startPrank(operator, operator);\n\t\telixir.withdrawMetaPoolTokens(convexBalance);\n\t\thevm.stopPrank();\n\n\t\telixirAlEthAccountBalance = alETH.balanceOf(address(elixir));\n\t\telixirWethAccountBalance = wETH.balanceOf(address(elixir));\n\t\telixirEthAccountBalance = elixirWethAccountBalance;\n\t\telixirPoolTokenBalance = metaPool.balanceOf(address(elixir));\n\t\telixirAlEthPoolBalance = (elixirPoolTokenBalance * poolAlEthRatio) / 10000;\n\t\telixirEthPoolBalance = (elixirPoolTokenBalance * poolEthRatio) / 10000;\n\n\t\t// Make sure elixir can make necessary amount of deposits or withdrawals\n\t\t// to get a final liquidity calculation\n\t\tdeal(address(metaPool), address(elixir), elixirPoolTokenBalance);\n\t\tdeal(address(alETH), address(elixir), metaPoolBalances[1]);\n\t\thevm.deal(address(elixir), elixirWethAccountBalance);\n\t\thevm.deal(address(elixir), metaPoolBalances[0]);\n\t}\n\n\t// Test that the change in alETH achieves the desired dy\n\tfunction testAlEthRebalance() external {\n\t\t// Amount to rebalance alETH\n\t\tint256 alEthRebalance = getAlEthChange();\n\n\t\thevm.startPrank(address(elixir), address(elixir));\n\n\t\taddOrRemoveLiquidity(alEthRebalance, alEthAsset);\n\n\t\tuint256 dy = metaPool.get_dy(alEthAsset, ethAsset, baseDx);\n\n\t\temit log_named_uint(\"updated dy\", dy);\n\n\t\thevm.stopPrank();\n\n\t\tassertApproxEq(targetDy, dy, 15);\n\t}\n\n\t// Test that the change in ETH achieves the desired dy\n\tfunction testEthRebalance() external {\n\t\t// Amount to rebalance ETH\n\t\tint256 ethRebalance = getEthChange();\n\n\t\thevm.startPrank(address(elixir), address(elixir));\n\n\t\taddOrRemoveLiquidity(ethRebalance, ethAsset);\n\n\t\tuint256 dy = metaPool.get_dy(alEthAsset, ethAsset, baseDx);\n\n\t\temit log_named_uint(\"updated dy\", dy);\n\n\t\thevm.stopPrank();\n\n\t\tassertApproxEq(targetDy, dy, 15);\n\t}\n\n\t// Get the amount of alETH to add or remove from the pool\n\tfunction getAlEthChange() public returns (int256) {\n\t\tuint256 dy;\n\t\tuint256 startBalance = metaPoolBalances[1];\n\t\tuint256 endBalance;\n\t\tint256 alEthChange;\n\t\tint256 elixirDelta;\n\t\tuint256[2] memory targetBalances;\n\n\t\thevm.startPrank(address(elixir), address(elixir));\n\n\t\talETH.approve(address(metaPool), startBalance);\n\n\t\tdy = metaPool.get_dy(alEthAsset, ethAsset, baseDx);\n\t\temit log_named_uint(\"current dy\", dy);\n\t\temit log_named_uint(\"target dy\", targetDy);\n\n\t\t// Logic to add or remove liquidity\n\t\tloop(targetDy, dy, alEthAsset);\n\n\t\t// Get balances after liquidity change\n\t\ttargetBalances = metaPool.get_balances();\n\t\tendBalance = targetBalances[1];\n\n\t\talEthChange = (int256(endBalance) - int256(startBalance));\n\n\t\t// If alEthChange is greater than 0 alETH needs to be added to the pool\n\t\tif (alEthChange > 0) {\n\t\t\telixirDelta = int256(elixirAlEthAccountBalance) - alEthChange;\n\t\t\t// If the delta is less than 0 the elixir does not\n\t\t\t// have enough alETH to deposit into the pool\n\t\t\tif (elixirDelta < 0) {\n\t\t\t\temit log(\"INSUFFICIENT ELIXIR ALETH ACCOUNT BALANCE\");\n\t\t\t\temit log_named_int(\"alETH account balance needed to reach target\", alEthChange);\n\t\t\t\temit log_named_uint(\"Elixir alETH account balance\", elixirAlEthAccountBalance);\n\t\t\t\temit log_named_uint(\"Amount short\", uint256(elixirDelta * -1));\n\n\t\t\t\trevertPoolChanges(alEthChange, alEthAsset);\n\t\t\t\thevm.stopPrank();\n\n\t\t\t\t// Return the max amount of alETH the elixir could add to the pool\n\t\t\t\treturn int256(elixirAlEthAccountBalance);\n\t\t\t}\n\t\t}\n\t\t// If alEthChange is less than 0 alETH needs to be removed from the pool\n\t\telse {\n\t\t\telixirDelta = int256(elixirAlEthPoolBalance) + alEthChange;\n\t\t\t// If the delta is less than 0 the elixir does not\n\t\t\t// have enough alETH in the pool to withdraw\n\t\t\tif (elixirDelta < 0) {\n\t\t\t\temit log(\"INSUFFICIENT ELIXIR ALETH POOL BALANCE\");\n\t\t\t\temit log_named_int(\"alETH pool balance needed to reach target\", (alEthChange * -1));\n\t\t\t\temit log_named_uint(\"Elixir alETH pool balance\", elixirAlEthPoolBalance);\n\t\t\t\temit log_named_uint(\"Amount short\", uint256(elixirDelta * -1));\n\n\t\t\t\trevertPoolChanges(alEthChange, alEthAsset);\n\t\t\t\thevm.stopPrank();\n\n\t\t\t\t// Return the max amount of alETH the elixir can remove from the pool\n\t\t\t\treturn int256(int256(elixirAlEthPoolBalance) * -1);\n\t\t\t}\n\t\t}\n\n\t\temit log_named_int(\"alETH liquidity change in wei\", alEthChange);\n\t\temit log_named_int(\"alETH liquidity change in eth\", alEthChange / 1e18);\n\n\t\t// Revert pool changes made to test adding or removing liquidity based on calculations\n\t\trevertPoolChanges(alEthChange, alEthAsset);\n\t\thevm.stopPrank();\n\n\t\t// Return amount of alETH required to achieve the target exchange rate\n\t\treturn alEthChange;\n\t}\n\n\t// Get the amount of ETH to add or remove from the pool\n\tfunction getEthChange() public returns (int256) {\n\t\tuint256 dy;\n\t\tuint256 startBalance = metaPoolBalances[0];\n\t\tuint256 endBalance;\n\t\tint256 ethChange;\n\t\tint256 elixirDelta;\n\t\tuint256[2] memory targetBalances;\n\n\t\thevm.startPrank(address(elixir), address(elixir));\n\n\t\tdy = metaPool.get_dy(alEthAsset, ethAsset, baseDx);\n\t\temit log_named_uint(\"current dy\", dy);\n\t\temit log_named_uint(\"target dy\", targetDy);\n\n\t\t// Logic to add or remove liquidity\n\t\tloop(targetDy, dy, ethAsset);\n\n\t\t// Get balances after change\n\t\ttargetBalances = metaPool.get_balances();\n\t\tendBalance = targetBalances[0];\n\n\t\tethChange = int256(endBalance) - int256(startBalance);\n\n\t\t// If ethChange is greater than 0 ETH needs to be added to the pool\n\t\tif (ethChange > 0) {\n\t\t\telixirDelta = int256(elixirEthAccountBalance) - ethChange;\n\t\t\t// If the delta is less than 0 the elixir does not\n\t\t\t// have enough ETH to deposit into the pool\n\t\t\tif (elixirDelta < 0) {\n\t\t\t\temit log(\"INSUFFICIENT ELIXIR ETH ACCOUNT BALANCE\");\n\t\t\t\temit log_named_int(\"ETH account balance needed to reach target\", ethChange);\n\t\t\t\temit log_named_uint(\"Elixir ETH account balance\", elixirEthAccountBalance);\n\t\t\t\temit log_named_uint(\"Amount short\", uint256(elixirDelta * -1));\n\n\t\t\t\trevertPoolChanges(ethChange, ethAsset);\n\t\t\t\thevm.stopPrank();\n\n\t\t\t\t// Return the max amount of ETH the elixir could add to the pool\n\t\t\t\treturn int256(elixirEthAccountBalance);\n\t\t\t}\n\t\t}\n\t\t// If ethChange is less than 0 ETH needs to be removed from the pool\n\t\telse {\n\t\t\telixirDelta = int256(elixirEthPoolBalance) + ethChange;\n\t\t\t// If the delta is less than 0 the elixir does not\n\t\t\t// have enough ETH in the pool to withdraw\n\t\t\tif (elixirDelta < 0) {\n\t\t\t\temit log(\"INSUFFICIENT ELIXIR ETH POOL BALANCE\");\n\t\t\t\temit log_named_int(\"ETH pool balance needed to reach target\", (ethChange * -1));\n\t\t\t\temit log_named_uint(\"Elixir ETH pool balance\", elixirEthPoolBalance);\n\t\t\t\temit log_named_uint(\"Amount short\", uint256(elixirDelta * -1));\n\n\t\t\t\trevertPoolChanges(ethChange, ethAsset);\n\t\t\t\thevm.stopPrank();\n\n\t\t\t\t// Return the max amount of ETH the elixir can remove from the pool\n\t\t\t\treturn int256(int256(elixirEthPoolBalance) * -1);\n\t\t\t}\n\t\t}\n\n\t\temit log_named_int(\"ETH liquidity change in wei\", ethChange);\n\t\temit log_named_int(\"ETH liquidity change in eth\", ethChange / 1e18);\n\n\t\t// Revert pool changes so account can be used to test adding or removing liquidity\n\t\trevertPoolChanges(ethChange, ethAsset);\n\t\thevm.stopPrank();\n\n\t\t// Return amount of ETH required to achieve the target exchange rate\n\t\treturn ethChange;\n\t}\n\n\t// Until target dy is reached add or remove liquidity\n\tfunction loop(\n\t\tuint256 target,\n\t\tuint256 dy,\n\t\tint128 token\n\t) public {\n\t\t// Amount to increase or decrease liquidity by\n\t\tuint256 amount = 0.1e18;\n\t\tbool solved = false;\n\n\t\twhile (!solved) {\n\t\t\tbalancePool(amount, dy, target, token);\n\t\t\tsolved = dxSolved(target);\n\t\t}\n\t}\n\n\t// Add or remove liquidity by amount\n\tfunction balancePool(\n\t\tuint256 amount,\n\t\tuint256 dy,\n\t\tuint256 target,\n\t\tint128 token\n\t) public {\n\t\tif (dy > target) {\n\t\t\t// Determine whether to add alETH or remove ETH\n\t\t\ttoken == 1\n\t\t\t\t? metaPool.add_liquidity([uint256(0), amount], minAmount)\n\t\t\t\t: metaPool.remove_liquidity_one_coin(amount, token, minAmount);\n\t\t} else {\n\t\t\ttoken == 1\n\t\t\t\t? metaPool.remove_liquidity_one_coin(amount, token, minAmount)\n\t\t\t\t: metaPool.add_liquidity{ value: amount }([amount, uint256(0)], minAmount);\n\t\t}\n\t}\n\n\t// Check if target dy has been reached\n\tfunction dxSolved(uint256 target) public view returns (bool) {\n\t\tuint256 buffer = 0;\n\t\tuint256 delta;\n\t\tuint256 dy = metaPool.get_dy(alEthAsset, ethAsset, baseDx);\n\t\tif (dy == target) return true;\n\n\t\tdy > target ? delta = dy - target : delta = target - dy;\n\n\t\tif (delta <= buffer) return true;\n\n\t\treturn false;\n\t}\n\n\t// Add or remove liquidity based on given amount and token\n\tfunction addOrRemoveLiquidity(int256 amount, int128 token) public {\n\t\tif (amount > 0) {\n\t\t\t// Determine whether to add ETH or alETH\n\t\t\ttoken == 1\n\t\t\t\t? metaPool.add_liquidity([uint256(0), uint256(amount)], minAmount)\n\t\t\t\t: metaPool.add_liquidity{ value: uint256(amount) }([uint256(amount), uint256(0)], minAmount);\n\t\t} else {\n\t\t\tmetaPool.remove_liquidity_one_coin(uint256(amount * -1), token, minAmount);\n\t\t}\n\t}\n\n\t// Revert liquidity changes\n\tfunction revertPoolChanges(int256 amount, int128 token) public {\n\t\tif (amount > 0) {\n\t\t\tmetaPool.remove_liquidity_one_coin(uint256(amount), token, minAmount);\n\t\t} else {\n\t\t\t// Determine whether to add ETH or alETH\n\t\t\ttoken == 1\n\t\t\t\t? metaPool.add_liquidity([uint256(0), uint256(amount * -1)], minAmount)\n\t\t\t\t: metaPool.add_liquidity{ value: uint256(amount * -1) }([uint256(amount * -1), uint256(0)], minAmount);\n\t\t}\n\t}\n}\n"
    },
    "submodules/v2-foundry/src/adapters/fuse/FuseTokenAdapterV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {\n    IllegalArgument,\n    IllegalState,\n    Unauthorized,\n    UnsupportedOperation\n} from \"../../base/ErrorMessages.sol\";\n\nimport {MutexLock} from \"../../base/MutexLock.sol\";\n\nimport {LibFuse} from \"../../libraries/LibFuse.sol\";\nimport {SafeERC20} from \"../../libraries/SafeERC20.sol\";\n\nimport {ICERC20} from \"../../interfaces/external/compound/ICERC20.sol\";\nimport {ITokenAdapter} from \"../../interfaces/ITokenAdapter.sol\";\nimport {IWETH9} from \"../../interfaces/external/IWETH9.sol\";\n\nstruct InitializationParams {\n    address alchemist;\n    address token;\n    address underlyingToken;\n}\n\ncontract FuseTokenAdapterV1 is ITokenAdapter, MutexLock {\n    string public override version = \"1.0.0\";\n\n    address public immutable alchemist;\n    address public immutable override token;\n    address public immutable override underlyingToken;\n\n    /// @dev Fuse error code for a noop.\n    uint256 private constant NO_ERROR = 0;\n\n    /// @dev Scalar for all fixed point numbers returned by Fuse.\n    uint256 private constant FIXED_POINT_SCALAR = 1e18;\n\n    /// @notice An error used when a call to Fuse fails.\n    ///\n    /// @param code The error code.\n    error FuseError(uint256 code);\n\n    constructor(InitializationParams memory params) {\n        alchemist       = params.alchemist;\n        token           = params.token;\n        underlyingToken = params.underlyingToken;\n    }\n\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\n    modifier onlyAlchemist() {\n        if (msg.sender != alchemist) {\n            revert Unauthorized(\"Not alchemist\");\n        }\n        _;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view returns (uint256) {\n        return LibFuse.viewExchangeRate(ICERC20(token));\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(\n        uint256 amount,\n        address recipient\n    ) external onlyAlchemist returns (uint256) {\n        SafeERC20.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        SafeERC20.safeApprove(underlyingToken, token, amount);\n\n        uint256 startingBalance = IERC20(token).balanceOf(address(this));\n\n        uint256 error;\n        if ((error = ICERC20(token).mint(amount)) != NO_ERROR) {\n            revert FuseError(error);\n        }\n\n        uint256 endingBalance = IERC20(token).balanceOf(address(this));\n        uint256 mintedAmount = endingBalance - startingBalance;\n\n        SafeERC20.safeTransfer(token, recipient, mintedAmount);\n\n        return mintedAmount;\n    }\n\n    // @inheritdoc ITokenAdapter\n    function unwrap(\n        uint256 amount,\n        address recipient\n    ) external lock onlyAlchemist returns (uint256) {\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        uint256 startingBalance = IERC20(underlyingToken).balanceOf(address(this));\n\n        uint256 error;\n        if ((error = ICERC20(token).redeem(amount)) != NO_ERROR) {\n            revert FuseError(error);\n        }\n\n        uint256 endingBalance = IERC20(underlyingToken).balanceOf(address(this));\n        uint256 redeemedAmount = endingBalance - startingBalance;\n\n        SafeERC20.safeTransfer(underlyingToken, recipient, redeemedAmount);\n\n        return redeemedAmount;\n    }\n}"
    },
    "submodules/v2-foundry/src/libraries/LibFuse.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.13;\n\nimport {FixedPointMathLib} from \"../../lib/solmate/src/utils/FixedPointMathLib.sol\";\n\nimport {ICERC20} from \"../interfaces/external/compound/ICERC20.sol\";\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Get up to date cToken data without mutating state.\n/// @author Transmissions11 (https://github.com/transmissions11/libcompound)\nlibrary LibFuse {\n    using FixedPointMathLib for uint256;\n\n    function viewUnderlyingBalanceOf(ICERC20 cToken, address user) internal view returns (uint256) {\n        return cToken.balanceOf(user).mulWadDown(viewExchangeRate(cToken));\n    }\n\n    function viewExchangeRate(ICERC20 cToken) internal view returns (uint256) {\n        uint256 accrualBlockNumberPrior = cToken.accrualBlockNumber();\n\n        if (accrualBlockNumberPrior == block.number) return cToken.exchangeRateStored();\n\n        uint256 totalCash = IERC20(cToken.underlying()).balanceOf(address(cToken));\n        uint256 borrowsPrior = cToken.totalBorrows();\n        uint256 reservesPrior = cToken.totalReserves();\n        uint256 adminFeesPrior = cToken.totalAdminFees();\n        uint256 fuseFeesPrior = cToken.totalFuseFees();\n\n        uint256 interestAccumulated; // Generated in new scope to avoid stack too deep.\n        {\n            uint256 borrowRateMantissa = cToken.interestRateModel().getBorrowRate(\n                totalCash,\n                borrowsPrior,\n                reservesPrior + adminFeesPrior + fuseFeesPrior\n            );\n\n            // Same as borrowRateMaxMantissa in CTokenInterfaces.sol\n            require(borrowRateMantissa <= 0.0005e16, \"RATE_TOO_HIGH\");\n\n            interestAccumulated = (borrowRateMantissa * (block.number - accrualBlockNumberPrior)).mulWadDown(\n                borrowsPrior\n            );\n        }\n\n        uint256 totalReserves = cToken.reserveFactorMantissa().mulWadDown(interestAccumulated) + reservesPrior;\n        uint256 totalAdminFees = cToken.adminFeeMantissa().mulWadDown(interestAccumulated) + adminFeesPrior;\n        uint256 totalFuseFees = cToken.fuseFeeMantissa().mulWadDown(interestAccumulated) + fuseFeesPrior;\n\n        uint256 totalSupply = cToken.totalSupply();\n\n        return\n            totalSupply == 0\n                ? cToken.initialExchangeRateMantissa()\n                : (totalCash + (interestAccumulated + borrowsPrior) - (totalReserves + totalAdminFees + totalFuseFees))\n                    .divWadDown(totalSupply);\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/compound/ICERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {IInterestRateModel} from \"./IInterestRateModel.sol\";\n\ninterface ICERC20 is IERC20 {\n    function mint(uint256) external returns (uint256);\n\n    function borrow(uint256) external returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function totalBorrows() external view returns (uint256);\n\n    function totalFuseFees() external view returns (uint256);\n\n    function repayBorrow(uint256) external returns (uint256);\n\n    function totalReserves() external view returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function totalAdminFees() external view returns (uint256);\n\n    function fuseFeeMantissa() external view returns (uint256);\n\n    function adminFeeMantissa() external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function accrualBlockNumber() external view returns (uint256);\n\n    function redeemUnderlying(uint256) external returns (uint256);\n\n    function redeem(uint redeemTokens) external returns (uint);\n\n    function balanceOfUnderlying(address) external returns (uint256);\n\n    function reserveFactorMantissa() external view returns (uint256);\n\n    function borrowBalanceCurrent(address) external returns (uint256);\n\n    function interestRateModel() external view returns (IInterestRateModel);\n\n    function initialExchangeRateMantissa() external view returns (uint256);\n\n    function repayBorrowBehalf(address, uint256) external returns (uint256);\n}"
    },
    "submodules/v2-foundry/lib/solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/compound/IInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.13;\n\ninterface IInterestRateModel {\n    function getBorrowRate(\n        uint256,\n        uint256,\n        uint256\n    ) external view returns (uint256);\n\n    function getSupplyRate(\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external view returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/test/FuseTokenAdapterV1.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport {\n    FuseTokenAdapterV1,\n    InitializationParams as AdapterInitializationParams\n} from \"../adapters/fuse/FuseTokenAdapterV1.sol\";\n\nimport {ICERC20} from \"../interfaces/external/compound/ICERC20.sol\";\n\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\nimport {LibFuse} from \"../libraries/LibFuse.sol\";\n\ncontract FuseTokenAdapterV1Test is DSTestPlus {\n    uint256 constant BPS = 10000;\n    ICERC20 constant fDAI = ICERC20(0x7e9cE3CAa9910cc048590801e64174957Ed41d43);\n\n    IERC20 underlyingToken;\n    FuseTokenAdapterV1 adapter;\n\n    function setUp() external {\n        underlyingToken = IERC20(fDAI.underlying());\n\n        adapter = new FuseTokenAdapterV1(AdapterInitializationParams({\n            alchemist:       address(this),\n            token:           address(fDAI),\n            underlyingToken: address(fDAI.underlying())\n        }));\n    }\n\n    function testRoundTrip() external {\n        deal(address(underlyingToken), address(this), 1e18);\n\n        SafeERC20.safeApprove(address(underlyingToken), address(adapter), 1e18);\n        uint256 wrapped = adapter.wrap(1e18, address(this));\n\n        uint256 underlyingValue = wrapped * adapter.price() / 10**SafeERC20.expectDecimals(address(fDAI));\n        assertGt(underlyingValue, 1e18 * 9900 / BPS /* 1% slippage */);\n\n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n\n        assertEq(underlyingToken.balanceOf(address(0xbeef)), unwrapped);\n        assertEq(fDAI.balanceOf(address(this)), 0);\n        assertEq(fDAI.balanceOf(address(adapter)), 0);\n    }\n\n    function testRoundTrip(uint256 amount) external {\n        hevm.assume(\n            amount >= 10**SafeERC20.expectDecimals(adapter.underlyingToken()) && \n            amount < type(uint96).max\n        );\n        \n        deal(address(underlyingToken), address(this), amount);\n\n        SafeERC20.safeApprove(address(underlyingToken), address(adapter), amount);\n        uint256 wrapped = adapter.wrap(amount, address(this));\n\n        uint256 underlyingValue = wrapped * adapter.price() / 10**SafeERC20.expectDecimals(address(fDAI));\n        assertGt(underlyingValue, amount * 9900 / BPS /* 1% slippage */);\n        \n        SafeERC20.safeApprove(adapter.token(), address(adapter), wrapped);\n        uint256 unwrapped = adapter.unwrap(wrapped, address(0xbeef));\n\n        assertEq(underlyingToken.balanceOf(address(0xbeef)), unwrapped);\n        assertEq(fDAI.balanceOf(address(this)), 0);\n        assertEq(fDAI.balanceOf(address(adapter)), 0);\n    }\n}"
    },
    "submodules/v2-foundry/src/WETHGateway.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {Ownable} from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"./base/ErrorMessages.sol\";\nimport \"./interfaces/IAlchemistV2.sol\";\nimport \"./interfaces/external/IWETH9.sol\";\nimport \"./interfaces/IWETHGateway.sol\";\nimport \"./interfaces/IWhitelist.sol\";\n\n/// @title  WETHGateway\n/// @author Alchemix Finance\ncontract WETHGateway is IWETHGateway, Ownable {\n    /// @notice The version.\n    string public constant version = \"2.1.0\";\n\n    /// @notice The wrapped ethereum contract.\n    IWETH9 public immutable WETH;\n\n    /// @notice The address of the whitelist contract.\n    address public whitelist;\n\n    constructor(address weth, address _whitelist) {\n        WETH = IWETH9(weth);\n        whitelist = _whitelist;\n    }\n\n    /// @dev Allows for payments from the WETH contract.\n    receive() external payable {\n        if (IWETH9(msg.sender) != WETH) {\n            revert Unauthorized(\"msg.sender is not WETH contract\");\n        }\n    }\n\n    /// @inheritdoc IWETHGateway\n    function refreshAllowance(address alchemist) external onlyOwner {\n        WETH.approve(alchemist, type(uint256).max);\n    }\n\n    /// @inheritdoc IWETHGateway\n    function depositUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external payable {\n        _onlyWhitelisted();\n        if (amount != msg.value) {\n            revert IllegalArgument(\"Invalid deposit amount\");\n        }\n        WETH.deposit{value: msg.value}();\n        IAlchemistV2(alchemist).depositUnderlying(yieldToken, amount, recipient, minimumAmountOut);\n    }\n\n    /// @inheritdoc IWETHGateway\n    function withdrawUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external {\n        _onlyWhitelisted();\n        // Ensure that the underlying of the target yield token is in fact WETH\n        IAlchemistV2.YieldTokenParams memory params = IAlchemistV2(alchemist).getYieldTokenParameters(yieldToken);\n        if (params.underlyingToken != address(WETH)) {\n            revert IllegalArgument(\"Token is not WETH contract\");\n        }\n\n        IAlchemistV2(alchemist).withdrawUnderlyingFrom(msg.sender, yieldToken, shares, address(this), minimumAmountOut);\n\n        uint256 amount = WETH.balanceOf(address(this));\n        WETH.withdraw(amount);\n\n        (bool success, ) = recipient.call{value: amount}(new bytes(0));\n        if (!success) {\n            revert IllegalState(\"Unsuccessful withdrawal\");\n        }\n    }\n\n    /// @dev Checks the whitelist for msg.sender.\n    ///\n    /// Reverts if msg.sender is not in the whitelist.\n    function _onlyWhitelisted() internal view {\n        // Check if the message sender is an EOA. In the future, this potentially may break. It is important that functions\n        // which rely on the whitelist not be explicitly vulnerable in the situation where this no longer holds true.\n        if (tx.origin == msg.sender) {\n            return;\n        }\n\n        // Only check the whitelist for calls from contracts.\n        if (!IWhitelist(whitelist).isWhitelisted(msg.sender)) {\n            revert Unauthorized(\"Not whitelisted\");\n        }\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IWETHGateway.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/// @title  IWETHGateway\n/// @author Alchemix Finance\ninterface IWETHGateway {\n    /// @notice Refreshes the wrapped ethereum ERC20 approval for an alchemist contract.\n    ///\n    /// @param alchemist The address of the alchemist to refresh the allowance for.\n    function refreshAllowance(address alchemist) external;\n\n    /// @notice Takes ethereum, converts it to wrapped ethereum, and then deposits it into an alchemist.\n    ///\n    /// See [IAlchemistV2Actions.depositUnderlying](./alchemist/IAlchemistV2Actions.md#depositunderlying) for more details.\n    ///\n    /// @param alchemist        The address of the alchemist to deposit wrapped ethereum into.\n    /// @param yieldToken       The yield token to deposit the wrapped ethereum as.\n    /// @param amount           The amount of ethereum to deposit.\n    /// @param recipient        The address which will receive the deposited yield tokens.\n    /// @param minimumAmountOut The minimum amount of yield tokens that are expected to be deposited to `recipient`.\n    function depositUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 amount,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external payable;\n\n    /// @notice Withdraws a wrapped ethereum based yield token from an alchemist, converts it to ethereum, and then\n    ///         transfers it to the recipient.\n    ///\n    /// A withdraw approval on the alchemist is required for this call to succeed.\n    ///\n    /// See [IAlchemistV2Actions.withdrawUnderlying](./alchemist/IAlchemistV2Actions.md#withdrawunderlying) for more details.\n    ///\n    /// @param alchemist        The address of the alchemist to withdraw wrapped ethereum from.\n    /// @param yieldToken       The address of the yield token to withdraw.\n    /// @param shares           The amount of shares to withdraw.\n    /// @param recipient        The address which will receive the ethereum.\n    /// @param minimumAmountOut The minimum amount of underlying tokens that are expected to be withdrawn to `recipient`.\n    function withdrawUnderlying(\n        address alchemist,\n        address yieldToken,\n        uint256 shares,\n        address recipient,\n        uint256 minimumAmountOut\n    ) external;\n}"
    },
    "submodules/v2-foundry/src/adapters/idle/IdleTrancheAdapter.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../../interfaces/ITokenAdapter.sol\";\nimport \"../../interfaces/external/idle/IIdleCDO.sol\";\n\nimport \"../../libraries/TokenUtils.sol\";\n\n/// @title  Idle PYT Adapter\n/// @author Idle Finance\ncontract IdleTrancheAdapter is ITokenAdapter {\n    string public constant override version = \"1.0.0\";\n\n    address public immutable override token;\n    address public immutable override underlyingToken;\n    IIdleCDO public immutable idleCDO;\n    bool public immutable isAATranche;\n\n    constructor(address _token, address _underlyingToken, address _idleCDO) {\n        token = _token;\n        underlyingToken = _underlyingToken;\n        idleCDO = IIdleCDO(_idleCDO);\n        isAATranche = _token == IIdleCDO(_idleCDO).AATranche();\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function price() external view override returns (uint256) {\n        return idleCDO.virtualPrice(token);\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\n        TokenUtils.safeApprove(underlyingToken, address(idleCDO), 0);\n        TokenUtils.safeApprove(underlyingToken, address(idleCDO), amount);\n\n        uint256 mintedTranche = isAATranche ? idleCDO.depositAA(amount) : idleCDO.depositBB(amount);\n\n        TokenUtils.safeTransfer(token, recipient, mintedTranche);\n        return mintedTranche;\n    }\n\n    /// @inheritdoc ITokenAdapter\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\n\n        uint256 balanceBefore = TokenUtils.safeBalanceOf(underlyingToken, address(this));\n        isAATranche ? idleCDO.withdrawAA(amount) : idleCDO.withdrawBB(amount);\n        uint256 amountWithdrawn = TokenUtils.safeBalanceOf(underlyingToken, address(this)) - balanceBefore;\n\n        TokenUtils.safeTransfer(underlyingToken, recipient, amountWithdrawn);\n        return amountWithdrawn;\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/idle/IIdleCDO.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.7.0;\n\n// import \"../../IERC20Minimal.sol\";\n// import \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/// @title  IIdleCDO\n/// @author Idle Finance\ninterface IIdleCDO {\n    function AATranche() external view returns (address);\n    function BBTranche() external view returns (address);\n\n    function strategy() external view returns (address);\n    function strategyToken() external view returns (address);\n    function token() external view returns (address);\n\n    /// @notice Flag for allowing AA withdraws\n    function allowAAWithdraw() external view returns (bool);\n\n    /// @notice Flag for allowing BB withdraws\n    function allowBBWithdraw() external view returns (bool);\n\n    /// @param _tranche tranche address\n    /// @return tranche price\n    function tranchePrice(address _tranche) external view returns (uint256);\n\n    /// @notice calculates the current tranches price considering the interest that is yet to be splitted\n    /// ie the interest generated since the last update of priceAA and priceBB (done on depositXX/withdrawXX/harvest)\n    /// useful for showing updated gains on frontends\n    /// @dev this should always be >= of _tranchePrice(_tranche)\n    /// @param _tranche address of the requested tranche\n    /// @return _virtualPrice tranche price considering all interest\n    function virtualPrice(address _tranche) external view returns (uint256);\n\n    /// @notice pausable\n    /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\n    /// @param _amount amount of `token` to deposit\n    /// @return AA tranche tokens minted\n    function depositAA(uint256 _amount) external returns (uint256);\n\n    /// @notice pausable\n    /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\n    /// @param _amount amount of `token` to deposit\n    /// @return BB tranche tokens minted\n    function depositBB(uint256 _amount) external returns (uint256);\n\n    /// @notice pausable\n    /// @param _amount amount of AA tranche tokens to burn\n    /// @return underlying tokens redeemed\n    function withdrawAA(uint256 _amount) external returns (uint256);\n\n    /// @notice pausable\n    /// @param _amount amount of BB tranche tokens to burn\n    /// @return underlying tokens redeemed\n    function withdrawBB(uint256 _amount) external returns (uint256);\n}\n"
    },
    "submodules/v2-foundry/src/test/IdleTrancheAdapter.t.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.13;\n\nimport {DSTestPlus} from \"./utils/DSTestPlus.sol\";\n\nimport \"../adapters/idle/IdleTrancheAdapter.sol\";\n\nimport {SafeERC20} from \"../libraries/SafeERC20.sol\";\n\ninterface GuardedLaunchUpgradable {\n    function owner() external view returns (address);\n\n    /// @notice TVL limit in underlying value\n    function limit() external view returns (uint256);\n\n    /// @notice set contract TVL limit\n    /// @param _limit limit in underlying value, 0 means no limit\n    function _setLimit(uint256 _limit) external;\n}\n\ncontract IdleTrancheAdapterTest is DSTestPlus {\n    /// @notice Idle.finance: Clearpool cpWIN-USDC AA/BB\n    IIdleCDO constant idleCDO = IIdleCDO(0xDBCEE5AE2E9DAf0F5d93473e08780C9f45DfEb93);\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC\n\n    IdleTrancheAdapter adapter;\n    address token;\n    address underlying;\n\n    function setUp() external {\n        underlying = USDC;\n        token = idleCDO.AATranche();\n        adapter = new IdleTrancheAdapter(token, underlying, address(idleCDO));\n\n        // set limit to max\n        vm.prank(GuardedLaunchUpgradable(address(idleCDO)).owner());\n        GuardedLaunchUpgradable(address(idleCDO))._setLimit(type(uint256).max);\n\n        vm.label(underlying, \"underlying\");\n        vm.label(token, \"token\");\n        vm.label(address(idleCDO), \"idleCDO\");\n    }\n\n    function testPrice() external {\n        assertEq(adapter.price(), idleCDO.virtualPrice(token));\n    }\n\n    function testWrap() external {\n        deal(underlying, address(this), 1e18);\n\n        SafeERC20.safeApprove(underlying, address(adapter), 1e18);\n        uint256 wrapped = adapter.wrap(1e18, address(0xbeef));\n\n        assertEq(IERC20(underlying).allowance(address(this), address(adapter)), 0);\n        assertEq(IERC20(token).balanceOf(address(0xbeef)), wrapped);\n    }\n\n    function testUnwrap() external {\n        deal(token, address(this), 1e18);\n\n        SafeERC20.safeApprove(token, address(adapter), 1e18);\n        uint256 unwrapped = adapter.unwrap(1e18, address(0xbeef));\n\n        assertEq(IERC20(token).allowance(address(this), address(adapter)), 0);\n        assertEq(IERC20(underlying).balanceOf(address(0xbeef)), unwrapped);\n    }\n\n    function testWrapGrief() external {\n        deal(underlying, address(this), 1e18);\n        deal(token, address(adapter), 1e18);\n\n        SafeERC20.safeApprove(underlying, address(adapter), 1e18);\n        uint256 wrapped = adapter.wrap(1e18, address(0xbeef));\n\n        assertEq(IERC20(underlying).allowance(address(this), address(adapter)), 0);\n        assertEq(IERC20(token).balanceOf(address(0xbeef)), wrapped);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/migration/V1Deprecatooooor.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport {Ownable} from \"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {IAlchemistV1} from \"../interfaces/IAlchemistV1.sol\";\nimport {IAlToken} from \"../interfaces/IAlToken.sol\";\nimport {ITransmuterV1} from \"../interfaces/ITransmuterV1.sol\";\n\ncontract V1Deprecatooooor is Ownable {\n    constructor() {}\n\n    function deprecate(address alchemist, address altoken, address transmuter) external onlyOwner {\n        IAlToken(altoken).pauseAlchemist(address(alchemist), true);\n        ITransmuterV1(transmuter).setPause(true);\n        uint256 numVaults = IAlchemistV1(alchemist).vaultCount();\n        // we are going to recall the funds from the most recent vault.\n        // we are assuming that the new TransferAdapter has already been deployed and\n        // added to the Alchemist via the migrate() function, which is why we need the (-2).\n        IAlchemistV1(alchemist).recallAll(numVaults - 2);\n        IAlchemistV1(alchemist).flush();\n        IAlchemistV1(alchemist).setEmergencyExit(true);\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IAlToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\n/// @title IAlToken\ninterface IAlToken {\n  function pauseAlchemist(address _toPause, bool _state) external;\n}"
    },
    "submodules/v2-foundry/src/SDTController.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\nimport { Unauthorized, IllegalState, IllegalArgument } from \"./base/Errors.sol\";\nimport \"./interfaces/stakedao/IveSDT.sol\";\nimport \"./interfaces/stakedao/IRewardDistributor.sol\";\nimport \"./interfaces/snapshot/IDelegateRegistry.sol\";\nimport \"./interfaces/stakedao/ILiquidityGauge.sol\";\nimport \"./interfaces/stakedao/IGaugeController.sol\";\n\ncontract SDTController is Initializable, OwnableUpgradeable {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  address public constant SDT = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\n  address public constant veSDT = 0x0C30476f66034E11782938DF8e4384970B6c9e8a;\n  string public constant version = \"1.1.0\";\n\n  address public delegateRegistry;\n  address public rewardDistributor;\n  address public rewardToken;\n  address public crvRewardDistributor;\n  address public gaugeController;\n\n  constructor() initializer {}\n\n  function initialize() external initializer {\n    __Ownable_init();\n    delegateRegistry = 0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446;\n    rewardDistributor = 0x29f3dd38dB24d3935CF1bf841e6b2B461A3E5D92;\n    rewardToken = 0x5af15DA84A4a6EDf2d9FA6720De921E1026E37b7;\n    gaugeController = 0x75f8f7fa4b6DA6De9F4fE972c811b778cefce882;\n  }\n\n  function createLock(uint256 value, uint256 lockTime) external onlyOwner {\n    IERC20Upgradeable(SDT).approve(veSDT, value);\n    IveSDT(veSDT).create_lock(value, lockTime);\n  }\n\n  function increaseLockAmount(uint256 value) external onlyOwner {\n    IERC20Upgradeable(SDT).approve(veSDT, value);\n    IveSDT(veSDT).increase_amount(value);\n  }\n\n  function increaseLockTime(uint256 lockTime) external onlyOwner {\n    IveSDT(veSDT).increase_unlock_time(lockTime);\n  }\n\n  function sweep(address token, uint256 amount) external onlyOwner {\n    IERC20Upgradeable(token).safeTransfer(owner(), amount);\n  }\n\n  function setDelegateRegistry(address _delegateRegistry) external onlyOwner {\n    delegateRegistry = _delegateRegistry;\n  }\n\n  function setDelegate(bytes32 id, address delegate) external onlyOwner {\n    IDelegateRegistry(delegateRegistry).setDelegate(id, delegate);\n  }\n\n  function clearDelegate(bytes32 id) external onlyOwner {\n    IDelegateRegistry(delegateRegistry).clearDelegate(id);\n  }\n\n  function setRewardDistributor(address _rewardDistributor) external onlyOwner {\n    rewardDistributor = _rewardDistributor;\n  }\n\n  function setRewardToken(address _rewardToken) external onlyOwner {\n    rewardToken = _rewardToken;\n  }\n\n  function setGaugeController(address _gaugeController) external onlyOwner {\n    gaugeController = _gaugeController;\n  }\n\n  function claim() external onlyOwner {\n    uint256 amountClaimed = IRewardDistributor(rewardDistributor).claim();\n    IERC20Upgradeable(rewardToken).safeTransfer(owner(), amountClaimed);\n  }\n\n  function voteForGaugeWeights(address gaugeAddress, uint256 weight) external onlyOwner {\n    IGaugeController(rewardDistributor).vote_for_gauge_weights(gaugeAddress, weight);\n  }\n\n  function setCrvRewardDistributor(address _crvRewardDistributor) external onlyOwner {\n    crvRewardDistributor = _crvRewardDistributor;\n  }\n\n  function claimRewards() external onlyOwner {\n    ILiquidityGauge(crvRewardDistributor).claim_rewards(address(this), owner());\n  }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/stakedao/IveSDT.sol": {
      "content": "pragma solidity ^0.8.11;\n\ninterface IveSDT {\n  function create_lock(uint256 _value, uint256 _unlock_time) external;\n\n  function increase_amount(uint256 _value) external;\n\n  function increase_unlock_time(uint256 _unlock_time) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/stakedao/IRewardDistributor.sol": {
      "content": "pragma solidity ^0.8.11;\n\ninterface IRewardDistributor {\n  function claim() external returns (uint256);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/snapshot/IDelegateRegistry.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.11;\n\ninterface IDelegateRegistry {\n  function setDelegate(bytes32 id, address delegate) external;\n\n  function clearDelegate(bytes32 id) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/stakedao/ILiquidityGauge.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface ILiquidityGauge {\n    function claim_rewards(address _addr, address _receiver) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/stakedao/IGaugeController.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface IGaugeController {\n    function vote_for_gauge_weights(address gaugeAddress, uint256 weight) external;\n}"
    },
    "submodules/v2-foundry/src/SDLController.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\nimport { Unauthorized, IllegalState, IllegalArgument } from \"./base/Errors.sol\";\nimport \"./interfaces/saddle/IGaugeController.sol\";\nimport \"./interfaces/saddle/IveSDL.sol\";\nimport \"./interfaces/snapshot/IDelegateRegistry.sol\";\n\ncontract SDLController is Initializable, OwnableUpgradeable {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  address public constant gaugeController = 0x99Cb6c36816dE2131eF2626bb5dEF7E5cc8b9B14;\n  address public constant SDL = 0xf1Dc500FdE233A4055e25e5BbF516372BC4F6871;\n  address public constant veSDL = 0xD2751CdBED54B87777E805be36670D7aeAe73bb2;\n  string public constant version = \"1.1.0\";\n\n  address public delegateRegistry;\n  address public rewardDistributor;\n  address public rewardToken;\n\n  constructor() initializer {}\n\n  function initialize() external initializer {\n    __Ownable_init();\n    delegateRegistry = 0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446;\n    rewardToken = 0x3cF7b9479a01eeB3bbfC43581fa3bb21cd888e2A;\n  }\n\n  function createLock(uint256 value, uint256 lockTime) external onlyOwner {\n    IERC20Upgradeable(SDL).approve(veSDL, value);\n    IveSDL(veSDL).create_lock(value, lockTime);\n  }\n\n  function increaseLockAmount(uint256 value) external onlyOwner {\n    IERC20Upgradeable(SDL).approve(veSDL, value);\n    IveSDL(veSDL).increase_amount(value);\n  }\n\n  function increaseLockTime(uint256 lockTime) external onlyOwner {\n    IveSDL(veSDL).increase_unlock_time(lockTime);\n  }\n\n  function sweep(address token, uint256 amount) external onlyOwner {\n    IERC20Upgradeable(token).safeTransfer(owner(), amount);\n  }\n\n  function setDelegateRegistry(address _delegateRegistry) external onlyOwner {\n    delegateRegistry = _delegateRegistry;\n  }\n\n  function setDelegate(bytes32 id, address delegate) external onlyOwner {\n    IDelegateRegistry(delegateRegistry).setDelegate(id, delegate);\n  }\n\n  function clearDelegate(bytes32 id) external onlyOwner {\n    IDelegateRegistry(delegateRegistry).clearDelegate(id);\n  }\n\n  function setRewardDistributor(address _rewardDistributor) external onlyOwner {\n    rewardDistributor = _rewardDistributor;\n  }\n\n  function setRewardToken(address _rewardToken) external onlyOwner {\n    rewardToken = _rewardToken;\n  }\n\n  function voteForGaugeWeights(address gaugeAddress, uint256 weight) external onlyOwner {\n    IGaugeController(gaugeController).vote_for_gauge_weights(gaugeAddress, weight);\n  }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/saddle/IGaugeController.sol": {
      "content": "pragma solidity ^0.8.11;\n\ninterface IGaugeController {\n  function vote_for_gauge_weights(address _gauge_addr, uint256 _user_weight) external;\n\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/saddle/IveSDL.sol": {
      "content": "pragma solidity ^0.8.11;\n\ninterface IveSDL {\n  function create_lock(uint256 _value, uint256 _unlock_time) external;\n\n  function increase_amount(uint256 _value) external;\n\n  function increase_unlock_time(uint256 _unlock_time) external;\n}\n"
    },
    "submodules/v2-foundry/src/gALCX.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.11;\n\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\";\nimport {ERC20} from \"../lib/solmate/src/tokens/ERC20.sol\";\n\nimport {IALCXSource} from \"./interfaces/IALCXSource.sol\";\n\n/// @title A wrapper for single-sided ALCX staking\ncontract gALCX is ERC20 {\n\n    IERC20 public alcx = IERC20(0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF);\n    IALCXSource public pools = IALCXSource(0xAB8e74017a8Cc7c15FFcCd726603790d26d7DeCa);\n    uint public poolId = 1;\n    uint public constant exchangeRatePrecision = 1e18;\n    uint public exchangeRate = exchangeRatePrecision;\n    address public owner;\n    address public pendingOwner;\n\n    event NewPendingOwner(address _pendingOwner);\n    event NewOwner(address _owner);\n    event ExchangeRateChange(uint _exchangeRate);\n    event Stake(address _from, uint _gAmount, uint _amount);\n    event Unstake(address _from, uint _gAmount, uint _amount);\n\n    /// @param _name The token name\n    /// @param _symbol The token symbol\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol, 18) {\n        owner = msg.sender;\n        reApprove();\n    }\n\n    // OWNERSHIP\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    /// @notice Offer to transfer contract ownership.\n    /// @param newPendingOwner The new address to offer ownership to.\n    function setPendingOwner(address newPendingOwner) external {\n        require(msg.sender == owner, \"!owner\");\n        emit NewPendingOwner(newPendingOwner);\n        pendingOwner = newPendingOwner;\n    }\n\n    /// @notice Accept the contract ownership.\n    function acceptOwnership() external {\n        require(msg.sender == pendingOwner, \"!pendingOwner\");\n        emit NewOwner(pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    function renounceOwnership() external {\n        require(msg.sender == owner, \"!owner\");\n        emit NewOwner(address(0x0));\n        owner = address(0);\n    }\n\n    /// @notice Set a new staking pool address and migrate funds there\n    /// @param _pools The new pool address\n    /// @param _poolId The new pool id\n    function migrateSource(address _pools, uint _poolId) external onlyOwner {\n        // Withdraw ALCX\n        bumpExchangeRate();\n\n        uint poolBalance = pools.getStakeTotalDeposited(address(this), poolId);\n        pools.withdraw(poolId, poolBalance);\n       // Revoke old pool approval\n        alcx.approve(address(pools), 0);\n        // Update staking pool address and id\n        pools = IALCXSource(_pools);\n        poolId = _poolId;\n        // Deposit ALCX\n        uint balance = alcx.balanceOf(address(this));\n        reApprove();\n        pools.deposit(poolId, balance);\n    }\n\n    // PUBLIC FUNCTIONS\n\n    /// @notice Approve the staking pool to move funds in this address, can be called by anyone\n    function reApprove() public {\n        alcx.approve(address(pools), type(uint).max);\n    }\n\n    /// @notice Claim and autocompound rewards\n    function bumpExchangeRate() public {\n        // Claim from pool\n        pools.claim(poolId);\n        // Bump exchange rate\n        uint balance = alcx.balanceOf(address(this));\n\n        if (balance > 0) {\n            // Restake\n            pools.deposit(poolId, balance);\n            // Update exchange rate\n            if (totalSupply > 0) { // handle rare edge case of stake, unstake, send tokens\n                exchangeRate += (balance * exchangeRatePrecision) / totalSupply;\n                emit ExchangeRateChange(exchangeRate);\n            }\n        }\n    }\n\n    /// @notice Deposit new funds into the staking pool\n    /// @param amount The amount of ALCX to deposit\n    function stake(uint amount) external {\n        // Get current exchange rate between ALCX and gALCX\n        bumpExchangeRate();\n        // Then receive new deposits\n        bool success = alcx.transferFrom(msg.sender, address(this), amount);\n        require(success, \"Transfer failed\");\n        pools.deposit(poolId, amount);\n        // gAmount always <= amount\n        uint gAmount = amount * exchangeRatePrecision / exchangeRate;\n        _mint(msg.sender, gAmount);\n        emit Stake(msg.sender, gAmount, amount);\n    }\n\n    /// @notice Withdraw funds from the staking pool\n    /// @param gAmount the amount of gALCX to withdraw\n    function unstake(uint gAmount) external {\n        bumpExchangeRate();\n        uint amount = gAmount * exchangeRate / exchangeRatePrecision;\n        _burn(msg.sender, gAmount);\n        // Withdraw ALCX and send to user\n        pools.withdraw(poolId, amount);\n        bool success = alcx.transfer(msg.sender, amount); // Should return true or revert, but doesn't hurt\n        require(success, \"Transfer failed\"); \n        emit Unstake(msg.sender, gAmount, amount);\n    }\n}"
    },
    "submodules/v2-foundry/src/interfaces/IALCXSource.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IALCXSource {\n    function getStakeTotalDeposited(address _user, uint256 _poolId) external view returns (uint256);\n    function claim(uint256 _poolId) external;\n    function deposit(uint256 _poolId, uint256 _depositAmount) external;\n    function withdraw(uint256 _poolId, uint256 _withdrawAmount) external;\n}"
    },
    "submodules/v2-foundry/lib/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestAlchemicToken.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./TestERC20.sol\";\n\ncontract TestAlchemicToken is TestERC20 {\n    constructor(uint256 amountToMint, uint8 _decimals) TestERC20(amountToMint, _decimals) {\n    }\n\n    function hasMinted(address account) external view returns (uint256) {\n        return 0;\n    }\n\n    function lowerHasMinted(uint256 amount) external {\n        require(true);\n    }\n}"
    },
    "submodules/v2-foundry/src/test/mocks/TestSets.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"../../libraries/Sets.sol\";\n\ncontract TestSets {\n    using Sets for Sets.AddressSet;\n\n    Sets.AddressSet private testAddys;\n\n    constructor() {\n\n    }\n\n    function add(address val) external {\n        require(testAddys.add(val), \"failed to add\");\n    }\n\n    function remove(address val) external {\n        require(testAddys.remove(val), \"failed to remove\");\n    }\n\n    function contains(address val) external view returns (bool) {\n        return testAddys.contains(val);\n    }\n}"
    },
    "submodules/v2-foundry/src/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\nimport {ERC20} from \"../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n/// @title ERC20Mock\n///\n/// @dev A mock of an ERC20 token which lets anyone burn and mint tokens.\ncontract ERC20Mock is ERC20 {\n    constructor(string memory _name, string memory _symbol)\n        public\n        ERC20(_name, _symbol)\n    {}\n\n    function mint(address _recipient, uint256 _amount) external {\n        _mint(_recipient, _amount);\n    }\n\n    function burn(address _account, uint256 _amount) external {\n        _burn(_account, _amount);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/utils/users/ERC20User.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.13;\n\nimport {IERC20} from \"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ncontract ERC20User {\n    IERC20 private token;\n\n    constructor(IERC20 _token) {\n        token = _token;\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool) {\n        return token.approve(spender, amount);\n    }\n\n    function transfer(address receiver, uint256 amount) external returns (bool) {\n        return token.transfer(receiver, amount);\n    }\n\n    function transferFrom(address owner, address receiver, uint256 amount) external returns (bool) {\n        return token.transferFrom(owner, receiver, amount);\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/IYieldToken.sol": {
      "content": "pragma solidity ^0.8.13;\n\ninterface IYieldToken {\n    function price() external view returns (uint256);\n}\n"
    },
    "submodules/v2-foundry/src/mocks/TokenAdapterMock.sol": {
      "content": "pragma solidity ^0.8.13;\n\nimport {IYieldToken} from \"../interfaces/IYieldToken.sol\";\n\ncontract TokenAdapterMock {\n    address public token;\n\n    constructor(address _token) {\n        token = _token;\n    }\n\n    function price() external view returns (uint256) {\n        return IYieldToken(token).price();\n    }\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IAaveOracleV3.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n \n interface IAaveOracleV3 {\n  /**\n   * @notice Returns the base currency address\n   * @dev Address 0x0 is reserved for USD as base currency.\n   * @return Returns the base currency address.\n   **/\n  function BASE_CURRENCY() external view returns (address);\n\n  /**\n   * @notice Returns the base currency unit\n   * @dev 1 ether for ETH, 1e8 for USD.\n   * @return Returns the base currency unit.\n   **/\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\n\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   **/\n  function getAssetPrice(address asset) external view returns (uint256);\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/ILendingPoolAddressesProviderRegistry.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\n/// @title  ILendingPoolAddressesProviderRegistry\n/// @author Aave\n///\n/// @dev Main registry of LendingPoolAddressesProvider of multiple Aave protocol's markets.\n///\n/// - Used for indexing purposes of Aave protocol's markets.\n/// - The id assigned to a LendingPoolAddressesProvider refers to the market it is connected with,\n///   for example with `0` for the Aave main market and `1` for the next created.\ninterface ILendingPoolAddressesProviderRegistry {\n  event AddressesProviderRegistered(address indexed newAddress);\n  event AddressesProviderUnregistered(address indexed newAddress);\n\n  function getAddressesProvidersList() external view returns (address[] memory);\n\n  function getAddressesProviderIdByAddress(address addressesProvider) external view returns (uint256);\n\n  function registerAddressesProvider(address provider, uint256 id) external;\n\n  function unregisterAddressesProvider(address provider) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.10;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n **/\ninterface IPoolAddressesProvider {\n  /**\n   * @dev Emitted when the market identifier is updated.\n   * @param oldMarketId The old id of the market\n   * @param newMarketId The new id of the market\n   */\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n  /**\n   * @dev Emitted when the pool is updated.\n   * @param oldAddress The old address of the Pool\n   * @param newAddress The new address of the Pool\n   */\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool configurator is updated.\n   * @param oldAddress The old address of the PoolConfigurator\n   * @param newAddress The new address of the PoolConfigurator\n   */\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle is updated.\n   * @param oldAddress The old address of the PriceOracle\n   * @param newAddress The new address of the PriceOracle\n   */\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL manager is updated.\n   * @param oldAddress The old address of the ACLManager\n   * @param newAddress The new address of the ACLManager\n   */\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL admin is updated.\n   * @param oldAddress The old address of the ACLAdmin\n   * @param newAddress The new address of the ACLAdmin\n   */\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle sentinel is updated.\n   * @param oldAddress The old address of the PriceOracleSentinel\n   * @param newAddress The new address of the PriceOracleSentinel\n   */\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool data provider is updated.\n   * @param oldAddress The old address of the PoolDataProvider\n   * @param newAddress The new address of the PoolDataProvider\n   */\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when a new proxy is created.\n   * @param id The identifier of the proxy\n   * @param proxyAddress The address of the created proxy contract\n   * @param implementationAddress The address of the implementation contract\n   */\n  event ProxyCreated(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address indexed implementationAddress\n  );\n\n  /**\n   * @dev Emitted when a new non-proxied contract address is registered.\n   * @param id The identifier of the contract\n   * @param oldAddress The address of the old contract\n   * @param newAddress The address of the new contract\n   */\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the implementation of the proxy registered with id is updated\n   * @param id The identifier of the contract\n   * @param proxyAddress The address of the proxy contract\n   * @param oldImplementationAddress The address of the old implementation contract\n   * @param newImplementationAddress The address of the new implementation contract\n   */\n  event AddressSetAsProxy(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address oldImplementationAddress,\n    address indexed newImplementationAddress\n  );\n\n  /**\n   * @notice Returns the id of the Aave market to which this contract points to.\n   * @return The market id\n   **/\n  function getMarketId() external view returns (string memory);\n\n  /**\n   * @notice Associates an id with a specific PoolAddressesProvider.\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n   * identify and validate multiple Aave markets.\n   * @param newMarketId The market id\n   */\n  function setMarketId(string calldata newMarketId) external;\n\n  /**\n   * @notice Returns an address by its identifier.\n   * @dev The returned address might be an EOA or a contract, potentially proxied\n   * @dev It returns ZERO if there is no registered address with the given id\n   * @param id The id\n   * @return The address of the registered for the specified id\n   */\n  function getAddress(bytes32 id) external view returns (address);\n\n  /**\n   * @notice General function to update the implementation of a proxy registered with\n   * certain `id`. If there is no proxy registered, it will instantiate one and\n   * set as implementation the `newImplementationAddress`.\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n   * setter function, in order to avoid unexpected consequences\n   * @param id The id\n   * @param newImplementationAddress The address of the new implementation\n   */\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n  /**\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n   * @param id The id\n   * @param newAddress The address to set\n   */\n  function setAddress(bytes32 id, address newAddress) external;\n\n  /**\n   * @notice Returns the address of the Pool proxy.\n   * @return The Pool proxy address\n   **/\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the Pool, or creates a proxy\n   * setting the new `pool` implementation when the function is called for the first time.\n   * @param newPoolImpl The new Pool implementation\n   **/\n  function setPoolImpl(address newPoolImpl) external;\n\n  /**\n   * @notice Returns the address of the PoolConfigurator proxy.\n   * @return The PoolConfigurator proxy address\n   **/\n  function getPoolConfigurator() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n   **/\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n  /**\n   * @notice Returns the address of the price oracle.\n   * @return The address of the PriceOracle\n   */\n  function getPriceOracle() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle.\n   * @param newPriceOracle The address of the new PriceOracle\n   */\n  function setPriceOracle(address newPriceOracle) external;\n\n  /**\n   * @notice Returns the address of the ACL manager.\n   * @return The address of the ACLManager\n   */\n  function getACLManager() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL manager.\n   * @param newAclManager The address of the new ACLManager\n   **/\n  function setACLManager(address newAclManager) external;\n\n  /**\n   * @notice Returns the address of the ACL admin.\n   * @return The address of the ACL admin\n   */\n  function getACLAdmin() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL admin.\n   * @param newAclAdmin The address of the new ACL admin\n   */\n  function setACLAdmin(address newAclAdmin) external;\n\n  /**\n   * @notice Returns the address of the price oracle sentinel.\n   * @return The address of the PriceOracleSentinel\n   */\n  function getPriceOracleSentinel() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle sentinel.\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n   **/\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n  /**\n   * @notice Returns the address of the data provider.\n   * @return The address of the DataProvider\n   */\n  function getPoolDataProvider() external view returns (address);\n\n  /**\n   * @notice Updates the address of the data provider.\n   * @param newDataProvider The address of the new DataProvider\n   **/\n  function setPoolDataProvider(address newDataProvider) external;\n}"
    },
    "submodules/v2-foundry/src/interfaces/external/aave/IWethGateway.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity >=0.5.0;\n\ninterface IWETHGateway {\n  function depositETH(\n    address lendingPool,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external payable;\n\n  function withdrawETH(\n    address lendingPool,\n    uint256 amount,\n    address onBehalfOf\n  ) external;\n\n  function repayETH(\n    address lendingPool,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external payable;\n\n  function borrowETH(\n    address lendingPool,\n    uint256 amount,\n    uint256 interesRateMode,\n    uint16 referralCode\n  ) external;\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/curve/ICalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nint128 constant MAX_COINS = 8;\nuint256 constant FEE_DENOMINATOR = 10**10;\n\ninterface ICalculator {\n\tfunction get_dx(\n\t\tint128 n_coins,\n\t\tuint256[MAX_COINS] calldata balances,\n\t\tuint256 amp,\n\t\tuint256 fee,\n\t\tuint256[MAX_COINS] calldata rates,\n\t\tuint256[MAX_COINS] calldata precisions,\n\t\tbool underlying,\n\t\tint128 i,\n\t\tint128 j,\n\t\tuint256 dy\n\t) external view returns (uint256);\n}\n"
    },
    "submodules/v2-foundry/src/interfaces/external/proxy/IProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IProxyAdmin {\n  function getProxyImplementation(address proxy) external view returns (address);\n\n  function getProxyAdmin(address proxy) external view returns (address);\n\n  function changeProxyAdmin(address proxy, address newAdmin) external;\n\n  function upgrade(address proxy, address implementation) external;\n\n  function upgradeAndCall(\n    address proxy,\n    address implementation,\n    bytes memory data\n  ) external;\n}\n"
    },
    "submodules/v2-foundry/src/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.10;\n\nlibrary DataTypes {\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    //timestamp of last update\n    uint40 lastUpdateTimestamp;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint16 id;\n    //aToken address\n    address aTokenAddress;\n    //stableDebtToken address\n    address stableDebtTokenAddress;\n    //variableDebtToken address\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the current treasury balance, scaled\n    uint128 accruedToTreasury;\n    //the outstanding unbacked aTokens minted through the bridging feature\n    uint128 unbacked;\n    //the outstanding debt borrowed against this asset in isolation mode\n    uint128 isolationModeTotalDebt;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60: asset is paused\n    //bit 61: borrowing in isolation mode is enabled\n    //bit 62-63: reserved\n    //bit 64-79: reserve factor\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n    //bit 152-167 liquidation protocol fee\n    //bit 168-175 eMode category\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n    //bit 252-255 unused\n\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    /**\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\n     * asset is borrowed by the user.\n     */\n    uint256 data;\n  }\n\n  struct EModeCategory {\n    // each eMode category has a custom ltv and liquidation threshold\n    uint16 ltv;\n    uint16 liquidationThreshold;\n    uint16 liquidationBonus;\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n    address priceSource;\n    string label;\n  }\n\n  enum InterestRateMode {\n    NONE,\n    STABLE,\n    VARIABLE\n  }\n\n  struct ReserveCache {\n    uint256 currScaledVariableDebt;\n    uint256 nextScaledVariableDebt;\n    uint256 currPrincipalStableDebt;\n    uint256 currAvgStableBorrowRate;\n    uint256 currTotalStableDebt;\n    uint256 nextAvgStableBorrowRate;\n    uint256 nextTotalStableDebt;\n    uint256 currLiquidityIndex;\n    uint256 nextLiquidityIndex;\n    uint256 currVariableBorrowIndex;\n    uint256 nextVariableBorrowIndex;\n    uint256 currLiquidityRate;\n    uint256 currVariableBorrowRate;\n    uint256 reserveFactor;\n    ReserveConfigurationMap reserveConfiguration;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    uint40 reserveLastUpdateTimestamp;\n    uint40 stableDebtLastUpdateTimestamp;\n  }\n\n  struct ExecuteLiquidationCallParams {\n    uint256 reservesCount;\n    uint256 debtToCover;\n    address collateralAsset;\n    address debtAsset;\n    address user;\n    bool receiveAToken;\n    address priceOracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteSupplyParams {\n    address asset;\n    uint256 amount;\n    address onBehalfOf;\n    uint16 referralCode;\n  }\n\n  struct ExecuteBorrowParams {\n    address asset;\n    address user;\n    address onBehalfOf;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint16 referralCode;\n    bool releaseUnderlying;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteRepayParams {\n    address asset;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    address onBehalfOf;\n    bool useATokens;\n  }\n\n  struct ExecuteWithdrawParams {\n    address asset;\n    uint256 amount;\n    address to;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ExecuteSetUserEModeParams {\n    uint256 reservesCount;\n    address oracle;\n    uint8 categoryId;\n  }\n\n  struct FinalizeTransferParams {\n    address asset;\n    address from;\n    address to;\n    uint256 amount;\n    uint256 balanceFromBefore;\n    uint256 balanceToBefore;\n    uint256 reservesCount;\n    address oracle;\n    uint8 fromEModeCategory;\n  }\n\n  struct FlashloanParams {\n    address receiverAddress;\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    address onBehalfOf;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address addressesProvider;\n    uint8 userEModeCategory;\n    bool isAuthorizedFlashBorrower;\n  }\n\n  struct FlashloanSimpleParams {\n    address receiverAddress;\n    address asset;\n    uint256 amount;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n  }\n\n  struct FlashLoanRepaymentParams {\n    uint256 amount;\n    uint256 totalPremium;\n    uint256 flashLoanPremiumToProtocol;\n    address asset;\n    address receiverAddress;\n    uint16 referralCode;\n  }\n\n  struct CalculateUserAccountDataParams {\n    UserConfigurationMap userConfig;\n    uint256 reservesCount;\n    address user;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ValidateBorrowParams {\n    ReserveCache reserveCache;\n    UserConfigurationMap userConfig;\n    address asset;\n    address userAddress;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint256 maxStableLoanPercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n    bool isolationModeActive;\n    address isolationModeCollateralAddress;\n    uint256 isolationModeDebtCeiling;\n  }\n\n  struct ValidateLiquidationCallParams {\n    ReserveCache debtReserveCache;\n    uint256 totalDebt;\n    uint256 healthFactor;\n    address priceOracleSentinel;\n  }\n\n  struct CalculateInterestRatesParams {\n    uint256 unbacked;\n    uint256 liquidityAdded;\n    uint256 liquidityTaken;\n    uint256 totalStableDebt;\n    uint256 totalVariableDebt;\n    uint256 averageStableBorrowRate;\n    uint256 reserveFactor;\n    address reserve;\n    address aToken;\n  }\n\n  struct InitReserveParams {\n    address asset;\n    address aTokenAddress;\n    address stableDebtAddress;\n    address variableDebtAddress;\n    address interestRateStrategyAddress;\n    uint16 reservesCount;\n    uint16 maxNumberReserves;\n  }\n}"
    },
    "submodules/v2-foundry/src/libraries/solmate/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.13;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*///////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow is z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z)\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z)\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z)\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}"
    },
    "submodules/v2-foundry/src/mocks/HarvestResolverMock.sol": {
      "content": "pragma solidity ^0.8.13;\n\ncontract HarvestResolverMock {\n    uint256 public lastHarvest;\n    constructor() {\n        lastHarvest = block.timestamp;\n    }\n\n    function recordHarvest(address yieldToken) external {\n        lastHarvest++;\n    }\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestErc20Receiver.sol": {
      "content": "pragma solidity ^0.8.11;\n\ncontract TestErc20Receiver {\n  constructor() {}\n\n  function onERC20Received(address underlyingToken, uint256 amount) external {}\n}\n"
    },
    "submodules/v2-foundry/src/test/mocks/TestTransmuter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract TestTransmuter {\n    mapping(address => uint256) public totalExchanged;\n\n    function onERC20Received(address token, uint256 amount) external {\n        totalExchanged[token] += amount;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x0000000000000031363939323632333032323137"
      }
    }
  }
}