{
  "address": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "transmuterBuffer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "fraxShareToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "curveToken",
              "type": "address"
            },
            {
              "internalType": "contract IStableSwap2Pool",
              "name": "twoPool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "twoPoolSlippage",
              "type": "uint256"
            },
            {
              "internalType": "contract IConvexToken",
              "name": "convexToken",
              "type": "address"
            },
            {
              "internalType": "contract IConvexStakingWrapper",
              "name": "convexStakingWrapper",
              "type": "address"
            },
            {
              "internalType": "contract IConvexFraxBooster",
              "name": "convexFraxBooster",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "convexPoolId",
              "type": "uint256"
            }
          ],
          "internalType": "struct InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalArgument",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "MulticallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "name": "BurnTwoPoolTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountFxs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountCurve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountConvex",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "DepositTwoPoolTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedTwoPoolTokens",
          "type": "uint256"
        }
      ],
      "name": "MintTwoPoolTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedTwoPoolTokens",
          "type": "uint256"
        }
      ],
      "name": "MintTwoPoolTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingAdmin",
          "type": "address"
        }
      ],
      "name": "PendingAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReclaimTwoPoolAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardReceiver",
          "type": "address"
        }
      ],
      "name": "RewardReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "transmuterBuffer",
          "type": "address"
        }
      ],
      "name": "TransmuterBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "twoPoolSlippage",
          "type": "uint256"
        }
      ],
      "name": "TwoPoolSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "WithdrawTwoPoolTokens",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnTwoPoolTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexFraxBooster",
      "outputs": [
        {
          "internalType": "contract IConvexFraxBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexFraxVault",
      "outputs": [
        {
          "internalType": "contract IConvexFraxVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexStakingWrapper",
      "outputs": [
        {
          "internalType": "contract IConvexStakingWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexToken",
      "outputs": [
        {
          "internalType": "contract IConvexToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositTwoPoolTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        }
      ],
      "name": "depositTwoPoolTokensCustomLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "emergencyRecall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        }
      ],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        }
      ],
      "name": "flush",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flush",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        }
      ],
      "name": "flushCustomLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        }
      ],
      "name": "flushCustomLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fraxShareToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        }
      ],
      "name": "getTokenForTwoPoolAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "kekId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTwoPoolTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        }
      ],
      "name": "mintTwoPoolTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "onERC20Received",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "recall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "reclaimTwoPoolAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setRewardReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setTransmuterBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setTwoPoolSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuterBuffer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "twoPool",
      "outputs": [
        {
          "internalType": "contract IStableSwap2Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PoolAsset",
          "name": "asset",
          "type": "uint8"
        }
      ],
      "name": "twoPoolAssetReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "twoPoolSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "withdrawTwoPoolTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
    "transactionIndex": 0,
    "gasUsed": "3609716",
    "logsBloom": "0x000000000000000000000000000000000001000001000000008000000000400000000000004000000000000008008000000000000000201002800800002000000104000000020000000000000000000000400000000000000040000000000c0100000001020000000000800000000000000000402000001000000000000040000004000400000000000000020000000000040080000000000100011400000000020000000000800000000000002000000000000000000000000000000002000000004000000000000000000000000000000000000004400800000000000000000010000000000000000002000000000000200200000000200000000000000000",
    "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700",
    "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x41a5881c17185383e19Df6FA4EC158a6F4851A69",
        "topics": [
          "0xc3a719ac2c66bb292413ff9bb5cc91f486266e1b70bf1b394f666fc761ec64a3",
          "0x0000000000000000000000009fb54d1f6f506feb4c65b721be931e59bb538c63",
          "0x0000000000000000000000000000000000000000000000000000000000000036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x8A59781B415288f9E633b948618726CB6E47e980",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006115dec0b6f3ee2aa2a0e7757d68559788bd864f",
          "0x00000000000000000000000056790e4a08ed17aa3b7b4b1b23a6a84d731fd77e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0xB657B895B265C38c53FFF00166cF7F6A3C70587d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006115dec0b6f3ee2aa2a0e7757d68559788bd864f",
          "0x0000000000000000000000008a59781b415288f9e633b948618726cb6e47e980"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x112E8f4b685475CcEd5C38142Cd7A2aE41ef6737",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006115dec0b6f3ee2aa2a0e7757d68559788bd864f",
          "0x0000000000000000000000008a59781b415288f9e633b948618726cb6e47e980"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
        "topics": [
          "0x54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d"
        ],
        "data": "0x0000000000000000000000008392f6669292fa56123f71949b52d883ae57e225",
        "logIndex": 4,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
        "topics": [
          "0xb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec4"
        ],
        "data": "0x0000000000000000000000009e2b6378ee8ad2a4a95fe481d63caba8fb0ebbf9",
        "logIndex": 5,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
        "topics": [
          "0x2bebe3801c306ffa893b76894d5baf1cef32807aa974f6449595a9c2392f6174"
        ],
        "data": "0x0000000000000000000000009e2b6378ee8ad2a4a95fe481d63caba8fb0ebbf9",
        "logIndex": 6,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
        "topics": [
          "0x59dea4585e1df1b7a22cafd3486f3c6080e7bd27c1450af2f11f192cb637658b"
        ],
        "data": "0x000000000000000000000000bc2fb245594a68c927c930fbe2d00680a8c90b9e",
        "logIndex": 7,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18575576,
        "transactionHash": "0x361c291ca5d25e733efe9edc92bb361e8c91215896232f372ad6af595e850545",
        "address": "0x9fb54d1F6F506Feb4c65B721bE931e59BB538c63",
        "topics": [
          "0x32c890dda1c5857193234f885837d184a81efbb9b84bd7697acd063461950bb1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000026fc",
        "logIndex": 8,
        "blockHash": "0x62ddca9da5e6a15ea94801ccb1f078be04ea4fe1e4866227962fa16aa94f0700"
      }
    ],
    "blockNumber": 18575576,
    "cumulativeGasUsed": "3609716",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "admin": "0x8392F6669292fA56123F71949B52d883aE57e225",
      "operator": "0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9",
      "rewardReceiver": "0x9e2b6378ee8ad2A4A95Fe481d63CAba8FB0EBBF9",
      "transmuterBuffer": "0xbc2FB245594a68c927C930FBE2d00680A8C90B9e",
      "fraxShareToken": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
      "curveToken": "0xD533a949740bb3306d119CC777fa900bA034cd52",
      "twoPool": "0xB657B895B265C38c53FFF00166cF7F6A3C70587d",
      "twoPoolSlippage": 9980,
      "convexToken": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
      "convexStakingWrapper": "0x8A59781B415288f9E633b948618726CB6E47e980",
      "convexFraxBooster": "0x2B8b301B90Eb8801f1eEFe73285Eec117D2fFC95",
      "convexPoolId": 54
    }
  ],
  "solcInputHash": "e8753e695927d7ee7a7a53a2e0fedfb2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transmuterBuffer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"fraxShareToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"curveToken\",\"type\":\"address\"},{\"internalType\":\"contract IStableSwap2Pool\",\"name\":\"twoPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"twoPoolSlippage\",\"type\":\"uint256\"},{\"internalType\":\"contract IConvexToken\",\"name\":\"convexToken\",\"type\":\"address\"},{\"internalType\":\"contract IConvexStakingWrapper\",\"name\":\"convexStakingWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IConvexFraxBooster\",\"name\":\"convexFraxBooster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"convexPoolId\",\"type\":\"uint256\"}],\"internalType\":\"struct InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalArgument\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"MulticallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"BurnTwoPoolTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountFxs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCurve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountConvex\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DepositTwoPoolTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTwoPoolTokens\",\"type\":\"uint256\"}],\"name\":\"MintTwoPoolTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTwoPoolTokens\",\"type\":\"uint256\"}],\"name\":\"MintTwoPoolTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"PendingAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimTwoPoolAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"}],\"name\":\"RewardReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmuterBuffer\",\"type\":\"address\"}],\"name\":\"TransmuterBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"twoPoolSlippage\",\"type\":\"uint256\"}],\"name\":\"TwoPoolSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"WithdrawTwoPoolTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTwoPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexFraxBooster\",\"outputs\":[{\"internalType\":\"contract IConvexFraxBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexFraxVault\",\"outputs\":[{\"internalType\":\"contract IConvexFraxVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexStakingWrapper\",\"outputs\":[{\"internalType\":\"contract IConvexStakingWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexToken\",\"outputs\":[{\"internalType\":\"contract IConvexToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTwoPoolTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"depositTwoPoolTokensCustomLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"emergencyRecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"}],\"name\":\"flush\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"flushCustomLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"flushCustomLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxShareToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"getTokenForTwoPoolAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"kekId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTwoPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"}],\"name\":\"mintTwoPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"onERC20Received\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"recall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reclaimTwoPoolAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setRewardReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTransmuterBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTwoPoolSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuterBuffer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twoPool\",\"outputs\":[{\"internalType\":\"contract IStableSwap2Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PoolAsset\",\"name\":\"asset\",\"type\":\"uint8\"}],\"name\":\"twoPoolAssetReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twoPoolSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"withdrawTwoPoolTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"IllegalArgument(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"IllegalState(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"Unauthorized(string)\":[{\"params\":{\"message\":\"The error message.\"}}]},\"events\":{\"AdminUpdated(address)\":{\"params\":{\"admin\":\"The admin.\"}},\"BurnTwoPoolTokens(uint8,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of 2pool tokens that were burned.\",\"asset\":\"The 2pool asset that was received.\",\"withdrawn\":\"The amount of the 2pool asset that was withdrawn.\"}},\"ClaimRewards(bool,uint256,uint256,uint256)\":{\"params\":{\"amountConvex\":\"The amount of convex tokens sent to the reward recipient.\",\"amountCurve\":\"The amount of curve tokens sent to the reward recipient.\",\"amountFxs\":\"The amount of frax share tokens sent to the reward recipient.\",\"success\":\"If the operation was successful.\"}},\"DepositTwoPoolTokens(uint256,bytes32,bool)\":{\"params\":{\"amount\":\"The amount of meta pool tokens that were deposited.\",\"id\":\"The ID of the new lock.\",\"success\":\"If the operation was successful.\"}},\"MintTwoPoolTokens(uint256[2],uint256)\":{\"params\":{\"amounts\":\"The amounts of each 2pool asset used to mint liquidity.\",\"mintedTwoPoolTokens\":\"The amount of 2pool tokens minted.\"}},\"MintTwoPoolTokens(uint8,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the asset used to mint 2pool tokens.\",\"asset\":\"The 2pool asset used to mint 2pool tokens.\",\"mintedTwoPoolTokens\":\"The amount of 2pool tokens minted.\"}},\"OperatorUpdated(address)\":{\"params\":{\"operator\":\"The operator.\"}},\"PendingAdminUpdated(address)\":{\"params\":{\"pendingAdmin\":\"The pending admin.\"}},\"ReclaimTwoPoolAsset(uint8,uint256)\":{\"params\":{\"amount\":\"The amount of the asset that was reclaimed.\",\"asset\":\"The 2pool asset that was reclaimed.\"}},\"RewardReceiverUpdated(address)\":{\"params\":{\"rewardReceiver\":\"The reward receiver.\"}},\"TransmuterBufferUpdated(address)\":{\"params\":{\"transmuterBuffer\":\"The transmuter buffer.\"}},\"TwoPoolSlippageUpdated(uint256)\":{\"params\":{\"twoPoolSlippage\":\"The 2pool slippage.\"}},\"WithdrawTwoPoolTokens(uint256,bool)\":{\"params\":{\"amount\":\"The amount of meta pool tokens that were withdrawn.\",\"success\":\"If the operation was successful.\"}}},\"kind\":\"dev\",\"methods\":{\"burnTwoPoolTokens(uint8,uint256)\":{\"params\":{\"amount\":\"The amount of 2pool tokens to burn.\",\"asset\":\"The asset to withdraw.\"},\"returns\":{\"withdrawn\":\"The amount of the asset withdrawn from the pool.\"}},\"claimRewards()\":{\"returns\":{\"success\":\"If the claim was successful.\"}},\"depositTwoPoolTokens(uint256)\":{\"params\":{\"amount\":\"The amount of meta pool tokens to deposit.\"},\"returns\":{\"id\":\"     The ID of the new lock.\",\"success\":\"If the tokens were successfully deposited.\"}},\"depositTwoPoolTokensCustomLock(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of meta pool tokens to deposit.\"},\"returns\":{\"id\":\"     The ID of the new lock.\",\"success\":\"If the tokens were successfully deposited.\"}},\"exchangeRate(uint8)\":{\"params\":{\"asset\":\"The 2pool asset.\"},\"returns\":{\"_0\":\"The amount of the underying.\"}},\"flush(uint256[2])\":{\"params\":{\"amounts\":\"The amounts of the 2pool assets to flush.\"},\"returns\":{\"_0\":\"The amount of meta pool tokens deposited into convex.\"}},\"flush(uint8,uint256)\":{\"params\":{\"amount\":\"The amount of the 2pool asset to flush.\",\"asset\":\"The 2pool asset to flush.\"},\"returns\":{\"_0\":\"The amount of meta pool tokens deposited into convex.\"}},\"flushCustomLock(uint256[2],uint256)\":{\"params\":{\"amounts\":\"The amounts of the 2pool assets to flush.\",\"lockTime\":\"The amount of time to lock the staked tokens.\"},\"returns\":{\"_0\":\"The amount of meta pool tokens deposited into convex.\"}},\"flushCustomLock(uint8,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the 2pool asset to flush.\",\"asset\":\"The 2pool asset to flush.\",\"lockTime\":\"The amount of time to lock the staked tokens.\"},\"returns\":{\"_0\":\"The amount of meta pool tokens deposited into convex.\"}},\"getTokenForTwoPoolAsset(uint8)\":{\"params\":{\"asset\":\"The asset to get the token for.\"},\"returns\":{\"_0\":\"The token.\"}},\"mintTwoPoolTokens(uint256[2])\":{\"params\":{\"amounts\":\"The amounts of the assets to deposit.\"},\"returns\":{\"minted\":\"The number of 2pool tokens minted.\"}},\"mintTwoPoolTokens(uint8,uint256)\":{\"params\":{\"amount\":\"The amount of the asset to deposit.\",\"asset\":\"The asset to deposit into the 2pool.\"},\"returns\":{\"minted\":\"The number of 2pool tokens minted.\"}},\"onERC20Received(address,uint256)\":{\"details\":\"This function is required in order to receive tokens from the conduit.\",\"params\":{\"token\":\"The token that was transferred.\",\"value\":\"The amount of the token that was transferred.\"}},\"recall(uint8,uint256,bytes32)\":{\"params\":{\"amount\":\"The amount of the meta pool tokens to withdraw from convex and burn.\",\"asset\":\"The 2pool asset to recall.\",\"id\":\"The id of the lock to withdraw from.  \"},\"returns\":{\"_0\":\"The amount of the 2pool asset recalled.\"}},\"reclaimTwoPoolAsset(uint8,uint256)\":{\"params\":{\"amount\":\"The amount to reclaim.\",\"asset\":\"The 2pool asset to reclaim.\"}},\"setOperator(address,bool)\":{\"params\":{\"operator\":\"The address to set\",\"value\":\"The value to set the admin to.\"}},\"setPendingAdmin(address)\":{\"params\":{\"value\":\"The value to set the pending timelock to.\"}},\"setRewardReceiver(address)\":{\"params\":{\"value\":\"The value to set the reward receiver to.\"}},\"setTransmuterBuffer(address)\":{\"params\":{\"value\":\"The value to set the transmuter buffer to.\"}},\"setTwoPoolSlippage(uint256)\":{\"params\":{\"value\":\"The value to set the slippage to.\"}},\"sweep(address,uint256)\":{\"params\":{\"amount\":\"The amount of the token to sweep.\",\"token\":\"The token to sweep.\"}},\"twoPoolAssetReserves(uint8)\":{\"params\":{\"asset\":\"The 2pool asset.\"},\"returns\":{\"_0\":\"The reserves.\"}},\"withdrawTwoPoolTokens(uint256,bytes32)\":{\"params\":{\"amount\":\"The amount of meta pool tokens to withdraw.\",\"id\":\"The id of the lock to withdraw from.  \"},\"returns\":{\"success\":\"If the tokens were successfully withdrawn.\"}}},\"stateVariables\":{\"_twoPoolAssetCache\":{\"details\":\"A cache of the tokens that the stable swap pool supports.\"}},\"title\":\"PoolAssetManager\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalArgument(string)\":[{\"notice\":\"An error used to indicate that an argument passed to a function is illegal or         inappropriate.\"}],\"IllegalState(string)\":[{\"notice\":\"An error used to indicate that a function has encountered an unrecoverable state.\"}],\"Unauthorized(string)\":[{\"notice\":\"An error used to indicate that a message sender tried to execute a privileged function.\"}]},\"events\":{\"AdminUpdated(address)\":{\"notice\":\"Emitted when the admin is updated.\"},\"BurnTwoPoolTokens(uint8,uint256,uint256)\":{\"notice\":\"Emitted when 2pool tokens are burned.\"},\"ClaimRewards(bool,uint256,uint256,uint256)\":{\"notice\":\"Emitted when convex rewards are claimed.\"},\"DepositTwoPoolTokens(uint256,bytes32,bool)\":{\"notice\":\"Emitted when meta pool tokens are deposited into convex.\"},\"MintTwoPoolTokens(uint256[2],uint256)\":{\"notice\":\"Emitted when 2pool tokens are minted.\"},\"MintTwoPoolTokens(uint8,uint256,uint256)\":{\"notice\":\"Emitted when 2pool tokens are minted.\"},\"OperatorUpdated(address)\":{\"notice\":\"Emitted when the operator is updated.\"},\"PendingAdminUpdated(address)\":{\"notice\":\"Emitted when the pending admin is updated.\"},\"ReclaimTwoPoolAsset(uint8,uint256)\":{\"notice\":\"Emitted when 2pool assets are sent to the transmuter buffer.\"},\"RewardReceiverUpdated(address)\":{\"notice\":\"Emitted when the reward receiver is updated.\"},\"TransmuterBufferUpdated(address)\":{\"notice\":\"Emitted when the transmuter buffer is updated.\"},\"TwoPoolSlippageUpdated(uint256)\":{\"notice\":\"Emitted when the 2pool slippage is updated.\"},\"WithdrawTwoPoolTokens(uint256,bool)\":{\"notice\":\"Emitted when meta pool tokens are withdrawn from convex.\"}},\"kind\":\"user\",\"methods\":{\"acceptAdmin()\":{\"notice\":\"Completes the 2-step process of setting the administrator. The pending admin must be set and the caller must be the pending admin. After this function is successfully executed, the admin will be set to the pending admin and the pending admin will be reset.\"},\"admin()\":{\"notice\":\"The admin.\"},\"burnTwoPoolTokens(uint8,uint256)\":{\"notice\":\"Burns 2pool tokens to withdraw an asset.\"},\"claimRewards()\":{\"notice\":\"Claims convex, curve, and auxiliary rewards.\"},\"convexFraxBooster()\":{\"notice\":\"The convex booster contract.\"},\"convexFraxVault()\":{\"notice\":\"The address of the vault created during the contructor.\"},\"convexPoolId()\":{\"notice\":\"The convex pool identifier.\"},\"convexStakingWrapper()\":{\"notice\":\"The staking wrapper.\"},\"convexToken()\":{\"notice\":\"The convex token.\"},\"curveToken()\":{\"notice\":\"The curve token.\"},\"depositTwoPoolTokens(uint256)\":{\"notice\":\"Deposits and stakes meta pool tokens into convex.\"},\"depositTwoPoolTokensCustomLock(uint256,uint256)\":{\"notice\":\"Deposits and stakes meta pool tokens into convex.\"},\"emergencyRecall(uint256,bytes32)\":{\"notice\":\"Recalls tokens in a balanced manner in case of an emergency\"},\"exchangeRate(uint8)\":{\"notice\":\"Gets the amount of a 2pool asset that one alUSD is worth.\"},\"flush(uint256[2])\":{\"notice\":\"Flushes two pool assets into convex by minting 2pool tokens from the assets,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. This function is provided for ease of use.\"},\"flush(uint8,uint256)\":{\"notice\":\"Flushes a two pool asset into convex by minting 2pool tokens using the asset,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. This function is provided for ease of use.\"},\"flushCustomLock(uint256[2],uint256)\":{\"notice\":\"Flushes two pool assets into convex by minting 2pool tokens from the assets,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. Allows specification of locking period. This function is provided for ease of use.\"},\"flushCustomLock(uint8,uint256,uint256)\":{\"notice\":\"Flushes a two pool asset into convex by minting 2pool tokens using the asset,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. Allows specification of locking period. This function is provided for ease of use.\"},\"fraxShareToken()\":{\"notice\":\"The frax share token.\"},\"getTokenForTwoPoolAsset(uint8)\":{\"notice\":\"Gets the ERC20 token associated with a 2pool asset.\"},\"kekId(bytes32)\":{\"notice\":\"the kek_id of the twoPool token deposit.\"},\"mintTwoPoolTokens(uint256[2])\":{\"notice\":\"Mints 2pool tokens with a combination of assets.\"},\"mintTwoPoolTokens(uint8,uint256)\":{\"notice\":\"Mints 2pool tokens with an asset.\"},\"onERC20Received(address,uint256)\":{\"notice\":\"Informs implementors of this interface that an ERC20 token has been transferred.\"},\"operators(address)\":{\"notice\":\"The operators.\"},\"pendingAdmin()\":{\"notice\":\"The current pending admin.\"},\"recall(uint8,uint256,bytes32)\":{\"notice\":\"Recalls a two pool asset into reserves by withdrawing meta pool tokens from         convex, burning the meta pool tokens for 2pool tokens, and then burning the 2pool         tokens for an asset. This function is provided for ease of use.\"},\"reclaimTwoPoolAsset(uint8,uint256)\":{\"notice\":\"Reclaims a two pool asset to the transmuter buffer.\"},\"setOperator(address,bool)\":{\"notice\":\"Sets the operator. The caller must be the admin.\"},\"setPendingAdmin(address)\":{\"notice\":\"Begins the 2-step process of setting the administrator. The caller must be the admin. Setting the pending timelock to the zero address will stop the process of setting a new timelock.\"},\"setRewardReceiver(address)\":{\"notice\":\"Sets the reward receiver.\"},\"setTransmuterBuffer(address)\":{\"notice\":\"Sets the transmuter buffer.\"},\"setTwoPoolSlippage(uint256)\":{\"notice\":\"Sets the slippage that will be tolerated when depositing and withdrawing 2pool         assets. The slippage has a resolution of 6 decimals. The operator is allowed to set the slippage because it is a volatile parameter that may need fine adjustment in a short time window.\"},\"sweep(address,uint256)\":{\"notice\":\"Sweeps a token out of the contract to the admin.\"},\"transmuterBuffer()\":{\"notice\":\"The transmuter buffer.\"},\"twoPool()\":{\"notice\":\"The 2pool contract.\"},\"twoPoolAssetReserves(uint8)\":{\"notice\":\"Gets the amount of a 2pool asset that this contract has in reserves.\"},\"twoPoolSlippage()\":{\"notice\":\"The amount of slippage that will be tolerated when depositing and withdrawing assets         from the stable swap pool. In units of basis points.\"},\"withdrawTwoPoolTokens(uint256,bytes32)\":{\"notice\":\"Withdraws and unwraps meta pool tokens from convex.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/PoolAssetManager.sol\":\"PoolAssetManager\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373030303330343433383932\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/PoolAssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalArgument, IllegalState, Unauthorized} from \\\"./base/ErrorMessages.sol\\\";\\nimport {Multicall} from \\\"./base/Multicall.sol\\\";\\nimport {MutexLock} from \\\"./base/MutexLock.sol\\\";\\n\\nimport {IERC20TokenReceiver} from \\\"./interfaces/IERC20TokenReceiver.sol\\\";\\nimport {IConvexFraxBooster} from \\\"./interfaces/external/convex/IConvexFraxBooster.sol\\\";\\nimport {IConvexFraxFarm} from \\\"./interfaces/external/convex/IConvexFraxFarm.sol\\\";\\nimport {IConvexFraxVault} from \\\"./interfaces/external/convex/IConvexFraxVault.sol\\\";\\nimport {IConvexRewards} from \\\"./interfaces/external/convex/IConvexRewards.sol\\\";\\nimport {IConvexStakingWrapper} from \\\"./interfaces/external/convex/IConvexStakingWrapper.sol\\\";\\nimport {IConvexToken} from \\\"./interfaces/external/convex/IConvexToken.sol\\\";\\n\\nimport {\\n    IStableSwap2Pool,\\n    N_COINS as NUM_STABLE_COINS\\n} from \\\"./interfaces/external/curve/IStableSwap2Pool.sol\\\";\\n\\nimport {SafeERC20} from \\\"./libraries/SafeERC20.sol\\\";\\n\\n/// @notice A struct used to define initialization parameters. This is not included\\n///         in the contract to prevent naming collisions.\\nstruct InitializationParams {\\n    address admin;\\n    address operator;\\n    address rewardReceiver;\\n    address transmuterBuffer;\\n    IERC20 fraxShareToken;\\n    IERC20 curveToken;\\n    IStableSwap2Pool twoPool;\\n    uint256 twoPoolSlippage;\\n    IConvexToken convexToken;\\n    IConvexStakingWrapper convexStakingWrapper;\\n    IConvexFraxBooster convexFraxBooster;\\n    uint256 convexPoolId;\\n}\\n\\nstruct LockParams {\\n    uint256 amount;\\n    uint256 timeLocked;\\n}\\n\\n/// @dev The amount of precision that slippage parameters have.\\nuint256 constant SLIPPAGE_PRECISION = 1e4;\\n\\n/// @dev The amount of precision that curve pools use for price calculations.\\nuint256 constant CURVE_PRECISION = 1e18;\\n\\nuint256 constant MINIMUM_LOCK_TIME = 604800;\\n\\n/// @notice Enumerations for FRAX/USDC two pool assets.\\n///\\n/// @dev Do not change the order of these fields.\\nenum PoolAsset {\\n    ALETH, FRXETH\\n}\\n\\n/// @title  PoolAssetManager\\n/// @author Alchemix Finance\\ncontract PoolAssetManager is Multicall, MutexLock, IERC20TokenReceiver {\\n    /// @notice Emitted when the admin is updated.\\n    ///\\n    /// @param admin The admin.\\n    event AdminUpdated(address admin);\\n\\n    /// @notice Emitted when the pending admin is updated.\\n    ///\\n    /// @param pendingAdmin The pending admin.\\n    event PendingAdminUpdated(address pendingAdmin);\\n\\n    /// @notice Emitted when the operator is updated.\\n    ///\\n    /// @param operator The operator.\\n    event OperatorUpdated(address operator);\\n\\n    /// @notice Emitted when the reward receiver is updated.\\n    ///\\n    /// @param rewardReceiver The reward receiver.\\n    event RewardReceiverUpdated(address rewardReceiver);\\n\\n    /// @notice Emitted when the transmuter buffer is updated.\\n    ///\\n    /// @param transmuterBuffer The transmuter buffer.\\n    event TransmuterBufferUpdated(address transmuterBuffer);\\n\\n    /// @notice Emitted when the 2pool slippage is updated.\\n    ///\\n    /// @param twoPoolSlippage The 2pool slippage.\\n    event TwoPoolSlippageUpdated(uint256 twoPoolSlippage);\\n\\n    /// @notice Emitted when 2pool tokens are minted.\\n    ///\\n    /// @param amounts               The amounts of each 2pool asset used to mint liquidity.\\n    /// @param mintedTwoPoolTokens The amount of 2pool tokens minted.\\n    event MintTwoPoolTokens(uint256[NUM_STABLE_COINS] amounts, uint256 mintedTwoPoolTokens);\\n\\n    /// @notice Emitted when 2pool tokens are minted.\\n    ///\\n    /// @param asset                 The 2pool asset used to mint 2pool tokens.\\n    /// @param amount                The amount of the asset used to mint 2pool tokens.\\n    /// @param mintedTwoPoolTokens The amount of 2pool tokens minted.\\n    event MintTwoPoolTokens(PoolAsset asset, uint256 amount, uint256 mintedTwoPoolTokens);\\n\\n    /// @notice Emitted when 2pool tokens are burned.\\n    ///\\n    /// @param asset     The 2pool asset that was received.\\n    /// @param amount    The amount of 2pool tokens that were burned.\\n    /// @param withdrawn The amount of the 2pool asset that was withdrawn.\\n    event BurnTwoPoolTokens(PoolAsset asset, uint256 amount, uint256 withdrawn);\\n\\n    /// @notice Emitted when meta pool tokens are deposited into convex.\\n    ///\\n    /// @param amount  The amount of meta pool tokens that were deposited.\\n    /// @param id      The ID of the new lock.\\n    /// @param success If the operation was successful.\\n    event DepositTwoPoolTokens(uint256 amount, bytes32 id, bool success);\\n\\n    /// @notice Emitted when meta pool tokens are withdrawn from convex.\\n    ///\\n    /// @param amount  The amount of meta pool tokens that were withdrawn.\\n    /// @param success If the operation was successful.\\n    event WithdrawTwoPoolTokens(uint256 amount, bool success);\\n\\n    /// @notice Emitted when convex rewards are claimed.\\n    ///\\n    /// @param success      If the operation was successful.\\n    /// @param amountFxs    The amount of frax share tokens sent to the reward recipient.\\n    /// @param amountCurve  The amount of curve tokens sent to the reward recipient.\\n    /// @param amountConvex The amount of convex tokens sent to the reward recipient.\\n    event ClaimRewards(bool success, uint256 amountFxs, uint256 amountCurve, uint256 amountConvex);\\n\\n    /// @notice Emitted when 2pool assets are sent to the transmuter buffer.\\n    ///\\n    /// @param asset  The 2pool asset that was reclaimed.\\n    /// @param amount The amount of the asset that was reclaimed.\\n    event ReclaimTwoPoolAsset(PoolAsset asset, uint256 amount);\\n\\n    /// @notice The admin.\\n    address public admin;\\n\\n    /// @notice The current pending admin.\\n    address public pendingAdmin;\\n\\n    /// @notice The operators.\\n    mapping(address => bool) public operators;\\n\\n    // @notice The reward receiver.\\n    address public rewardReceiver;\\n\\n    /// @notice The transmuter buffer.\\n    address public transmuterBuffer;\\n\\n    /// @notice The frax share token.\\n    IERC20 public immutable fraxShareToken;\\n\\n    /// @notice The curve token.\\n    IERC20 public immutable curveToken;\\n\\n    /// @notice The 2pool contract.\\n    IStableSwap2Pool public immutable twoPool;\\n\\n    /// @notice The amount of slippage that will be tolerated when depositing and withdrawing assets\\n    ///         from the stable swap pool. In units of basis points.\\n    uint256 public twoPoolSlippage;\\n\\n    /// @notice The convex token.\\n    IConvexToken public immutable convexToken;\\n\\n    /// @notice The staking wrapper.\\n    IConvexStakingWrapper public immutable convexStakingWrapper;\\n\\n    /// @notice The convex booster contract.\\n    IConvexFraxBooster public immutable convexFraxBooster;\\n\\n    /// @notice The address of the vault created during the contructor.\\n    IConvexFraxVault public convexFraxVault;\\n\\n    /// @notice The convex pool identifier.\\n    uint256 public immutable convexPoolId;\\n\\n    /// @notice the kek_id of the twoPool token deposit.\\n    mapping (bytes32 => LockParams) public kekId;\\n\\n    /// @dev A cache of the tokens that the stable swap pool supports.\\n    IERC20[NUM_STABLE_COINS] private _twoPoolAssetCache;\\n\\n    /// @dev A modifier which reverts if the message sender is not the admin.\\n    modifier onlyAdmin() {\\n        if (msg.sender != admin) {\\n            revert Unauthorized(\\\"Not admin\\\");\\n        }\\n        _;\\n    }\\n\\n    /// @dev A modifier which reverts if the message sender is not the operator.\\n    modifier onlyOperator() {\\n        if (!operators[msg.sender]) {\\n            revert Unauthorized(\\\"Not operator\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(InitializationParams memory params) {\\n        admin                   = params.admin;\\n        rewardReceiver          = params.rewardReceiver;\\n        transmuterBuffer        = params.transmuterBuffer;\\n        fraxShareToken          = params.fraxShareToken;\\n        curveToken              = params.curveToken;\\n        twoPool                 = params.twoPool;\\n        twoPoolSlippage         = params.twoPoolSlippage;\\n        convexToken             = params.convexToken;\\n        convexStakingWrapper    = params.convexStakingWrapper;\\n        convexFraxBooster       = params.convexFraxBooster;\\n        convexPoolId            = params.convexPoolId;\\n\\n        operators[params.operator] = true;\\n\\n        convexFraxVault = IConvexFraxVault(convexFraxBooster.createVault(convexPoolId));\\n\\n        for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\\n            _twoPoolAssetCache[i] = IERC20(params.twoPool.coins(i));\\n        }\\n\\n        emit AdminUpdated(admin);\\n        emit OperatorUpdated(params.operator);\\n        emit RewardReceiverUpdated(rewardReceiver);\\n        emit TransmuterBufferUpdated(transmuterBuffer);\\n        emit TwoPoolSlippageUpdated(twoPoolSlippage);\\n    }\\n\\n    /// @notice Gets the amount of a 2pool asset that this contract has in reserves.\\n    ///\\n    /// @param asset The 2pool asset.\\n    ///\\n    /// @return The reserves.\\n    function twoPoolAssetReserves(PoolAsset asset) external view returns (uint256) {\\n        IERC20 token = getTokenForTwoPoolAsset(asset);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /// @notice Gets the amount of a 2pool asset that one alUSD is worth.\\n    ///\\n    /// @param asset The 2pool asset.\\n    ///\\n    /// @return The amount of the underying.\\n    function exchangeRate(PoolAsset asset) public view returns (uint256) {\\n        return twoPool.calc_withdraw_one_coin(1e18, int128(uint128(uint256(asset))));\\n    }\\n\\n    /// @notice Gets the ERC20 token associated with a 2pool asset.\\n    ///\\n    /// @param asset The asset to get the token for.\\n    ///\\n    /// @return The token.\\n    function getTokenForTwoPoolAsset(PoolAsset asset) public view returns (IERC20) {\\n        uint256 index = uint256(asset);\\n        if (index >= NUM_STABLE_COINS) {\\n            revert IllegalArgument(\\\"Asset index out of bounds\\\");\\n        }\\n        return _twoPoolAssetCache[index];\\n    }\\n\\n    /// @notice Begins the 2-step process of setting the administrator.\\n    ///\\n    /// The caller must be the admin. Setting the pending timelock to the zero address will stop\\n    /// the process of setting a new timelock.\\n    ///\\n    /// @param value The value to set the pending timelock to.\\n    function setPendingAdmin(address value) external onlyAdmin {\\n        pendingAdmin = value;\\n        emit PendingAdminUpdated(value);\\n    }\\n\\n    /// @notice Completes the 2-step process of setting the administrator.\\n    ///\\n    /// The pending admin must be set and the caller must be the pending admin. After this function\\n    /// is successfully executed, the admin will be set to the pending admin and the pending admin\\n    /// will be reset.\\n    function acceptAdmin() external {\\n        if (pendingAdmin == address(0)) {\\n            revert IllegalState(\\\"Pending admin unset\\\");\\n        }\\n\\n        if (pendingAdmin != msg.sender) {\\n            revert Unauthorized(\\\"Not pending admin\\\");\\n        }\\n\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n\\n        emit AdminUpdated(admin);\\n        emit PendingAdminUpdated(address(0));\\n    }\\n\\n    /// @notice Sets the operator.\\n    ///\\n    /// The caller must be the admin.\\n    ///\\n    /// @param operator The address to set\\n    /// @param value The value to set the admin to.\\n    function setOperator(address operator, bool value) external onlyAdmin {\\n        operators[operator] = value;\\n        emit OperatorUpdated(operator);\\n    }\\n\\n    /// @notice Sets the reward receiver.\\n    ///\\n    /// @param value The value to set the reward receiver to.\\n    function setRewardReceiver(address value) external onlyAdmin {\\n        rewardReceiver = value;\\n        emit RewardReceiverUpdated(value);\\n    }\\n\\n    /// @notice Sets the transmuter buffer.\\n    ///\\n    /// @param value The value to set the transmuter buffer to.\\n    function setTransmuterBuffer(address value) external onlyAdmin {\\n        transmuterBuffer = value;\\n        emit TransmuterBufferUpdated(value);\\n    }\\n\\n    /// @notice Sets the slippage that will be tolerated when depositing and withdrawing 2pool\\n    ///         assets. The slippage has a resolution of 6 decimals.\\n    ///\\n    /// The operator is allowed to set the slippage because it is a volatile parameter that may need\\n    /// fine adjustment in a short time window.\\n    ///\\n    /// @param value The value to set the slippage to.\\n    function setTwoPoolSlippage(uint256 value) external onlyOperator {\\n        if (value > SLIPPAGE_PRECISION) {\\n            revert IllegalArgument(\\\"Slippage not in range\\\");\\n        }\\n        twoPoolSlippage = value;\\n        emit TwoPoolSlippageUpdated(value);\\n    }\\n\\n    /// @notice Mints 2pool tokens with a combination of assets.\\n    ///\\n    /// @param amounts The amounts of the assets to deposit.\\n    ///\\n    /// @return minted The number of 2pool tokens minted.\\n    function mintTwoPoolTokens(\\n        uint256[NUM_STABLE_COINS] calldata amounts\\n    ) external lock onlyOperator returns (uint256 minted) {\\n        return _mintTwoPoolTokens(amounts);\\n    }\\n\\n    /// @notice Mints 2pool tokens with an asset.\\n    ///\\n    /// @param asset  The asset to deposit into the 2pool.\\n    /// @param amount The amount of the asset to deposit.\\n    ///\\n    /// @return minted The number of 2pool tokens minted.\\n    function mintTwoPoolTokens(\\n        PoolAsset asset,\\n        uint256 amount\\n    ) external lock onlyOperator returns (uint256 minted) {\\n        return _mintTwoPoolTokens(asset, amount);\\n    }\\n\\n    /// @notice Burns 2pool tokens to withdraw an asset.\\n    ///\\n    /// @param asset  The asset to withdraw.\\n    /// @param amount The amount of 2pool tokens to burn.\\n    ///\\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\\n    function burnTwoPoolTokens(\\n        PoolAsset asset,\\n        uint256 amount\\n    ) external lock onlyOperator returns (uint256 withdrawn) {\\n        return _burnTwoPoolTokens(asset, amount);\\n    }\\n\\n    /// @notice Deposits and stakes meta pool tokens into convex.\\n    ///\\n    /// @param amount The amount of meta pool tokens to deposit.\\n    ///\\n    /// @return success If the tokens were successfully deposited.\\n    /// @return id      The ID of the new lock.\\n    function depositTwoPoolTokens(\\n        uint256 amount\\n    ) external lock onlyOperator returns (bool success, bytes32 id) {\\n        return _depositTwoPoolTokens(amount, MINIMUM_LOCK_TIME);\\n    }\\n\\n    /// @notice Deposits and stakes meta pool tokens into convex.\\n    ///\\n    /// @param amount The amount of meta pool tokens to deposit.\\n    ///\\n    /// @return success If the tokens were successfully deposited.\\n    /// @return id      The ID of the new lock.\\n    function depositTwoPoolTokensCustomLock(\\n        uint256 amount,\\n        uint256 lockTime\\n    ) external lock onlyOperator returns (bool success, bytes32 id) {\\n        return _depositTwoPoolTokens(amount, lockTime);\\n    }\\n\\n    /// @notice Withdraws and unwraps meta pool tokens from convex.\\n    ///\\n    /// @param  amount  The amount of meta pool tokens to withdraw.\\n    /// @param  id      The id of the lock to withdraw from.  \\n    ///\\n    /// @return success If the tokens were successfully withdrawn.\\n    function withdrawTwoPoolTokens(\\n        uint256 amount,\\n        bytes32 id\\n    ) external lock onlyOperator returns (bool success) {\\n        return _withdrawTwoPoolTokens(amount, id);\\n    }\\n\\n    /// @notice Claims convex, curve, and auxiliary rewards.\\n    ///\\n    /// @return success If the claim was successful.\\n    function claimRewards() external lock onlyOperator returns (bool success) {\\n        convexFraxVault.getReward();\\n        success = true;\\n\\n        uint256 fxsBalance    = fraxShareToken.balanceOf(address(this));\\n        uint256 curveBalance  = curveToken.balanceOf(address(this));\\n        uint256 convexBalance = convexToken.balanceOf(address(this));\\n\\n        SafeERC20.safeTransfer(address(curveToken), rewardReceiver, curveBalance);\\n        SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance);\\n        SafeERC20.safeTransfer(address(fraxShareToken), rewardReceiver, fxsBalance);\\n\\n        emit ClaimRewards(success, fxsBalance, curveBalance, convexBalance);\\n    }\\n\\n    /// @notice Flushes two pool assets into convex by minting 2pool tokens from the assets,\\n    ///         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool\\n    ///         tokens into convex.\\n    ///\\n    /// This function is provided for ease of use.\\n    ///\\n    /// @param amounts The amounts of the 2pool assets to flush.\\n    ///\\n    /// @return The amount of meta pool tokens deposited into convex.\\n    function flush(\\n        uint256[NUM_STABLE_COINS] calldata amounts\\n    ) external lock onlyOperator returns (uint256) {\\n        uint256 mintedTwoPoolTokens = _mintTwoPoolTokens(amounts);\\n\\n        (bool success,) = _depositTwoPoolTokens(mintedTwoPoolTokens, MINIMUM_LOCK_TIME);\\n\\n        if (!success) {\\n            revert IllegalState(\\\"Deposit into convex failed\\\");\\n        }\\n\\n        return mintedTwoPoolTokens;\\n    }\\n\\n    /// @notice Flushes two pool assets into convex by minting 2pool tokens from the assets,\\n    ///         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool\\n    ///         tokens into convex. Allows specification of locking period.\\n    ///\\n    /// This function is provided for ease of use.\\n    ///\\n    /// @param amounts The amounts of the 2pool assets to flush.\\n    /// @param lockTime The amount of time to lock the staked tokens.\\n    ///\\n    /// @return The amount of meta pool tokens deposited into convex.\\n    function flushCustomLock(\\n        uint256[NUM_STABLE_COINS] calldata amounts,\\n        uint256 lockTime\\n    ) external lock onlyOperator returns (uint256) {\\n        uint256 mintedTwoPoolTokens = _mintTwoPoolTokens(amounts);\\n\\n        (bool success, ) = _depositTwoPoolTokens(mintedTwoPoolTokens, lockTime);\\n\\n        if (!success) {\\n            revert IllegalState(\\\"Deposit into convex failed\\\");\\n        }\\n\\n        return mintedTwoPoolTokens;\\n    }\\n\\n    /// @notice Flushes a two pool asset into convex by minting 2pool tokens using the asset,\\n    ///         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool\\n    ///         tokens into convex.\\n    ///\\n    /// This function is provided for ease of use.\\n    ///\\n    /// @param asset  The 2pool asset to flush.\\n    /// @param amount The amount of the 2pool asset to flush.\\n    ///\\n    /// @return The amount of meta pool tokens deposited into convex.\\n    function flush(\\n        PoolAsset asset,\\n        uint256 amount\\n    ) external lock onlyOperator returns (uint256) {\\n        uint256 mintedTwoPoolTokens = _mintTwoPoolTokens(asset, amount);\\n\\n        (bool success,) = _depositTwoPoolTokens(mintedTwoPoolTokens, MINIMUM_LOCK_TIME);\\n\\n        if (!success) {\\n            revert IllegalState(\\\"Deposit into convex failed\\\");\\n        }\\n\\n        return mintedTwoPoolTokens;\\n    }\\n\\n    /// @notice Flushes a two pool asset into convex by minting 2pool tokens using the asset,\\n    ///         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool\\n    ///         tokens into convex. Allows specification of locking period.\\n    ///\\n    /// This function is provided for ease of use.\\n    ///\\n    /// @param asset    The 2pool asset to flush.\\n    /// @param amount   The amount of the 2pool asset to flush.\\n    /// @param lockTime The amount of time to lock the staked tokens.\\n    ///\\n    /// @return The amount of meta pool tokens deposited into convex.\\n    function flushCustomLock(\\n        PoolAsset asset,\\n        uint256 amount,\\n        uint256 lockTime\\n    ) external lock onlyOperator returns (uint256) {\\n        uint256 mintedTwoPoolTokens = _mintTwoPoolTokens(asset, amount);\\n\\n        (bool success, bytes32 id) = _depositTwoPoolTokens(mintedTwoPoolTokens, lockTime);\\n\\n        if (!success) {\\n            revert IllegalState(\\\"Deposit into convex failed\\\");\\n        }\\n\\n        return mintedTwoPoolTokens;\\n    }\\n\\n    /// @notice Recalls a two pool asset into reserves by withdrawing meta pool tokens from\\n    ///         convex, burning the meta pool tokens for 2pool tokens, and then burning the 2pool\\n    ///         tokens for an asset.\\n    ///\\n    /// This function is provided for ease of use.\\n    ///\\n    /// @param asset  The 2pool asset to recall.\\n    /// @param amount The amount of the meta pool tokens to withdraw from convex and burn.\\n    /// @param  id      The id of the lock to withdraw from.  \\n    ///\\n    /// @return The amount of the 2pool asset recalled.\\n    function recall(\\n        PoolAsset asset,\\n        uint256 amount,\\n        bytes32 id\\n    ) external lock onlyOperator returns (uint256) {\\n\\n        if (!_withdrawTwoPoolTokens(amount, id)) {\\n            revert IllegalState(\\\"Withdraw from convex failed\\\");\\n        }\\n        return _burnTwoPoolTokens(asset, amount);\\n    }\\n\\n    /// @notice Recalls tokens in a balanced manner in case of an emergency\\n    function emergencyRecall(uint256 amount, bytes32 id) external lock onlyOperator {\\n        if (!_withdrawTwoPoolTokens(amount, id)) {\\n            revert IllegalState(\\\"Withdraw from convex failed\\\");\\n        }        \\n\\n        IERC20 twoPoolToken = IERC20(address(twoPool));\\n\\n        SafeERC20.safeApprove(address(twoPoolToken), address(twoPool), 0);\\n        SafeERC20.safeApprove(address(twoPoolToken), address(twoPool), amount);\\n\\n        // Remove the liquidity from the pool.\\n        uint256[2] memory minAmounts = [uint256(0), uint256(0)];\\n        twoPool.remove_liquidity(amount, minAmounts, address(this));\\n    }\\n\\n    /// @notice Reclaims a two pool asset to the transmuter buffer.\\n    ///\\n    /// @param asset  The 2pool asset to reclaim.\\n    /// @param amount The amount to reclaim.\\n    function reclaimTwoPoolAsset(PoolAsset asset, uint256 amount) public lock onlyAdmin {\\n        IERC20 token = getTokenForTwoPoolAsset(asset);\\n        SafeERC20.safeTransfer(address(token), transmuterBuffer, amount);\\n\\n        IERC20TokenReceiver(transmuterBuffer).onERC20Received(address(token), amount);\\n\\n        emit ReclaimTwoPoolAsset(asset, amount);\\n    }\\n\\n    /// @notice Sweeps a token out of the contract to the admin.\\n    ///\\n    /// @param token  The token to sweep.\\n    /// @param amount The amount of the token to sweep.\\n    function sweep(address token, uint256 amount) external lock onlyAdmin {\\n        SafeERC20.safeTransfer(address(token), msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IERC20TokenReceiver\\n    ///\\n    /// @dev This function is required in order to receive tokens from the conduit.\\n    function onERC20Received(address token, uint256 value) external { /* noop */ }\\n\\n    /// @dev Mints 2pool tokens with a combination of assets.\\n    ///\\n    /// @param amounts The amounts of the assets to deposit.\\n    ///\\n    /// @return minted The number of 2pool tokens minted.\\n    function _mintTwoPoolTokens(\\n        uint256[NUM_STABLE_COINS] calldata amounts\\n    ) internal returns (uint256 minted) {\\n        IERC20[NUM_STABLE_COINS] memory tokens = _twoPoolAssetCache;\\n\\n        IERC20 twoPoolToken = IERC20(address(twoPool));\\n\\n        uint256 twoPoolDecimals = SafeERC20.expectDecimals(address(twoPoolToken));\\n        uint256 normalizedTotal   = 0;\\n\\n        for (uint256 i = 0; i < NUM_STABLE_COINS; i++) {\\n            if (amounts[i] == 0) continue;\\n\\n            uint256 tokenDecimals   = SafeERC20.expectDecimals(address(tokens[i]));\\n            uint256 missingDecimals = twoPoolDecimals - tokenDecimals;\\n\\n            normalizedTotal += amounts[i] * 10**missingDecimals;\\n\\n            // For assets like USDT, the approval must be first set to zero before updating it.\\n            SafeERC20.safeApprove(address(tokens[i]), address(twoPool), 0);\\n            SafeERC20.safeApprove(address(tokens[i]), address(twoPool), amounts[i]);\\n        }\\n\\n        // Calculate what the normalized value of the tokens is.\\n        uint256 expectedOutput = normalizedTotal * CURVE_PRECISION / twoPool.get_virtual_price();\\n\\n        // Calculate the minimum amount of 2pool lp tokens that we are expecting out when\\n        // adding liquidity for all of the assets. This value is twod off the optimistic\\n        // assumption that one of each token is approximately equal to one 2pool lp token.\\n        uint256 minimumMintAmount = expectedOutput * twoPoolSlippage / SLIPPAGE_PRECISION;\\n\\n        // Record the amount of 2pool lp tokens that we start with before adding liquidity\\n        // so that we can determine how many we minted.\\n        uint256 startingBalance = twoPoolToken.balanceOf(address(this));\\n\\n        // Add the liquidity to the pool.\\n        twoPool.add_liquidity(amounts, minimumMintAmount);\\n\\n        // Calculate how many 2pool lp tokens were minted.\\n        minted = twoPoolToken.balanceOf(address(this)) - startingBalance;\\n\\n        emit MintTwoPoolTokens(amounts, minted);\\n    }\\n\\n    /// @dev Mints 2pool tokens with an asset.\\n    ///\\n    /// @param asset  The asset to deposit into the 2pool.\\n    /// @param amount The amount of the asset to deposit.\\n    ///\\n    /// @return minted The number of 2pool tokens minted.\\n    function _mintTwoPoolTokens(\\n        PoolAsset asset,\\n        uint256 amount\\n    ) internal returns (uint256 minted) {\\n        IERC20 token          = getTokenForTwoPoolAsset(asset);\\n        IERC20 twoPoolToken = IERC20(address(twoPool));\\n\\n        uint256 twoPoolDecimals = SafeERC20.expectDecimals(address(twoPoolToken));\\n        uint256 missingDecimals   = twoPoolDecimals - SafeERC20.expectDecimals(address(token));\\n\\n        uint256[NUM_STABLE_COINS] memory amounts;\\n        amounts[uint256(asset)] = amount;\\n\\n        // Calculate the minimum amount of 2pool lp tokens that we are expecting out when\\n        // adding single sided liquidity. This value is twod off the optimistic assumption that\\n        // one of each token is approximately equal to one 2pool lp token.\\n        uint256 expectedOutput    = amount * CURVE_PRECISION / twoPool.get_virtual_price();\\n        uint256 minimumMintAmount = expectedOutput * twoPoolSlippage / SLIPPAGE_PRECISION;\\n\\n        // Record the amount of 2pool lp tokens that we start with before adding liquidity\\n        // so that we can determine how many we minted.\\n        uint256 startingBalance = twoPoolToken.balanceOf(address(this));\\n\\n        // For assets like USDT, the approval must be first set to zero before updating it.\\n        SafeERC20.safeApprove(address(token), address(twoPool), 0);\\n        SafeERC20.safeApprove(address(token), address(twoPool), amount);\\n\\n        // Add the liquidity to the pool.\\n        twoPool.add_liquidity(amounts, minimumMintAmount);\\n\\n        // Calculate how many 2pool lp tokens were minted.\\n        minted = twoPoolToken.balanceOf(address(this)) - startingBalance;\\n\\n        emit MintTwoPoolTokens(asset, amount, minted);\\n    }\\n\\n    /// @dev Burns 2pool tokens to withdraw an asset.\\n    ///\\n    /// @param asset  The asset to withdraw.\\n    /// @param amount The amount of 2pool tokens to burn.\\n    ///\\n    /// @return withdrawn The amount of the asset withdrawn from the pool.\\n    function _burnTwoPoolTokens(\\n        PoolAsset asset,\\n        uint256 amount\\n    ) internal returns (uint256 withdrawn) {\\n        IERC20 token          = getTokenForTwoPoolAsset(asset);\\n        IERC20 twoPoolToken = IERC20(address(twoPool));\\n\\n        uint256 index = uint256(asset);\\n\\n        // Calculate the minimum amount of underlying tokens that we are expecting out when\\n        // removing single sided liquidity. This value is twod off the optimistic assumption that\\n        // one of each token is approximately equal to one 2pool lp token.\\n        uint256 normalizedAmount = amount * twoPoolSlippage / SLIPPAGE_PRECISION;\\n        uint256 minimumAmountOut   = normalizedAmount * twoPool.get_virtual_price() / CURVE_PRECISION;\\n\\n        // Record the amount of underlying tokens that we start with before removing liquidity\\n        // so that we can determine how many we withdrew from the pool.\\n        uint256 startingBalance = token.balanceOf(address(this));\\n\\n        SafeERC20.safeApprove(address(twoPoolToken), address(twoPool), 0);\\n        SafeERC20.safeApprove(address(twoPoolToken), address(twoPool), amount);\\n\\n        // Remove the liquidity from the pool.\\n        twoPool.remove_liquidity_one_coin(amount, int128(uint128(index)), minimumAmountOut);\\n\\n        // Calculate how many underlying tokens that were withdrawn.\\n        withdrawn = token.balanceOf(address(this)) - startingBalance;\\n\\n        emit BurnTwoPoolTokens(asset, amount, withdrawn);\\n    }\\n\\n    // /// @dev Burns 2pool tokens to withdraw an asset.\\n    // ///\\n    // /// @param amount The amount of 2pool tokens to burn.\\n    // function _burnTwoPoolTokensBalanced(\\n    //     uint256 amount,\\n    //     uint256[2] calldata minAmounts\\n    // ) internal {\\n    //     IERC20 twoPoolToken = IERC20(address(twoPool));\\n\\n    //     SafeERC20.safeApprove(address(twoPoolToken), address(twoPool), 0);\\n    //     SafeERC20.safeApprove(address(twoPoolToken), address(twoPool), amount);\\n\\n    //     // Remove the liquidity from the pool.\\n    //     twoPool.remove_liquidity(amount, minAmounts, address(this));\\n    // }\\n\\n    /// @dev Deposits and stakes meta pool tokens into convex.\\n    ///\\n    /// @param amount   The amount of meta pool tokens to deposit.\\n    /// @param lockTime The time of the new lock.\\n    ///\\n    /// @return success If the tokens were successfully deposited.\\n    /// @return id      The id of the new lock.\\n    function _depositTwoPoolTokens(uint256 amount, uint256 lockTime) internal returns (bool success, bytes32 id) {\\n        SafeERC20.safeApprove(address(twoPool), address(convexFraxVault), amount);\\n        id = convexFraxVault.stakeLockedCurveLp(amount, lockTime);\\n        kekId[id] = LockParams({amount: amount, timeLocked: lockTime});\\n\\n        success = true;\\n\\n        emit DepositTwoPoolTokens(amount, id, success);\\n    }\\n\\n    /// @dev Withdraws and unwraps meta pool tokens from convex.\\n    ///\\n    /// @param amount   The amount of meta pool tokens to withdraw.\\n    /// @param id       The id of the lock you wish to withdraw from.\\n    ///\\n    /// @return success If the tokens were successfully withdrawn.\\n    function _withdrawTwoPoolTokens(uint256 amount, bytes32 id) internal returns (bool success) {\\n        uint256 originalBalance = IERC20(address(twoPool)).balanceOf(address(this));\\n\\n        convexFraxVault.withdrawLockedAndUnwrap(id);\\n\\n        uint256 newBalance = IERC20(address(twoPool)).balanceOf(address(this));\\n\\n        // Frax vaults require to withdraw all meta tokens.\\n        // We must re-stake any remaining tokens.\\n        uint256 restakeAmount = newBalance - originalBalance - amount;\\n\\n        if (restakeAmount > 1) {\\n            SafeERC20.safeApprove(address(twoPool), address(convexFraxVault), restakeAmount);\\n            bytes32 newId = convexFraxVault.stakeLockedCurveLp(restakeAmount, MINIMUM_LOCK_TIME);\\n            kekId[newId] = LockParams({amount: restakeAmount, timeLocked: MINIMUM_LOCK_TIME});\\n            emit DepositTwoPoolTokens(restakeAmount, newId, success);\\n        }\\n\\n        success = true;\\n        emit WithdrawTwoPoolTokens(IERC20(address(twoPool)).balanceOf(address(this)), success);\\n    }\\n\\n    /// @dev Claims convex, curve, and auxiliary rewards.\\n    ///\\n    /// @return success If the claim was successful.\\n    function _claimRewards() internal returns (bool) {\\n        convexFraxVault.getReward();\\n\\n        uint256 fxsBalance    = fraxShareToken.balanceOf(address(this));\\n        uint256 curveBalance  = curveToken.balanceOf(address(this));\\n        uint256 convexBalance = convexToken.balanceOf(address(this));\\n\\n        SafeERC20.safeTransfer(address(curveToken), rewardReceiver, curveBalance);\\n        SafeERC20.safeTransfer(address(convexToken), rewardReceiver, convexBalance);\\n        \\n        emit ClaimRewards(true, fxsBalance, curveBalance, convexBalance);\\n\\n        return true;\\n    }\\n\\n    /// @dev Gets the minimum of two integers.\\n    ///\\n    /// @param x The first integer.\\n    /// @param y The second integer.\\n    ///\\n    /// @return The minimum value.\\n    function min(uint256 x , uint256 y) private pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n\\n    /// @dev Gets the absolute value of the difference of two integers.\\n    ///\\n    /// @param x The first integer.\\n    /// @param y The second integer.\\n    ///\\n    /// @return The absolute value.\\n    function abs(uint256 x , uint256 y) private pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n}\\n\",\"keccak256\":\"0x2198c0319c01ee7ec256343b35e5ee09929a636b413f1834205ed852e0827798\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/ErrorMessages.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\n/// @notice An error used to indicate that an argument passed to a function is illegal or\\n///         inappropriate.\\n///\\n/// @param message The error message.\\nerror IllegalArgument(string message);\\n\\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\\n///\\n/// @param message The error message.\\nerror IllegalState(string message);\\n\\n/// @notice An error used to indicate that an operation is unsupported.\\n///\\n/// @param message The error message.\\nerror UnsupportedOperation(string message);\\n\\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\\n///\\n/// @param message The error message.\\nerror Unauthorized(string message);\",\"keccak256\":\"0x302087c36048c360cbd3192e41344d8705d7a50fdb97c8b77d45a5ff503dd264\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\n/// @title  Multicall\\n/// @author Uniswap Labs\\n///\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall {\\n    error MulticallFailed(bytes data, bytes result);\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                revert MulticallFailed(data[i], result);\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\",\"keccak256\":\"0x5a84b3dcf08b4136e7ae5c51eb261196c7c4a5150bb17a5a78898e1d8fd15d26\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/base/MutexLock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"./ErrorMessages.sol\\\";\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract MutexLock {\\n    enum State {\\n        RESERVED,\\n        UNLOCKED,\\n        LOCKED\\n    }\\n\\n    /// @notice The lock state.\\n    State private _lockState = State.UNLOCKED;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal view returns (bool) {\\n        return _lockState == State.LOCKED;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != State.UNLOCKED) {\\n            revert IllegalState(\\\"Lock already claimed\\\");\\n        }\\n\\n        // Claim the lock.\\n        _lockState = State.LOCKED;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = State.UNLOCKED;\\n    }\\n}\",\"keccak256\":\"0xe3aab21deaf0ce1c795f164630a6e495649779342e0f1f480efac4ff53bb0619\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"submodules/v2-foundry/src/interfaces/IERC20TokenReceiver.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20TokenReceiver\\n/// @author Alchemix Finance\\ninterface IERC20TokenReceiver {\\n    /// @notice Informs implementors of this interface that an ERC20 token has been transferred.\\n    ///\\n    /// @param token The token that was transferred.\\n    /// @param value The amount of the token that was transferred.\\n    function onERC20Received(address token, uint256 value) external;\\n}\",\"keccak256\":\"0xa6cdfe30e36a1efe07e5e854d9603813da77546618e113fda51a41697e0e62b8\"},\"submodules/v2-foundry/src/interfaces/external/convex/IConvexFraxBooster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IConvexFraxBooster {\\n    function createVault(uint256 _pid) external returns (address);\\n}\",\"keccak256\":\"0x3b22b8fdaf52e31e4ec4c0dc8d432f4f85d9e9022809009bd4f1c875018cbff4\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/convex/IConvexFraxFarm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IConvexFraxFarm {\\n    function withdrawLocked(bytes32 kek_id, address destination_address)  external returns (uint256);\\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\\n    function earned(address account) external view returns (uint256[] memory);\\n    function getReward(address destination_address) external returns (uint256[] memory);\\n    function combinedWeightOf(address account) external view returns (uint256);\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x8c831bcde7c76d9cad475c0404b081735716f66ce33f36012457f593f14a522d\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/convex/IConvexFraxVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IConvexFraxVault {\\n    function stakeLockedCurveLp(uint256 liquidity, uint256 secs) external returns (bytes32 kekId);\\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32 kekId);\\n    function withdrawLockedAndUnwrap(bytes32 kekId) external;\\n    function getReward() external;\\n    function earned() external view returns (address[] memory tokenAddresses, uint256[] memory totalEarned);\\n}\",\"keccak256\":\"0xafadab9ff19566ff53c0a2db875361560eb65757882ef6b92e020c85a3cda175\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/convex/IConvexRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConvexRewards {\\n    function rewardToken() external view returns (IERC20);\\n    function earned(address account) external view returns (uint256);\\n    function extraRewards(uint256 index) external view returns (address);\\n    function balanceOf(address account) external returns(uint256);\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n    function getReward() external returns (bool);\\n    function getReward(address recipient, bool claim) external returns (bool);\\n    function stake(uint256 amount) external returns (bool);\\n    function stakeFor(address account, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x8e46855c7757532b4d19ae3ad4fbc095f162df6682f7b55d07d5cdca58afd00c\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/convex/IConvexStakingWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\ninterface IConvexStakingWrapper {\\n    function deposit(uint256 amount, address to) external;\\n    function withdraw(uint256 amount) external;\\n    function withdrawAndUnwrap(uint256 _amount) external;\\n}\",\"keccak256\":\"0x3acbaedd89ce6654e0223086ddffb117ce7535b02adab5dcf4e6357b1c8424c4\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/convex/IConvexToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConvexToken is IERC20 {\\n    function maxSupply() external view returns (uint256);\\n    function totalCliffs() external view returns (uint256);\\n    function reductionPerCliff() external view returns (uint256);\\n}\",\"keccak256\":\"0x7ba70fd43ecd7288c7ee840eaff963f8b0a6ec759a91dc5e95298e565c616b99\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/curve/IStableSwap2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nuint256 constant N_COINS = 2;\\n\\ninterface IStableSwap2Pool {\\n    function coins(uint256 index) external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[N_COINS] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256 amount);\\n\\n    function add_liquidity(uint256[N_COINS] calldata amounts, uint256 minimumMintAmount) external;\\n\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\\n\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 minimumDy\\n    ) external payable returns (uint256);\\n\\n    function remove_liquidity(uint256 amount, uint256[N_COINS] calldata minimumAmounts, address receiver) external returns (uint256[] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[N_COINS] calldata amounts,\\n        uint256 maximumBurnAmount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 i,\\n        uint256 minimumAmount\\n    ) external;\\n}\",\"keccak256\":\"0x78569705c2ace7008170ddb170cf0c48819e38ed7e7c4ea11a5a60799ea86c22\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalState} from \\\"../base/ErrorMessages.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  SafeERC20\\n/// @author Alchemix Finance\\nlibrary SafeERC20 {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a\\n    ///                success. Otherwise, this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6e6fcaae4927a1ac7673771740ada8cd4526c940267adde36029b23a6d7d17a3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101606040526000805460ff191660011790553480156200001f57600080fd5b5060405162003af738038062003af7833981016040819052620000429162000401565b805160008054610100600160a81b0319166101006001600160a01b039384168102919091178255604080850151600380546001600160a01b03199081169287169290921790556060860151600480549092169086161781556080808701518616905260a0808701518616905260c0808701518616905260e080870151600555838701518616905261012080870151861690935261014080870151861693849052610160870151908190526020808801519096168552600290955292819020805460ff1916600117905551639abbdf4b60e01b815291820192909252639abbdf4b906024016020604051808303816000875af115801562000146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016c9190620004f8565b600680546001600160a01b0319166001600160a01b039290921691909117905560005b6002811015620002555760c082015160405163c661065760e01b8152600481018390526001600160a01b039091169063c661065790602401602060405180830381865afa158015620001e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020b9190620004f8565b600882600281106200022157620002216200051f565b0180546001600160a01b0319166001600160a01b0392909216919091179055806200024c8162000535565b9150506200018f565b506000546040516101009091046001600160a01b031681527f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d9060200160405180910390a16020808201516040516001600160a01b0390911681527fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec4910160405180910390a16003546040516001600160a01b0390911681527f2bebe3801c306ffa893b76894d5baf1cef32807aa974f6449595a9c2392f61749060200160405180910390a16004546040516001600160a01b0390911681527f59dea4585e1df1b7a22cafd3486f3c6080e7bd27c1450af2f11f192cb637658b9060200160405180910390a17f32c890dda1c5857193234f885837d184a81efbb9b84bd7697acd063461950bb16005546040516200038f91815260200190565b60405180910390a1506200055d565b60405161018081016001600160401b0381118282101715620003d057634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114620003ec57600080fd5b50565b8051620003fc81620003d6565b919050565b600061018082840312156200041557600080fd5b6200041f6200039e565b6200042a83620003ef565b81526200043a60208401620003ef565b60208201526200044d60408401620003ef565b60408201526200046060608401620003ef565b60608201526200047360808401620003ef565b60808201526200048660a08401620003ef565b60a08201526200049960c08401620003ef565b60c082015260e083015160e0820152610100620004b8818501620003ef565b90820152610120620004cc848201620003ef565b90820152610140620004e0848201620003ef565b90820152610160928301519281019290925250919050565b6000602082840312156200050b57600080fd5b81516200051881620003d6565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200055657634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e05161010051610120516101405161346d6200068a60003960006107cd015260006105bb015260006104d301526000818161080101528181610dc20152610e7101526000818161025d015281816117000152818161184101528181611872015281816118c001528181611ad901528181611bbb01528181611bfd01528181611c5201528181611d9501528181611ec70152818161200401528181612086015281816121b7015281816121e30152818161221f01528181612357015281816123b8015281816124c2015281816124ee0152818161253a0152818161278501528181612866015281816129070152612a6101526000818161052701528181610d340152610e390152600081816102ae01528181610c9d0152610ea9015261346d6000f3fe6080604052600436106102465760003560e01c80635dd077e311610139578063ac9650d8116100b6578063c48fb9101161007a578063c48fb9101461077b578063dae254dd1461079b578063e529ee95146107bb578063e89133b2146107ef578063f851a44014610823578063f999ea661461084857600080fd5b8063ac9650d8146106b3578063bc04f0af146106d3578063bd6acfa6146106f2578063be4b853414610712578063c0511c251461073257600080fd5b80636ea056a9116100fd5780636ea056a91461061d5780639459f2861461063d578063a608d79a1461065d578063a6f74b141461067d578063aa45bd291461069357600080fd5b80635dd077e314610569578063602955f114610589578063625540ea146105a95780636426177d146105dd5780636464cdb1146105fd57600080fd5b80632c9d737a116101c757806341af8cb21161018b57806341af8cb2146104a15780634a9fc49c146104c15780634dd18bf5146104f55780634f39059c14610515578063558a72971461054957600080fd5b80632c9d737a1461040c578063357aa4e11461042c578063372500ab1461044c578063397d9663146104615780634070a3481461048157600080fd5b806318d123211161020e57806318d12321146103475780631a637fe1146103755780631dac30b0146103ac57806326782247146103cc57806327409b3c146103ec57600080fd5b806307e6754c1461024b5780630896f2c61461029c5780630dc3d0ff146102d05780630e18b681146102f057806313e7c9d814610307575b600080fd5b34801561025757600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a857600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102dc57600080fd5b5060045461027f906001600160a01b031681565b3480156102fc57600080fd5b50610305610868565b005b34801561031357600080fd5b50610337610322366004612c36565b60026020526000908152604090205460ff1681565b6040519015158152602001610293565b34801561035357600080fd5b50610367610362366004612c62565b6109b3565b604051908152602001610293565b34801561038157600080fd5b50610395610390366004612c8d565b610a38565b604080519215158352602083019190915201610293565b3480156103b857600080fd5b5060035461027f906001600160a01b031681565b3480156103d857600080fd5b5060015461027f906001600160a01b031681565b3480156103f857600080fd5b50610367610407366004612cbe565b610a90565b34801561041857600080fd5b50610367610427366004612cf1565b610b1b565b34801561043857600080fd5b50610367610447366004612d1b565b610b69565b34801561045857600080fd5b50610337610be0565b34801561046d57600080fd5b5061027f61047c366004612d1b565b610f30565b34801561048d57600080fd5b5061036761049c366004612cf1565b610fbd565b3480156104ad57600080fd5b506103676104bc366004612d36565b611001565b3480156104cd57600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561050157600080fd5b50610305610510366004612c36565b611088565b34801561052157600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561055557600080fd5b50610305610564366004612d63565b61110d565b34801561057557600080fd5b50610367610584366004612cbe565b611199565b34801561059557600080fd5b5060065461027f906001600160a01b031681565b3480156105b557600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e957600080fd5b506103056105f8366004612cf1565b61123e565b34801561060957600080fd5b50610305610618366004612c36565b611346565b34801561062957600080fd5b50610305610638366004612d9a565b6113c4565b34801561064957600080fd5b50610305610658366004612db6565b61140f565b34801561066957600080fd5b50610367610678366004612d36565b6114bf565b34801561068957600080fd5b5061036760055481565b34801561069f57600080fd5b506103376106ae366004612c8d565b61150c565b6106c66106c1366004612dcf565b611550565b6040516102939190612ea0565b3480156106df57600080fd5b506103056106ee366004612d9a565b5050565b3480156106fe57600080fd5b5061036761070d366004612cf1565b6116a5565b34801561071e57600080fd5b5061036761072d366004612d1b565b6116fc565b34801561073e57600080fd5b5061076661074d366004612db6565b6007602052600090815260409020805460019091015482565b60408051928352602083019190915201610293565b34801561078757600080fd5b50610305610796366004612c8d565b6117b0565b3480156107a757600080fd5b506103056107b6366004612c36565b61194b565b3480156107c757600080fd5b506103677f000000000000000000000000000000000000000000000000000000000000000081565b3480156107fb57600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561082f57600080fd5b5060005461027f9061010090046001600160a01b031681565b34801561085457600080fd5b50610395610863366004612db6565b6119c9565b6001546001600160a01b03166108bc5760405163c50656df60e01b815260206004820152601360248201527214195b991a5b99c818591b5a5b881d5b9cd95d606a1b60448201526064015b60405180910390fd5b6001546001600160a01b0316331461090b5760405163973d02cb60e01b81526020600482015260116024820152702737ba103832b73234b7339030b236b4b760791b60448201526064016108b3565b6001805460008054610100600160a81b0319166101006001600160a01b03808516820292909217928390556001600160a01b031990931690935560405191900490911681527f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d9060200160405180910390a1604051600081527fa728e84b447788a55ff664fbfb5c3983925f88b80b672a1b0b8271c94b22df359060200160405180910390a1565b60006109bd611a22565b3360009081526002602052604090205460ff166109ed5760405163973d02cb60e01b81526004016108b390612f02565b60006109f884611a97565b90506000610a068285611eb9565b50905080610a275760405163c50656df60e01b81526004016108b390612f28565b509050610a32611fe1565b92915050565b600080610a43611a22565b3360009081526002602052604090205460ff16610a735760405163973d02cb60e01b81526004016108b390612f02565b610a7d8484611eb9565b91509150610a89611fe1565b9250929050565b6000610a9a611a22565b3360009081526002602052604090205460ff16610aca5760405163973d02cb60e01b81526004016108b390612f02565b6000610ad68585611ff4565b9050600080610ae58386611eb9565b9150915081610b075760405163c50656df60e01b81526004016108b390612f28565b5090915050610b14611fe1565b9392505050565b6000610b25611a22565b3360009081526002602052604090205460ff16610b555760405163973d02cb60e01b81526004016108b390612f02565b610b5f8383612347565b9050610a32611fe1565b600080610b7583610f30565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190612f5f565b6000610bea611a22565b3360009081526002602052604090205460ff16610c1a5760405163973d02cb60e01b81526004016108b390612f02565b600660009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c6a57600080fd5b505af1158015610c7e573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260019350600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190612f5f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190612f5f565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d9190612f5f565b600354909150610e68907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168461265b565b600354610ea0907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168361265b565b600354610ed8907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168561265b565b60408051851515815260208101859052908101839052606081018290527fc3a2bfdd669309fab32bff187e250ae46596032d10653edb1c04abc3988c44459060800160405180910390a1505050610f2d611fe1565b90565b600080826001811115610f4557610f45612f78565b905060028110610f98576040516354a1577760e11b815260206004820152601960248201527f417373657420696e646578206f7574206f6620626f756e64730000000000000060448201526064016108b3565b60088160028110610fab57610fab612f8e565b01546001600160a01b03169392505050565b6000610fc7611a22565b3360009081526002602052604090205460ff16610ff75760405163973d02cb60e01b81526004016108b390612f02565b610b5f8383611ff4565b600061100b611a22565b3360009081526002602052604090205460ff1661103b5760405163973d02cb60e01b81526004016108b390612f02565b600061104683611a97565b905060006110578262093a80611eb9565b509050806110785760405163c50656df60e01b81526004016108b390612f28565b509050611083611fe1565b919050565b60005461010090046001600160a01b031633146110b85760405163973d02cb60e01b81526004016108b390612fa4565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fa728e84b447788a55ff664fbfb5c3983925f88b80b672a1b0b8271c94b22df35906020015b60405180910390a150565b60005461010090046001600160a01b0316331461113d5760405163973d02cb60e01b81526004016108b390612fa4565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151517905590519182527fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec4910160405180910390a15050565b60006111a3611a22565b3360009081526002602052604090205460ff166111d35760405163973d02cb60e01b81526004016108b390612f02565b6111dd8383612763565b61122a5760405163c50656df60e01b815260206004820152601b60248201527f57697468647261772066726f6d20636f6e766578206661696c6564000000000060448201526064016108b3565b6112348484612347565b9050610b14611fe1565b611246611a22565b60005461010090046001600160a01b031633146112765760405163973d02cb60e01b81526004016108b390612fa4565b600061128183610f30565b60045490915061129c9082906001600160a01b03168461265b565b6004805460405163bc04f0af60e01b81526001600160a01b03848116938201939093526024810185905291169063bc04f0af90604401600060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b505050507f79b317be1efd69d6bf9fcbcd2f3353788aadfc2d546bf7ed03dabab1488b28178383604051611335929190612fe9565b60405180910390a1506106ee611fe1565b60005461010090046001600160a01b031633146113765760405163973d02cb60e01b81526004016108b390612fa4565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f59dea4585e1df1b7a22cafd3486f3c6080e7bd27c1450af2f11f192cb637658b90602001611102565b6113cc611a22565b60005461010090046001600160a01b031633146113fc5760405163973d02cb60e01b81526004016108b390612fa4565b61140782338361265b565b6106ee611fe1565b3360009081526002602052604090205460ff1661143f5760405163973d02cb60e01b81526004016108b390612f02565b61271081111561148a576040516354a1577760e11b8152602060048201526015602482015274536c697070616765206e6f7420696e2072616e676560581b60448201526064016108b3565b60058190556040518181527f32c890dda1c5857193234f885837d184a81efbb9b84bd7697acd063461950bb190602001611102565b60006114c9611a22565b3360009081526002602052604090205460ff166114f95760405163973d02cb60e01b81526004016108b390612f02565b61150282611a97565b9050611083611fe1565b6000611516611a22565b3360009081526002602052604090205460ff166115465760405163973d02cb60e01b81526004016108b390612f02565b610b5f8383612763565b60608167ffffffffffffffff81111561156b5761156b613004565b60405190808252806020026020018201604052801561159e57816020015b60608152602001906001900390816115895790505b50905060005b8281101561169e57600080308686858181106115c2576115c2612f8e565b90506020028101906115d4919061301a565b6040516115e2929190613061565b600060405180830381855af49150503d806000811461161d576040519150601f19603f3d011682016040523d82523d6000602084013e611622565b606091505b50915091508161166d5785858481811061163e5761163e612f8e565b9050602002810190611650919061301a565b8260405163070c497560e21b81526004016108b393929190613071565b8084848151811061168057611680612f8e565b6020026020010181905250505080611697906130cf565b90506115a4565b5092915050565b60006116af611a22565b3360009081526002602052604090205460ff166116df5760405163973d02cb60e01b81526004016108b390612f02565b60006116eb8484611ff4565b90506000610a068262093a80611eb9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc2b27d7670de0b6b3a764000084600181111561174857611748612f78565b6040516001600160e01b031960e085901b1681526004810192909252600f0b6024820152604401602060405180830381865afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a329190612f5f565b6117b8611a22565b3360009081526002602052604090205460ff166117e85760405163973d02cb60e01b81526004016108b390612f02565b6117f28282612763565b61183f5760405163c50656df60e01b815260206004820152601b60248201527f57697468647261772066726f6d20636f6e766578206661696c6564000000000060448201526064016108b3565b7f000000000000000000000000000000000000000000000000000000000000000061186c81806000612af5565b611897817f000000000000000000000000000000000000000000000000000000000000000085612af5565b604080518082018252600080825260208201529051633eb1719f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633eb1719f906118f99087908590309060040161310b565b6000604051808303816000875af1158015611918573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119409190810190613138565b5050506106ee611fe1565b60005461010090046001600160a01b0316331461197b5760405163973d02cb60e01b81526004016108b390612fa4565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f2bebe3801c306ffa893b76894d5baf1cef32807aa974f6449595a9c2392f617490602001611102565b6000806119d4611a22565b3360009081526002602052604090205460ff16611a045760405163973d02cb60e01b81526004016108b390612f02565b611a118362093a80611eb9565b91509150611a1d611fe1565b915091565b600160005460ff166002811115611a3b57611a3b612f78565b14611a805760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b60448201526064016108b3565b600080546002919060ff19166001835b0217905550565b604080518082019182905260009182919060089060029082845b81546001600160a01b03168152600190910190602001808311611ab1575050505050905060007f000000000000000000000000000000000000000000000000000000000000000090506000611b0582612b28565b60ff1690506000805b6002811015611c4d57868160028110611b2957611b29612f8e565b602002013515611c3b576000611b54868360028110611b4a57611b4a612f8e565b6020020151612b28565b60ff1690506000611b6582866131f6565b9050611b7281600a6132f1565b898460028110611b8457611b84612f8e565b6020020135611b9391906132fd565b611b9d908561331c565b9350611be1878460028110611bb457611bb4612f8e565b60200201517f00000000000000000000000000000000000000000000000000000000000000006000612af5565b611c38878460028110611bf657611bf6612f8e565b60200201517f00000000000000000000000000000000000000000000000000000000000000008b8660028110611c2e57611c2e612f8e565b6020020135612af5565b50505b80611c45816130cf565b915050611b0e565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190612f5f565b611ce4670de0b6b3a7640000846132fd565b611cee9190613334565b9050600061271060055483611d0391906132fd565b611d0d9190613334565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038716906370a0823190602401602060405180830381865afa158015611d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7b9190612f5f565b604051630b4c7e4d60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90611dcc908c908690600401613356565b600060405180830381600087803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b03891691506370a0823190602401602060405180830381865afa158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e689190612f5f565b611e7291906131f6565b97507f517ddf7483018304eeee2bc47b77b2f2b8b4f0519936b5c1bc4a78e808522c998989604051611ea5929190613356565b60405180910390a150505050505050919050565b6006546000908190611ef6907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031686612af5565b60065460405163a41ce7e960e01b815260048101869052602481018590526001600160a01b039091169063a41ce7e9906044016020604051808303816000875af1158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190612f5f565b60408051808201825286815260208082018781526000858152600783528490209251835551600192830155825188815290810184905291820181905293509091507fdb587f4327457f553eae7150dcd48cd4659b0dc3850b87117885bbfa8d20864f9060600160405180910390a19250929050565b600080546001919060ff19168280611a90565b60008061200084610f30565b90507f0000000000000000000000000000000000000000000000000000000000000000600061202e82612b28565b60ff169050600061203e84612b28565b61204b9060ff16836131f6565b9050612055612c01565b868189600181111561206957612069612f78565b6002811061207957612079612f8e565b60200201818152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121069190612f5f565b612118670de0b6b3a76400008a6132fd565b6121229190613334565b905060006127106005548361213791906132fd565b6121419190613334565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038816906370a0823190602401602060405180830381865afa15801561218b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121af9190612f5f565b90506121dd887f00000000000000000000000000000000000000000000000000000000000000006000612af5565b612208887f00000000000000000000000000000000000000000000000000000000000000008c612af5565b604051630b4c7e4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90612256908790869060040161336c565b600060405180830381600087803b15801561227057600080fd5b505af1158015612284573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b038a1691506370a0823190602401602060405180830381865afa1580156122ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f29190612f5f565b6122fc91906131f6565b98507f92eab167f439529a32b5391965d26b5f172158ac6931fae02a936e50ba8d16608b8b8b60405161233193929190613387565b60405180910390a1505050505050505092915050565b60008061235384610f30565b90507f0000000000000000000000000000000000000000000000000000000000000000600085600181111561238a5761238a612f78565b905060006127106005548761239f91906132fd565b6123a99190613334565b90506000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015612414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124389190612f5f565b61244290846132fd565b61244c9190613334565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038716906370a0823190602401602060405180830381865afa158015612496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ba9190612f5f565b90506124e8857f00000000000000000000000000000000000000000000000000000000000000006000612af5565b612513857f00000000000000000000000000000000000000000000000000000000000000008a612af5565b604051630d2680e960e11b815260048101899052600f85900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d290606401600060405180830381600087803b15801561258657600080fd5b505af115801561259a573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392506001600160a01b03891691506370a0823190602401602060405180830381865afa1580156125e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126089190612f5f565b61261291906131f6565b96507ff00c2bb112527cee6bc4b721538408ee2f9ecc2ca6998706b4b71b23774e365689898960405161264793929190613387565b60405180910390a150505050505092915050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516126c891906133a6565b6000604051808303816000865af19150503d8060008114612705576040519150601f19603f3d011682016040523d82523d6000602084013e61270a565b606091505b5091509150811580612738575080511580159061273857508080602001905181019061273691906133c2565b155b1561275c5784828260405163e7e40b5b60e01b81526004016108b3939291906133df565b5050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156127cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f09190612f5f565b600654604051634ab794a360e01b8152600481018690529192506001600160a01b031690634ab794a390602401600060405180830381600087803b15801561283757600080fd5b505af115801561284b573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa1580156128b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128da9190612f5f565b90506000856128e984846131f6565b6128f391906131f6565b90506001811115612a2657600654612936907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031683612af5565b60065460405163a41ce7e960e01b81526004810183905262093a8060248201526000916001600160a01b03169063a41ce7e9906044016020604051808303816000875af115801561298b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129af9190612f5f565b60408051808201825284815262093a80602080830191825260008581526007825284902092518355905160019092019190915581518581529081018390528715158183015290519192507fdb587f4327457f553eae7150dcd48cd4659b0dc3850b87117885bbfa8d20864f919081900360600190a1505b6040516370a0823160e01b8152306004820152600194507f554ea882a1b2a34679dfdcdd2fbca86efdadd76d2fb7902b4f0a31b7b2a7fc98907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad49190612f5f565b6040805191825286151560208301520160405180910390a150505092915050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b9060640161268a565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b03861691612b6e91906133a6565b600060405180830381855afa9150503d8060008114612ba9576040519150601f19603f3d011682016040523d82523d6000602084013e612bae565b606091505b5091509150811580612bc1575060208151105b15612be55783828260405163e7e40b5b60e01b81526004016108b3939291906133df565b80806020019051810190612bf99190613414565b949350505050565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b038116811461108357600080fd5b600060208284031215612c4857600080fd5b610b1482612c1f565b8060408101831015610a3257600080fd5b60008060608385031215612c7557600080fd5b612c7f8484612c51565b946040939093013593505050565b60008060408385031215612ca057600080fd5b50508035926020909101359150565b80356002811061108357600080fd5b600080600060608486031215612cd357600080fd5b612cdc84612caf565b95602085013595506040909401359392505050565b60008060408385031215612d0457600080fd5b612d0d83612caf565b946020939093013593505050565b600060208284031215612d2d57600080fd5b610b1482612caf565b600060408284031215612d4857600080fd5b610b148383612c51565b8015158114612d6057600080fd5b50565b60008060408385031215612d7657600080fd5b612d7f83612c1f565b91506020830135612d8f81612d52565b809150509250929050565b60008060408385031215612dad57600080fd5b612d0d83612c1f565b600060208284031215612dc857600080fd5b5035919050565b60008060208385031215612de257600080fd5b823567ffffffffffffffff80821115612dfa57600080fd5b818501915085601f830112612e0e57600080fd5b813581811115612e1d57600080fd5b8660208260051b8501011115612e3257600080fd5b60209290920196919550909350505050565b60005b83811015612e5f578181015183820152602001612e47565b83811115612e6e576000848401525b50505050565b60008151808452612e8c816020860160208601612e44565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612ef557603f19888603018452612ee3858351612e74565b94509285019290850190600101612ec7565b5092979650505050505050565b6020808252600c908201526b2737ba1037b832b930ba37b960a11b604082015260600190565b6020808252601a908201527f4465706f73697420696e746f20636f6e766578206661696c6564000000000000604082015260600190565b600060208284031215612f7157600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b60028110612fe557634e487b7160e01b600052602160045260246000fd5b9052565b60408101612ff78285612fc7565b8260208301529392505050565b634e487b7160e01b600052604160045260246000fd5b6000808335601e1984360301811261303157600080fd5b83018035915067ffffffffffffffff82111561304c57600080fd5b602001915036819003821315610a8957600080fd5b8183823760009101908152919050565b60408152826040820152828460608301376000606084830101526000601f19601f850116820160608382030160208401526130af6060820185612e74565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016130e1576130e16130b9565b5060010190565b8060005b6002811015612e6e5781518452602093840193909101906001016130ec565b8381526080810161311f60208301856130e8565b6001600160a01b03929092166060919091015292915050565b6000602080838503121561314b57600080fd5b825167ffffffffffffffff8082111561316357600080fd5b818501915085601f83011261317757600080fd5b81518181111561318957613189613004565b8060051b604051601f19603f830116810181811085821117156131ae576131ae613004565b6040529182528482019250838101850191888311156131cc57600080fd5b938501935b828510156131ea578451845293850193928501926131d1565b98975050505050505050565b600082821015613208576132086130b9565b500390565b600181815b8085111561324857816000190482111561322e5761322e6130b9565b8085161561323b57918102915b93841c9390800290613212565b509250929050565b60008261325f57506001610a32565b8161326c57506000610a32565b8160018114613282576002811461328c576132a8565b6001915050610a32565b60ff84111561329d5761329d6130b9565b50506001821b610a32565b5060208310610133831016604e8410600b84101617156132cb575081810a610a32565b6132d5838361320d565b80600019048211156132e9576132e96130b9565b029392505050565b6000610b148383613250565b6000816000190483118215151615613317576133176130b9565b500290565b6000821982111561332f5761332f6130b9565b500190565b60008261335157634e487b7160e01b600052601260045260246000fd5b500490565b6060810160408483378260408301529392505050565b6060810161337a82856130e8565b8260408301529392505050565b606081016133958286612fc7565b602082019390935260400152919050565b600082516133b8818460208701612e44565b9190910192915050565b6000602082840312156133d457600080fd5b8151610b1481612d52565b6001600160a01b0384168152821515602082015260606040820181905260009061340b90830184612e74565b95945050505050565b60006020828403121561342657600080fd5b815160ff81168114610b1457600080fdfea2646970667358221220251a6c160b472c1629c1866b390108437c06adfc2e17b178cc5c8a998d60d67f64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Alchemix Finance",
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "IllegalArgument(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "IllegalState(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "Unauthorized(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ]
    },
    "events": {
      "AdminUpdated(address)": {
        "params": {
          "admin": "The admin."
        }
      },
      "BurnTwoPoolTokens(uint8,uint256,uint256)": {
        "params": {
          "amount": "The amount of 2pool tokens that were burned.",
          "asset": "The 2pool asset that was received.",
          "withdrawn": "The amount of the 2pool asset that was withdrawn."
        }
      },
      "ClaimRewards(bool,uint256,uint256,uint256)": {
        "params": {
          "amountConvex": "The amount of convex tokens sent to the reward recipient.",
          "amountCurve": "The amount of curve tokens sent to the reward recipient.",
          "amountFxs": "The amount of frax share tokens sent to the reward recipient.",
          "success": "If the operation was successful."
        }
      },
      "DepositTwoPoolTokens(uint256,bytes32,bool)": {
        "params": {
          "amount": "The amount of meta pool tokens that were deposited.",
          "id": "The ID of the new lock.",
          "success": "If the operation was successful."
        }
      },
      "MintTwoPoolTokens(uint256[2],uint256)": {
        "params": {
          "amounts": "The amounts of each 2pool asset used to mint liquidity.",
          "mintedTwoPoolTokens": "The amount of 2pool tokens minted."
        }
      },
      "MintTwoPoolTokens(uint8,uint256,uint256)": {
        "params": {
          "amount": "The amount of the asset used to mint 2pool tokens.",
          "asset": "The 2pool asset used to mint 2pool tokens.",
          "mintedTwoPoolTokens": "The amount of 2pool tokens minted."
        }
      },
      "OperatorUpdated(address)": {
        "params": {
          "operator": "The operator."
        }
      },
      "PendingAdminUpdated(address)": {
        "params": {
          "pendingAdmin": "The pending admin."
        }
      },
      "ReclaimTwoPoolAsset(uint8,uint256)": {
        "params": {
          "amount": "The amount of the asset that was reclaimed.",
          "asset": "The 2pool asset that was reclaimed."
        }
      },
      "RewardReceiverUpdated(address)": {
        "params": {
          "rewardReceiver": "The reward receiver."
        }
      },
      "TransmuterBufferUpdated(address)": {
        "params": {
          "transmuterBuffer": "The transmuter buffer."
        }
      },
      "TwoPoolSlippageUpdated(uint256)": {
        "params": {
          "twoPoolSlippage": "The 2pool slippage."
        }
      },
      "WithdrawTwoPoolTokens(uint256,bool)": {
        "params": {
          "amount": "The amount of meta pool tokens that were withdrawn.",
          "success": "If the operation was successful."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "burnTwoPoolTokens(uint8,uint256)": {
        "params": {
          "amount": "The amount of 2pool tokens to burn.",
          "asset": "The asset to withdraw."
        },
        "returns": {
          "withdrawn": "The amount of the asset withdrawn from the pool."
        }
      },
      "claimRewards()": {
        "returns": {
          "success": "If the claim was successful."
        }
      },
      "depositTwoPoolTokens(uint256)": {
        "params": {
          "amount": "The amount of meta pool tokens to deposit."
        },
        "returns": {
          "id": "     The ID of the new lock.",
          "success": "If the tokens were successfully deposited."
        }
      },
      "depositTwoPoolTokensCustomLock(uint256,uint256)": {
        "params": {
          "amount": "The amount of meta pool tokens to deposit."
        },
        "returns": {
          "id": "     The ID of the new lock.",
          "success": "If the tokens were successfully deposited."
        }
      },
      "exchangeRate(uint8)": {
        "params": {
          "asset": "The 2pool asset."
        },
        "returns": {
          "_0": "The amount of the underying."
        }
      },
      "flush(uint256[2])": {
        "params": {
          "amounts": "The amounts of the 2pool assets to flush."
        },
        "returns": {
          "_0": "The amount of meta pool tokens deposited into convex."
        }
      },
      "flush(uint8,uint256)": {
        "params": {
          "amount": "The amount of the 2pool asset to flush.",
          "asset": "The 2pool asset to flush."
        },
        "returns": {
          "_0": "The amount of meta pool tokens deposited into convex."
        }
      },
      "flushCustomLock(uint256[2],uint256)": {
        "params": {
          "amounts": "The amounts of the 2pool assets to flush.",
          "lockTime": "The amount of time to lock the staked tokens."
        },
        "returns": {
          "_0": "The amount of meta pool tokens deposited into convex."
        }
      },
      "flushCustomLock(uint8,uint256,uint256)": {
        "params": {
          "amount": "The amount of the 2pool asset to flush.",
          "asset": "The 2pool asset to flush.",
          "lockTime": "The amount of time to lock the staked tokens."
        },
        "returns": {
          "_0": "The amount of meta pool tokens deposited into convex."
        }
      },
      "getTokenForTwoPoolAsset(uint8)": {
        "params": {
          "asset": "The asset to get the token for."
        },
        "returns": {
          "_0": "The token."
        }
      },
      "mintTwoPoolTokens(uint256[2])": {
        "params": {
          "amounts": "The amounts of the assets to deposit."
        },
        "returns": {
          "minted": "The number of 2pool tokens minted."
        }
      },
      "mintTwoPoolTokens(uint8,uint256)": {
        "params": {
          "amount": "The amount of the asset to deposit.",
          "asset": "The asset to deposit into the 2pool."
        },
        "returns": {
          "minted": "The number of 2pool tokens minted."
        }
      },
      "onERC20Received(address,uint256)": {
        "details": "This function is required in order to receive tokens from the conduit.",
        "params": {
          "token": "The token that was transferred.",
          "value": "The amount of the token that was transferred."
        }
      },
      "recall(uint8,uint256,bytes32)": {
        "params": {
          "amount": "The amount of the meta pool tokens to withdraw from convex and burn.",
          "asset": "The 2pool asset to recall.",
          "id": "The id of the lock to withdraw from.  "
        },
        "returns": {
          "_0": "The amount of the 2pool asset recalled."
        }
      },
      "reclaimTwoPoolAsset(uint8,uint256)": {
        "params": {
          "amount": "The amount to reclaim.",
          "asset": "The 2pool asset to reclaim."
        }
      },
      "setOperator(address,bool)": {
        "params": {
          "operator": "The address to set",
          "value": "The value to set the admin to."
        }
      },
      "setPendingAdmin(address)": {
        "params": {
          "value": "The value to set the pending timelock to."
        }
      },
      "setRewardReceiver(address)": {
        "params": {
          "value": "The value to set the reward receiver to."
        }
      },
      "setTransmuterBuffer(address)": {
        "params": {
          "value": "The value to set the transmuter buffer to."
        }
      },
      "setTwoPoolSlippage(uint256)": {
        "params": {
          "value": "The value to set the slippage to."
        }
      },
      "sweep(address,uint256)": {
        "params": {
          "amount": "The amount of the token to sweep.",
          "token": "The token to sweep."
        }
      },
      "twoPoolAssetReserves(uint8)": {
        "params": {
          "asset": "The 2pool asset."
        },
        "returns": {
          "_0": "The reserves."
        }
      },
      "withdrawTwoPoolTokens(uint256,bytes32)": {
        "params": {
          "amount": "The amount of meta pool tokens to withdraw.",
          "id": "The id of the lock to withdraw from.  "
        },
        "returns": {
          "success": "If the tokens were successfully withdrawn."
        }
      }
    },
    "stateVariables": {
      "_twoPoolAssetCache": {
        "details": "A cache of the tokens that the stable swap pool supports."
      }
    },
    "title": "PoolAssetManager",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalArgument(string)": [
        {
          "notice": "An error used to indicate that an argument passed to a function is illegal or         inappropriate."
        }
      ],
      "IllegalState(string)": [
        {
          "notice": "An error used to indicate that a function has encountered an unrecoverable state."
        }
      ],
      "Unauthorized(string)": [
        {
          "notice": "An error used to indicate that a message sender tried to execute a privileged function."
        }
      ]
    },
    "events": {
      "AdminUpdated(address)": {
        "notice": "Emitted when the admin is updated."
      },
      "BurnTwoPoolTokens(uint8,uint256,uint256)": {
        "notice": "Emitted when 2pool tokens are burned."
      },
      "ClaimRewards(bool,uint256,uint256,uint256)": {
        "notice": "Emitted when convex rewards are claimed."
      },
      "DepositTwoPoolTokens(uint256,bytes32,bool)": {
        "notice": "Emitted when meta pool tokens are deposited into convex."
      },
      "MintTwoPoolTokens(uint256[2],uint256)": {
        "notice": "Emitted when 2pool tokens are minted."
      },
      "MintTwoPoolTokens(uint8,uint256,uint256)": {
        "notice": "Emitted when 2pool tokens are minted."
      },
      "OperatorUpdated(address)": {
        "notice": "Emitted when the operator is updated."
      },
      "PendingAdminUpdated(address)": {
        "notice": "Emitted when the pending admin is updated."
      },
      "ReclaimTwoPoolAsset(uint8,uint256)": {
        "notice": "Emitted when 2pool assets are sent to the transmuter buffer."
      },
      "RewardReceiverUpdated(address)": {
        "notice": "Emitted when the reward receiver is updated."
      },
      "TransmuterBufferUpdated(address)": {
        "notice": "Emitted when the transmuter buffer is updated."
      },
      "TwoPoolSlippageUpdated(uint256)": {
        "notice": "Emitted when the 2pool slippage is updated."
      },
      "WithdrawTwoPoolTokens(uint256,bool)": {
        "notice": "Emitted when meta pool tokens are withdrawn from convex."
      }
    },
    "kind": "user",
    "methods": {
      "acceptAdmin()": {
        "notice": "Completes the 2-step process of setting the administrator. The pending admin must be set and the caller must be the pending admin. After this function is successfully executed, the admin will be set to the pending admin and the pending admin will be reset."
      },
      "admin()": {
        "notice": "The admin."
      },
      "burnTwoPoolTokens(uint8,uint256)": {
        "notice": "Burns 2pool tokens to withdraw an asset."
      },
      "claimRewards()": {
        "notice": "Claims convex, curve, and auxiliary rewards."
      },
      "convexFraxBooster()": {
        "notice": "The convex booster contract."
      },
      "convexFraxVault()": {
        "notice": "The address of the vault created during the contructor."
      },
      "convexPoolId()": {
        "notice": "The convex pool identifier."
      },
      "convexStakingWrapper()": {
        "notice": "The staking wrapper."
      },
      "convexToken()": {
        "notice": "The convex token."
      },
      "curveToken()": {
        "notice": "The curve token."
      },
      "depositTwoPoolTokens(uint256)": {
        "notice": "Deposits and stakes meta pool tokens into convex."
      },
      "depositTwoPoolTokensCustomLock(uint256,uint256)": {
        "notice": "Deposits and stakes meta pool tokens into convex."
      },
      "emergencyRecall(uint256,bytes32)": {
        "notice": "Recalls tokens in a balanced manner in case of an emergency"
      },
      "exchangeRate(uint8)": {
        "notice": "Gets the amount of a 2pool asset that one alUSD is worth."
      },
      "flush(uint256[2])": {
        "notice": "Flushes two pool assets into convex by minting 2pool tokens from the assets,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. This function is provided for ease of use."
      },
      "flush(uint8,uint256)": {
        "notice": "Flushes a two pool asset into convex by minting 2pool tokens using the asset,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. This function is provided for ease of use."
      },
      "flushCustomLock(uint256[2],uint256)": {
        "notice": "Flushes two pool assets into convex by minting 2pool tokens from the assets,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. Allows specification of locking period. This function is provided for ease of use."
      },
      "flushCustomLock(uint8,uint256,uint256)": {
        "notice": "Flushes a two pool asset into convex by minting 2pool tokens using the asset,         minting meta pool tokens using the 2pool tokens, and then depositing the meta pool         tokens into convex. Allows specification of locking period. This function is provided for ease of use."
      },
      "fraxShareToken()": {
        "notice": "The frax share token."
      },
      "getTokenForTwoPoolAsset(uint8)": {
        "notice": "Gets the ERC20 token associated with a 2pool asset."
      },
      "kekId(bytes32)": {
        "notice": "the kek_id of the twoPool token deposit."
      },
      "mintTwoPoolTokens(uint256[2])": {
        "notice": "Mints 2pool tokens with a combination of assets."
      },
      "mintTwoPoolTokens(uint8,uint256)": {
        "notice": "Mints 2pool tokens with an asset."
      },
      "onERC20Received(address,uint256)": {
        "notice": "Informs implementors of this interface that an ERC20 token has been transferred."
      },
      "operators(address)": {
        "notice": "The operators."
      },
      "pendingAdmin()": {
        "notice": "The current pending admin."
      },
      "recall(uint8,uint256,bytes32)": {
        "notice": "Recalls a two pool asset into reserves by withdrawing meta pool tokens from         convex, burning the meta pool tokens for 2pool tokens, and then burning the 2pool         tokens for an asset. This function is provided for ease of use."
      },
      "reclaimTwoPoolAsset(uint8,uint256)": {
        "notice": "Reclaims a two pool asset to the transmuter buffer."
      },
      "setOperator(address,bool)": {
        "notice": "Sets the operator. The caller must be the admin."
      },
      "setPendingAdmin(address)": {
        "notice": "Begins the 2-step process of setting the administrator. The caller must be the admin. Setting the pending timelock to the zero address will stop the process of setting a new timelock."
      },
      "setRewardReceiver(address)": {
        "notice": "Sets the reward receiver."
      },
      "setTransmuterBuffer(address)": {
        "notice": "Sets the transmuter buffer."
      },
      "setTwoPoolSlippage(uint256)": {
        "notice": "Sets the slippage that will be tolerated when depositing and withdrawing 2pool         assets. The slippage has a resolution of 6 decimals. The operator is allowed to set the slippage because it is a volatile parameter that may need fine adjustment in a short time window."
      },
      "sweep(address,uint256)": {
        "notice": "Sweeps a token out of the contract to the admin."
      },
      "transmuterBuffer()": {
        "notice": "The transmuter buffer."
      },
      "twoPool()": {
        "notice": "The 2pool contract."
      },
      "twoPoolAssetReserves(uint8)": {
        "notice": "Gets the amount of a 2pool asset that this contract has in reserves."
      },
      "twoPoolSlippage()": {
        "notice": "The amount of slippage that will be tolerated when depositing and withdrawing assets         from the stable swap pool. In units of basis points."
      },
      "withdrawTwoPoolTokens(uint256,bytes32)": {
        "notice": "Withdraws and unwraps meta pool tokens from convex."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56899,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)56893"
      },
      {
        "astId": 41558,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "admin",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 41561,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 41566,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 41568,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "rewardReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 41571,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "transmuterBuffer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 41586,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "twoPoolSlippage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 41602,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "convexFraxVault",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IConvexFraxVault)63969"
      },
      {
        "astId": 41611,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "kekId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(LockParams)41440_storage)"
      },
      {
        "astId": 41617,
        "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
        "label": "_twoPoolAssetCache",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_contract(IERC20)29601)2_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)29601)2_storage": {
        "base": "t_contract(IERC20)29601",
        "encoding": "inplace",
        "label": "contract IERC20[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConvexFraxVault)63969": {
        "encoding": "inplace",
        "label": "contract IConvexFraxVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)29601": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(State)56893": {
        "encoding": "inplace",
        "label": "enum MutexLock.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(LockParams)41440_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LockParams)",
        "numberOfBytes": "32",
        "value": "t_struct(LockParams)41440_storage"
      },
      "t_struct(LockParams)41440_storage": {
        "encoding": "inplace",
        "label": "struct LockParams",
        "members": [
          {
            "astId": 41437,
            "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 41439,
            "contract": "submodules/v2-foundry/src/PoolAssetManager.sol:PoolAssetManager",
            "label": "timeLocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}