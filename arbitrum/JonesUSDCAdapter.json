{
  "address": "0x87C4A26c6A00C91ACf2344a43074563085f9bbE5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_glpRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "jonesGLPVaultRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b375578ad2b0d5bb492163a4440c9a6c0b1a1eafc906f1630338ba91344f2a3",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0x87C4A26c6A00C91ACf2344a43074563085f9bbE5",
    "transactionIndex": 1,
    "gasUsed": "620513",
    "logsBloom": "0x
    "blockHash": "0xefa8b009ec729f7943ea01f4b0b4d382cb40ef9ac4a220a393cc7a1f12da8eab",
    "transactionHash": "0x6b375578ad2b0d5bb492163a4440c9a6c0b1a1eafc906f1630338ba91344f2a3",
    "logs": [],
    "blockNumber": 250255273,
    "cumulativeGasUsed": "620513",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9c895CcDd1da452eb390803d48155e38f9fC2e4d",
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0xB0BDE111812EAC913b392D80D51966eC977bE3A2"
  ],
  "solcInputHash": "2bd1b0c2eb8e599b8c7559c6909c332d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_glpRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"jonesGLPVaultRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"title\":\"JonesUSDCAdapter\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/jonesDao/JonesUSDCAdapter.sol\":\"JonesUSDCAdapter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373235353138303032393439\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x1acad3a3e79d3ccbac56cf866482563677e51545516a1f84ffb7cd220e43d93a\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/jonesDao/JonesUSDCAdapter.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport {IllegalState} from \\\"../../base/Errors.sol\\\";\\n\\nimport \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\nimport \\\"../../../lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\\\";\\n\\nimport {IJonesDaoGlpVault} from \\\"../../interfaces/external/jones/IJonesDaoGlpVault.sol\\\";\\nimport {IJonesDaoVaultRouter} from \\\"../../interfaces/external/jones/IJonesDaoVaultRouter.sol\\\";\\nimport {IJonesStableVault} from \\\"../../interfaces/external/jones/IJonesStableVault.sol\\\";\\nimport {IJGLPViewer} from \\\"../../interfaces/external/jones/IJGLPViewer.sol\\\";\\n\\n/// @title  JonesUSDCAdapter\\n/// @author Alchemix Finance\\ncontract JonesUSDCAdapter is ITokenAdapter {\\n    string public constant override version = \\\"1.0.0\\\";\\n\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n    address public jonesGLPVaultRouter;\\n\\n    constructor(address _glpRouter, address _underlying, address _vault) {\\n        jonesGLPVaultRouter = _glpRouter;\\n        underlyingToken = _underlying;\\n        token = _vault;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return IJonesStableVault(token).convertToAssets(1e18);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(underlyingToken, jonesGLPVaultRouter, amount);\\n                \\n        uint256 shares = IJonesDaoVaultRouter(jonesGLPVaultRouter).deposit(amount, recipient);\\n\\n        return shares;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(token, jonesGLPVaultRouter, amount);\\n\\n        // Slippage handled upstream\\n        (bool bypass, uint256 shares) = IJonesDaoVaultRouter(jonesGLPVaultRouter).withdrawRequest(amount, recipient, 0, \\\"\\\");\\n\\n         require(bypass == true, \\\"Withrawal queue not bypassed!\\\");\\n\\n         return shares;\\n    }\\n}\",\"keccak256\":\"0xa736d57705abc659fa978700c11f81653bb4dc2caac26740c17d688885b10737\"},\"submodules/v2-foundry/src/base/Errors.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\\n///         `msg.origin` is not authorized.\\nerror Unauthorized();\\n\\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\\n///         or entered an illegal condition which is not recoverable from.\\nerror IllegalState();\\n\\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\\n///         to the function.\\nerror IllegalArgument();\",\"keccak256\":\"0x58701ccc9e168980b4177b18f902461ce61d3b8ad3aae29e55a1797f35949687\"},\"submodules/v2-foundry/src/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20 {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1ef68b8211ae0387d53a98d9ed818fed3991c029f58a4730467baa1cf6b22e58\"},\"submodules/v2-foundry/src/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20 {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    function mint(address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0x072e557e7eff54ba828d410d96e7782931a634813bccc817dc8988979a435aeb\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/jones/IJGLPViewer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n/// @title IJGLPViewer\\ninterface IJGLPViewer {\\n    function getUSDCRedemption(uint256 _jUSDC, address _caller) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0xed92c6572145274a8ae6c4f54dbc1caa603eacef4501f14890d6815c830b49e2\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/jones/IJonesDaoGlpVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.13;\\n\\ninterface IJonesDaoGlpVault {\\n    function depositStable(uint256 _assets,bool _compound) external returns (uint256);\\n    \\n    function vaultRouter() external view returns (address);\\n\\n    function stableVault() external view returns (address);\\n}\",\"keccak256\":\"0xd26bea6c0307ebda972e5e04f488e10b198cbd718cabf221e360790952e5ca68\",\"license\":\"GPL-3.0-only\"},\"submodules/v2-foundry/src/interfaces/external/jones/IJonesDaoVaultRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\n/// @title IJonesDaoVaultRouter\\ninterface IJonesDaoVaultRouter {\\n    function rewardCompounder(address _asset) external view returns (address);\\n\\n    function stableWithdrawalSignal(uint256 _shares, bool _compound) external;\\n\\n    function deposit(uint256 _assets, address _receiver) external returns (uint256);\\n\\n    function withdrawRequest(uint256 _shares, address _receiver, uint256 _minAmountOut, bytes calldata _enforceData) external returns (bool, uint256);\\n}\",\"keccak256\":\"0xbf93d61620888b1267b554f9c264e3f117d96bb185a50defd89a245af03603bb\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/interfaces/external/jones/IJonesStableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.13;\\n\\ninterface IJonesStableVault {\\n    function convertToAssets(uint256 amount) external view returns (uint256);\\n}\",\"keccak256\":\"0x89219234c3a6fc08dad6b383e3a83a15a5684cca77162aad323a47f7f2e289d0\",\"license\":\"GPL-3.0-only\"},\"submodules/v2-foundry/src/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, account)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5baa0feb362479be13700eafb1bc8eee1ab10cac51bc9b317b721b5d2dd228c\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161090838038061090883398101604081905261002f91610076565b600080546001600160a01b0319166001600160a01b0394851617905590821660a052166080526100b9565b80516001600160a01b038116811461007157600080fd5b919050565b60008060006060848603121561008b57600080fd5b6100948461005a565b92506100a26020850161005a565b91506100b06040850161005a565b90509250925092565b60805160a0516108086101006000396000818160ad0152818161017401526101a401526000818161014b0152818161025a0152818161028a01526103c101526108086000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806354fd4d501161005b57806354fd4d50146100fa5780637647691d1461012b578063a035b1fe1461013e578063fc0c546a1461014657600080fd5b806313bac820146100825780632495a599146100a8578063290aa666146100e7575b600080fd5b61009561009036600461065a565b61016d565b6040519081526020015b60405180910390f35b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009f565b6000546100cf906001600160a01b031681565b61011e604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161009f91906106f2565b61009561013936600461065a565b610253565b6100956103a1565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b600061019b7f0000000000000000000000000000000000000000000000000000000000000000333086610439565b6000546101d3907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168561054e565b60008054604051636e553f6560e01b8152600481018690526001600160a01b03858116602483015290911690636e553f65906044016020604051808303816000875af1158015610227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024b919061070c565b949350505050565b60006102817f0000000000000000000000000000000000000000000000000000000000000000333086610439565b6000546102b9907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168561054e565b60008054604051638bc5dc8760e01b8152600481018690526001600160a01b03858116602483015260448201849052608060648301526084820184905283921690638bc5dc879060a40160408051808303816000875af1158015610321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610345919061073a565b909250905060018215151461024b5760405162461bcd60e51b815260206004820152601d60248201527f57697468726177616c207175657565206e6f742062797061737365642100000060448201526064015b60405180910390fd5b6040516303d1689d60e11b8152670de0b6b3a764000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307a2d13a90602401602060405180830381865afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610434919061070c565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161049d9190610766565b6000604051808303816000865af19150503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b5091509150856001600160a01b03163b600014806104fb575081155b8061052257508051158015906105225750808060200190518101906105209190610782565b155b156105465785828260405163e7e40b5b60e01b81526004016103989392919061079d565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916105aa9190610766565b6000604051808303816000865af19150503d80600081146105e7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ec565b606091505b5091509150846001600160a01b03163b60001480610608575081155b8061062f575080511580159061062f57508080602001905181019061062d9190610782565b155b156106535784828260405163e7e40b5b60e01b81526004016103989392919061079d565b5050505050565b6000806040838503121561066d57600080fd5b8235915060208301356001600160a01b038116811461068b57600080fd5b809150509250929050565b60005b838110156106b1578181015183820152602001610699565b838111156106c0576000848401525b50505050565b600081518084526106de816020860160208601610696565b601f01601f19169290920160200192915050565b60208152600061070560208301846106c6565b9392505050565b60006020828403121561071e57600080fd5b5051919050565b8051801515811461073557600080fd5b919050565b6000806040838503121561074d57600080fd5b61075683610725565b9150602083015190509250929050565b60008251610778818460208701610696565b9190910192915050565b60006020828403121561079457600080fd5b61070582610725565b6001600160a01b038416815282151560208201526060604082018190526000906107c9908301846106c6565b9594505050505056fea2646970667358221220a65dada4ef65a1e2eda2965f6dadb2f3be3c009b7b7e04fcc34b9f45f99910c564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806354fd4d501161005b57806354fd4d50146100fa5780637647691d1461012b578063a035b1fe1461013e578063fc0c546a1461014657600080fd5b806313bac820146100825780632495a599146100a8578063290aa666146100e7575b600080fd5b61009561009036600461065a565b61016d565b6040519081526020015b60405180910390f35b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009f565b6000546100cf906001600160a01b031681565b61011e604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161009f91906106f2565b61009561013936600461065a565b610253565b6100956103a1565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b600061019b7f0000000000000000000000000000000000000000000000000000000000000000333086610439565b6000546101d3907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168561054e565b60008054604051636e553f6560e01b8152600481018690526001600160a01b03858116602483015290911690636e553f65906044016020604051808303816000875af1158015610227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024b919061070c565b949350505050565b60006102817f0000000000000000000000000000000000000000000000000000000000000000333086610439565b6000546102b9907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03168561054e565b60008054604051638bc5dc8760e01b8152600481018690526001600160a01b03858116602483015260448201849052608060648301526084820184905283921690638bc5dc879060a40160408051808303816000875af1158015610321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610345919061073a565b909250905060018215151461024b5760405162461bcd60e51b815260206004820152601d60248201527f57697468726177616c207175657565206e6f742062797061737365642100000060448201526064015b60405180910390fd5b6040516303d1689d60e11b8152670de0b6b3a764000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307a2d13a90602401602060405180830381865afa158015610410573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610434919061070c565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161049d9190610766565b6000604051808303816000865af19150503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b5091509150856001600160a01b03163b600014806104fb575081155b8061052257508051158015906105225750808060200190518101906105209190610782565b155b156105465785828260405163e7e40b5b60e01b81526004016103989392919061079d565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916105aa9190610766565b6000604051808303816000865af19150503d80600081146105e7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ec565b606091505b5091509150846001600160a01b03163b60001480610608575081155b8061062f575080511580159061062f57508080602001905181019061062d9190610782565b155b156106535784828260405163e7e40b5b60e01b81526004016103989392919061079d565b5050505050565b6000806040838503121561066d57600080fd5b8235915060208301356001600160a01b038116811461068b57600080fd5b809150509250929050565b60005b838110156106b1578181015183820152602001610699565b838111156106c0576000848401525b50505050565b600081518084526106de816020860160208601610696565b601f01601f19169290920160200192915050565b60208152600061070560208301846106c6565b9392505050565b60006020828403121561071e57600080fd5b5051919050565b8051801515811461073557600080fd5b919050565b6000806040838503121561074d57600080fd5b61075683610725565b9150602083015190509250929050565b60008251610778818460208701610696565b9190910192915050565b60006020828403121561079457600080fd5b61070582610725565b6001600160a01b038416815282151560208201526060604082018190526000906107c9908301846106c6565b9594505050505056fea2646970667358221220a65dada4ef65a1e2eda2965f6dadb2f3be3c009b7b7e04fcc34b9f45f99910c564736f6c634300080d0033",
  "devdoc": {
    "author": "Alchemix Finance",
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "title": "JonesUSDCAdapter",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54259,
        "contract": "submodules/v2-foundry/src/adapters/jonesDao/JonesUSDCAdapter.sol:JonesUSDCAdapter",
        "label": "jonesGLPVaultRouter",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}