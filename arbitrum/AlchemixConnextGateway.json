{
  "address": "0xb85EfC42D55381C895971016C9De27dabb036A43",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "bridgeAssets",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "alAsset",
          "type": "address"
        }
      ],
      "name": "registerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9494c293144831a2e83e879c60f890d695c8abb64c2abea46b4061b9fcc1ef84",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0xb85EfC42D55381C895971016C9De27dabb036A43",
    "transactionIndex": 2,
    "gasUsed": "19928848",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x047482b4a41efeda0adc62d1501d397755ee35c2c58c2bcce6fa4949c78210c7",
    "transactionHash": "0x9494c293144831a2e83e879c60f890d695c8abb64c2abea46b4061b9fcc1ef84",
    "logs": [],
    "blockNumber": 115856945,
    "cumulativeGasUsed": "21098663",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEE9deC2712cCE65174B561151701Bf54b99C24C8"
  ],
  "solcInputHash": "070c2464ebf370e27a3dd05827d6fbbb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"bridgeAssets\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"alAsset\",\"type\":\"address\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}]},\"kind\":\"dev\",\"methods\":{\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"params\":{\"_callData\":\"Calldata containing the new greeting.\"}}},\"title\":\"AlchemixConnextGateway\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}]},\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"The admin.\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"Authenticated receiver function.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/bridging/connext/AlchemixConnextGateway.sol\":\"AlchemixConnextGateway\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363930353636373233353036\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/bridging/connext/AlchemixConnextGateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"../../../lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\\\";\\n\\nimport {ICrossChainToken} from \\\"../../interfaces/ICrossChainToken.sol\\\";\\nimport {IConnext} from \\\"../../interfaces/external/connext/IConnext.sol\\\";\\nimport {IXReceiver} from \\\"../../interfaces/external/connext/IXReceiver.sol\\\";\\n\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\n\\n/**\\n * @title AlchemixConnextGateway\\n */\\ncontract AlchemixConnextGateway is IXReceiver {\\n  /// @notice The admin.\\n  address public admin;\\n\\n  // The Connext contract on this domain\\n  address public immutable connext;\\n\\n  // The next tokens mapped to their respective alAssets. \\n  mapping (address => address) public assets;\\n\\n  /** @notice A modifier for authenticated calls.\\n   * This is an important security consideration. msg.sender must be the connext contract.\\n   */\\n  modifier onlySource() {\\n    require(\\n        msg.sender == connext,\\n      \\\"Expected original caller to be Connext contract\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @dev A modifier which reverts if the message sender is not the admin.\\n  modifier onlyAdmin() {\\n      if (msg.sender != admin) {\\n          revert (\\\"Not admin\\\");\\n      }\\n      _;\\n  }\\n\\n  constructor(\\n    address _connext\\n  ) {\\n    connext = _connext;\\n    admin = msg.sender;\\n  }\\n\\n  function setAdmin(address newAdmin) external onlyAdmin {\\n    admin = newAdmin;\\n  }\\n\\n  function registerAsset(address nextAsset, address alAsset) external onlyAdmin {\\n    assets[nextAsset] = alAsset;\\n  }\\n\\n  function bridgeAssets (\\n    address _target,\\n    address _asset,\\n    uint256 _amount,\\n    uint32 _destinationDomain,\\n    uint256 _relayerFee\\n  ) external payable returns (bytes32) {\\n    TokenUtils.safeTransferFrom(assets[_asset], _target, address(this), _amount);\\n    ICrossChainToken(assets[_asset]).exchangeCanonicalForOld(_asset, _amount);\\n\\n    TokenUtils.safeApprove(_asset, connext, _amount);\\n    return IConnext(connext).xcall{value: _relayerFee}(\\n      _destinationDomain, // _destination\\n      _target,            // _to\\n      _asset,             // _asset\\n      msg.sender,         // _delegate\\n      _amount,            // _amount\\n      0,                  // _slippage\\n      msg.data            // _callData\\n    );\\n  }\\n\\n  /** @notice Authenticated receiver function.\\n    * @param _callData Calldata containing the new greeting.\\n    */\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external onlySource() returns (bytes memory) {\\n    TokenUtils.safeApprove(_asset, assets[_asset], _amount);\\n    ICrossChainToken(assets[_asset]).exchangeOldForCanonical(_asset, _amount);\\n    \\n    TokenUtils.safeTransfer(assets[_asset], abi.decode(_callData, (address)), _amount);\\n  }\\n}\",\"keccak256\":\"0x6f212e253075b67a2cb263d5fe638262bcb9654b1bdb3dd28369879a18106b48\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/ICrossChainToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  ICrossChainToken\\n/// @author Alchemix Finance\\ninterface ICrossChainToken is IERC20 {\\n  /// @notice Gets the total amount of minted tokens for an account.\\n  ///\\n  /// @param account The address of the account.\\n  ///\\n  /// @return The total minted.\\n  function hasMinted(address account) external view returns (uint256);\\n\\n  /// @notice Lowers the number of tokens which the `msg.sender` has minted.\\n  ///\\n  /// This reverts if the `msg.sender` is not whitelisted.\\n  ///\\n  /// @param amount The amount to lower the minted amount by.\\n  function lowerHasMinted(uint256 amount) external;\\n\\n  /// @notice Sets the mint allowance for a given account'\\n  ///\\n  /// This reverts if the `msg.sender` is not admin\\n  ///\\n  /// @param toSetCeiling The account whos allowance to update\\n  /// @param ceiling      The amount of tokens allowed to mint\\n  function setCeiling(address toSetCeiling, uint256 ceiling) external;\\n\\n  /// @notice Updates the state of an address in the whitelist map\\n  ///\\n  /// This reverts if msg.sender is not admin\\n  ///\\n  /// @param toWhitelist the address whos state is being updated\\n  /// @param state the boolean state of the whitelist\\n  function setWhitelist(address toWhitelist, bool state) external;\\n\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address account, uint256 amount) external;\\n\\n  function exchangeOldForCanonical(address bridgeTokenAddress, uint256 tokenAmount) external returns (uint256 canonicalTokensOut);\\n\\n  function exchangeCanonicalForOld(address bridgeTokenAddress, uint256 tokenAmount) external returns (uint256 bridgeTokensOut);\\n}\",\"keccak256\":\"0xf51c8671bae7f4b9899df935a10043264624b41f3c661ab17a4f04989cce9404\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20 {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1ef68b8211ae0387d53a98d9ed818fed3991c029f58a4730467baa1cf6b22e58\"},\"submodules/v2-foundry/src/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20 {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    function mint(address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0x072e557e7eff54ba828d410d96e7782931a634813bccc817dc8988979a435aeb\"},\"submodules/v2-foundry/src/interfaces/external/connext/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../../../libraries/connext/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../../../libraries/connext/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n}\",\"keccak256\":\"0x755aef40022ef791c658631a2557c07874f9528387e1527a5a7eebec5ead87b7\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/external/connext/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\",\"keccak256\":\"0x99b9475c8aeaba8b831f7e13fc9ac7f4484d56574a1101728d9ba7589c0f74a6\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, account)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5baa0feb362479be13700eafb1bc8eee1ab10cac51bc9b317b721b5d2dd228c\"},\"submodules/v2-foundry/src/libraries/connext/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\\n\",\"keccak256\":\"0x5a96a5dbd74d18d4c76069d19893947fdbd3648a5d0e56bb5f9dbb11282821e2\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/libraries/connext/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.13;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\",\"keccak256\":\"0xd402dd5f08c0dbd0ecf8a954e9daeb66629692c76ae6106dd3daa47c02818daf\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c5e380380610c5e83398101604081905261002f91610052565b6001600160a01b0316608052600080546001600160a01b03191633179055610082565b60006020828403121561006457600080fd5b81516001600160a01b038116811461007b57600080fd5b9392505050565b608051610bad6100b16000396000818160ef015281816103440152818161038001526104200152610bad6000f3fe6080604052600436106100705760003560e01c8063de4b05481161004e578063de4b0548146100dd578063f11b818814610129578063f851a4401461015f578063fd614f411461017f57600080fd5b80634fad6bff14610075578063704b6c02146100975780637bee258a146100b7575b600080fd5b34801561008157600080fd5b5061009561009036600461080f565b6101ac565b005b3480156100a357600080fd5b506100956100b2366004610848565b610225565b6100ca6100c5366004610885565b61028d565b6040519081526020015b60405180910390f35b3480156100e957600080fd5b506101117f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d4565b34801561013557600080fd5b50610111610144366004610848565b6001602052600090815260409020546001600160a01b031681565b34801561016b57600080fd5b50600054610111906001600160a01b031681565b34801561018b57600080fd5b5061019f61019a3660046108f4565b610413565b6040516100d49190610a49565b6000546001600160a01b031633146101f75760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064015b60405180910390fd5b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b0316331461026b5760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064016101ee565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380851660009081526001602052604081205490916102b69116873087610592565b6001600160a01b038581166000818152600160205260409081902054905163280cf3ed60e01b81526004810192909252602482018790529091169063280cf3ed906044016020604051808303816000875af1158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d9190610a5c565b50610369857f0000000000000000000000000000000000000000000000000000000000000000866106a7565b6040516345560b5d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638aac16ba9084906103c69087908b908b9033908c9060009081903690600401610a75565b60206040518083038185885af11580156103e4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104099190610a5c565b9695505050505050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104a55760405162461bcd60e51b815260206004820152602f60248201527f4578706563746564206f726967696e616c2063616c6c657220746f206265204360448201526e1bdb9b995e1d0818dbdb9d1c9858dd608a1b60648201526084016101ee565b6001600160a01b038086166000908152600160205260409020546104cc91879116886106a7565b6001600160a01b0385811660008181526001602052604090819020549051639006a50f60e01b815260048101929092526024820189905290911690639006a50f906044016020604051808303816000875af115801561052f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105539190610a5c565b506001600160a01b03808616600090815260016020908152604090912054845161040993919091169161058c9186018101908601610ae7565b886107c4565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105f69190610b04565b6000604051808303816000865af19150503d8060008114610633576040519150601f19603f3d011682016040523d82523d6000602084013e610638565b606091505b5091509150856001600160a01b03163b60001480610654575081155b8061067b575080511580159061067b5750808060200190518101906106799190610b20565b155b1561069f5785828260405163e7e40b5b60e01b81526004016101ee93929190610b42565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516107149190610b04565b6000604051808303816000865af19150503d8060008114610751576040519150601f19603f3d011682016040523d82523d6000602084013e610756565b606091505b5091509150846001600160a01b03163b60001480610772575081155b8061079957508051158015906107995750808060200190518101906107979190610b20565b155b156107bd5784828260405163e7e40b5b60e01b81526004016101ee93929190610b42565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b906064016106d6565b6001600160a01b038116811461080c57600080fd5b50565b6000806040838503121561082257600080fd5b823561082d816107f7565b9150602083013561083d816107f7565b809150509250929050565b60006020828403121561085a57600080fd5b8135610865816107f7565b9392505050565b803563ffffffff8116811461088057600080fd5b919050565b600080600080600060a0868803121561089d57600080fd5b85356108a8816107f7565b945060208601356108b8816107f7565b9350604086013592506108cd6060870161086c565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561090d57600080fd5b86359550602087013594506040870135610926816107f7565b93506060870135610936816107f7565b92506109446080880161086c565b915060a087013567ffffffffffffffff8082111561096157600080fd5b818901915089601f83011261097557600080fd5b813581811115610987576109876108de565b604051601f8201601f19908116603f011681019083821181831017156109af576109af6108de565b816040528281528c60208487010111156109c857600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60005b83811015610a085781810151838201526020016109f0565b83811115610a17576000848401525b50505050565b60008151808452610a358160208601602086016109ed565b601f01601f19169290920160200192915050565b6020815260006108656020830184610a1d565b600060208284031215610a6e57600080fd5b5051919050565b63ffffffff891681526001600160a01b0388811660208301528781166040830152861660608201526080810185905260a0810184905260e060c08201819052810182905260006101008385828501376000838501820152601f909301601f191690910190910198975050505050505050565b600060208284031215610af957600080fd5b8151610865816107f7565b60008251610b168184602087016109ed565b9190910192915050565b600060208284031215610b3257600080fd5b8151801515811461086557600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610b6e90830184610a1d565b9594505050505056fea26469706673582212203ca94e5f0b1546f7e5e0eb1b9337741f402507aeb28f766e4322620d0390edef64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063de4b05481161004e578063de4b0548146100dd578063f11b818814610129578063f851a4401461015f578063fd614f411461017f57600080fd5b80634fad6bff14610075578063704b6c02146100975780637bee258a146100b7575b600080fd5b34801561008157600080fd5b5061009561009036600461080f565b6101ac565b005b3480156100a357600080fd5b506100956100b2366004610848565b610225565b6100ca6100c5366004610885565b61028d565b6040519081526020015b60405180910390f35b3480156100e957600080fd5b506101117f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d4565b34801561013557600080fd5b50610111610144366004610848565b6001602052600090815260409020546001600160a01b031681565b34801561016b57600080fd5b50600054610111906001600160a01b031681565b34801561018b57600080fd5b5061019f61019a3660046108f4565b610413565b6040516100d49190610a49565b6000546001600160a01b031633146101f75760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064015b60405180910390fd5b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b0316331461026b5760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064016101ee565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0380851660009081526001602052604081205490916102b69116873087610592565b6001600160a01b038581166000818152600160205260409081902054905163280cf3ed60e01b81526004810192909252602482018790529091169063280cf3ed906044016020604051808303816000875af1158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d9190610a5c565b50610369857f0000000000000000000000000000000000000000000000000000000000000000866106a7565b6040516345560b5d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638aac16ba9084906103c69087908b908b9033908c9060009081903690600401610a75565b60206040518083038185885af11580156103e4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104099190610a5c565b9695505050505050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104a55760405162461bcd60e51b815260206004820152602f60248201527f4578706563746564206f726967696e616c2063616c6c657220746f206265204360448201526e1bdb9b995e1d0818dbdb9d1c9858dd608a1b60648201526084016101ee565b6001600160a01b038086166000908152600160205260409020546104cc91879116886106a7565b6001600160a01b0385811660008181526001602052604090819020549051639006a50f60e01b815260048101929092526024820189905290911690639006a50f906044016020604051808303816000875af115801561052f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105539190610a5c565b506001600160a01b03808616600090815260016020908152604090912054845161040993919091169161058c9186018101908601610ae7565b886107c4565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105f69190610b04565b6000604051808303816000865af19150503d8060008114610633576040519150601f19603f3d011682016040523d82523d6000602084013e610638565b606091505b5091509150856001600160a01b03163b60001480610654575081155b8061067b575080511580159061067b5750808060200190518101906106799190610b20565b155b1561069f5785828260405163e7e40b5b60e01b81526004016101ee93929190610b42565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516107149190610b04565b6000604051808303816000865af19150503d8060008114610751576040519150601f19603f3d011682016040523d82523d6000602084013e610756565b606091505b5091509150846001600160a01b03163b60001480610772575081155b8061079957508051158015906107995750808060200190518101906107979190610b20565b155b156107bd5784828260405163e7e40b5b60e01b81526004016101ee93929190610b42565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b906064016106d6565b6001600160a01b038116811461080c57600080fd5b50565b6000806040838503121561082257600080fd5b823561082d816107f7565b9150602083013561083d816107f7565b809150509250929050565b60006020828403121561085a57600080fd5b8135610865816107f7565b9392505050565b803563ffffffff8116811461088057600080fd5b919050565b600080600080600060a0868803121561089d57600080fd5b85356108a8816107f7565b945060208601356108b8816107f7565b9350604086013592506108cd6060870161086c565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561090d57600080fd5b86359550602087013594506040870135610926816107f7565b93506060870135610936816107f7565b92506109446080880161086c565b915060a087013567ffffffffffffffff8082111561096157600080fd5b818901915089601f83011261097557600080fd5b813581811115610987576109876108de565b604051601f8201601f19908116603f011681019083821181831017156109af576109af6108de565b816040528281528c60208487010111156109c857600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60005b83811015610a085781810151838201526020016109f0565b83811115610a17576000848401525b50505050565b60008151808452610a358160208601602086016109ed565b601f01601f19169290920160200192915050565b6020815260006108656020830184610a1d565b600060208284031215610a6e57600080fd5b5051919050565b63ffffffff891681526001600160a01b0388811660208301528781166040830152861660608201526080810185905260a0810184905260e060c08201819052810182905260006101008385828501376000838501820152601f909301601f191690910190910198975050505050505050565b600060208284031215610af957600080fd5b8151610865816107f7565b60008251610b168184602087016109ed565b9190910192915050565b600060208284031215610b3257600080fd5b8151801515811461086557600080fd5b6001600160a01b03841681528215156020820152606060408201819052600090610b6e90830184610a1d565b9594505050505056fea26469706673582212203ca94e5f0b1546f7e5e0eb1b9337741f402507aeb28f766e4322620d0390edef64736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "params": {
          "_callData": "Calldata containing the new greeting."
        }
      }
    },
    "title": "AlchemixConnextGateway",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "admin()": {
        "notice": "The admin."
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "Authenticated receiver function."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58387,
        "contract": "submodules/v2-foundry/src/bridging/connext/AlchemixConnextGateway.sol:AlchemixConnextGateway",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 58393,
        "contract": "submodules/v2-foundry/src/bridging/connext/AlchemixConnextGateway.sol:AlchemixConnextGateway",
        "label": "assets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}