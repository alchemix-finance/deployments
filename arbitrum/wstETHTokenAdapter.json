{
  "address": "0x576bc8bce22216c30a6Fb270A7D457955Fca7e48",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "alchemist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "balancerVault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleWstethEth",
              "type": "address"
            }
          ],
          "internalType": "struct InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alchemist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleWstethEth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd7b5f0941097a464f876a49f20382266d92454079cfcd176660dbbaacc41322d",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0x576bc8bce22216c30a6Fb270A7D457955Fca7e48",
    "transactionIndex": 1,
    "gasUsed": "25840941",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x971e8e88df128fbcc3623633bd42d43b42fa4d1861fd84960076d7316783f2c2",
    "transactionHash": "0xd7b5f0941097a464f876a49f20382266d92454079cfcd176660dbbaacc41322d",
    "logs": [],
    "blockNumber": 189710418,
    "cumulativeGasUsed": "25840941",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "alchemist": "0x654e16a0b161b150F5d1C8a5ba6E7A7B7760703A",
      "token": "0x5979D7b546E38E414F7E9822514be443A4800529",
      "underlyingToken": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "balancerVault": "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
      "oracleWstethEth": "0xb523AE262D20A936BC152e6023996e46FDC2A95D"
    }
  ],
  "solcInputHash": "8d33cd443b4cb7f026ecf38cc7c02718",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleWstethEth\",\"type\":\"address\"}],\"internalType\":\"struct InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleWstethEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"IllegalState(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"Unauthorized(string)\":[{\"params\":{\"message\":\"The error message.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState(string)\":[{\"notice\":\"An error used to indicate that a function has encountered an unrecoverable state.\"}],\"Unauthorized(string)\":[{\"notice\":\"An error used to indicate that a message sender tried to execute a privileged function.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/lido/WstETHAdapterArbitrum.sol\":\"WstETHAdapterArbitrum\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373130323639373537373230\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/lido/WstETHAdapterArbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalArgument, IllegalState, Unauthorized} from \\\"../../base/ErrorMessages.sol\\\";\\nimport {MutexLock} from \\\"../../base/MutexLock.sol\\\";\\n\\nimport {SafeERC20} from \\\"../../libraries/SafeERC20.sol\\\";\\n\\nimport {IChainlinkOracle} from \\\"../../interfaces/external/chainlink/IChainlinkOracle.sol\\\";\\nimport {ITokenAdapter} from \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport {IWETH9} from \\\"../../interfaces/external/IWETH9.sol\\\";\\nimport {IStETH} from \\\"../../interfaces/external/lido/IStETH.sol\\\";\\nimport {IWstETH} from \\\"../../interfaces/external/lido/IWstETH.sol\\\";\\nimport \\\"../../interfaces/external/balancer/IBalancerSwap.sol\\\";\\n\\nstruct InitializationParams {\\n    address alchemist;\\n    address token;\\n    address underlyingToken;\\n    address balancerVault;\\n    address oracleWstethEth;\\n}\\n\\ncontract WstETHAdapterArbitrum is ITokenAdapter, MutexLock {\\n    string public override version = \\\"1.1.0\\\";\\n\\n    address public immutable alchemist;\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n    address public immutable balancerVault;\\n    address public immutable oracleWstethEth;\\n\\n    constructor(InitializationParams memory params) {\\n        alchemist       = params.alchemist;\\n        token           = params.token;\\n        underlyingToken = params.underlyingToken;\\n        balancerVault   = params.balancerVault;\\n        oracleWstethEth = params.oracleWstethEth;\\n    }\\n\\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\\n    modifier onlyAlchemist() {\\n        if (msg.sender != alchemist) {\\n            revert Unauthorized(\\\"Not alchemist\\\");\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != underlyingToken && msg.sender != balancerVault) {\\n            revert Unauthorized(\\\"Payments only permitted from WETH or curve pool\\\");\\n        }\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view returns (uint256) {\\n        // Ensure that round is complete, otherwise price is stale.\\n        (\\n            uint80 roundID,\\n            int256 wstethToEth,\\n            ,\\n            uint256 updateTime,\\n            uint80 answeredInRound\\n        ) = IChainlinkOracle(oracleWstethEth).latestRoundData();\\n        require(\\n            answeredInRound >= roundID,\\n            \\\"Chainlink Price Stale\\\"\\n        );\\n\\n        require(wstethToEth > 0, \\\"Chainlink Malfunction\\\");\\n        require(updateTime != 0, \\\"Incomplete round\\\");\\n\\n        if( updateTime < block.timestamp - 86400 seconds ) {\\n            revert(\\\"Stale Price\\\");\\n        }\\n\\n        // Note that an oracle attack could push the price of stETH over 1 ETH, which could lead to alETH minted at a LTV ratio > 50%. \\n        // Additionally, if stETH price is pushed > 2 ETH, then unbacked alETH could be minted. \\n        // We cap the steth oracel price at 1 for this reason.\\n        if (wstethToEth > 2e18) wstethToEth = 2e18;\\n\\n        return uint256(wstethToEth);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the tokens from the message sender.\\n        SafeERC20.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n\\n        // Swap WETH to wstETH\\n        SafeERC20.safeApprove(underlyingToken, balancerVault, amount);\\n\\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\\n\\n        SingleSwap memory swapParams = SingleSwap(\\n            0xfb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159,\\n            SwapKind.GIVEN_IN,\\n            IAsset(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1),\\n            IAsset(0x5979D7b546E38E414F7E9822514be443A4800529),\\n            amount,\\n            '0x'\\n        );\\n\\n        FundManagement memory funds = FundManagement(\\n            address(this),\\n            false,\\n            payable(address(this)),\\n            false\\n        );\\n\\n        IBalancerSwap(balancerVault).swap(swapParams, funds, 0, block.timestamp);\\n\\n        uint256 balanceAfter = IERC20(token).balanceOf(address(this));\\n\\n        SafeERC20.safeTransfer(token, recipient, balanceAfter - balanceBefore);\\n\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    // @inheritdoc ITokenAdapter\\n    function unwrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the tokens from the message sender.\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        SafeERC20.safeApprove(token, balancerVault, amount);\\n\\n        uint256 balanceBefore = IERC20(underlyingToken).balanceOf(address(this));\\n\\n        SingleSwap memory swapParams = SingleSwap(\\n            0xfb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159,\\n            SwapKind.GIVEN_IN,\\n            IAsset(0x5979D7b546E38E414F7E9822514be443A4800529),\\n            IAsset(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1),\\n            amount,\\n            '0x'\\n        );\\n\\n        FundManagement memory funds = FundManagement(\\n            address(this),\\n            false,\\n            payable(address(this)),\\n            false\\n        );\\n\\n        IBalancerSwap(balancerVault).swap(swapParams, funds, 0, block.timestamp);\\n\\n        uint256 balanceAfter = IERC20(underlyingToken).balanceOf(address(this));\\n\\n        SafeERC20.safeTransfer(underlyingToken, recipient, balanceAfter - balanceBefore);\\n\\n        return balanceAfter - balanceBefore;\\n    }\\n}\",\"keccak256\":\"0x2268f3eca21272e087672bef51615102b330f6766e7b05fe5289099c5fa9a6a7\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/base/ErrorMessages.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\n/// @notice An error used to indicate that an argument passed to a function is illegal or\\n///         inappropriate.\\n///\\n/// @param message The error message.\\nerror IllegalArgument(string message);\\n\\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\\n///\\n/// @param message The error message.\\nerror IllegalState(string message);\\n\\n/// @notice An error used to indicate that an operation is unsupported.\\n///\\n/// @param message The error message.\\nerror UnsupportedOperation(string message);\\n\\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\\n///\\n/// @param message The error message.\\nerror Unauthorized(string message);\",\"keccak256\":\"0x302087c36048c360cbd3192e41344d8705d7a50fdb97c8b77d45a5ff503dd264\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/MutexLock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"./ErrorMessages.sol\\\";\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract MutexLock {\\n    enum State {\\n        RESERVED,\\n        UNLOCKED,\\n        LOCKED\\n    }\\n\\n    /// @notice The lock state.\\n    State private _lockState = State.UNLOCKED;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal view returns (bool) {\\n        return _lockState == State.LOCKED;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != State.UNLOCKED) {\\n            revert IllegalState(\\\"Lock already claimed\\\");\\n        }\\n\\n        // Claim the lock.\\n        _lockState = State.LOCKED;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = State.UNLOCKED;\\n    }\\n}\",\"keccak256\":\"0xe3aab21deaf0ce1c795f164630a6e495649779342e0f1f480efac4ff53bb0619\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/IWETH9.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../IERC20Metadata.sol\\\";\\n\\n/// @title IWETH9\\ninterface IWETH9 is IERC20, IERC20Metadata {\\n  /// @notice Deposits `msg.value` ethereum into the contract and mints `msg.value` tokens.\\n  function deposit() external payable;\\n\\n  /// @notice Burns `amount` tokens to retrieve `amount` ethereum from the contract.\\n  ///\\n  /// @dev This version of WETH utilizes the `transfer` function which hard codes the amount of gas\\n  ///      that is allowed to be utilized to be exactly 2300 when receiving ethereum.\\n  ///\\n  /// @param amount The amount of tokens to burn.\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x6df1a375b5b39f03ee997b1509f296c9ff3e66a96afbbe6c5924d5b4ac74db31\"},\"submodules/v2-foundry/src/interfaces/external/balancer/IBalancerSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nenum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\nstruct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n}\\n\\nstruct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n}\\n\\nstruct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n}\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\ninterface IBalancerSwap {\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    )\\n    external returns (uint256);\\n}\\n\",\"keccak256\":\"0x50ee600606a205fdba9a67babaa71270347d8dc669ce9b6b11122a95c30b25ce\",\"license\":\"GPL-3.0-only\"},\"submodules/v2-foundry/src/interfaces/external/chainlink/IChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >= 0.6.6;\\n\\ninterface IChainlinkOracle {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n  function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80);\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\",\"keccak256\":\"0xabb21ca33471affd37434f6644958d9d63a4175572400de16b1678045263fa33\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStETH is IERC20 {\\n    function sharesOf(address account) external view returns (uint256);\\n    function getPooledEthByShares(uint256 sharesAmount) external view returns (uint256);\\n    function submit(address referral) external payable returns (uint256);\\n}\",\"keccak256\":\"0xea9fccea5c36e77b245dee9728b051e2a508daa4a747b04735c9326d3995f8a3\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/external/lido/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWstETH is IERC20 {\\n    function getWstETHByStETH(uint256 amount) external view returns (uint256);\\n    function getStETHByWstETH(uint256 amount) external view returns (uint256);\\n    function wrap(uint256 amount) external returns (uint256);\\n    function unwrap(uint256 amount) external returns (uint256);\\n}\",\"keccak256\":\"0x9821fbdfb3a0f7ed4fe995acc6cddf8a0910fa13ee02e1ddef9b6f324285444f\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalState} from \\\"../base/ErrorMessages.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  SafeERC20\\n/// @author Alchemix Finance\\nlibrary SafeERC20 {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a\\n    ///                success. Otherwise, this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6e6fcaae4927a1ac7673771740ada8cd4526c940267adde36029b23a6d7d17a3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636d39c0e4116100595780636d39c0e4146102385780637647691d1461026c5780638de925f61461028c578063a035b1fe146102c0578063fc0c546a146102d557600080fd5b806313bac82014610163578063158274a5146101965780632495a599146101e257806354fd4d501461021657600080fd5b3661015e57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906100f15750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561015c5760405163973d02cb60e01b815260206004820152602f60248201527f5061796d656e7473206f6e6c79207065726d69747465642066726f6d2057455460448201526e12081bdc8818dd5c9d99481c1bdbdb608a1b60648201526084015b60405180910390fd5b005b600080fd5b34801561016f57600080fd5b5061018361017e366004610f58565b610309565b6040519081526020015b60405180910390f35b3480156101a257600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156101ee57600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022257600080fd5b5061022b6106a3565b60405161018d9190610ff0565b34801561024457600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027857600080fd5b50610183610287366004610f58565b610731565b34801561029857600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cc57600080fd5b50610183610aa8565b3480156102e157600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6000610313610c95565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037c5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610153565b6103a87f0000000000000000000000000000000000000000000000000000000000000000333086610d0a565b6103f37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610e0a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e919061100a565b6040805160c0810182527ffb5e6d0c1dfed2ba000fbc040ab8df3615ac329c0000000000000000000001598152600060208083018290527382af49447d8a07e3bd95bd0d56f35241523fbab183850152735979d7b546e38e414f7e9822514be443a480052960608085019190915260808085018b9052855180870187526002815261060f60f31b8185015260a0860152855190810186523080825292810184905280860192909252810182905292516352bbbe2960e01b815293945090926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916352bbbe29916105809186918691904290600401611039565b6020604051808303816000875af115801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c3919061100a565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f919061100a565b90506106857f0000000000000000000000000000000000000000000000000000000000000000876106808785611117565b610f12565b61068f8482611117565b94505050505061069d610f45565b92915050565b600180546106b09061113c565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc9061113c565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b600061073b610c95565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107a45760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610153565b6107d07f0000000000000000000000000000000000000000000000000000000000000000333086610d0a565b61081b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610e0a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a6919061100a565b6040805160c0810182527ffb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159815260006020808301829052735979d7b546e38e414f7e9822514be443a4800529838501527382af49447d8a07e3bd95bd0d56f35241523fbab160608085019190915260808085018b9052855180870187526002815261060f60f31b8185015260a0860152855190810186523080825292810184905280860192909252810182905292516352bbbe2960e01b815293945090926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916352bbbe29916109a89186918691904290600401611039565b6020604051808303816000875af11580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb919061100a565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a77919061100a565b90506106857f0000000000000000000000000000000000000000000000000000000000000000876106808785611117565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190611195565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff161015610b9b5760405162461bcd60e51b8152602060048201526015602482015274436861696e6c696e6b205072696365205374616c6560581b6044820152606401610153565b60008313610be35760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b6044820152606401610153565b81600003610c265760405162461bcd60e51b815260206004820152601060248201526f125b98dbdb5c1b195d19481c9bdd5b9960821b6044820152606401610153565b610c336201518042611117565b821015610c705760405162461bcd60e51b815260206004820152600b60248201526a5374616c6520507269636560a81b6044820152606401610153565b671bc16d674ec80000831315610c8c57671bc16d674ec8000092505b50909392505050565b600160005460ff166002811115610cae57610cae611023565b14610cf35760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b6044820152606401610153565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610d6e91906111e5565b6000604051808303816000865af19150503d8060008114610dab576040519150601f19603f3d011682016040523d82523d6000602084013e610db0565b606091505b5091509150811580610dde5750805115801590610dde575080806020019051810190610ddc9190611201565b155b15610e025785828260405163e7e40b5b60e01b815260040161015393929190611223565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610e7791906111e5565b6000604051808303816000865af19150503d8060008114610eb4576040519150601f19603f3d011682016040523d82523d6000602084013e610eb9565b606091505b5091509150811580610ee75750805115801590610ee7575080806020019051810190610ee59190611201565b155b15610f0b5784828260405163e7e40b5b60e01b815260040161015393929190611223565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610e39565b600080546001919060ff19168280610d03565b60008060408385031215610f6b57600080fd5b8235915060208301356001600160a01b0381168114610f8957600080fd5b809150509250929050565b60005b83811015610faf578181015183820152602001610f97565b83811115610fbe576000848401525b50505050565b60008151808452610fdc816020860160208601610f94565b601f01601f19169290920160200192915050565b6020815260006110036020830184610fc4565b9392505050565b60006020828403121561101c57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60e08152845160e0820152600060208601516002811061106957634e487b7160e01b600052602160045260246000fd5b61010083015260408601516001600160a01b0316610120830152606086015161109e6101408401826001600160a01b03169052565b50608086015161016083015260a086015160c06101808401526110c56101a0840182610fc4565b915050611105602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b60008282101561113757634e487b7160e01b600052601160045260246000fd5b500390565b600181811c9082168061115057607f821691505b60208210810361117057634e487b7160e01b600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff8116811461119057600080fd5b919050565b600080600080600060a086880312156111ad57600080fd5b6111b686611176565b94506020860151935060408601519250606086015191506111d960808701611176565b90509295509295909350565b600082516111f7818460208701610f94565b9190910192915050565b60006020828403121561121357600080fd5b8151801515811461100357600080fd5b6001600160a01b0384168152821515602082015260606040820181905260009061124f90830184610fc4565b9594505050505056fea2646970667358221220d2a4cd5b6e253df5da73d70489394f7fdc90bde5415457f136c27f29a126e13364736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "IllegalState(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "Unauthorized(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState(string)": [
        {
          "notice": "An error used to indicate that a function has encountered an unrecoverable state."
        }
      ],
      "Unauthorized(string)": [
        {
          "notice": "An error used to indicate that a message sender tried to execute a privileged function."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56272,
        "contract": "submodules/v2-foundry/src/adapters/lido/WstETHAdapterArbitrum.sol:WstETHAdapterArbitrum",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)56266"
      },
      {
        "astId": 54103,
        "contract": "submodules/v2-foundry/src/adapters/lido/WstETHAdapterArbitrum.sol:WstETHAdapterArbitrum",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_enum(State)56266": {
        "encoding": "inplace",
        "label": "enum MutexLock.State",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}