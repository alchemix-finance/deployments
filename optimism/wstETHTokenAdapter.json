{
  "address": "0x1cd4E1190C9C6D05bc4b3d7676fB807Edfb22078",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "alchemist",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "velodromeRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleWstethEth",
              "type": "address"
            }
          ],
          "internalType": "struct InitializationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alchemist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleWstethEth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "velodromeRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6df41b4bf0ca2ceda2a2ce45bb6eb7283e4fe0be1b95bd805d1b42b9b5f9307c",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0x1cd4E1190C9C6D05bc4b3d7676fB807Edfb22078",
    "transactionIndex": 1,
    "gasUsed": "1059767",
    "logsBloom": "0x
    "blockHash": "0x007f2ee3df91241ad4caa226d0c47acc504e884271b5092d7a90238ffb66acdc",
    "transactionHash": "0x6df41b4bf0ca2ceda2a2ce45bb6eb7283e4fe0be1b95bd805d1b42b9b5f9307c",
    "logs": [],
    "blockNumber": 122127351,
    "cumulativeGasUsed": "1103618",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "alchemist": "0xe04Bb5B4de60FA2fBa69a93adE13A8B3B569d5B4",
      "token": "0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb",
      "underlyingToken": "0x4200000000000000000000000000000000000006",
      "velodromeRouter": "0xa062aE8A9c5e11aaA026fc2670B0D65cCc8B2858",
      "oracleWstethEth": "0x524299Ab0987a7c4B3c8022a35669DdcdC715a10"
    }
  ],
  "solcInputHash": "91406b949b5d3e158a1393e713b1bf5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"alchemist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"velodromeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleWstethEth\",\"type\":\"address\"}],\"internalType\":\"struct InitializationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alchemist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleWstethEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"velodromeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}],\"IllegalState(string)\":[{\"params\":{\"message\":\"The error message.\"}}],\"Unauthorized(string)\":[{\"params\":{\"message\":\"The error message.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState(string)\":[{\"notice\":\"An error used to indicate that a function has encountered an unrecoverable state.\"}],\"Unauthorized(string)\":[{\"notice\":\"An error used to indicate that a message sender tried to execute a privileged function.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/lido/WstETHAdapterOptimism.sol\":\"WstETHAdapterOptimism\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373139383533343335383538\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/lido/WstETHAdapterOptimism.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IERC20} from \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalArgument, IllegalState, Unauthorized} from \\\"../../base/ErrorMessages.sol\\\";\\nimport {MutexLock} from \\\"../../base/MutexLock.sol\\\";\\n\\nimport {SafeERC20} from \\\"../../libraries/SafeERC20.sol\\\";\\n\\nimport {IChainlinkOracle} from \\\"../../interfaces/external/chainlink/IChainlinkOracle.sol\\\";\\nimport {ITokenAdapter} from \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport {IWETH9} from \\\"../../interfaces/external/IWETH9.sol\\\";\\nimport {IVelodromeSwapRouterV2} from \\\"../../interfaces/external/velodrome/IVelodromeSwapRouterV2.sol\\\";\\nimport {IStETH} from \\\"../../interfaces/external/lido/IStETH.sol\\\";\\nimport {IWstETH} from \\\"../../interfaces/external/lido/IWstETH.sol\\\";\\n\\nstruct InitializationParams {\\n    address alchemist;\\n    address token;\\n    address underlyingToken;\\n    address velodromeRouter;\\n    address oracleWstethEth;\\n}\\n\\ncontract WstETHAdapterOptimism is ITokenAdapter, MutexLock {\\n    string public override version = \\\"1.1.0\\\";\\n\\n    address public immutable alchemist;\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n    address public immutable velodromeRouter;\\n    address public immutable oracleWstethEth;\\n\\n    constructor(InitializationParams memory params) {\\n        alchemist       = params.alchemist;\\n        token           = params.token;\\n        underlyingToken = params.underlyingToken;\\n        velodromeRouter = params.velodromeRouter;\\n        oracleWstethEth = params.oracleWstethEth;\\n    }\\n\\n    /// @dev Checks that the message sender is the alchemist that the adapter is bound to.\\n    modifier onlyAlchemist() {\\n        if (msg.sender != alchemist) {\\n            revert Unauthorized(\\\"Not alchemist\\\");\\n        }\\n        _;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != underlyingToken && msg.sender != velodromeRouter) {\\n            revert Unauthorized(\\\"Payments only permitted from WETH or curve pool\\\");\\n        }\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view returns (uint256) {\\n        // Ensure that round is complete, otherwise price is stale.\\n        (\\n            uint80 roundID,\\n            int256 wstethToEth,\\n            ,\\n            uint256 updateTime,\\n            uint80 answeredInRound\\n        ) = IChainlinkOracle(oracleWstethEth).latestRoundData();\\n\\n        require(wstethToEth > 0, \\\"Chainlink Malfunction\\\");\\n        require(updateTime != 0, \\\"Incomplete round\\\");\\n\\n        if( updateTime < block.timestamp - 3600 seconds ) {\\n            revert(\\\"Chainlink Malfunction\\\");\\n        }\\n\\n        // Note that an oracle attack could push the price of stETH over 1 ETH, which could lead to alETH minted at a LTV ratio > 50%. \\n        // Additionally, if stETH price is pushed > 2 ETH, then unbacked alETH could be minted. \\n        // We cap the steth oracel price at 1 for this reason.\\n        if (wstethToEth > 2e18) wstethToEth = 2e18;\\n\\n        return uint256(wstethToEth);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the tokens from the message sender.\\n        SafeERC20.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n\\n        // Swap WETH to wstETH\\n        SafeERC20.safeApprove(underlyingToken, velodromeRouter, amount);\\n        IVelodromeSwapRouterV2.route[] memory routes = new IVelodromeSwapRouterV2.route[](1);\\n        routes[0] = IVelodromeSwapRouterV2.route(underlyingToken, token, false, 0xF1046053aa5682b4F9a81b5481394DA16BE5FF5a);\\n        uint256[] memory amounts = IVelodromeSwapRouterV2(velodromeRouter).swapExactTokensForTokens(amount, 0, routes, address(this), block.timestamp);\\n\\n        // Transfer the wstETH to the recipient.\\n        SafeERC20.safeTransfer(token, recipient, amounts[1]);\\n\\n        return amounts[1];\\n    }\\n\\n    // @inheritdoc ITokenAdapter\\n    function unwrap(\\n        uint256 amount,\\n        address recipient\\n    ) external lock onlyAlchemist returns (uint256) {\\n        // Transfer the tokens from the message sender.\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        SafeERC20.safeApprove(token, velodromeRouter, amount);\\n        IVelodromeSwapRouterV2.route[] memory routes = new IVelodromeSwapRouterV2.route[](1);\\n        routes[0] = IVelodromeSwapRouterV2.route(token, underlyingToken, false, 0xF1046053aa5682b4F9a81b5481394DA16BE5FF5a);\\n        uint256[] memory amounts = IVelodromeSwapRouterV2(velodromeRouter).swapExactTokensForTokens(amount, 0, routes, address(this), block.timestamp);\\n\\n        // Transfer the tokens to the recipient.\\n        SafeERC20.safeTransfer(underlyingToken, recipient, amounts[1]);\\n\\n        return amounts[1];\\n    }\\n}\",\"keccak256\":\"0xff8815dd8bad90d68e03ddf02e040856d562f3a2024c213d86cabad2e53aaf64\",\"license\":\"GPL-3.0-or-later\"},\"submodules/v2-foundry/src/base/ErrorMessages.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\n/// @notice An error used to indicate that an argument passed to a function is illegal or\\n///         inappropriate.\\n///\\n/// @param message The error message.\\nerror IllegalArgument(string message);\\n\\n/// @notice An error used to indicate that a function has encountered an unrecoverable state.\\n///\\n/// @param message The error message.\\nerror IllegalState(string message);\\n\\n/// @notice An error used to indicate that an operation is unsupported.\\n///\\n/// @param message The error message.\\nerror UnsupportedOperation(string message);\\n\\n/// @notice An error used to indicate that a message sender tried to execute a privileged function.\\n///\\n/// @param message The error message.\\nerror Unauthorized(string message);\",\"keccak256\":\"0x302087c36048c360cbd3192e41344d8705d7a50fdb97c8b77d45a5ff503dd264\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/base/MutexLock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"./ErrorMessages.sol\\\";\\n\\n/// @title  Mutex\\n/// @author Alchemix Finance\\n///\\n/// @notice Provides a mutual exclusion lock for implementing contracts.\\nabstract contract MutexLock {\\n    enum State {\\n        RESERVED,\\n        UNLOCKED,\\n        LOCKED\\n    }\\n\\n    /// @notice The lock state.\\n    State private _lockState = State.UNLOCKED;\\n\\n    /// @dev A modifier which acquires the mutex.\\n    modifier lock() {\\n        _claimLock();\\n\\n        _;\\n\\n        _freeLock();\\n    }\\n\\n    /// @dev Gets if the mutex is locked.\\n    ///\\n    /// @return if the mutex is locked.\\n    function _isLocked() internal view returns (bool) {\\n        return _lockState == State.LOCKED;\\n    }\\n\\n    /// @dev Claims the lock. If the lock is already claimed, then this will revert.\\n    function _claimLock() internal {\\n        // Check that the lock has not been claimed yet.\\n        if (_lockState != State.UNLOCKED) {\\n            revert IllegalState(\\\"Lock already claimed\\\");\\n        }\\n\\n        // Claim the lock.\\n        _lockState = State.LOCKED;\\n    }\\n\\n    /// @dev Frees the lock.\\n    function _freeLock() internal {\\n        _lockState = State.UNLOCKED;\\n    }\\n}\",\"keccak256\":\"0xe3aab21deaf0ce1c795f164630a6e495649779342e0f1f480efac4ff53bb0619\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/IWETH9.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../IERC20Metadata.sol\\\";\\n\\n/// @title IWETH9\\ninterface IWETH9 is IERC20, IERC20Metadata {\\n  /// @notice Deposits `msg.value` ethereum into the contract and mints `msg.value` tokens.\\n  function deposit() external payable;\\n\\n  /// @notice Burns `amount` tokens to retrieve `amount` ethereum from the contract.\\n  ///\\n  /// @dev This version of WETH utilizes the `transfer` function which hard codes the amount of gas\\n  ///      that is allowed to be utilized to be exactly 2300 when receiving ethereum.\\n  ///\\n  /// @param amount The amount of tokens to burn.\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x6df1a375b5b39f03ee997b1509f296c9ff3e66a96afbbe6c5924d5b4ac74db31\"},\"submodules/v2-foundry/src/interfaces/external/chainlink/IChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >= 0.6.6;\\n\\ninterface IChainlinkOracle {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n  function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80);\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\",\"keccak256\":\"0xabb21ca33471affd37434f6644958d9d63a4175572400de16b1678045263fa33\",\"license\":\"agpl-3.0\"},\"submodules/v2-foundry/src/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStETH is IERC20 {\\n    function sharesOf(address account) external view returns (uint256);\\n    function getPooledEthByShares(uint256 sharesAmount) external view returns (uint256);\\n    function submit(address referral) external payable returns (uint256);\\n}\",\"keccak256\":\"0xea9fccea5c36e77b245dee9728b051e2a508daa4a747b04735c9326d3995f8a3\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/external/lido/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWstETH is IERC20 {\\n    function getWstETHByStETH(uint256 amount) external view returns (uint256);\\n    function getStETHByWstETH(uint256 amount) external view returns (uint256);\\n    function wrap(uint256 amount) external returns (uint256);\\n    function unwrap(uint256 amount) external returns (uint256);\\n}\",\"keccak256\":\"0x9821fbdfb3a0f7ed4fe995acc6cddf8a0910fa13ee02e1ddef9b6f324285444f\",\"license\":\"UNLICENSED\"},\"submodules/v2-foundry/src/interfaces/external/velodrome/IVelodromeSwapRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n\\ninterface IVelodromeSwapRouterV2 {\\n    struct route {\\n        address from;\\n        address to;\\n        bool stable;\\n        address factory;\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x37f828a4cb5dedaa161117c4b3507ce6386567501a27acec4b015699a5c6b548\",\"license\":\"GPL-2.0-or-later\"},\"submodules/v2-foundry/src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport {IERC20} from \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IllegalState} from \\\"../base/ErrorMessages.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  SafeERC20\\n/// @author Alchemix Finance\\nlibrary SafeERC20 {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a\\n    ///                success. Otherwise, this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an\\n    ///      unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6e6fcaae4927a1ac7673771740ada8cd4526c940267adde36029b23a6d7d17a3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6000805460ff191660019081179091556101606040526005610120819052640312e312e360dc1b610140908152620000389291620000a8565b503480156200004657600080fd5b50604051620014633803806200146383398101604081905262000069916200016b565b80516001600160a01b0390811660809081526020830151821660a0526040830151821660c0526060830151821660e0529091015116610100526200024e565b828054620000b69062000212565b90600052602060002090601f016020900481019282620000da576000855562000125565b82601f10620000f557805160ff191683800117855562000125565b8280016001018555821562000125579182015b828111156200012557825182559160200191906001019062000108565b506200013392915062000137565b5090565b5b8082111562000133576000815560010162000138565b80516001600160a01b03811681146200016657600080fd5b919050565b600060a082840312156200017e57600080fd5b60405160a081016001600160401b0381118282101715620001af57634e487b7160e01b600052604160045260246000fd5b604052620001bd836200014e565b8152620001cd602084016200014e565b6020820152620001e0604084016200014e565b6040820152620001f3606084016200014e565b606082015262000206608084016200014e565b60808201529392505050565b600181811c908216806200022757607f821691505b6020821081036200024857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161114d620003166000396000818161024a015261093301526000818160ce015281816101f4015281816103ce015281816104e1015281816107420152610855015260008181609a015281816101a801528181610381015281816103ad01528181610451015281816107ea01526108f60152600081816102e70152818161047601528181610582015281816106f50152818161072101526107c501526000818161029e0152818161031e0152610692015261114d6000f3fe60806040526004361061008a5760003560e01c80636d39c0e4116100595780636d39c0e4146102385780637647691d1461026c5780638de925f61461028c578063a035b1fe146102c0578063fc0c546a146102d557600080fd5b806313bac820146101635780632495a59914610196578063366ac47c146101e257806354fd4d501461021657600080fd5b3661015e57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906100f15750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561015c5760405163973d02cb60e01b815260206004820152602f60248201527f5061796d656e7473206f6e6c79207065726d69747465642066726f6d2057455460448201526e12081bdc8818dd5c9d99481c1bdbdb608a1b60648201526084015b60405180910390fd5b005b600080fd5b34801561016f57600080fd5b5061018361017e366004610d82565b610309565b6040519081526020015b60405180910390f35b3480156101a257600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156101ee57600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022257600080fd5b5061022b6105ef565b60405161018d9190610e1a565b34801561024457600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027857600080fd5b50610183610287366004610d82565b61067d565b34801561029857600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cc57600080fd5b50610183610929565b3480156102e157600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6000610313610abf565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037c5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610153565b6103a87f0000000000000000000000000000000000000000000000000000000000000000333086610b34565b6103f37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610c34565b604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161040a575050604080516080810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152600091810182905273f1046053aa5682b4f9a81b5481394da16be5ff5a60608201528251929350918391906104d2576104d2610e4a565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cac88ea98660008530426040518663ffffffff1660e01b8152600401610534959493929190610e60565b6000604051808303816000875af1158015610553573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057b9190810190610f02565b90506105c27f000000000000000000000000000000000000000000000000000000000000000085836001815181106105b5576105b5610e4a565b6020026020010151610d3c565b806001815181106105d5576105d5610e4a565b6020026020010151925050506105e9610d6f565b92915050565b600180546105fc90610fc0565b80601f016020809104026020016040519081016040528092919081815260200182805461062890610fc0565b80156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b6000610687610abf565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106f05760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610153565b61071c7f0000000000000000000000000000000000000000000000000000000000000000333086610b34565b6107677f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610c34565b604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161077e575050604080516080810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152600091810182905273f1046053aa5682b4f9a81b5481394da16be5ff5a606082015282519293509183919061084657610846610e4a565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cac88ea98660008530426040518663ffffffff1660e01b81526004016108a8959493929190610e60565b6000604051808303816000875af11580156108c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108ef9190810190610f02565b90506105c27f000000000000000000000000000000000000000000000000000000000000000085836001815181106105b5576105b5610e4a565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190611019565b94509450509350935060008313610a045760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b6044820152606401610153565b81600003610a475760405162461bcd60e51b815260206004820152601060248201526f125b98dbdb5c1b195d19481c9bdd5b9960821b6044820152606401610153565b610a53610e1042611069565b821015610a9a5760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b6044820152606401610153565b671bc16d674ec80000831315610ab657671bc16d674ec8000092505b50909392505050565b600160005460ff166002811115610ad857610ad861108e565b14610b1d5760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b6044820152606401610153565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610b9891906110a4565b6000604051808303816000865af19150503d8060008114610bd5576040519150601f19603f3d011682016040523d82523d6000602084013e610bda565b606091505b5091509150811580610c085750805115801590610c08575080806020019051810190610c0691906110c0565b155b15610c2c5785828260405163e7e40b5b60e01b8152600401610153939291906110e2565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ca191906110a4565b6000604051808303816000865af19150503d8060008114610cde576040519150601f19603f3d011682016040523d82523d6000602084013e610ce3565b606091505b5091509150811580610d115750805115801590610d11575080806020019051810190610d0f91906110c0565b155b15610d355784828260405163e7e40b5b60e01b8152600401610153939291906110e2565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610c63565b600080546001919060ff19168280610b2d565b60008060408385031215610d9557600080fd5b8235915060208301356001600160a01b0381168114610db357600080fd5b809150509250929050565b60005b83811015610dd9578181015183820152602001610dc1565b83811115610de8576000848401525b50505050565b60008151808452610e06816020860160208601610dbe565b601f01601f19169290920160200192915050565b602081526000610e2d6020830184610dee565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b81811015610ed657855180516001600160a01b0390811685528682015181168786015285820151151586860152606091820151169084015294840194608090920191600101610e8c565b50506001600160a01b03881660608701529350610ef292505050565b8260808301529695505050505050565b60006020808385031215610f1557600080fd5b825167ffffffffffffffff80821115610f2d57600080fd5b818501915085601f830112610f4157600080fd5b815181811115610f5357610f53610e34565b8060051b604051601f19603f83011681018181108582111715610f7857610f78610e34565b604052918252848201925083810185019188831115610f9657600080fd5b938501935b82851015610fb457845184529385019392850192610f9b565b98975050505050505050565b600181811c90821680610fd457607f821691505b602082108103610ff457634e487b7160e01b600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff8116811461101457600080fd5b919050565b600080600080600060a0868803121561103157600080fd5b61103a86610ffa565b945060208601519350604086015192506060860151915061105d60808701610ffa565b90509295509295909350565b60008282101561108957634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052602160045260246000fd5b600082516110b6818460208701610dbe565b9190910192915050565b6000602082840312156110d257600080fd5b81518015158114610e2d57600080fd5b6001600160a01b0384168152821515602082015260606040820181905260009061110e90830184610dee565b9594505050505056fea264697066735822122020a259e70aac80987e105816fd594d53fb839f5ef7e00bb6a8800052df10cc7464736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636d39c0e4116100595780636d39c0e4146102385780637647691d1461026c5780638de925f61461028c578063a035b1fe146102c0578063fc0c546a146102d557600080fd5b806313bac820146101635780632495a59914610196578063366ac47c146101e257806354fd4d501461021657600080fd5b3661015e57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906100f15750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561015c5760405163973d02cb60e01b815260206004820152602f60248201527f5061796d656e7473206f6e6c79207065726d69747465642066726f6d2057455460448201526e12081bdc8818dd5c9d99481c1bdbdb608a1b60648201526084015b60405180910390fd5b005b600080fd5b34801561016f57600080fd5b5061018361017e366004610d82565b610309565b6040519081526020015b60405180910390f35b3480156101a257600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156101ee57600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022257600080fd5b5061022b6105ef565b60405161018d9190610e1a565b34801561024457600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027857600080fd5b50610183610287366004610d82565b61067d565b34801561029857600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cc57600080fd5b50610183610929565b3480156102e157600080fd5b506101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6000610313610abf565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461037c5760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610153565b6103a87f0000000000000000000000000000000000000000000000000000000000000000333086610b34565b6103f37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610c34565b604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161040a575050604080516080810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152600091810182905273f1046053aa5682b4f9a81b5481394da16be5ff5a60608201528251929350918391906104d2576104d2610e4a565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cac88ea98660008530426040518663ffffffff1660e01b8152600401610534959493929190610e60565b6000604051808303816000875af1158015610553573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057b9190810190610f02565b90506105c27f000000000000000000000000000000000000000000000000000000000000000085836001815181106105b5576105b5610e4a565b6020026020010151610d3c565b806001815181106105d5576105d5610e4a565b6020026020010151925050506105e9610d6f565b92915050565b600180546105fc90610fc0565b80601f016020809104026020016040519081016040528092919081815260200182805461062890610fc0565b80156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b505050505081565b6000610687610abf565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106f05760405163973d02cb60e01b815260206004820152600d60248201526c139bdd08185b18da195b5a5cdd609a1b6044820152606401610153565b61071c7f0000000000000000000000000000000000000000000000000000000000000000333086610b34565b6107677f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610c34565b604080516001808252818301909252600091816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161077e575050604080516080810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152600091810182905273f1046053aa5682b4f9a81b5481394da16be5ff5a606082015282519293509183919061084657610846610e4a565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cac88ea98660008530426040518663ffffffff1660e01b81526004016108a8959493929190610e60565b6000604051808303816000875af11580156108c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108ef9190810190610f02565b90506105c27f000000000000000000000000000000000000000000000000000000000000000085836001815181106105b5576105b5610e4a565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561098f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b39190611019565b94509450509350935060008313610a045760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b6044820152606401610153565b81600003610a475760405162461bcd60e51b815260206004820152601060248201526f125b98dbdb5c1b195d19481c9bdd5b9960821b6044820152606401610153565b610a53610e1042611069565b821015610a9a5760405162461bcd60e51b815260206004820152601560248201527421b430b4b73634b7359026b0b6333ab731ba34b7b760591b6044820152606401610153565b671bc16d674ec80000831315610ab657671bc16d674ec8000092505b50909392505050565b600160005460ff166002811115610ad857610ad861108e565b14610b1d5760405163c50656df60e01b8152602060048201526014602482015273131bd8dac8185b1c9958591e4818db185a5b595960621b6044820152606401610153565b600080546002919060ff19166001835b0217905550565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610b9891906110a4565b6000604051808303816000865af19150503d8060008114610bd5576040519150601f19603f3d011682016040523d82523d6000602084013e610bda565b606091505b5091509150811580610c085750805115801590610c08575080806020019051810190610c0691906110c0565b155b15610c2c5785828260405163e7e40b5b60e01b8152600401610153939291906110e2565b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ca191906110a4565b6000604051808303816000865af19150503d8060008114610cde576040519150601f19603f3d011682016040523d82523d6000602084013e610ce3565b606091505b5091509150811580610d115750805115801590610d11575080806020019051810190610d0f91906110c0565b155b15610d355784828260405163e7e40b5b60e01b8152600401610153939291906110e2565b5050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610c63565b600080546001919060ff19168280610b2d565b60008060408385031215610d9557600080fd5b8235915060208301356001600160a01b0381168114610db357600080fd5b809150509250929050565b60005b83811015610dd9578181015183820152602001610dc1565b83811115610de8576000848401525b50505050565b60008151808452610e06816020860160208601610dbe565b601f01601f19169290920160200192915050565b602081526000610e2d6020830184610dee565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b81811015610ed657855180516001600160a01b0390811685528682015181168786015285820151151586860152606091820151169084015294840194608090920191600101610e8c565b50506001600160a01b03881660608701529350610ef292505050565b8260808301529695505050505050565b60006020808385031215610f1557600080fd5b825167ffffffffffffffff80821115610f2d57600080fd5b818501915085601f830112610f4157600080fd5b815181811115610f5357610f53610e34565b8060051b604051601f19603f83011681018181108582111715610f7857610f78610e34565b604052918252848201925083810185019188831115610f9657600080fd5b938501935b82851015610fb457845184529385019392850192610f9b565b98975050505050505050565b600181811c90821680610fd457607f821691505b602082108103610ff457634e487b7160e01b600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff8116811461101457600080fd5b919050565b600080600080600060a0868803121561103157600080fd5b61103a86610ffa565b945060208601519350604086015192506060860151915061105d60808701610ffa565b90509295509295909350565b60008282101561108957634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052602160045260246000fd5b600082516110b6818460208701610dbe565b9190910192915050565b6000602082840312156110d257600080fd5b81518015158114610e2d57600080fd5b6001600160a01b0384168152821515602082015260606040820181905260009061110e90830184610dee565b9594505050505056fea264697066735822122020a259e70aac80987e105816fd594d53fb839f5ef7e00bb6a8800052df10cc7464736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a                success. Otherwise, this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ],
      "IllegalState(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ],
      "Unauthorized(string)": [
        {
          "params": {
            "message": "The error message."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState(string)": [
        {
          "notice": "An error used to indicate that a function has encountered an unrecoverable state."
        }
      ],
      "Unauthorized(string)": [
        {
          "notice": "An error used to indicate that a message sender tried to execute a privileged function."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51928,
        "contract": "submodules/v2-foundry/src/adapters/lido/WstETHAdapterOptimism.sol:WstETHAdapterOptimism",
        "label": "_lockState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(State)51922"
      },
      {
        "astId": 50680,
        "contract": "submodules/v2-foundry/src/adapters/lido/WstETHAdapterOptimism.sol:WstETHAdapterOptimism",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_enum(State)51922": {
        "encoding": "inplace",
        "label": "enum MutexLock.State",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}