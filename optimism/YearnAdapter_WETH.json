{
  "address": "0x42876347E450549A7E09f178BeDE9BD3d5d861a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3908659c7231fb8c5c5dd72d43886d8a841931e205340a8417c31503519d2ee6",
  "receipt": {
    "to": null,
    "from": "0x886FF7a2d46dcc2276e2fD631957969441130847",
    "contractAddress": "0x42876347E450549A7E09f178BeDE9BD3d5d861a2",
    "transactionIndex": 1,
    "gasUsed": "603639",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x71f84ab8027aae0b0fb2b1b1d92ed5a6435d0b0ed186888fb90517ec8c285abb",
    "transactionHash": "0x3908659c7231fb8c5c5dd72d43886d8a841931e205340a8417c31503519d2ee6",
    "logs": [],
    "blockNumber": 124615139,
    "cumulativeGasUsed": "647478",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE62DDa84e579e6A37296bCFC74c97349D2C59ce3",
    "0x4200000000000000000000000000000000000006"
  ],
  "solcInputHash": "26001569a38e01b00591bc5ce23f7797",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"title\":\"YearnTokenAdapter for Optimism\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState()\":[{\"notice\":\"An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable         for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"submodules/v2-foundry/src/adapters/yearn/YearnTokenAdapterOptimism.sol\":\"YearnTokenAdapterOptimism\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373234383239303039383939\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"submodules/v2-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/adapters/yearn/YearnTokenAdapterOptimism.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\nimport {IllegalState} from \\\"../../base/Errors.sol\\\";\\n\\nimport \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../../interfaces/external/yearn/IYearnStakingToken.sol\\\";\\nimport \\\"../../interfaces/external/yearn/IYearnVaultV2.sol\\\";\\n\\n\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\n\\n/// @title  YearnTokenAdapter for Optimism\\n/// @author Alchemix Finance\\ncontract YearnTokenAdapterOptimism is ITokenAdapter {\\n    uint256 private constant MAXIMUM_SLIPPAGE = 10000;\\n    string public constant override version = \\\"1.0.0\\\";\\n\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n\\n    constructor(address _token, address _underlyingToken) {\\n        token = _token;\\n        underlyingToken = _underlyingToken;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return IYearnVaultV2(address(IYearnStakingToken(token).YEARN_VAULT())).pricePerShare();\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(underlyingToken, token, 0);\\n        TokenUtils.safeApprove(underlyingToken, token, amount);\\n\\n        return IYearnStakingToken(token).deposit(recipient, amount, true);\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        uint256 balanceBefore = TokenUtils.safeBalanceOf(token, address(this));\\n\\n        (, uint256 amountWithdrawn) = IYearnStakingToken(token).withdraw(recipient, amount, MAXIMUM_SLIPPAGE, true);\\n\\n        uint256 balanceAfter = TokenUtils.safeBalanceOf(token, address(this));\\n\\n        // If the Yearn vault did not burn all of the shares then revert. This is critical in mathematical operations\\n        // performed by the system because the system always expects that all of the tokens were unwrapped. In Yearn,\\n        // this sometimes does not happen in cases where strategies cannot withdraw all of the requested tokens (an\\n        // example strategy where this can occur is with Compound and AAVE where funds may not be accessible because\\n        // they were lent out).\\n        if (balanceBefore - balanceAfter != amount) {\\n            revert IllegalState();\\n        }\\n\\n        return amountWithdrawn;\\n    }\\n}\",\"keccak256\":\"0xfb14be0da3047bd57b605e0f2d6b6ff79291dbb83e0d67104e675de885b702b8\"},\"submodules/v2-foundry/src/base/Errors.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\\n///         `msg.origin` is not authorized.\\nerror Unauthorized();\\n\\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\\n///         or entered an illegal condition which is not recoverable from.\\nerror IllegalState();\\n\\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\\n///         to the function.\\nerror IllegalArgument();\",\"keccak256\":\"0x58701ccc9e168980b4177b18f902461ce61d3b8ad3aae29e55a1797f35949687\"},\"submodules/v2-foundry/src/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20 {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x1ef68b8211ae0387d53a98d9ed818fed3991c029f58a4730467baa1cf6b22e58\"},\"submodules/v2-foundry/src/interfaces/IERC20Minimal.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Minimal\\n/// @author Alchemix Finance\\ninterface IERC20Minimal {\\n    /// @notice An event which is emitted when tokens are transferred between two parties.\\n    ///\\n    /// @param owner     The owner of the tokens from which the tokens were transferred.\\n    /// @param recipient The recipient of the tokens to which the tokens were transferred.\\n    /// @param amount    The amount of tokens which were transferred.\\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /// @notice An event which is emitted when an approval is made.\\n    ///\\n    /// @param owner   The address which made the approval.\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `owner`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice Gets the current total supply of tokens.\\n    ///\\n    /// @return The total supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Gets the balance of tokens that an account holds.\\n    ///\\n    /// @param account The account address.\\n    ///\\n    /// @return The balance of the account.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Gets the allowance that an owner has allotted for a spender.\\n    ///\\n    /// @param owner   The owner address.\\n    /// @param spender The spender address.\\n    ///\\n    /// @return The number of tokens that `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    ///\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param recipient The address which will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves `spender` to transfer `amount` tokens on behalf of `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    ///\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `msg.sender`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    ///\\n    /// @return If the approval was successful.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `owner` to `recipient` using an approval that `owner` gave to `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param owner     The address to transfer tokens from.\\n    /// @param recipient The address that will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x51fd0df2a5ad7f05d49b23a5672ea911d69b660d9653af87bb8ec7cdaf7780cb\"},\"submodules/v2-foundry/src/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20 {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    function mint(address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0x072e557e7eff54ba828d410d96e7782931a634813bccc817dc8988979a435aeb\"},\"submodules/v2-foundry/src/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable\\n    ///         for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount    The amount of the underlying token to wrap.\\n    /// @param recipient The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount    The amount of yield-tokens to redeem.\\n    /// @param recipient The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0x98a839c3d1673e410d674c0fd05ff6d64203f9818224d4c3258e21d91b96460a\"},\"submodules/v2-foundry/src/interfaces/external/yearn/IStakingRewards.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IStakingRewards {\\n    // Views\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardsDistribution() external view returns (address);\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    // Mutative\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x73e31055782fb7df4c240eaa3cd5579489ccb02f02fc413dd550337d1c1ef58c\"},\"submodules/v2-foundry/src/interfaces/external/yearn/IYearnStakingToken.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport {IYearnVaultV2} from '../../../interfaces/external/yearn/IYearnVaultV2.sol';\\nimport {IStakingRewards} from '../../../interfaces/external/yearn/IStakingRewards.sol';\\n\\ninterface IYearnStakingToken {\\n    function claimRewards() external returns (uint256);\\n    function deposit(address recipient, uint256 amount, bool fromUnderlying) external returns (uint256);\\n    function withdraw(address recipient, uint256 amount, uint256 maxSlippage, bool fromUnderlying) external returns (uint256, uint256);\\n    function YEARN_VAULT() external view returns (IYearnVaultV2);\\n    function STAKNG_REWARDS() external view returns (IStakingRewards);\\n}\",\"keccak256\":\"0xc38e407c78fcbaaba9a08744d3d300b94ae7c2f7dd39d388fc48056416c593ea\"},\"submodules/v2-foundry/src/interfaces/external/yearn/IYearnVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"../../IERC20Minimal.sol\\\";\\nimport \\\"../../../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title  IYearnVaultV2\\n/// @author Yearn Finance\\ninterface IYearnVaultV2 is IERC20Metadata {\\n  struct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n    bool enforceChangeLimit;\\n    uint256 profitLimitRatio;\\n    uint256 lossLimitRatio;\\n    address customCheck;\\n  }\\n\\n  function apiVersion() external pure returns (string memory);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n  function deposit() external returns (uint256);\\n\\n  function deposit(uint256 amount) external returns (uint256);\\n\\n  function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n  // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n  function withdraw() external returns (uint256);\\n\\n  function withdraw(uint256 maxShares) external returns (uint256);\\n\\n  function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n  function withdraw(\\n    uint256 maxShares,\\n    address recipient,\\n    uint256 maxLoss\\n  ) external returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n  function pricePerShare() external view returns (uint256);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function depositLimit() external view returns (uint256);\\n\\n  function maxAvailableShares() external view returns (uint256);\\n\\n  /// @notice View how much the Vault would increase this Strategy's borrow limit, based on its present performance\\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\\n  function creditAvailable() external view returns (uint256);\\n\\n  /// @notice View how much the Vault would like to pull back from the Strategy, based on its present performance\\n  ///         (since its last report). Can be used to determine expectedReturn in your Strategy.\\n  function debtOutstanding() external view returns (uint256);\\n\\n  /// @notice View how much the Vault expect this Strategy to return at the current block, based on its present\\n  ///         performance (since its last report). Can be used to determine expectedReturn in your Strategy.\\n  function expectedReturn() external view returns (uint256);\\n\\n  /// @notice This is the main contact point where the Strategy interacts with the Vault. It is critical that this call\\n  ///         is handled as intended by the Strategy. Therefore, this function will be called by BaseStrategy to make\\n  ///         sure the integration is correct.\\n  function report(\\n    uint256 _gain,\\n    uint256 _loss,\\n    uint256 _debtPayment\\n  ) external returns (uint256);\\n\\n  /// @notice This function should only be used in the scenario where the Strategy is being retired but no migration of\\n  ///         the positions are possible, or in the extreme scenario that the Strategy needs to be put into\\n  ///         \\\"Emergency Exit\\\" mode in order for it to exit as quickly as possible. The latter scenario could be for any\\n  ///         reason that is considered \\\"critical\\\" that the Strategy exits its position as fast as possible, such as a\\n  ///         sudden change in market conditions leading to losses, or an imminent failure in an external dependency.\\n  function revokeStrategy() external;\\n\\n  /// @notice View the governance address of the Vault to assert privileged functions can only be called by governance.\\n  ///         The Strategy serves the Vault, so it is subject to governance defined by the Vault.\\n  function governance() external view returns (address);\\n\\n  /// @notice View the management address of the Vault to assert privileged functions can only be called by management.\\n  ///         The Strategy serves the Vault, so it is subject to management defined by the Vault.\\n  function management() external view returns (address);\\n\\n  /// @notice View the guardian address of the Vault to assert privileged functions can only be called by guardian. The\\n  ///         Strategy serves the Vault, so it is subject to guardian defined by the Vault.\\n  function guardian() external view returns (address);\\n}\\n\",\"keccak256\":\"0x30b9b3a0c8a45fb19be48b27a1386682b7f32107ac2134128766852f7a267e97\",\"license\":\"MIT\"},\"submodules/v2-foundry/src/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20.balanceOf.selector, account)\\n        );\\n\\n        if (token.code.length == 0 || !success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (token.code.length == 0 || !success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5baa0feb362479be13700eafb1bc8eee1ab10cac51bc9b317b721b5d2dd228c\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610afc380380610afc83398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516109f6610106600039600081816092015281816101460152818161017201526101be01526000818161011d01528181610193015281816101df01528181610231015281816102ac015281816102da0152818161033a015281816103b0015261040d01526109f66000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806313bac820146100675780632495a5991461008d57806354fd4d50146100cc5780637647691d146100fd578063a035b1fe14610110578063fc0c546a14610118575b600080fd5b61007a610075366004610838565b61013f565b6040519081526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610084565b6100f0604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161008491906108c4565b61007a61010b366004610838565b6102a5565b61007a610409565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600061016d7f00000000000000000000000000000000000000000000000000000000000000003330866104f3565b6101b97f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006000610611565b6102047f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610611565b6040516307dba22560e31b81526001600160a01b03838116600483015260248201859052600160448301527f00000000000000000000000000000000000000000000000000000000000000001690633edd1128906064016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e91906108d7565b9392505050565b60006102d37f00000000000000000000000000000000000000000000000000000000000000003330866104f3565b60006102ff7f00000000000000000000000000000000000000000000000000000000000000003061071d565b60405163234b674560e01b81526001600160a01b038581166004830152602482018790526127106044830152600160648301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063234b67459060840160408051808303816000875af1158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a691906108f0565b91505060006103d57f00000000000000000000000000000000000000000000000000000000000000003061071d565b9050856103e28285610914565b1461040057604051634a613c4160e01b815260040160405180910390fd5b50949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166321115d6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190610939565b6001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee91906108d7565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105579190610956565b6000604051808303816000865af19150503d8060008114610594576040519150601f19603f3d011682016040523d82523d6000602084013e610599565b606091505b5091509150856001600160a01b03163b600014806105b5575081155b806105dc57508051158015906105dc5750808060200190518101906105da9190610972565b155b156106095785828260405163e7e40b5b60e01b815260040161060093929190610994565b60405180910390fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161066d9190610956565b6000604051808303816000865af19150503d80600081146106aa576040519150601f19603f3d011682016040523d82523d6000602084013e6106af565b606091505b5091509150846001600160a01b03163b600014806106cb575081155b806106f257508051158015906106f25750808060200190518101906106f09190610972565b155b156107165784828260405163e7e40b5b60e01b815260040161060093929190610994565b5050505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916107779190610956565b600060405180830381855afa9150503d80600081146107b2576040519150601f19603f3d011682016040523d82523d6000602084013e6107b7565b606091505b5091509150846001600160a01b03163b600014806107d3575081155b806107df575060208151105b156108035784828260405163e7e40b5b60e01b815260040161060093929190610994565b8080602001905181019061081791906108d7565b95945050505050565b6001600160a01b038116811461083557600080fd5b50565b6000806040838503121561084b57600080fd5b82359150602083013561085d81610820565b809150509250929050565b60005b8381101561088357818101518382015260200161086b565b83811115610892576000848401525b50505050565b600081518084526108b0816020860160208601610868565b601f01601f19169290920160200192915050565b60208152600061029e6020830184610898565b6000602082840312156108e957600080fd5b5051919050565b6000806040838503121561090357600080fd5b505080516020909101519092909150565b60008282101561093457634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561094b57600080fd5b815161029e81610820565b60008251610968818460208701610868565b9190910192915050565b60006020828403121561098457600080fd5b8151801515811461029e57600080fd5b6001600160a01b038416815282151560208201526060604082018190526000906108179083018461089856fea26469706673582212203692be96b03b9d83b83a467a53aadac784c6154762d8e2fd70b86b224b71bc6f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806313bac820146100675780632495a5991461008d57806354fd4d50146100cc5780637647691d146100fd578063a035b1fe14610110578063fc0c546a14610118575b600080fd5b61007a610075366004610838565b61013f565b6040519081526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610084565b6100f0604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161008491906108c4565b61007a61010b366004610838565b6102a5565b61007a610409565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600061016d7f00000000000000000000000000000000000000000000000000000000000000003330866104f3565b6101b97f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006000610611565b6102047f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610611565b6040516307dba22560e31b81526001600160a01b03838116600483015260248201859052600160448301527f00000000000000000000000000000000000000000000000000000000000000001690633edd1128906064016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e91906108d7565b9392505050565b60006102d37f00000000000000000000000000000000000000000000000000000000000000003330866104f3565b60006102ff7f00000000000000000000000000000000000000000000000000000000000000003061071d565b60405163234b674560e01b81526001600160a01b038581166004830152602482018790526127106044830152600160648301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063234b67459060840160408051808303816000875af1158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a691906108f0565b91505060006103d57f00000000000000000000000000000000000000000000000000000000000000003061071d565b9050856103e28285610914565b1461040057604051634a613c4160e01b815260040160405180910390fd5b50949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166321115d6d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048d9190610939565b6001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee91906108d7565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105579190610956565b6000604051808303816000865af19150503d8060008114610594576040519150601f19603f3d011682016040523d82523d6000602084013e610599565b606091505b5091509150856001600160a01b03163b600014806105b5575081155b806105dc57508051158015906105dc5750808060200190518101906105da9190610972565b155b156106095785828260405163e7e40b5b60e01b815260040161060093929190610994565b60405180910390fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161066d9190610956565b6000604051808303816000865af19150503d80600081146106aa576040519150601f19603f3d011682016040523d82523d6000602084013e6106af565b606091505b5091509150846001600160a01b03163b600014806106cb575081155b806106f257508051158015906106f25750808060200190518101906106f09190610972565b155b156107165784828260405163e7e40b5b60e01b815260040161060093929190610994565b5050505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916107779190610956565b600060405180830381855afa9150503d80600081146107b2576040519150601f19603f3d011682016040523d82523d6000602084013e6107b7565b606091505b5091509150846001600160a01b03163b600014806107d3575081155b806107df575060208151105b156108035784828260405163e7e40b5b60e01b815260040161060093929190610994565b8080602001905181019061081791906108d7565b95945050505050565b6001600160a01b038116811461083557600080fd5b50565b6000806040838503121561084b57600080fd5b82359150602083013561085d81610820565b809150509250929050565b60005b8381101561088357818101518382015260200161086b565b83811115610892576000848401525b50505050565b600081518084526108b0816020860160208601610868565b601f01601f19169290920160200192915050565b60208152600061029e6020830184610898565b6000602082840312156108e957600080fd5b5051919050565b6000806040838503121561090357600080fd5b505080516020909101519092909150565b60008282101561093457634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561094b57600080fd5b815161029e81610820565b60008251610968818460208701610868565b9190910192915050565b60006020828403121561098457600080fd5b8151801515811461029e57600080fd5b6001600160a01b038416815282151560208201526060604082018190526000906108179083018461089856fea26469706673582212203692be96b03b9d83b83a467a53aadac784c6154762d8e2fd70b86b224b71bc6f64736f6c634300080d0033",
  "devdoc": {
    "author": "Alchemix Finance",
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "title": "YearnTokenAdapter for Optimism",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState()": [
        {
          "notice": "An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable         for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}